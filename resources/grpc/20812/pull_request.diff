diff --git a/src/python/grpcio/grpc/_channel.py b/src/python/grpcio/grpc/_channel.py
index 27d82947a86..232688c1ca1 100644
--- a/src/python/grpcio/grpc/_channel.py
+++ b/src/python/grpcio/grpc/_channel.py
@@ -62,12 +62,12 @@
 _CHANNEL_SUBSCRIPTION_CALLBACK_ERROR_LOG_MESSAGE = (
     'Exception calling channel subscription callback!')
 
-_OK_RENDEZVOUS_REPR_FORMAT = ('<_Rendezvous of RPC that terminated with:\n'
+_OK_RENDEZVOUS_REPR_FORMAT = ('<{} of RPC that terminated with:\n'
                               '\tstatus = {}\n'
                               '\tdetails = "{}"\n'
                               '>')
 
-_NON_OK_RENDEZVOUS_REPR_FORMAT = ('<_Rendezvous of RPC that terminated with:\n'
+_NON_OK_RENDEZVOUS_REPR_FORMAT = ('<{} of RPC that terminated with:\n'
                                   '\tstatus = {}\n'
                                   '\tdetails = "{}"\n'
                                   '\tdebug_error_string = "{}"\n'
@@ -249,17 +249,66 @@ def _done():
     consumption_thread.start()
 
 
-class _SingleThreadedRendezvous(grpc.RpcError, grpc.Call):  # pylint: disable=too-many-ancestors
-    """An RPC iterator operating entirely on a single thread.
+def _rpc_state_string(class_name, rpc_state):
+    """Calculates error string for RPC."""
+    with rpc_state.condition:
+        if rpc_state.code is None:
+            return '<{} object>'.format(class_name)
+        elif rpc_state.code is grpc.StatusCode.OK:
+            return _OK_RENDEZVOUS_REPR_FORMAT.format(class_name, rpc_state.code,
+                                                     rpc_state.details)
+        else:
+            return _NON_OK_RENDEZVOUS_REPR_FORMAT.format(
+                class_name, rpc_state.code, rpc_state.details,
+                rpc_state.debug_error_string)
 
-    The __next__ method of _SingleThreadedRendezvous does not depend on the
-    existence of any other thread, including the "channel spin thread".
-    However, this means that its interface is entirely synchronous. So this
-    class cannot fulfill the grpc.Future interface.
+
+class _RpcError(grpc.RpcError, grpc.Call):
+    """An RPC error not tied to the execution of a particular RPC.
+
+    Attributes:
+      _state: An instance of _RPCState.
+    """
+
+    def __init__(self, state):
+        self._state = state
+
+    def initial_metadata(self):
+        with self._state.condition:
+            return self._state.initial_metadata
+
+    def trailing_metadata(self):
+        with self._state.condition:
+            return self._state.trailing_metadata
+
+    def code(self):
+        with self._state.condition:
+            return self._state.code
+
+    def details(self):
+        with self._state.condition:
+            return _common.decode(self._state.details)
+
+    def debug_error_string(self):
+        with self._state.condition:
+            return _common.decode(self._state.debug_error_string)
+
+    def _repr(self):
+        return _rpc_state_string(self.__class__.__name__, self._state)
+
+    def __repr__(self):
+        return self._repr()
+
+    def __str__(self):
+        return self._repr()
+
+
+class _Rendezvous(grpc.RpcError, grpc.RpcContext):
+    """An RPC iterator.
 
     Attributes:
       _state: An instance of _RPCState.
-      _call: An instance of SegregatedCall or (for subclasses) IntegratedCall.
+      _call: An instance of SegregatedCall or IntegratedCall.
         In either case, the _call object is expected to have operate, cancel,
         and next_event methods.
       _response_deserializer: A callable taking bytes and return a Python
@@ -269,7 +318,7 @@ class cannot fulfill the grpc.Future interface.
     """
 
     def __init__(self, state, call, response_deserializer, deadline):
-        super(_SingleThreadedRendezvous, self).__init__()
+        super(_Rendezvous, self).__init__()
         self._state = state
         self._call = call
         self._response_deserializer = response_deserializer
@@ -312,72 +361,99 @@ def add_callback(self, callback):
                 self._state.callbacks.append(callback)
                 return True
 
-    def initial_metadata(self):
-        """See grpc.Call.initial_metadata"""
+    def __iter__(self):
+        return self
+
+    def next(self):
+        return self._next()
+
+    def __next__(self):
+        return self._next()
+
+    def _next(self):
+        raise NotImplementedError()
+
+    def debug_error_string(self):
+        raise NotImplementedError()
+
+    def _repr(self):
+        return _rpc_state_string(self.__class__.__name__, self._state)
+
+    def __repr__(self):
+        return self._repr()
+
+    def __str__(self):
+        return self._repr()
+
+    def __del__(self):
         with self._state.condition:
+            if self._state.code is None:
+                self._state.code = grpc.StatusCode.CANCELLED
+                self._state.details = 'Cancelled upon garbage collection!'
+                self._state.cancelled = True
+                self._call.cancel(
+                    _common.STATUS_CODE_TO_CYGRPC_STATUS_CODE[self._state.code],
+                    self._state.details)
+                self._state.condition.notify_all()
 
-            def _done():
-                return self._state.initial_metadata is not None
 
-            _common.wait(self._state.condition.wait, _done)
+class _SingleThreadedRendezvous(_Rendezvous, grpc.Call):  # pylint: disable=too-many-ancestors
+    """An RPC iterator operating entirely on a single thread.
+
+    The __next__ method of _SingleThreadedRendezvous does not depend on the
+    existence of any other thread, including the "channel spin thread".
+    However, this means that its interface is entirely synchronous. So this
+    class cannot fulfill the grpc.Future interface.
+    """
+
+    def initial_metadata(self):
+        """See grpc.Call.initial_metadata"""
+        with self._state.condition:
+            # NOTE(gnossen): Based on our initial call batch, we are guaranteed
+            # to receive initial metadata before any messages.
+            while self._state.initial_metadata is None:
+                self._consume_next_event()
             return self._state.initial_metadata
 
     def trailing_metadata(self):
         """See grpc.Call.trailing_metadata"""
         with self._state.condition:
-
-            def _done():
-                return self._state.trailing_metadata is not None
-
-            _common.wait(self._state.condition.wait, _done)
+            if self._state.trailing_metadata is None:
+                raise grpc.experimental.UsageError(
+                    "Cannot get trailing metadata until RPC is completed.")
             return self._state.trailing_metadata
 
-    # TODO(https://github.com/grpc/grpc/issues/20763): Drive RPC progress using
-    # the calling thread.
     def code(self):
         """See grpc.Call.code"""
         with self._state.condition:
-
-            def _done():
-                return self._state.code is not None
-
-            _common.wait(self._state.condition.wait, _done)
+            if self._state.code is None:
+                raise grpc.experimental.UsageError(
+                    "Cannot get code until RPC is completed.")
             return self._state.code
 
     def details(self):
         """See grpc.Call.details"""
         with self._state.condition:
-
-            def _done():
-                return self._state.details is not None
-
-            _common.wait(self._state.condition.wait, _done)
+            if self._state.details is None:
+                raise grpc.experimental.UsageError(
+                    "Cannot get details until RPC is completed.")
             return _common.decode(self._state.details)
 
-    def _next(self):
+    def _consume_next_event(self):
+        event = self._call.next_event()
         with self._state.condition:
-            if self._state.code is None:
-                operating = self._call.operate(
-                    (cygrpc.ReceiveMessageOperation(_EMPTY_FLAGS),), None)
-                if operating:
-                    self._state.due.add(cygrpc.OperationType.receive_message)
-            elif self._state.code is grpc.StatusCode.OK:
-                raise StopIteration()
-            else:
-                raise self
+            callbacks = _handle_event(event, self._state,
+                                      self._response_deserializer)
+            for callback in callbacks:
+                # NOTE(gnossen): We intentionally allow exceptions to bubble up
+                # to the user when running on a single thread.
+                callback()
+        return event
+
+    def _next_response(self):
         while True:
-            event = self._call.next_event()
+            self._consume_next_event()
             with self._state.condition:
-                callbacks = _handle_event(event, self._state,
-                                          self._response_deserializer)
-                for callback in callbacks:
-                    try:
-                        callback()
-                    except Exception as e:  # pylint: disable=broad-except
-                        # NOTE(rbellevi): We suppress but log errors here so as not to
-                        # kill the channel spin thread.
-                        logging.error('Exception in callback %s: %s',
-                                      repr(callback.func), repr(e))
                 if self._state.response is not None:
                     response = self._state.response
                     self._state.response = None
@@ -388,65 +464,86 @@ def _next(self):
                     elif self._state.code is not None:
                         raise self
 
-    def __next__(self):
-        return self._next()
+    def _next(self):
+        with self._state.condition:
+            if self._state.code is None:
+                operating = self._call.operate(
+                    (cygrpc.ReceiveMessageOperation(_EMPTY_FLAGS),), None)
+                if operating:
+                    self._state.due.add(cygrpc.OperationType.receive_message)
+            elif self._state.code is grpc.StatusCode.OK:
+                raise StopIteration()
+            else:
+                raise self
+        return self._next_response()
 
-    def next(self):
-        return self._next()
+    def debug_error_string(self):
+        with self._state.condition:
+            if self._state.debug_error_string is None:
+                raise grpc.experimental.UsageError(
+                    "Cannot get debug error string until RPC is completed.")
+            return _common.decode(self._state.debug_error_string)
 
-    def __iter__(self):
-        return self
 
-    def debug_error_string(self):
+class _MultiThreadedRendezvous(_Rendezvous, grpc.Call, grpc.Future):  # pylint: disable=too-many-ancestors
+    """An RPC iterator that depends on a channel spin thread.
+
+    This iterator relies upon a per-channel thread running in the background,
+    dequeueing events from the completion queue, and notifying threads waiting
+    on the threading.Condition object in the _RPCState object.
+
+    This extra thread allows _MultiThreadedRendezvous to fulfill the grpc.Future interface
+    and to mediate a bidirection streaming RPC.
+    """
+
+    def initial_metadata(self):
+        """See grpc.Call.initial_metadata"""
         with self._state.condition:
 
             def _done():
-                return self._state.debug_error_string is not None
+                return self._state.initial_metadata is not None
 
             _common.wait(self._state.condition.wait, _done)
-            return _common.decode(self._state.debug_error_string)
+            return self._state.initial_metadata
 
-    def _repr(self):
+    def trailing_metadata(self):
+        """See grpc.Call.trailing_metadata"""
         with self._state.condition:
-            if self._state.code is None:
-                return '<{} object of in-flight RPC>'.format(
-                    self.__class__.__name__)
-            elif self._state.code is grpc.StatusCode.OK:
-                return _OK_RENDEZVOUS_REPR_FORMAT.format(
-                    self._state.code, self._state.details)
-            else:
-                return _NON_OK_RENDEZVOUS_REPR_FORMAT.format(
-                    self._state.code, self._state.details,
-                    self._state.debug_error_string)
 
-    def __repr__(self):
-        return self._repr()
+            def _done():
+                return self._state.trailing_metadata is not None
 
-    def __str__(self):
-        return self._repr()
+            _common.wait(self._state.condition.wait, _done)
+            return self._state.trailing_metadata
 
-    def __del__(self):
+    def code(self):
+        """See grpc.Call.code"""
         with self._state.condition:
-            if self._state.code is None:
-                self._state.code = grpc.StatusCode.CANCELLED
-                self._state.details = 'Cancelled upon garbage collection!'
-                self._state.cancelled = True
-                self._call.cancel(
-                    _common.STATUS_CODE_TO_CYGRPC_STATUS_CODE[self._state.code],
-                    self._state.details)
-                self._state.condition.notify_all()
 
+            def _done():
+                return self._state.code is not None
 
-class _Rendezvous(_SingleThreadedRendezvous, grpc.Future):  # pylint: disable=too-many-ancestors
-    """An RPC iterator that depends on a channel spin thread.
+            _common.wait(self._state.condition.wait, _done)
+            return self._state.code
 
-    This iterator relies upon a per-channel thread running in the background,
-    dequeueing events from the completion queue, and notifying threads waiting
-    on the threading.Condition object in the _RPCState object.
+    def details(self):
+        """See grpc.Call.details"""
+        with self._state.condition:
 
-    This extra thread allows _Rendezvous to fulfill the grpc.Future interface
-    and to mediate a bidirection streaming RPC.
-    """
+            def _done():
+                return self._state.details is not None
+
+            _common.wait(self._state.condition.wait, _done)
+            return _common.decode(self._state.details)
+
+    def debug_error_string(self):
+        with self._state.condition:
+
+            def _done():
+                return self._state.debug_error_string is not None
+
+            _common.wait(self._state.condition.wait, _done)
+            return _common.decode(self._state.debug_error_string)
 
     def cancelled(self):
         with self._state.condition:
@@ -560,14 +657,6 @@ def _response_ready():
                 elif self._state.code is not None:
                     raise self
 
-    def add_callback(self, callback):
-        with self._state.condition:
-            if self._state.callbacks is None:
-                return False
-            else:
-                self._state.callbacks.append(callback)
-                return True
-
 
 def _start_unary_request(request, timeout, request_serializer):
     deadline = _deadline(timeout)
@@ -575,8 +664,8 @@ def _start_unary_request(request, timeout, request_serializer):
     if serialized_request is None:
         state = _RPCState((), (), (), grpc.StatusCode.INTERNAL,
                           'Exception serializing request!')
-        rendezvous = _Rendezvous(state, None, None, deadline)
-        return deadline, None, rendezvous
+        error = _RpcError(state)
+        return deadline, None, error
     else:
         return deadline, serialized_request, None
 
@@ -584,12 +673,12 @@ def _start_unary_request(request, timeout, request_serializer):
 def _end_unary_response_blocking(state, call, with_call, deadline):
     if state.code is grpc.StatusCode.OK:
         if with_call:
-            rendezvous = _Rendezvous(state, call, None, deadline)
+            rendezvous = _MultiThreadedRendezvous(state, call, None, deadline)
             return state.response, rendezvous
         else:
             return state.response
     else:
-        raise _Rendezvous(state, None, None, deadline)
+        raise _RpcError(state)
 
 
 def _stream_unary_invocation_operationses(metadata, initial_metadata_flags):
@@ -718,8 +807,8 @@ def future(self,
                 self._method, None, deadline, metadata, None
                 if credentials is None else credentials._credentials,
                 (operations,), event_handler, self._context)
-            return _Rendezvous(state, call, self._response_deserializer,
-                               deadline)
+            return _MultiThreadedRendezvous(
+                state, call, self._response_deserializer, deadline)
 
 
 class _SingleThreadedUnaryStreamMultiCallable(grpc.UnaryStreamMultiCallable):
@@ -747,7 +836,7 @@ def __call__(  # pylint: disable=too-many-locals
         if serialized_request is None:
             state = _RPCState((), (), (), grpc.StatusCode.INTERNAL,
                               'Exception serializing request!')
-            raise _Rendezvous(state, None, None, deadline)
+            raise _RpcError(state)
 
         state = _RPCState(_UNARY_STREAM_INITIAL_DUE, None, None, None, None)
         call_credentials = None if credentials is None else credentials._credentials
@@ -755,13 +844,15 @@ def __call__(  # pylint: disable=too-many-locals
             wait_for_ready)
         augmented_metadata = _compression.augment_metadata(
             metadata, compression)
-        operations_and_tags = ((
+        operations = (
             (cygrpc.SendInitialMetadataOperation(augmented_metadata,
                                                  initial_metadata_flags),
              cygrpc.SendMessageOperation(serialized_request, _EMPTY_FLAGS),
-             cygrpc.SendCloseFromClientOperation(_EMPTY_FLAGS),
-             cygrpc.ReceiveStatusOnClientOperation(_EMPTY_FLAGS)), None),) + (((
-                 cygrpc.ReceiveInitialMetadataOperation(_EMPTY_FLAGS),), None),)
+             cygrpc.SendCloseFromClientOperation(_EMPTY_FLAGS)),
+            (cygrpc.ReceiveStatusOnClientOperation(_EMPTY_FLAGS),),
+            (cygrpc.ReceiveInitialMetadataOperation(_EMPTY_FLAGS),),
+        )
+        operations_and_tags = tuple((ops, None) for ops in operations)
         call = self._channel.segregated_call(
             cygrpc.PropagationConstants.GRPC_PROPAGATE_DEFAULTS, self._method,
             None, _determine_deadline(deadline), metadata, call_credentials,
@@ -818,8 +909,8 @@ def __call__(  # pylint: disable=too-many-locals
                 credentials._credentials, operationses,
                 _event_handler(state,
                                self._response_deserializer), self._context)
-            return _Rendezvous(state, call, self._response_deserializer,
-                               deadline)
+            return _MultiThreadedRendezvous(
+                state, call, self._response_deserializer, deadline)
 
 
 class _StreamUnaryMultiCallable(grpc.StreamUnaryMultiCallable):
@@ -903,7 +994,8 @@ def future(self,
                 metadata, initial_metadata_flags), event_handler, self._context)
         _consume_request_iterator(request_iterator, state, call,
                                   self._request_serializer, event_handler)
-        return _Rendezvous(state, call, self._response_deserializer, deadline)
+        return _MultiThreadedRendezvous(state, call,
+                                        self._response_deserializer, deadline)
 
 
 class _StreamStreamMultiCallable(grpc.StreamStreamMultiCallable):
@@ -947,7 +1039,8 @@ def __call__(self,
             event_handler, self._context)
         _consume_request_iterator(request_iterator, state, call,
                                   self._request_serializer, event_handler)
-        return _Rendezvous(state, call, self._response_deserializer, deadline)
+        return _MultiThreadedRendezvous(state, call,
+                                        self._response_deserializer, deadline)
 
 
 class _InitialMetadataFlags(int):
@@ -1237,7 +1330,7 @@ def unary_stream(self,
                      response_deserializer=None):
         # NOTE(rbellevi): Benchmarks have shown that running a unary-stream RPC
         # on a single Python thread results in an appreciable speed-up. However,
-        # due to slight differences in capability, the multi-threaded variant'
+        # due to slight differences in capability, the multi-threaded variant
         # remains the default.
         if self._single_threaded_unary_stream:
             return _SingleThreadedUnaryStreamMultiCallable(
diff --git a/src/python/grpcio/grpc/experimental/__init__.py b/src/python/grpcio/grpc/experimental/__init__.py
index 06adeb0d2a2..a2c98c6f8be 100644
--- a/src/python/grpcio/grpc/experimental/__init__.py
+++ b/src/python/grpcio/grpc/experimental/__init__.py
@@ -26,3 +26,7 @@ class ChannelOptions(object):
        SingleThreadedUnaryStream: Perform unary-stream RPCs on a single thread.
     """
     SingleThreadedUnaryStream = "SingleThreadedUnaryStream"
+
+
+class UsageError(Exception):
+    """Raised by the gRPC library to indicate usage not allowed by the API."""
diff --git a/src/python/grpcio_tests/tests/unit/_metadata_code_details_test.py b/src/python/grpcio_tests/tests/unit/_metadata_code_details_test.py
index 8831862f35a..a63664ac5d0 100644
--- a/src/python/grpcio_tests/tests/unit/_metadata_code_details_test.py
+++ b/src/python/grpcio_tests/tests/unit/_metadata_code_details_test.py
@@ -255,8 +255,8 @@ def testSuccessfulUnaryStream(self):
 
         response_iterator_call = self._unary_stream(
             _SERIALIZED_REQUEST, metadata=_CLIENT_METADATA)
-        list(response_iterator_call)
         received_initial_metadata = response_iterator_call.initial_metadata()
+        list(response_iterator_call)
 
         self.assertTrue(
             test_common.metadata_transmitted(
@@ -349,14 +349,11 @@ def testAbortedUnaryStream(self):
 
             response_iterator_call = self._unary_stream(
                 _SERIALIZED_REQUEST, metadata=_CLIENT_METADATA)
-            # NOTE: In the single-threaded case, we cannot grab the initial_metadata
-            # without running the RPC first (or concurrently, in another
-            # thread).
+            received_initial_metadata = \
+                response_iterator_call.initial_metadata()
             with self.assertRaises(grpc.RpcError):
                 self.assertEqual(len(list(response_iterator_call)), 0)
 
-            received_initial_metadata = \
-                response_iterator_call.initial_metadata()
             self.assertTrue(
                 test_common.metadata_transmitted(
                     _CLIENT_METADATA,
@@ -457,9 +454,9 @@ def testCustomCodeUnaryStream(self):
 
         response_iterator_call = self._unary_stream(
             _SERIALIZED_REQUEST, metadata=_CLIENT_METADATA)
+        received_initial_metadata = response_iterator_call.initial_metadata()
         with self.assertRaises(grpc.RpcError):
             list(response_iterator_call)
-        received_initial_metadata = response_iterator_call.initial_metadata()
 
         self.assertTrue(
             test_common.metadata_transmitted(
@@ -550,9 +547,9 @@ def testCustomCodeExceptionUnaryStream(self):
 
         response_iterator_call = self._unary_stream(
             _SERIALIZED_REQUEST, metadata=_CLIENT_METADATA)
+        received_initial_metadata = response_iterator_call.initial_metadata()
         with self.assertRaises(grpc.RpcError):
             list(response_iterator_call)
-        received_initial_metadata = response_iterator_call.initial_metadata()
 
         self.assertTrue(
             test_common.metadata_transmitted(
diff --git a/src/python/grpcio_tests/tests/unit/_metadata_test.py b/src/python/grpcio_tests/tests/unit/_metadata_test.py
index 954ffe9154d..892df3df08f 100644
--- a/src/python/grpcio_tests/tests/unit/_metadata_test.py
+++ b/src/python/grpcio_tests/tests/unit/_metadata_test.py
@@ -202,9 +202,6 @@ def testUnaryUnary(self):
     def testUnaryStream(self):
         multi_callable = self._channel.unary_stream(_UNARY_STREAM)
         call = multi_callable(_REQUEST, metadata=_INVOCATION_METADATA)
-        # TODO(https://github.com/grpc/grpc/issues/20762): Make the call to
-        # `next()` unnecessary.
-        next(call)
         self.assertTrue(
             test_common.metadata_transmitted(_EXPECTED_INITIAL_METADATA,
                                              call.initial_metadata()))
