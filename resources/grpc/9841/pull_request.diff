diff --git a/include/grpc/impl/codegen/grpc_types.h b/include/grpc/impl/codegen/grpc_types.h
index da936bf0281..c47f28f783b 100644
--- a/include/grpc/impl/codegen/grpc_types.h
+++ b/include/grpc/impl/codegen/grpc_types.h
@@ -272,7 +272,9 @@ typedef enum grpc_call_error {
   /** this batch of operations leads to more operations than allowed */
   GRPC_CALL_ERROR_BATCH_TOO_BIG,
   /** payload type requested is not the type registered */
-  GRPC_CALL_ERROR_PAYLOAD_TYPE_MISMATCH
+  GRPC_CALL_ERROR_PAYLOAD_TYPE_MISMATCH,
+  /** reached limit on the number of concurrent batches possible */
+  GRPC_CALL_ERROR_TOO_MANY_CONCURRENT_BATCHES
 } grpc_call_error;
 
 /* Default send/receive message size limits in bytes. -1 for unlimited. */
diff --git a/src/core/lib/surface/call.c b/src/core/lib/surface/call.c
index 48a1e586e17..66a832ff7f8 100644
--- a/src/core/lib/surface/call.c
+++ b/src/core/lib/surface/call.c
@@ -1335,6 +1335,10 @@ static grpc_call_error call_start_batch(grpc_exec_ctx *exec_ctx,
   /* TODO(ctiller): this feels like it could be made lock-free */
   gpr_mu_lock(&call->mu);
   bctl = allocate_batch_control(call);
+  if (bctl == NULL) {
+    error = GRPC_CALL_ERROR_TOO_MANY_CONCURRENT_BATCHES;
+    goto done_without_call;
+  }
   memset(bctl, 0, sizeof(*bctl));
   bctl->call = call;
   bctl->notify_tag = notify_tag;
@@ -1667,6 +1671,7 @@ static grpc_call_error call_start_batch(grpc_exec_ctx *exec_ctx,
   if (bctl->recv_final_op) {
     call->requested_final_op = 0;
   }
+done_without_call:
   gpr_mu_unlock(&call->mu);
   goto done;
 }
@@ -1753,6 +1758,8 @@ const char *grpc_call_error_to_string(grpc_call_error error) {
       return "GRPC_CALL_ERROR_PAYLOAD_TYPE_MISMATCH";
     case GRPC_CALL_ERROR_TOO_MANY_OPERATIONS:
       return "GRPC_CALL_ERROR_TOO_MANY_OPERATIONS";
+    case GRPC_CALL_ERROR_TOO_MANY_CONCURRENT_BATCHES:
+      return "GRPC_CALL_ERROR_TOO_MANY_CONCURRENT_BATCHES";
     case GRPC_CALL_OK:
       return "GRPC_CALL_OK";
   }
diff --git a/test/core/end2end/fuzzers/api_fuzzer_corpus/clusterfuzz-testcase-5171071900712960 b/test/core/end2end/fuzzers/api_fuzzer_corpus/clusterfuzz-testcase-5171071900712960
new file mode 100644
index 00000000000..70ca3a336e3
Binary files /dev/null and b/test/core/end2end/fuzzers/api_fuzzer_corpus/clusterfuzz-testcase-5171071900712960 differ
diff --git a/tools/run_tests/generated/tests.json b/tools/run_tests/generated/tests.json
index 142e5bea4ad..13003de61c1 100644
--- a/tools/run_tests/generated/tests.json
+++ b/tools/run_tests/generated/tests.json
@@ -79681,6 +79681,28 @@
     ], 
     "uses_polling": false
   }, 
+  {
+    "args": [
+      "test/core/end2end/fuzzers/api_fuzzer_corpus/clusterfuzz-testcase-5171071900712960"
+    ], 
+    "ci_platforms": [
+      "linux"
+    ], 
+    "cpu_cost": 0.1, 
+    "exclude_configs": [
+      "tsan"
+    ], 
+    "exclude_iomgrs": [
+      "uv"
+    ], 
+    "flaky": false, 
+    "language": "c", 
+    "name": "api_fuzzer_one_entry", 
+    "platforms": [
+      "linux"
+    ], 
+    "uses_polling": false
+  }, 
   {
     "args": [
       "test/core/end2end/fuzzers/api_fuzzer_corpus/crash-0597bbdd657fa4ed14443994c9147a1a7bbc205f"
