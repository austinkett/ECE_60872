diff --git a/include/grpc++/create_channel.h b/include/grpc++/create_channel.h
index e9ccb515039..80eed067b7d 100644
--- a/include/grpc++/create_channel.h
+++ b/include/grpc++/create_channel.h
@@ -1,6 +1,6 @@
 /*
  *
- * Copyright 2015, Google Inc.
+ * Copyright 2015-2016, Google Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
diff --git a/src/core/iomgr/pollset_multipoller_with_epoll.c b/src/core/iomgr/pollset_multipoller_with_epoll.c
index 4acae2bb712..304b6bbe8d0 100644
--- a/src/core/iomgr/pollset_multipoller_with_epoll.c
+++ b/src/core/iomgr/pollset_multipoller_with_epoll.c
@@ -194,6 +194,7 @@ static void multipoll_with_epoll_pollset_maybe_work_and_unlock(
   pollset_hdr *h = pollset->data.ptr;
   int timeout_ms;
   struct pollfd pfds[2];
+  grpc_poll_function_type poll_function;
 
   /* If you want to ignore epoll's ability to sanely handle parallel pollers,
    * for a more apples-to-apples performance comparison with poll, add a
@@ -212,11 +213,12 @@ static void multipoll_with_epoll_pollset_maybe_work_and_unlock(
   pfds[1].events = POLLIN;
   pfds[1].revents = 0;
 
+  poll_function = grpc_poll_function_get();
   /* TODO(vpai): Consider first doing a 0 timeout poll here to avoid
      even going into the blocking annotation if possible */
   GPR_TIMER_BEGIN("poll", 0);
   GRPC_SCHEDULING_START_BLOCKING_REGION;
-  poll_rv = grpc_poll_function(pfds, 2, timeout_ms);
+  poll_rv = poll_function(pfds, 2, timeout_ms);
   GRPC_SCHEDULING_END_BLOCKING_REGION;
   GPR_TIMER_END("poll", 0);
 
diff --git a/src/core/iomgr/pollset_multipoller_with_poll_posix.c b/src/core/iomgr/pollset_multipoller_with_poll_posix.c
index 809f8f39daa..9948224066f 100644
--- a/src/core/iomgr/pollset_multipoller_with_poll_posix.c
+++ b/src/core/iomgr/pollset_multipoller_with_poll_posix.c
@@ -96,6 +96,7 @@ static void multipoll_with_poll_pollset_maybe_work_and_unlock(
   /* TODO(ctiller): inline some elements to avoid an allocation */
   grpc_fd_watcher *watchers;
   struct pollfd *pfds;
+  grpc_poll_function_type poll_function;
 
   h = pollset->data.ptr;
   timeout = grpc_poll_deadline_to_millis_timeout(deadline, now);
@@ -137,10 +138,11 @@ static void multipoll_with_poll_pollset_maybe_work_and_unlock(
                                                POLLIN, POLLOUT, &watchers[i]);
   }
 
+  poll_function = grpc_poll_function_get();
   /* TODO(vpai): Consider first doing a 0 timeout poll here to avoid
      even going into the blocking annotation if possible */
   GRPC_SCHEDULING_START_BLOCKING_REGION;
-  r = grpc_poll_function(pfds, pfd_count, timeout);
+  r = poll_function(pfds, pfd_count, timeout);
   GRPC_SCHEDULING_END_BLOCKING_REGION;
 
   if (r < 0) {
diff --git a/src/core/iomgr/pollset_posix.c b/src/core/iomgr/pollset_posix.c
index 19ee6650f00..755d450abda 100644
--- a/src/core/iomgr/pollset_posix.c
+++ b/src/core/iomgr/pollset_posix.c
@@ -49,6 +49,7 @@
 #include "src/core/profiling/timers.h"
 #include "src/core/support/block_annotate.h"
 #include <grpc/support/alloc.h>
+#include <grpc/support/atm.h>
 #include <grpc/support/log.h>
 #include <grpc/support/thd.h>
 #include <grpc/support/tls.h>
@@ -59,7 +60,26 @@ GPR_TLS_DECL(g_current_thread_worker);
 
 /** Default poll() function - a pointer so that it can be overridden by some
  *  tests */
-grpc_poll_function_type grpc_poll_function = poll;
+typedef union poll_function_union {
+  grpc_poll_function_type poll_function;
+  gpr_atm atm;
+} poll_function_union;
+
+/* C89 allows initialization of a union's first element, which is great here */
+static poll_function_union poller_function = {poll};
+
+void grpc_poll_function_set(grpc_poll_function_type poller) {
+  poll_function_union f;
+  memset(&f, 0, sizeof(f)); /* clear this out to avoid uninit'ed bytes */
+  f.poll_function = poller;
+  gpr_atm_rel_store(&poller_function.atm, f.atm);
+}
+
+grpc_poll_function_type grpc_poll_function_get(void) {
+  poll_function_union f;
+  f.atm = gpr_atm_acq_load(&poller_function.atm);
+  return f.poll_function;
+}
 
 /** The alarm system needs to be able to wakeup 'some poller' sometimes
  *  (specifically when a new alarm needs to be triggered earlier than the next
@@ -547,6 +567,7 @@ static void basic_pollset_maybe_work_and_unlock(grpc_exec_ctx *exec_ctx,
   int timeout;
   int r;
   nfds_t nfds;
+  grpc_poll_function_type poll_function;
 
   fd = pollset->data.ptr;
   if (fd && grpc_fd_is_orphaned(fd)) {
@@ -575,13 +596,14 @@ static void basic_pollset_maybe_work_and_unlock(grpc_exec_ctx *exec_ctx,
     gpr_mu_unlock(&pollset->mu);
   }
 
+  poll_function = grpc_poll_function_get();
   /* TODO(vpai): Consider first doing a 0 timeout poll here to avoid
      even going into the blocking annotation if possible */
   /* poll fd count (argument 2) is shortened by one if we have no events
      to poll on - such that it only includes the kicker */
   GPR_TIMER_BEGIN("poll", 0);
   GRPC_SCHEDULING_START_BLOCKING_REGION;
-  r = grpc_poll_function(pfd, nfds, timeout);
+  r = poll_function(pfd, nfds, timeout);
   GRPC_SCHEDULING_END_BLOCKING_REGION;
   GPR_TIMER_END("poll", 0);
 
diff --git a/src/core/iomgr/pollset_posix.h b/src/core/iomgr/pollset_posix.h
index b34bb094268..ed390060563 100644
--- a/src/core/iomgr/pollset_posix.h
+++ b/src/core/iomgr/pollset_posix.h
@@ -41,6 +41,10 @@
 #include "src/core/iomgr/iomgr.h"
 #include "src/core/iomgr/wakeup_fd_posix.h"
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 typedef struct grpc_pollset_vtable grpc_pollset_vtable;
 
 /* forward declare only in this file to avoid leaking impl details via
@@ -143,7 +147,13 @@ void grpc_remove_fd_from_all_epoll_sets(int fd);
 
 /* override to allow tests to hook poll() usage */
 typedef int (*grpc_poll_function_type)(struct pollfd *, nfds_t, int);
-extern grpc_poll_function_type grpc_poll_function;
+void grpc_poll_function_set(grpc_poll_function_type poller);
+grpc_poll_function_type grpc_poll_function_get(void);
+
 extern grpc_wakeup_fd grpc_global_wakeup_fd;
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* GRPC_INTERNAL_CORE_IOMGR_POLLSET_POSIX_H */
diff --git a/test/cpp/end2end/async_end2end_test.cc b/test/cpp/end2end/async_end2end_test.cc
index a194c615cdf..48a125b8b6b 100644
--- a/test/cpp/end2end/async_end2end_test.cc
+++ b/test/cpp/end2end/async_end2end_test.cc
@@ -76,11 +76,11 @@ static int assert_non_blocking_poll(struct pollfd* pfds, nfds_t nfds,
 class PollOverride {
  public:
   PollOverride(grpc_poll_function_type f) {
-    prev_ = grpc_poll_function;
-    grpc_poll_function = f;
+    prev_ = grpc_poll_function_get();
+    grpc_poll_function_set(f);
   }
 
-  ~PollOverride() { grpc_poll_function = prev_; }
+  ~PollOverride() { grpc_poll_function_set(prev_); }
 
  private:
   grpc_poll_function_type prev_;
