diff --git a/src/php/lib/Grpc/AbstractSurfaceActiveCall.php b/src/php/lib/Grpc/AbstractSurfaceActiveCall.php
index 53c7d4cd1a4..83e4719c9a8 100755
--- a/src/php/lib/Grpc/AbstractSurfaceActiveCall.php
+++ b/src/php/lib/Grpc/AbstractSurfaceActiveCall.php
@@ -44,7 +44,7 @@ public function cancel() {
 
   protected function _read() {
     $response = $this->active_call->read();
-    if ($response == null) {
+    if ($response === null) {
       return null;
     }
     return call_user_func($this->deserialize, $response);
diff --git a/src/php/lib/Grpc/ActiveCall.php b/src/php/lib/Grpc/ActiveCall.php
index e0ea43ab085..847cfee1ec2 100755
--- a/src/php/lib/Grpc/ActiveCall.php
+++ b/src/php/lib/Grpc/ActiveCall.php
@@ -66,12 +66,7 @@ public function read() {
    * @param ByteBuffer $data The data to write
    */
   public function write($data) {
-    if($this->call->start_write($data,
-                                WRITE_ACCEPTED,
-                                $this->flags) != OP_OK) {
-      // TODO(mlumish): more useful error
-      throw new \Exception("Cannot call write after writesDone");
-    }
+    $this->call->start_write($data, WRITE_ACCEPTED, $this->flags);
     $this->completion_queue->pluck(WRITE_ACCEPTED, Timeval::inf_future());
   }
 
diff --git a/src/php/lib/Grpc/ServerStreamingSurfaceActiveCall.php b/src/php/lib/Grpc/ServerStreamingSurfaceActiveCall.php
index 082f995d8aa..f131d6bab5c 100755
--- a/src/php/lib/Grpc/ServerStreamingSurfaceActiveCall.php
+++ b/src/php/lib/Grpc/ServerStreamingSurfaceActiveCall.php
@@ -31,7 +31,7 @@ public function __construct(Channel $channel,
    * @return An iterator of response values
    */
   public function responses() {
-    while(($response = $this->_read()) != null) {
+    while(($response = $this->_read()) !== null) {
       yield $response;
     }
   }
diff --git a/src/php/tests/generated_code/GeneratedCodeTest.php b/src/php/tests/generated_code/GeneratedCodeTest.php
index 42d25e46141..ee7b8711239 100755
--- a/src/php/tests/generated_code/GeneratedCodeTest.php
+++ b/src/php/tests/generated_code/GeneratedCodeTest.php
@@ -17,9 +17,9 @@ public function testSimpleRequest() {
     $div_arg->setDividend(7);
     $div_arg->setDivisor(4);
     list($response, $status) = self::$client->Div($div_arg)->wait();
-    $this->assertEquals(1, $response->getQuotient());
-    $this->assertEquals(3, $response->getRemainder());
-    $this->assertEquals(\Grpc\STATUS_OK, $status->code);
+    $this->assertSame(1, $response->getQuotient());
+    $this->assertSame(3, $response->getRemainder());
+    $this->assertSame(\Grpc\STATUS_OK, $status->code);
   }
 
   public function testServerStreaming() {
@@ -31,9 +31,9 @@ public function testServerStreaming() {
       return $num->getNum();
     };
     $values = array_map($extract_num, $result_array);
-    $this->assertEquals([1, 1, 2, 3, 5, 8, 13], $values);
+    $this->assertSame([1, 1, 2, 3, 5, 8, 13], $values);
     $status = $call->getStatus();
-    $this->assertEquals(\Grpc\STATUS_OK, $status->code);
+    $this->assertSame(\Grpc\STATUS_OK, $status->code);
   }
 
   public function testClientStreaming() {
@@ -46,8 +46,8 @@ public function testClientStreaming() {
     };
     $call = self::$client->Sum($num_iter());
     list($response, $status) = $call->wait();
-    $this->assertEquals(21, $response->getNum());
-    $this->assertEquals(\Grpc\STATUS_OK, $status->code);
+    $this->assertSame(21, $response->getNum());
+    $this->assertSame(\Grpc\STATUS_OK, $status->code);
   }
 
   public function testBidiStreaming() {
@@ -58,11 +58,11 @@ public function testBidiStreaming() {
       $div_arg->setDivisor(2);
       $call->write($div_arg);
       $response = $call->read();
-      $this->assertEquals($i, $response->getQuotient());
-      $this->assertEquals(1, $response->getRemainder());
+      $this->assertSame($i, $response->getQuotient());
+      $this->assertSame(1, $response->getRemainder());
     }
     $call->writesDone();
     $status = $call->getStatus();
-    $this->assertEquals(\Grpc\STATUS_OK, $status->code);
+    $this->assertSame(\Grpc\STATUS_OK, $status->code);
   }
 }
\ No newline at end of file
diff --git a/src/php/tests/interop/interop_client.php b/src/php/tests/interop/interop_client.php
index 2ff2be7bca0..d1f994a84b6 100755
--- a/src/php/tests/interop/interop_client.php
+++ b/src/php/tests/interop/interop_client.php
@@ -26,8 +26,8 @@ function hardAssert($value, $error_message) {
  */
 function emptyUnary($stub) {
   list($result, $status) = $stub->EmptyCall(new grpc\testing\EmptyMessage())->wait();
-  hardAssert($status->code == Grpc\STATUS_OK, 'Call did not complete successfully');
-  hardAssert($result != null, 'Call completed with a null response');
+  hardAssert($status->code === Grpc\STATUS_OK, 'Call did not complete successfully');
+  hardAssert($result !== null, 'Call completed with a null response');
 }
 
 /**
@@ -49,14 +49,14 @@ function largeUnary($stub) {
   $request->setPayload($payload);
 
   list($result, $status) = $stub->UnaryCall($request)->wait();
-  hardAssert($status->code == Grpc\STATUS_OK, 'Call did not complete successfully');
-  hardAssert($result != null, 'Call returned a null response');
+  hardAssert($status->code === Grpc\STATUS_OK, 'Call did not complete successfully');
+  hardAssert($result !== null, 'Call returned a null response');
   $payload = $result->getPayload();
-  hardAssert($payload->getType() == grpc\testing\PayloadType::COMPRESSABLE,
+  hardAssert($payload->getType() === grpc\testing\PayloadType::COMPRESSABLE,
          'Payload had the wrong type');
-  hardAssert(strlen($payload->getBody()) == $response_len,
+  hardAssert(strlen($payload->getBody()) === $response_len,
          'Payload had the wrong length');
-  hardAssert($payload->getBody() == str_repeat("\0", $response_len),
+  hardAssert($payload->getBody() === str_repeat("\0", $response_len),
          'Payload had the wrong content');
 }
 
@@ -78,8 +78,8 @@ function($length) {
       }, $request_lengths);
 
   list($result, $status) = $stub->StreamingInputCall($requests)->wait();
-  hardAssert($status->code == Grpc\STATUS_OK, 'Call did not complete successfully');
-  hardAssert($result->getAggregatedPayloadSize() == 74922,
+  hardAssert($status->code === Grpc\STATUS_OK, 'Call did not complete successfully');
+  hardAssert($result->getAggregatedPayloadSize() === 74922,
               'aggregated_payload_size was incorrect');
 }
 
@@ -100,15 +100,15 @@ function serverStreaming($stub) {
   }
 
   $call = $stub->StreamingOutputCall($request);
-  hardAssert($call->getStatus()->code == Grpc\STATUS_OK,
+  hardAssert($call->getStatus()->code === Grpc\STATUS_OK,
               'Call did not complete successfully');
   $i = 0;
   foreach($call->responses() as $value) {
     hardAssert($i < 4, 'Too many responses');
     $payload = $value->getPayload();
-    hardAssert($payload->getType() == grpc\testing\PayloadType::COMPRESSABLE,
+    hardAssert($payload->getType() === grpc\testing\PayloadType::COMPRESSABLE,
                 'Payload ' . $i . ' had the wrong type');
-    hardAssert(strlen($payload->getBody()) == $sizes[$i],
+    hardAssert(strlen($payload->getBody()) === $sizes[$i],
                 'Response ' . $i . ' had the wrong length');
   }
 }
@@ -136,16 +136,16 @@ function pingPong($stub) {
     $call->write($request);
     $response = $call->read();
 
-    hardAssert($response != null, 'Server returned too few responses');
+    hardAssert($response !== null, 'Server returned too few responses');
     $payload = $response->getPayload();
-    hardAssert($payload->getType() == grpc\testing\PayloadType::COMPRESSABLE,
+    hardAssert($payload->getType() === grpc\testing\PayloadType::COMPRESSABLE,
                 'Payload ' . $i . ' had the wrong type');
-    hardAssert(strlen($payload->getBody()) == $response_lengths[$i],
+    hardAssert(strlen($payload->getBody()) === $response_lengths[$i],
                 'Payload ' . $i . ' had the wrong length');
   }
   $call->writesDone();
-  hardAssert($call->read() == null, 'Server returned too many responses');
-  hardAssert($call->getStatus()->code == Grpc\STATUS_OK,
+  hardAssert($call->read() === null, 'Server returned too many responses');
+  hardAssert($call->getStatus()->code === Grpc\STATUS_OK,
               'Call did not complete successfully');
 }
 
diff --git a/src/php/tests/unit_tests/EndToEndTest.php b/src/php/tests/unit_tests/EndToEndTest.php
index 78c5e9f93bf..a2d8029b047 100755
--- a/src/php/tests/unit_tests/EndToEndTest.php
+++ b/src/php/tests/unit_tests/EndToEndTest.php
@@ -24,62 +24,52 @@ public function testSimpleRequestBody() {
                           'dummy_method',
                           $deadline);
     $tag = 1;
-    $this->assertEquals(Grpc\CALL_OK,
-                        $call->invoke($this->client_queue,
-                                      $tag,
-                                      $tag));
-
+    $call->invoke($this->client_queue, $tag, $tag);
     $server_tag = 2;
 
     $call->writes_done($tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // check that a server rpc new was received
     $this->server->start();
     $this->server->request_call($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\SERVER_RPC_NEW, $event->type);
+    $this->assertSame(Grpc\SERVER_RPC_NEW, $event->type);
     $server_call = $event->call;
     $this->assertNotNull($server_call);
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_accept($this->server_queue,
-                                                    $server_tag));
+    $server_call->server_accept($this->server_queue, $server_tag);
 
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_end_initial_metadata());
+    $server_call->server_end_initial_metadata();
 
 
     // the server sends the status
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write_status(Grpc\STATUS_OK,
-                                                         $status_text,
-                                                         $server_tag));
+    $server_call->start_write_status(Grpc\STATUS_OK, $status_text, $server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the client gets CLIENT_METADATA_READ
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\CLIENT_METADATA_READ, $event->type);
+    $this->assertSame(Grpc\CLIENT_METADATA_READ, $event->type);
 
     // the client gets FINISHED
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
-    $this->assertEquals(Grpc\STATUS_OK, $status->code);
-    $this->assertEquals($status_text, $status->details);
+    $this->assertSame(Grpc\STATUS_OK, $status->code);
+    $this->assertSame($status_text, $status->details);
 
     // and the server gets FINISHED
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
 
     unset($call);
@@ -96,10 +86,7 @@ public function testClientServerFullRequestResponse() {
                           'dummy_method',
                           $deadline);
     $tag = 1;
-    $this->assertEquals(Grpc\CALL_OK,
-                        $call->invoke($this->client_queue,
-                                      $tag,
-                                      $tag));
+    $call->invoke($this->client_queue, $tag, $tag);
 
     $server_tag = 2;
 
@@ -107,76 +94,69 @@ public function testClientServerFullRequestResponse() {
     $call->start_write($req_text, $tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\WRITE_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\WRITE_ACCEPTED, $event->type);
 
     // check that a server rpc new was received
     $this->server->start();
     $this->server->request_call($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\SERVER_RPC_NEW, $event->type);
+    $this->assertSame(Grpc\SERVER_RPC_NEW, $event->type);
     $server_call = $event->call;
     $this->assertNotNull($server_call);
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_accept($this->server_queue,
-                                                    $server_tag));
+    $server_call->server_accept($this->server_queue, $server_tag);
 
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_end_initial_metadata());
+    $server_call->server_end_initial_metadata();
 
     // start the server read
     $server_call->start_read($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\READ, $event->type);
-    $this->assertEquals($req_text, $event->data);
+    $this->assertSame(Grpc\READ, $event->type);
+    $this->assertSame($req_text, $event->data);
 
     // the server replies
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write($reply_text, $server_tag));
+    $server_call->start_write($reply_text, $server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\WRITE_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\WRITE_ACCEPTED, $event->type);
 
     // the client reads the metadata
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\CLIENT_METADATA_READ, $event->type);
+    $this->assertSame(Grpc\CLIENT_METADATA_READ, $event->type);
 
     // the client reads the reply
     $call->start_read($tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\READ, $event->type);
-    $this->assertEquals($reply_text, $event->data);
+    $this->assertSame(Grpc\READ, $event->type);
+    $this->assertSame($reply_text, $event->data);
 
     // the client sends writes done
     $call->writes_done($tag);
     $event = $this->client_queue->next($deadline);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the server sends the status
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write_status(GRPC\STATUS_OK,
-                                                         $status_text,
-                                                         $server_tag));
+    $server_call->start_write_status(GRPC\STATUS_OK, $status_text, $server_tag);
     $event = $this->server_queue->next($deadline);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the client gets FINISHED
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
-    $this->assertEquals(Grpc\STATUS_OK, $status->code);
-    $this->assertEquals($status_text, $status->details);
+    $this->assertSame(Grpc\STATUS_OK, $status->code);
+    $this->assertSame($status_text, $status->details);
 
     // and the server gets FINISHED
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
 
     unset($call);
     unset($server_call);
diff --git a/src/php/tests/unit_tests/SecureEndToEndTest.php b/src/php/tests/unit_tests/SecureEndToEndTest.php
index 7c3ad8a07c6..7ba4984bd86 100755
--- a/src/php/tests/unit_tests/SecureEndToEndTest.php
+++ b/src/php/tests/unit_tests/SecureEndToEndTest.php
@@ -36,59 +36,50 @@ public function testSimpleRequestBody() {
                           'dummy_method',
                           $deadline);
     $tag = 1;
-    $this->assertEquals(Grpc\CALL_OK,
-                        $call->invoke($this->client_queue,
-                                      $tag,
-                                      $tag));
+    $call->invoke($this->client_queue, $tag, $tag);
     $server_tag = 2;
 
     $call->writes_done($tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // check that a server rpc new was received
     $this->server->request_call($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\SERVER_RPC_NEW, $event->type);
+    $this->assertSame(Grpc\SERVER_RPC_NEW, $event->type);
     $server_call = $event->call;
     $this->assertNotNull($server_call);
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_accept($this->server_queue,
-                                                    $server_tag));
+    $server_call->server_accept($this->server_queue, $server_tag);
 
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_end_initial_metadata());
+    $server_call->server_end_initial_metadata();
 
     // the server sends the status
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write_status(Grpc\STATUS_OK,
-                                                         $status_text,
-                                                         $server_tag));
+    $server_call->start_write_status(Grpc\STATUS_OK, $status_text, $server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the client gets CLIENT_METADATA_READ
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\CLIENT_METADATA_READ, $event->type);
+    $this->assertSame(Grpc\CLIENT_METADATA_READ, $event->type);
 
     // the client gets FINISHED
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
-    $this->assertEquals(Grpc\STATUS_OK, $status->code);
-    $this->assertEquals($status_text, $status->details);
+    $this->assertSame(Grpc\STATUS_OK, $status->code);
+    $this->assertSame($status_text, $status->details);
 
     // and the server gets FINISHED
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
 
     unset($call);
@@ -106,10 +97,7 @@ public function testClientServerFullRequestResponse() {
                           'dummy_method',
                           $deadline);
     $tag = 1;
-    $this->assertEquals(Grpc\CALL_OK,
-                        $call->invoke($this->client_queue,
-                                      $tag,
-                                      $tag));
+    $call->invoke($this->client_queue, $tag, $tag);
 
     $server_tag = 2;
 
@@ -117,75 +105,68 @@ public function testClientServerFullRequestResponse() {
     $call->start_write($req_text, $tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\WRITE_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\WRITE_ACCEPTED, $event->type);
 
     // check that a server rpc new was received
     $this->server->request_call($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\SERVER_RPC_NEW, $event->type);
+    $this->assertSame(Grpc\SERVER_RPC_NEW, $event->type);
     $server_call = $event->call;
     $this->assertNotNull($server_call);
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_accept($this->server_queue,
-                                                    $server_tag));
+    $server_call->server_accept($this->server_queue, $server_tag);
 
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->server_end_initial_metadata());
+    $server_call->server_end_initial_metadata();
 
     // start the server read
     $server_call->start_read($server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\READ, $event->type);
-    $this->assertEquals($req_text, $event->data);
+    $this->assertSame(Grpc\READ, $event->type);
+    $this->assertSame($req_text, $event->data);
 
     // the server replies
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write($reply_text, $server_tag));
+    $server_call->start_write($reply_text, $server_tag);
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\WRITE_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\WRITE_ACCEPTED, $event->type);
 
     // the client reads the metadata
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\CLIENT_METADATA_READ, $event->type);
+    $this->assertSame(Grpc\CLIENT_METADATA_READ, $event->type);
 
     // the client reads the reply
     $call->start_read($tag);
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\READ, $event->type);
-    $this->assertEquals($reply_text, $event->data);
+    $this->assertSame(Grpc\READ, $event->type);
+    $this->assertSame($reply_text, $event->data);
 
     // the client sends writes done
     $call->writes_done($tag);
     $event = $this->client_queue->next($deadline);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the server sends the status
-    $this->assertEquals(Grpc\CALL_OK,
-                        $server_call->start_write_status(GRPC\STATUS_OK,
-                                                         $status_text,
-                                                         $server_tag));
+    $server_call->start_write_status(GRPC\STATUS_OK, $status_text, $server_tag);
     $event = $this->server_queue->next($deadline);
-    $this->assertEquals(Grpc\FINISH_ACCEPTED, $event->type);
-    $this->assertEquals(Grpc\OP_OK, $event->data);
+    $this->assertSame(Grpc\FINISH_ACCEPTED, $event->type);
+    $this->assertSame(Grpc\OP_OK, $event->data);
 
     // the client gets FINISHED
     $event = $this->client_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
     $status = $event->data;
-    $this->assertEquals(Grpc\STATUS_OK, $status->code);
-    $this->assertEquals($status_text, $status->details);
+    $this->assertSame(Grpc\STATUS_OK, $status->code);
+    $this->assertSame($status_text, $status->details);
 
     // and the server gets FINISHED
     $event = $this->server_queue->next($deadline);
     $this->assertNotNull($event);
-    $this->assertEquals(Grpc\FINISHED, $event->type);
+    $this->assertSame(Grpc\FINISHED, $event->type);
 
     unset($call);
     unset($server_call);
diff --git a/src/php/tests/unit_tests/TimevalTest.php b/src/php/tests/unit_tests/TimevalTest.php
index 6af9fba0431..067254b55bf 100755
--- a/src/php/tests/unit_tests/TimevalTest.php
+++ b/src/php/tests/unit_tests/TimevalTest.php
@@ -2,7 +2,7 @@
 class TimevalTest extends PHPUnit_Framework_TestCase{
   public function testCompareSame() {
     $zero = Grpc\Timeval::zero();
-    $this->assertEquals(0, Grpc\Timeval::compare($zero, $zero));
+    $this->assertSame(0, Grpc\Timeval::compare($zero, $zero));
   }
 
   public function testPastIsLessThanZero() {
