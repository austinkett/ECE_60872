diff --git a/src/ruby/ext/grpc/rb_channel.c b/src/ruby/ext/grpc/rb_channel.c
index d789e5a4362..73d8b20a312 100644
--- a/src/ruby/ext/grpc/rb_channel.c
+++ b/src/ruby/ext/grpc/rb_channel.c
@@ -119,7 +119,7 @@ static void grpc_rb_channel_watch_connection_state_op_complete(
   GPR_ASSERT(!op->op.api_callback_args.called_back);
   op->op.api_callback_args.called_back = 1;
   op->op.api_callback_args.success = success;
-  // wake up the watch API call thats waiting on this op
+  // wake up the watch API call that's waiting on this op
   gpr_cv_broadcast(&global_connection_polling_cv);
 }
 
diff --git a/tools/debug/core/error_ref_leak.py b/tools/debug/core/error_ref_leak.py
index 7e206c26b26..125ec90aaef 100644
--- a/tools/debug/core/error_ref_leak.py
+++ b/tools/debug/core/error_ref_leak.py
@@ -17,7 +17,7 @@
 # Reads stdin to find error_refcount log lines, and prints reference leaks
 # to stdout
 
-# usege: python error_ref_leak < logfile.txt
+# usage: python error_ref_leak < logfile.txt
 
 import sys
 import re
diff --git a/tools/http2_interop/http2interop_test.go b/tools/http2_interop/http2interop_test.go
index 989b60590c3..ce00b873d6e 100644
--- a/tools/http2_interop/http2interop_test.go
+++ b/tools/http2_interop/http2interop_test.go
@@ -145,7 +145,7 @@ func TestSoonTLSMaxVersion(t *testing.T) {
 	ctx := InteropCtx(t)
 	err := testTLSMaxVersion(ctx, tls.VersionTLS11)
 	// TODO(carl-mastrangelo): maybe this should be some other error.  If the server picks
-	// the wrong protocol version, thats bad too.
+	// the wrong protocol version, that's bad too.
 	matchError(t, err, "EOF", "server selected unsupported protocol")
 }
 
diff --git a/tools/http2_interop/s6.5.go b/tools/http2_interop/s6.5.go
index 89ca57f221a..1a5777767cf 100644
--- a/tools/http2_interop/s6.5.go
+++ b/tools/http2_interop/s6.5.go
@@ -72,7 +72,7 @@ func testAllSettingsFramesAcked(ctx *HTTP2InteropCtx) error {
 
 	var settingsFramesReceived = 0
 	// The server by default sends a settings frame as part of the handshake, and another
-	// after the receipt of the initial settings frame as part of our conneection preface.
+	// after the receipt of the initial settings frame as part of our connection preface.
 	// This means we expected 1 + 1 + 10 = 12 settings frames in return, with all but the
 	// first having the ack bit.
 	for settingsFramesReceived < 12 {
diff --git a/tools/run_tests/artifacts/distribtest_targets.py b/tools/run_tests/artifacts/distribtest_targets.py
index 0674fc4c689..d65ce934a58 100644
--- a/tools/run_tests/artifacts/distribtest_targets.py
+++ b/tools/run_tests/artifacts/distribtest_targets.py
@@ -121,7 +121,7 @@ def build_jobspec(self):
                 use_workspace=True)
         elif self.platform == 'windows':
             if self.arch == 'x64':
-                # Use double leading / as the first occurence gets removed by msys bash
+                # Use double leading / as the first occurrence gets removed by msys bash
                 # when invoking the .bat file (side-effect of posix path conversion)
                 environ = {
                     'MSBUILD_EXTRA_ARGS': '//p:Platform=x64',
@@ -255,7 +255,7 @@ def __str__(self):
 
 
 class CppDistribTest(object):
-    """Tests Cpp make intall by building examples."""
+    """Tests Cpp make install by building examples."""
 
     def __init__(self, platform, arch, docker_suffix=None, testcase=None):
         if platform == 'linux':
diff --git a/tools/run_tests/python_utils/report_utils.py b/tools/run_tests/python_utils/report_utils.py
index 0ab346b6139..9f84d50c849 100644
--- a/tools/run_tests/python_utils/report_utils.py
+++ b/tools/run_tests/python_utils/report_utils.py
@@ -30,7 +30,7 @@ def _filter_msg(msg, output_format):
     """Filters out nonprintable and illegal characters from the message."""
     if output_format in ['XML', 'HTML']:
         # keep whitespaces but remove formfeed and vertical tab characters
-        # that make XML report unparseable.
+        # that make XML report unparsable.
         filtered_msg = filter(
             lambda x: x in string.printable and x != '\f' and x != '\v',
             msg.decode('UTF-8', 'ignore'))
diff --git a/tools/run_tests/python_utils/upload_rbe_results.py b/tools/run_tests/python_utils/upload_rbe_results.py
index e6504799d66..660febcc6c3 100755
--- a/tools/run_tests/python_utils/upload_rbe_results.py
+++ b/tools/run_tests/python_utils/upload_rbe_results.py
@@ -51,7 +51,7 @@ def _get_api_key():
     api_key_directory = os.getenv('KOKORO_GFILE_DIR')
     api_key_file = os.path.join(api_key_directory, 'resultstore_api_key')
     assert os.path.isfile(api_key_file), 'Must add --api_key arg if not on ' \
-     'Kokoro or Kokoro envrionment is not set up properly.'
+     'Kokoro or Kokoro environment is not set up properly.'
     with open(api_key_file, 'r') as f:
         return f.read().replace('\n', '')
 
diff --git a/tools/run_tests/run_interop_tests.py b/tools/run_tests/run_interop_tests.py
index 099b8c7b1a5..28ca7f852d1 100755
--- a/tools/run_tests/run_interop_tests.py
+++ b/tools/run_tests/run_interop_tests.py
@@ -1590,7 +1590,7 @@ def aggregate_http2_results(stdout):
             # HTTP_SERVER_TEST_CASES, in which clients use their gRPC interop clients rather
             # than specialized http2 clients, reusing existing test implementations.
             # For example, in the "data_frame_padding" test, use language's gRPC
-            # interop clients and make them think that theyre running "large_unary"
+            # interop clients and make them think that they're running "large_unary"
             # test case. This avoids implementing a new test case in each language.
             for test_case in _HTTP2_SERVER_TEST_CASES_THAT_USE_GRPC_CLIENTS:
                 if test_case not in language.unimplemented_test_cases():
