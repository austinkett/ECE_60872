diff --git a/src/python/grpcio/grpc/_server.py b/src/python/grpcio/grpc/_server.py
index 158cdf8b0e6..cbbe2dcbf5d 100644
--- a/src/python/grpcio/grpc/_server.py
+++ b/src/python/grpcio/grpc/_server.py
@@ -233,8 +233,9 @@ def is_active(self):
             return self._state.client is not _CANCELLED and not self._state.statused
 
     def time_remaining(self):
-        return max(self._rpc_event.request_call_details.deadline - time.time(),
-                   0)
+        return max(
+            float(self._rpc_event.request_call_details.deadline) - time.time(),
+            0)
 
     def cancel(self):
         self._rpc_event.operation_call.cancel()
diff --git a/src/python/grpcio_tests/tests/unit/_rpc_test.py b/src/python/grpcio_tests/tests/unit/_rpc_test.py
index 2cf6dfea620..2b1c85a82d2 100644
--- a/src/python/grpcio_tests/tests/unit/_rpc_test.py
+++ b/src/python/grpcio_tests/tests/unit/_rpc_test.py
@@ -81,6 +81,11 @@ def handle_unary_unary(self, request, servicer_context):
             servicer_context.set_trailing_metadata(((
                 'testkey',
                 'testvalue',),))
+            # TODO(https://github.com/grpc/grpc/issues/8483): test the values
+            # returned by these methods rather than only "smoke" testing that
+            # the return after having been called.
+            servicer_context.is_active()
+            servicer_context.time_remaining()
         return request
 
     def handle_unary_stream(self, request, servicer_context):
