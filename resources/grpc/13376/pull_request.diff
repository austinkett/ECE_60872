diff --git a/src/python/grpcio_health_checking/MANIFEST.in b/src/python/grpcio_health_checking/MANIFEST.in
index 5255e4c4036..996c74a9d49 100644
--- a/src/python/grpcio_health_checking/MANIFEST.in
+++ b/src/python/grpcio_health_checking/MANIFEST.in
@@ -1,4 +1,3 @@
 include grpc_version.py
-include health_commands.py
-graft grpc_health
+recursive-include grpc_health *.py
 global-exclude *.pyc
diff --git a/src/python/grpcio_health_checking/health_commands.py b/src/python/grpcio_health_checking/health_commands.py
deleted file mode 100644
index 19547358a12..00000000000
--- a/src/python/grpcio_health_checking/health_commands.py
+++ /dev/null
@@ -1,62 +0,0 @@
-# Copyright 2015 gRPC authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-"""Provides distutils command classes for the GRPC Python setup process."""
-
-import os
-import shutil
-
-import setuptools
-
-ROOT_DIR = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
-HEALTH_PROTO = os.path.join(ROOT_DIR, '../../proto/grpc/health/v1/health.proto')
-
-
-class CopyProtoModules(setuptools.Command):
-    """Command to copy proto modules from grpc/src/proto."""
-
-    description = ''
-    user_options = []
-
-    def initialize_options(self):
-        pass
-
-    def finalize_options(self):
-        pass
-
-    def run(self):
-        if os.path.isfile(HEALTH_PROTO):
-            shutil.copyfile(
-                HEALTH_PROTO,
-                os.path.join(ROOT_DIR, 'grpc_health/v1/health.proto'))
-
-
-class BuildPackageProtos(setuptools.Command):
-    """Command to generate project *_pb2.py modules from proto files."""
-
-    description = 'build grpc protobuf modules'
-    user_options = []
-
-    def initialize_options(self):
-        pass
-
-    def finalize_options(self):
-        pass
-
-    def run(self):
-        # due to limitations of the proto generator, we require that only *one*
-        # directory is provided as an 'include' directory. We assume it's the '' key
-        # to `self.distribution.package_dir` (and get a key error if it's not
-        # there).
-        from grpc_tools import command
-        command.build_package_protos(self.distribution.package_dir[''])
diff --git a/src/python/grpcio_health_checking/setup.py b/src/python/grpcio_health_checking/setup.py
index 1f5e9c5130b..1e503c314bb 100644
--- a/src/python/grpcio_health_checking/setup.py
+++ b/src/python/grpcio_health_checking/setup.py
@@ -20,8 +20,7 @@
 # Ensure we're in the proper directory whether or not we're being used by pip.
 os.chdir(os.path.dirname(os.path.abspath(__file__)))
 
-# Break import-style to ensure we can actually find our commands module.
-import health_commands
+# Break import-style to ensure we can actually find our module.
 import grpc_version
 
 CLASSIFIERS = [
@@ -40,18 +39,9 @@
     '': '.',
 }
 
-SETUP_REQUIRES = (
-    'grpcio-tools>={version}'.format(version=grpc_version.VERSION),)
-
 INSTALL_REQUIRES = ('protobuf>=3.3.0',
                     'grpcio>={version}'.format(version=grpc_version.VERSION),)
 
-COMMAND_CLASS = {
-    # Run preprocess from the repository *before* doing any packaging!
-    'preprocess': health_commands.CopyProtoModules,
-    'build_package_protos': health_commands.BuildPackageProtos,
-}
-
 setuptools.setup(
     name='grpcio-health-checking',
     version=grpc_version.VERSION,
@@ -64,5 +54,5 @@
     package_dir=PACKAGE_DIRECTORIES,
     packages=setuptools.find_packages('.'),
     install_requires=INSTALL_REQUIRES,
-    setup_requires=SETUP_REQUIRES,
-    cmdclass=COMMAND_CLASS)
+    setup_requires=(),
+    cmdclass={})
diff --git a/src/python/grpcio_reflection/MANIFEST.in b/src/python/grpcio_reflection/MANIFEST.in
index 0f2130c0b58..d6fb6ce73aa 100644
--- a/src/python/grpcio_reflection/MANIFEST.in
+++ b/src/python/grpcio_reflection/MANIFEST.in
@@ -1,4 +1,3 @@
 include grpc_version.py
-include reflection_commands.py
-graft grpc_reflection
+recursive-include grpc_reflection *.py
 global-exclude *.pyc
diff --git a/src/python/grpcio_reflection/reflection_commands.py b/src/python/grpcio_reflection/reflection_commands.py
deleted file mode 100644
index 6f91f6b8751..00000000000
--- a/src/python/grpcio_reflection/reflection_commands.py
+++ /dev/null
@@ -1,64 +0,0 @@
-# Copyright 2016 gRPC authors.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-"""Provides distutils command classes for the GRPC Python setup process."""
-
-import os
-import shutil
-
-import setuptools
-
-ROOT_DIR = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
-REFLECTION_PROTO = os.path.join(
-    ROOT_DIR, '../../proto/grpc/reflection/v1alpha/reflection.proto')
-
-
-class CopyProtoModules(setuptools.Command):
-    """Command to copy proto modules from grpc/src/proto."""
-
-    description = ''
-    user_options = []
-
-    def initialize_options(self):
-        pass
-
-    def finalize_options(self):
-        pass
-
-    def run(self):
-        if os.path.isfile(REFLECTION_PROTO):
-            shutil.copyfile(
-                REFLECTION_PROTO,
-                os.path.join(ROOT_DIR,
-                             'grpc_reflection/v1alpha/reflection.proto'))
-
-
-class BuildPackageProtos(setuptools.Command):
-    """Command to generate project *_pb2.py modules from proto files."""
-
-    description = 'build grpc protobuf modules'
-    user_options = []
-
-    def initialize_options(self):
-        pass
-
-    def finalize_options(self):
-        pass
-
-    def run(self):
-        # due to limitations of the proto generator, we require that only *one*
-        # directory is provided as an 'include' directory. We assume it's the '' key
-        # to `self.distribution.package_dir` (and get a key error if it's not
-        # there).
-        from grpc_tools import command
-        command.build_package_protos(self.distribution.package_dir[''])
diff --git a/src/python/grpcio_reflection/setup.py b/src/python/grpcio_reflection/setup.py
index 9360550afbc..411713dee7a 100644
--- a/src/python/grpcio_reflection/setup.py
+++ b/src/python/grpcio_reflection/setup.py
@@ -14,15 +14,13 @@
 """Setup module for the GRPC Python package's optional reflection."""
 
 import os
-import sys
 
 import setuptools
 
 # Ensure we're in the proper directory whether or not we're being used by pip.
 os.chdir(os.path.dirname(os.path.abspath(__file__)))
 
-# Break import-style to ensure we can actually find our commands module.
-import reflection_commands
+# Break import-style to ensure we can actually find our module.
 import grpc_version
 
 CLASSIFIERS = [
@@ -41,18 +39,9 @@
     '': '.',
 }
 
-SETUP_REQUIRES = (
-    'grpcio-tools>={version}'.format(version=grpc_version.VERSION),)
-
 INSTALL_REQUIRES = ('protobuf>=3.3.0',
                     'grpcio>={version}'.format(version=grpc_version.VERSION),)
 
-COMMAND_CLASS = {
-    # Run preprocess from the repository *before* doing any packaging!
-    'preprocess': reflection_commands.CopyProtoModules,
-    'build_package_protos': reflection_commands.BuildPackageProtos,
-}
-
 setuptools.setup(
     name='grpcio-reflection',
     version=grpc_version.VERSION,
@@ -65,5 +54,5 @@
     package_dir=PACKAGE_DIRECTORIES,
     packages=setuptools.find_packages('.'),
     install_requires=INSTALL_REQUIRES,
-    setup_requires=SETUP_REQUIRES,
-    cmdclass=COMMAND_CLASS)
+    setup_requires=(),
+    cmdclass={})
diff --git a/tools/run_tests/artifacts/build_artifact_python.sh b/tools/run_tests/artifacts/build_artifact_python.sh
index ab5bce04f95..8ca260cd599 100755
--- a/tools/run_tests/artifacts/build_artifact_python.sh
+++ b/tools/run_tests/artifacts/build_artifact_python.sh
@@ -56,24 +56,43 @@ then
   done
 fi
 
-# We need to use the built grpcio-tools/grpcio to compile the health proto
+# We need to use the built grpcio-tools/grpcio to compile the protos
 # Wheels are not supported by setup_requires/dependency_links, so we
 # manually install the dependency.  Note we should only do this if we
 # are in a docker image or in a virtualenv.
+#
+# Please note that since the packages built inside this code path
+# are pure Python, only one package needs to be distributed on PyPI
+# for all platforms, so it is fine that they are only built on one
+# platform, i.e. Linux.
 if [ "$GRPC_BUILD_GRPCIO_TOOLS_DEPENDENTS" != "" ]
 then
   ${PIP} install -rrequirements.txt
   ${PIP} install grpcio --no-index --find-links "file://$ARTIFACT_DIR/"
   ${PIP} install grpcio-tools --no-index --find-links "file://$ARTIFACT_DIR/"
 
+  # preprocess health.proto and generate the required pb2 and pb2_grpc
+  # files for grpcio_health_checking package
+  HEALTH_PROTO="src/proto/grpc/health/v1/health.proto"
+  HEALTH_PB2_DIR="src/python/grpcio_health_checking/grpc_health/v1"
+  ${PYTHON} -m grpc_tools.protoc "${HEALTH_PROTO}" \
+    "-I$(dirname "${HEALTH_PROTO}")" \
+    "--python_out=${HEALTH_PB2_DIR}" \
+    "--grpc_python_out=${HEALTH_PB2_DIR}"
   # Build gRPC health-checking source distribution
-  ${SETARCH_CMD} ${PYTHON} src/python/grpcio_health_checking/setup.py \
-      preprocess build_package_protos sdist
+  ${SETARCH_CMD} ${PYTHON} src/python/grpcio_health_checking/setup.py sdist
   cp -r src/python/grpcio_health_checking/dist/* "$ARTIFACT_DIR"
 
+  # preprocess reflection.proto and generate the required pb2 and pb2_grpc
+  # files for grpcio_reflection package
+  REFLECTION_PROTO="src/proto/grpc/reflection/v1alpha/reflection.proto"
+  REFLECTION_PB2_DIR="src/python/grpcio_reflection/grpc_reflection/v1alpha"
+  ${PYTHON} -m grpc_tools.protoc "${REFLECTION_PROTO}" \
+    "-I$(dirname "${REFLECTION_PROTO}")" \
+    "--python_out=${REFLECTION_PB2_DIR}" \
+    "--grpc_python_out=${REFLECTION_PB2_DIR}"
   # Build gRPC reflection source distribution
-  ${SETARCH_CMD} ${PYTHON} src/python/grpcio_reflection/setup.py \
-      preprocess build_package_protos sdist
+  ${SETARCH_CMD} ${PYTHON} src/python/grpcio_reflection/setup.py sdist
   cp -r src/python/grpcio_reflection/dist/* "$ARTIFACT_DIR"
 fi
 
diff --git a/tools/run_tests/helper_scripts/build_python.sh b/tools/run_tests/helper_scripts/build_python.sh
index e3620821f3d..9829aa4a0a8 100755
--- a/tools/run_tests/helper_scripts/build_python.sh
+++ b/tools/run_tests/helper_scripts/build_python.sh
@@ -145,11 +145,21 @@ VENV_PYTHON=`script_realpath "$VENV/$VENV_RELATIVE_PYTHON"`
 # pip-installs the directory specified. Used because on MSYS the vanilla Windows
 # Python gets confused when parsing paths.
 pip_install_dir() {
-  PWD=`pwd`
-  cd $1
+  PWD="$(pwd)"
+  cd "$1"
   ($VENV_PYTHON setup.py build_ext -c $TOOLCHAIN || true)
   $VENV_PYTHON -m pip install --no-deps .
-  cd $PWD
+  cd "$PWD"
+}
+
+# compiles proto files to pb2.py and pb2_grpc.py
+# usage: proto_to_pb2 proto_file package_root target_dir_relative_to_package
+proto_to_pb2() {
+  PWD="$(pwd)"
+  cd "$2"
+  ${VENV_PYTHON} -m grpc_tools.protoc "$1" "-I$(dirname "$1")" \
+    "--python_out=$2/$3" "--grpc_python_out=$2/$3"
+  cd "$PWD"
 }
 
 $VENV_PYTHON -m pip install --upgrade pip==9.0.1
@@ -162,13 +172,13 @@ $VENV_PYTHON $ROOT/tools/distrib/python/make_grpcio_tools.py
 pip_install_dir $ROOT/tools/distrib/python/grpcio_tools
 
 # Build/install health checking
-$VENV_PYTHON $ROOT/src/python/grpcio_health_checking/setup.py preprocess
-$VENV_PYTHON $ROOT/src/python/grpcio_health_checking/setup.py build_package_protos
+proto_to_pb2 "$ROOT/src/proto/grpc/health/v1/health.proto" \
+  "$ROOT/src/python/grpcio_health_checking" "grpc_health/v1"
 pip_install_dir $ROOT/src/python/grpcio_health_checking
 
 # Build/install reflection
-$VENV_PYTHON $ROOT/src/python/grpcio_reflection/setup.py preprocess
-$VENV_PYTHON $ROOT/src/python/grpcio_reflection/setup.py build_package_protos
+proto_to_pb2 "$ROOT/src/proto/grpc/reflection/v1alpha/reflection.proto" \
+  "$ROOT/src/python/grpcio_reflection" "grpc_reflection/v1alpha"
 pip_install_dir $ROOT/src/python/grpcio_reflection
 
 # Install testing
diff --git a/tools/run_tests/helper_scripts/run_python.sh b/tools/run_tests/helper_scripts/run_python.sh
index 90f28c8ba8a..b5a34833b82 100755
--- a/tools/run_tests/helper_scripts/run_python.sh
+++ b/tools/run_tests/helper_scripts/run_python.sh
@@ -22,6 +22,22 @@ PYTHON=`realpath "${1:-py27/bin/python}"`
 
 ROOT=`pwd`
 
+# compiles proto files to pb2.py and pb2_grpc.py
+# usage: proto_to_pb2 proto_file package_root target_dir_relative_to_package
+proto_to_pb2() {
+  PWD="$(pwd)"
+  cd "$2"
+  $PYTHON -m grpc_tools.protoc "$1" "-I$(dirname "$1")" \
+    "--python_out=$2/$3" "--grpc_python_out=$2/$3"
+  cd "$PWD"
+}
+# Build health-checking and reflection protos before running the tests
+proto_to_pb2 "$ROOT/src/proto/grpc/health/v1/health.proto" \
+  "$ROOT/src/python/grpcio_health_checking" "grpc_health/v1"
+proto_to_pb2 "$ROOT/src/proto/grpc/reflection/v1alpha/reflection.proto" \
+  "$ROOT/src/python/grpcio_reflection" "grpc_reflection/v1alpha"
+
+# Install testing
 $PYTHON $ROOT/src/python/grpcio_tests/setup.py test_lite
 
 mkdir -p $ROOT/reports
