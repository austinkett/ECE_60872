diff --git a/src/node/examples/math_server.js b/src/node/examples/math_server.js
index e65cfe30027..e1bd11b5a6d 100644
--- a/src/node/examples/math_server.js
+++ b/src/node/examples/math_server.js
@@ -128,7 +128,8 @@ var server = new Server({
 });
 
 if (require.main === module) {
-  server.bind('localhost:7070').listen();
+  server.bind('0.0.0.0:7070');
+  server.listen();
 }
 
 /**
diff --git a/src/node/examples/stock.proto b/src/node/examples/stock.proto
index efe98d84ffb..2bc5c29d172 100644
--- a/src/node/examples/stock.proto
+++ b/src/node/examples/stock.proto
@@ -35,28 +35,28 @@ package examples;
 message StockRequest {
   optional string symbol = 1;
   optional int32 num_trades_to_watch = 2 [default=0];
-};
+}
 
 message StockReply {
   optional float price = 1;
   optional string symbol = 2;
-};
+}
 
 
 // Interface exported by the server
 service Stock {
   // Simple blocking RPC
   rpc GetLastTradePrice(StockRequest) returns (StockReply) {
-  };
+  }
   // Bidirectional streaming RPC
   rpc GetLastTradePriceMultiple(stream StockRequest) returns
     (stream StockReply) {
-  };
+  }
   // Unidirectional server-to-client streaming RPC
   rpc WatchFutureTrades(StockRequest) returns (stream StockReply) {
-  };
+  }
   // Unidirectional client-to-server streaming RPC
   rpc GetHighestTradePrice(stream StockRequest) returns (StockReply) {
-  };
+  }
 
-};
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/src/node/examples/stock_server.js b/src/node/examples/stock_server.js
index c188181b779..07cea2ce5fa 100644
--- a/src/node/examples/stock_server.js
+++ b/src/node/examples/stock_server.js
@@ -35,7 +35,7 @@ var _ = require('underscore');
 var grpc = require('..');
 var examples = grpc.load(__dirname + '/stock.proto').examples;
 
-var StockServer = grpc.makeServerConstructor([examples.Stock.service]);
+var StockServer = grpc.buildServer([examples.Stock.service]);
 
 function getLastTradePrice(call, callback) {
   callback(null, {price: 88});
@@ -80,4 +80,9 @@ var stockServer = new StockServer({
   }
 });
 
+if (require.main === module) {
+  stockServer.bind('0.0.0.0:8080');
+  stockServer.listen();
+}
+
 exports.module = stockServer;
