diff --git a/include/grpcpp/impl/codegen/async_stream.h b/include/grpcpp/impl/codegen/async_stream.h
index bfb2df4f232..ee5d32c8f2b 100644
--- a/include/grpcpp/impl/codegen/async_stream.h
+++ b/include/grpcpp/impl/codegen/async_stream.h
@@ -186,7 +186,7 @@ class ClientAsyncReaderFactory {
                                       ClientContext* context, const W& request,
                                       bool start, void* tag) {
     ::grpc::internal::Call call = channel->CreateCall(method, context, cq);
-    return new (g_core_codegen_interface->grpc_call_arena_alloc(
+    return new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(ClientAsyncReader<R>)))
         ClientAsyncReader<R>(call, context, request, start, tag);
   }
@@ -334,7 +334,7 @@ class ClientAsyncWriterFactory {
                                       ClientContext* context, R* response,
                                       bool start, void* tag) {
     ::grpc::internal::Call call = channel->CreateCall(method, context, cq);
-    return new (g_core_codegen_interface->grpc_call_arena_alloc(
+    return new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(ClientAsyncWriter<W>)))
         ClientAsyncWriter<W>(call, context, response, start, tag);
   }
@@ -499,7 +499,7 @@ class ClientAsyncReaderWriterFactory {
       bool start, void* tag) {
     ::grpc::internal::Call call = channel->CreateCall(method, context, cq);
 
-    return new (g_core_codegen_interface->grpc_call_arena_alloc(
+    return new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(ClientAsyncReaderWriter<W, R>)))
         ClientAsyncReaderWriter<W, R>(call, context, start, tag);
   }
diff --git a/include/grpcpp/impl/codegen/async_unary_call.h b/include/grpcpp/impl/codegen/async_unary_call.h
index 89dcb124189..7adb2091d1e 100644
--- a/include/grpcpp/impl/codegen/async_unary_call.h
+++ b/include/grpcpp/impl/codegen/async_unary_call.h
@@ -26,11 +26,11 @@
 #include <grpcpp/impl/codegen/server_context.h>
 #include <grpcpp/impl/codegen/service_type.h>
 #include <grpcpp/impl/codegen/status.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 namespace grpc {
 
 class CompletionQueue;
-extern CoreCodegenInterface* g_core_codegen_interface;
 
 /// An interface relevant for async client side unary RPCs (which send
 /// one request message to a server and receive one response message).
@@ -85,7 +85,7 @@ class ClientAsyncResponseReaderFactory {
       const ::grpc::internal::RpcMethod& method, ClientContext* context,
       const W& request, bool start) {
     ::grpc::internal::Call call = channel->CreateCall(method, context, cq);
-    return new (g_core_codegen_interface->grpc_call_arena_alloc(
+    return new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(ClientAsyncResponseReader<R>)))
         ClientAsyncResponseReader<R>(call, context, request, start);
   }
diff --git a/include/grpcpp/impl/codegen/byte_buffer.h b/include/grpcpp/impl/codegen/byte_buffer.h
index abba5549b86..3be0ef0cea5 100644
--- a/include/grpcpp/impl/codegen/byte_buffer.h
+++ b/include/grpcpp/impl/codegen/byte_buffer.h
@@ -86,7 +86,7 @@ class ByteBuffer final {
     // than its advertised side effect of increasing the reference count of the
     // slices it processes, and such an increase does not affect the semantics
     // seen by the caller of this constructor.
-    buffer_ = g_core_codegen_interface->grpc_raw_byte_buffer_create(
+    buffer_ = get_g_core_codegen_interface()->grpc_raw_byte_buffer_create(
         reinterpret_cast<grpc_slice*>(const_cast<Slice*>(slices)), nslices);
   }
 
@@ -96,7 +96,7 @@ class ByteBuffer final {
 
   ~ByteBuffer() {
     if (buffer_) {
-      g_core_codegen_interface->grpc_byte_buffer_destroy(buffer_);
+      get_g_core_codegen_interface()->grpc_byte_buffer_destroy(buffer_);
     }
   }
 
@@ -108,7 +108,7 @@ class ByteBuffer final {
   /// Remove all data.
   void Clear() {
     if (buffer_) {
-      g_core_codegen_interface->grpc_byte_buffer_destroy(buffer_);
+      get_g_core_codegen_interface()->grpc_byte_buffer_destroy(buffer_);
       buffer_ = nullptr;
     }
   }
@@ -117,7 +117,7 @@ class ByteBuffer final {
   /// buffer so that we have our own owned version of it.
   /// bbuf.Duplicate(); is equivalent to bbuf=bbuf; but is actually readable
   void Duplicate() {
-    buffer_ = g_core_codegen_interface->grpc_byte_buffer_copy(buffer_);
+    buffer_ = get_g_core_codegen_interface()->grpc_byte_buffer_copy(buffer_);
   }
 
   /// Forget underlying byte buffer without destroying
@@ -128,7 +128,7 @@ class ByteBuffer final {
   size_t Length() const {
     return buffer_ == nullptr
                ? 0
-               : g_core_codegen_interface->grpc_byte_buffer_length(buffer_);
+               : get_g_core_codegen_interface()->grpc_byte_buffer_length(buffer_);
   }
 
   /// Swap the state of *this and *other.
diff --git a/include/grpcpp/impl/codegen/call_op_set.h b/include/grpcpp/impl/codegen/call_op_set.h
index b4c34a01c9a..9ac0fc76385 100644
--- a/include/grpcpp/impl/codegen/call_op_set.h
+++ b/include/grpcpp/impl/codegen/call_op_set.h
@@ -40,6 +40,7 @@
 #include <grpcpp/impl/codegen/serialization_traits.h>
 #include <grpcpp/impl/codegen/slice.h>
 #include <grpcpp/impl/codegen/string_ref.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 #include <grpc/impl/codegen/atm.h>
 #include <grpc/impl/codegen/compression_types.h>
@@ -48,7 +49,6 @@
 namespace grpc {
 
 class CompletionQueue;
-extern CoreCodegenInterface* g_core_codegen_interface;
 
 namespace internal {
 class Call;
@@ -64,7 +64,7 @@ inline grpc_metadata* FillMetadataArray(
     return nullptr;
   }
   grpc_metadata* metadata_array =
-      (grpc_metadata*)(g_core_codegen_interface->gpr_malloc(
+      (grpc_metadata*)(get_g_core_codegen_interface()->gpr_malloc(
           (*metadata_count) * sizeof(grpc_metadata)));
   size_t i = 0;
   for (auto iter = metadata.cbegin(); iter != metadata.cend(); ++iter, ++i) {
@@ -73,7 +73,7 @@ inline grpc_metadata* FillMetadataArray(
   }
   if (!optional_error_details.empty()) {
     metadata_array[i].key =
-        g_core_codegen_interface->grpc_slice_from_static_buffer(
+        get_g_core_codegen_interface()->grpc_slice_from_static_buffer(
             kBinaryErrorDetailsKey, sizeof(kBinaryErrorDetailsKey) - 1);
     metadata_array[i].value = SliceReferencingString(optional_error_details);
   }
@@ -259,7 +259,7 @@ class CallOpSendInitialMetadata {
   }
   void FinishOp(bool* status) {
     if (!send_ || hijacked_) return;
-    g_core_codegen_interface->gpr_free(initial_metadata_);
+    get_g_core_codegen_interface()->gpr_free(initial_metadata_);
     send_ = false;
   }
 
@@ -594,7 +594,7 @@ class CallOpServerSendStatus {
 
   void FinishOp(bool* status) {
     if (!send_status_available_ || hijacked_) return;
-    g_core_codegen_interface->gpr_free(trailing_metadata_);
+    get_g_core_codegen_interface()->gpr_free(trailing_metadata_);
     send_status_available_ = false;
   }
 
@@ -684,7 +684,7 @@ class CallOpClientRecvStatus {
     client_context_ = context;
     metadata_map_ = &client_context_->trailing_metadata_;
     recv_status_ = status;
-    error_message_ = g_core_codegen_interface->grpc_empty_slice();
+    error_message_ = get_g_core_codegen_interface()->grpc_empty_slice();
   }
 
  protected:
@@ -712,9 +712,9 @@ class CallOpClientRecvStatus {
                binary_error_details);
     client_context_->set_debug_error_string(
         debug_error_string_ != nullptr ? debug_error_string_ : "");
-    g_core_codegen_interface->grpc_slice_unref(error_message_);
+    get_g_core_codegen_interface()->grpc_slice_unref(error_message_);
     if (debug_error_string_ != nullptr) {
-      g_core_codegen_interface->gpr_free((void*)debug_error_string_);
+      get_g_core_codegen_interface()->gpr_free((void*)debug_error_string_);
     }
   }
 
@@ -791,7 +791,7 @@ class CallOpSet : public CallOpSetInterface,
 
   void FillOps(Call* call) override {
     done_intercepting_ = false;
-    g_core_codegen_interface->grpc_call_ref(call->call());
+    get_g_core_codegen_interface()->grpc_call_ref(call->call());
     call_ =
         *call;  // It's fine to create a copy of call since it's just pointers
 
@@ -810,7 +810,7 @@ class CallOpSet : public CallOpSetInterface,
       // run
       *tag = return_tag_;
       *status = saved_status_;
-      g_core_codegen_interface->grpc_call_unref(call_.call());
+      get_g_core_codegen_interface()->grpc_call_unref(call_.call());
       return true;
     }
 
@@ -823,7 +823,7 @@ class CallOpSet : public CallOpSetInterface,
     saved_status_ = *status;
     if (RunInterceptorsPostRecv()) {
       *tag = return_tag_;
-      g_core_codegen_interface->grpc_call_unref(call_.call());
+      get_g_core_codegen_interface()->grpc_call_unref(call_.call());
       return true;
     }
     // Interceptors are going to be run, so we can't return the tag just yet.
@@ -864,7 +864,7 @@ class CallOpSet : public CallOpSetInterface,
     this->Op5::AddOp(ops, &nops);
     this->Op6::AddOp(ops, &nops);
     GPR_CODEGEN_ASSERT(GRPC_CALL_OK ==
-                       g_core_codegen_interface->grpc_call_start_batch(
+                       get_g_core_codegen_interface()->grpc_call_start_batch(
                            call_.call(), ops, nops, core_cq_tag(), nullptr));
   }
 
@@ -873,7 +873,7 @@ class CallOpSet : public CallOpSetInterface,
   void ContinueFinalizeResultAfterInterception() override {
     done_intercepting_ = true;
     GPR_CODEGEN_ASSERT(GRPC_CALL_OK ==
-                       g_core_codegen_interface->grpc_call_start_batch(
+                       get_g_core_codegen_interface()->grpc_call_start_batch(
                            call_.call(), nullptr, 0, core_cq_tag(), nullptr));
   }
 
diff --git a/include/grpcpp/impl/codegen/callback_common.h b/include/grpcpp/impl/codegen/callback_common.h
index 51367cf550c..9a205a29b4a 100644
--- a/include/grpcpp/impl/codegen/callback_common.h
+++ b/include/grpcpp/impl/codegen/callback_common.h
@@ -67,7 +67,7 @@ class CallbackWithStatusTag
   CallbackWithStatusTag(grpc_call* call, std::function<void(Status)> f,
                         CompletionQueueTag* ops)
       : call_(call), func_(std::move(f)), ops_(ops) {
-    g_core_codegen_interface->grpc_call_ref(call);
+    get_g_core_codegen_interface()->grpc_call_ref(call);
     functor_run = &CallbackWithStatusTag::StaticRun;
   }
   ~CallbackWithStatusTag() {}
@@ -106,7 +106,7 @@ class CallbackWithStatusTag
     func_ = nullptr;     // reset to clear this out for sure
     status_ = Status();  // reset to clear this out for sure
     CatchingCallback(std::move(func), std::move(status));
-    g_core_codegen_interface->grpc_call_unref(call_);
+    get_g_core_codegen_interface->grpc_call_unref(call_);
   }
 };
 
@@ -148,7 +148,7 @@ class CallbackWithSuccessTag
     call_ = call;
     func_ = std::move(f);
     ops_ = ops;
-    g_core_codegen_interface->grpc_call_ref(call);
+    get_g_core_codegen_interface()->grpc_call_ref(call);
     functor_run = &CallbackWithSuccessTag::StaticRun;
   }
 
@@ -187,7 +187,6 @@ class CallbackWithSuccessTag
     // callback, just as it silences a CQ tag in the async cases
     bool do_callback = ops_->FinalizeResult(&ignored, &new_ok);
     GPR_CODEGEN_ASSERT(ignored == ops_);
-
     if (do_callback) {
       CatchingCallback(func_, ok);
     }
diff --git a/include/grpcpp/impl/codegen/client_callback.h b/include/grpcpp/impl/codegen/client_callback.h
index 4baa819091c..3a050c1e065 100644
--- a/include/grpcpp/impl/codegen/client_callback.h
+++ b/include/grpcpp/impl/codegen/client_callback.h
@@ -64,10 +64,10 @@ class CallbackUnaryCallImpl {
                   CallOpRecvInitialMetadata, CallOpRecvMessage<OutputMessage>,
                   CallOpClientSendClose, CallOpClientRecvStatus>;
 
-    auto* ops = new (g_core_codegen_interface->grpc_call_arena_alloc(
+    auto* ops = new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(FullCallOpSet))) FullCallOpSet;
 
-    auto* tag = new (g_core_codegen_interface->grpc_call_arena_alloc(
+    auto* tag = new (get_g_core_codegen_interface()->grpc_call_arena_alloc(
         call.call(), sizeof(CallbackWithStatusTag)))
         CallbackWithStatusTag(call.call(), on_completion, ops);
 
diff --git a/include/grpcpp/impl/codegen/codegen_init.h b/include/grpcpp/impl/codegen/codegen_init.h
new file mode 100644
index 00000000000..22e9800a441
--- /dev/null
+++ b/include/grpcpp/impl/codegen/codegen_init.h
@@ -0,0 +1,17 @@
+#ifndef GRPCPP_IMPL_CODEGEN_INIT_H
+#define GRPCPP_IMPL_CODEGEN_INIT_H
+
+namespace grpc {
+    // Predefine interfaces
+    class CoreCodegenInterface;
+    class GrpcLibraryInterface;
+    
+    // Define getters and setters for interfaces
+    CoreCodegenInterface* get_g_core_codegen_interface();
+    GrpcLibraryInterface* get_g_glip();
+    
+    void init_g_core_codegen_interface(CoreCodegenInterface*);
+    void init_g_glip(GrpcLibraryInterface*);
+}
+
+#endif // GRPCPP_IMPL_CODEGEN_INIT_H
\ No newline at end of file
diff --git a/include/grpcpp/impl/codegen/completion_queue.h b/include/grpcpp/impl/codegen/completion_queue.h
index d603c7c7009..afdc4c7c9ce 100644
--- a/include/grpcpp/impl/codegen/completion_queue.h
+++ b/include/grpcpp/impl/codegen/completion_queue.h
@@ -38,6 +38,7 @@
 #include <grpcpp/impl/codegen/grpc_library.h>
 #include <grpcpp/impl/codegen/status.h>
 #include <grpcpp/impl/codegen/time.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 struct grpc_completion_queue;
 
@@ -86,8 +87,6 @@ template <class InputMessage, class OutputMessage>
 class BlockingUnaryCallImpl;
 }  // namespace internal
 
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 /// A thin wrapper around \ref grpc_completion_queue (see \ref
 /// src/core/lib/surface/completion_queue.h).
 /// See \ref doc/cpp/perf_notes.md for notes on best practices for high
@@ -108,7 +107,7 @@ class CompletionQueue : private GrpcLibraryCodegen {
 
   /// Destructor. Destroys the owned wrapped completion queue / instance.
   ~CompletionQueue() {
-    g_core_codegen_interface->grpc_completion_queue_destroy(cq_);
+    get_g_core_codegen_interface()->grpc_completion_queue_destroy(cq_);
   }
 
   /// Tri-state return for AsyncNext: SHUTDOWN, GOT_EVENT, TIMEOUT.
@@ -169,7 +168,7 @@ class CompletionQueue : private GrpcLibraryCodegen {
   ///         shut down.
   bool Next(void** tag, bool* ok) {
     return (AsyncNextInternal(tag, ok,
-                              g_core_codegen_interface->gpr_inf_future(
+                              get_g_core_codegen_interface()->gpr_inf_future(
                                   GPR_CLOCK_REALTIME)) != SHUTDOWN);
   }
 
@@ -237,8 +236,8 @@ class CompletionQueue : private GrpcLibraryCodegen {
  protected:
   /// Private constructor of CompletionQueue only visible to friend classes
   CompletionQueue(const grpc_completion_queue_attributes& attributes) {
-    cq_ = g_core_codegen_interface->grpc_completion_queue_create(
-        g_core_codegen_interface->grpc_completion_queue_factory_lookup(
+    cq_ = get_g_core_codegen_interface()->grpc_completion_queue_create(
+        get_g_core_codegen_interface()->grpc_completion_queue_factory_lookup(
             &attributes),
         &attributes, NULL);
     InitialAvalanching();  // reserve this for the future shutdown
@@ -299,9 +298,9 @@ class CompletionQueue : private GrpcLibraryCodegen {
   /// \warning Must not be mixed with calls to \a Next.
   bool Pluck(internal::CompletionQueueTag* tag) {
     auto deadline =
-        g_core_codegen_interface->gpr_inf_future(GPR_CLOCK_REALTIME);
+        get_g_core_codegen_interface()->gpr_inf_future(GPR_CLOCK_REALTIME);
     while (true) {
-      auto ev = g_core_codegen_interface->grpc_completion_queue_pluck(
+      auto ev = get_g_core_codegen_interface()->grpc_completion_queue_pluck(
           cq_, tag, deadline, nullptr);
       bool ok = ev.success != 0;
       void* ignored = tag;
@@ -322,8 +321,8 @@ class CompletionQueue : private GrpcLibraryCodegen {
   /// timeout. i.e:
   ///      TryPluck(tag, gpr_time_0(GPR_CLOCK_REALTIME))
   void TryPluck(internal::CompletionQueueTag* tag) {
-    auto deadline = g_core_codegen_interface->gpr_time_0(GPR_CLOCK_REALTIME);
-    auto ev = g_core_codegen_interface->grpc_completion_queue_pluck(
+    auto deadline = get_g_core_codegen_interface()->gpr_time_0(GPR_CLOCK_REALTIME);
+    auto ev = get_g_core_codegen_interface()->grpc_completion_queue_pluck(
         cq_, tag, deadline, nullptr);
     if (ev.type == GRPC_QUEUE_TIMEOUT) return;
     bool ok = ev.success != 0;
@@ -338,7 +337,7 @@ class CompletionQueue : private GrpcLibraryCodegen {
   /// This exects tag->FinalizeResult (if called) to return 'false' i.e expects
   /// that the tag is internal not something that is returned to the user.
   void TryPluck(internal::CompletionQueueTag* tag, gpr_timespec deadline) {
-    auto ev = g_core_codegen_interface->grpc_completion_queue_pluck(
+    auto ev = get_g_core_codegen_interface()->grpc_completion_queue_pluck(
         cq_, tag, deadline, nullptr);
     if (ev.type == GRPC_QUEUE_TIMEOUT || ev.type == GRPC_QUEUE_SHUTDOWN) {
       return;
diff --git a/include/grpcpp/impl/codegen/core_codegen_interface.h b/include/grpcpp/impl/codegen/core_codegen_interface.h
index 20a5b3300c4..6778dd06036 100644
--- a/include/grpcpp/impl/codegen/core_codegen_interface.h
+++ b/include/grpcpp/impl/codegen/core_codegen_interface.h
@@ -19,6 +19,7 @@
 #ifndef GRPCPP_IMPL_CODEGEN_CORE_CODEGEN_INTERFACE_H
 #define GRPCPP_IMPL_CODEGEN_CORE_CODEGEN_INTERFACE_H
 
+#include <grpcpp/impl/codegen/codegen_init.h>
 #include <grpc/impl/codegen/byte_buffer_reader.h>
 #include <grpc/impl/codegen/grpc_types.h>
 #include <grpc/impl/codegen/sync.h>
@@ -135,13 +136,11 @@ class CoreCodegenInterface {
   virtual gpr_timespec gpr_time_0(gpr_clock_type type) = 0;
 };
 
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 /// Codegen specific version of \a GPR_ASSERT.
 #define GPR_CODEGEN_ASSERT(x)                                              \
   do {                                                                     \
     if (!(x)) {                                                            \
-      grpc::g_core_codegen_interface->assert_fail(#x, __FILE__, __LINE__); \
+      grpc::get_g_core_codegen_interface()->assert_fail(#x, __FILE__, __LINE__); \
     }                                                                      \
   } while (0)
 
diff --git a/include/grpcpp/impl/codegen/grpc_library.h b/include/grpcpp/impl/codegen/grpc_library.h
index 17c904d71a1..6c8f37e3b23 100644
--- a/include/grpcpp/impl/codegen/grpc_library.h
+++ b/include/grpcpp/impl/codegen/grpc_library.h
@@ -20,6 +20,7 @@
 #define GRPCPP_IMPL_CODEGEN_GRPC_LIBRARY_H
 
 #include <grpcpp/impl/codegen/core_codegen_interface.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 namespace grpc {
 
@@ -30,28 +31,24 @@ class GrpcLibraryInterface {
   virtual void shutdown() = 0;
 };
 
-/// Initialized by \a grpc::GrpcLibraryInitializer from
-/// <grpcpp/impl/grpc_library.h>
-extern GrpcLibraryInterface* g_glip;
-
 /// Classes that require gRPC to be initialized should inherit from this class.
 class GrpcLibraryCodegen {
  public:
   GrpcLibraryCodegen(bool call_grpc_init = true) : grpc_init_called_(false) {
     if (call_grpc_init) {
-      GPR_CODEGEN_ASSERT(g_glip &&
+      GPR_CODEGEN_ASSERT(get_g_glip() &&
                          "gRPC library not initialized. See "
                          "grpc::internal::GrpcLibraryInitializer.");
-      g_glip->init();
+      get_g_glip()->init();
       grpc_init_called_ = true;
     }
   }
   virtual ~GrpcLibraryCodegen() {
     if (grpc_init_called_) {
-      GPR_CODEGEN_ASSERT(g_glip &&
+      GPR_CODEGEN_ASSERT(get_g_glip() &&
                          "gRPC library not initialized. See "
                          "grpc::internal::GrpcLibraryInitializer.");
-      g_glip->shutdown();
+      get_g_glip()->shutdown();
     }
   }
 
diff --git a/include/grpcpp/impl/codegen/method_handler_impl.h b/include/grpcpp/impl/codegen/method_handler_impl.h
index dd53f975f68..f0938b0662a 100644
--- a/include/grpcpp/impl/codegen/method_handler_impl.h
+++ b/include/grpcpp/impl/codegen/method_handler_impl.h
@@ -331,7 +331,7 @@ class ErrorMethodHandler : public MethodHandler {
                     Status* status) final {
     // We have to destroy any request payload
     if (req != nullptr) {
-      g_core_codegen_interface->grpc_byte_buffer_destroy(req);
+      get_g_core_codegen_interface()->grpc_byte_buffer_destroy(req);
     }
     return nullptr;
   }
diff --git a/include/grpcpp/impl/codegen/proto_buffer_reader.h b/include/grpcpp/impl/codegen/proto_buffer_reader.h
index 9acae476b11..2a30d842b37 100644
--- a/include/grpcpp/impl/codegen/proto_buffer_reader.h
+++ b/include/grpcpp/impl/codegen/proto_buffer_reader.h
@@ -29,14 +29,12 @@
 #include <grpcpp/impl/codegen/core_codegen_interface.h>
 #include <grpcpp/impl/codegen/serialization_traits.h>
 #include <grpcpp/impl/codegen/status.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 /// This header provides an object that reads bytes directly from a
 /// grpc::ByteBuffer, via the ZeroCopyInputStream interface
 
 namespace grpc {
-
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 /// This is a specialization of the protobuf class ZeroCopyInputStream
 /// The principle is to get one chunk of data at a time from the proto layer,
 /// with options to backup (re-see some bytes) or skip (forward past some bytes)
@@ -52,7 +50,7 @@ class ProtoBufferReader : public ::grpc::protobuf::io::ZeroCopyInputStream {
     /// Implemented through a grpc_byte_buffer_reader which iterates
     /// over the slices that make up a byte buffer
     if (!buffer->Valid() ||
-        !g_core_codegen_interface->grpc_byte_buffer_reader_init(
+        !get_g_core_codegen_interface()->grpc_byte_buffer_reader_init(
             &reader_, buffer->c_buffer())) {
       status_ = Status(StatusCode::INTERNAL,
                        "Couldn't initialize byte buffer reader");
@@ -61,7 +59,7 @@ class ProtoBufferReader : public ::grpc::protobuf::io::ZeroCopyInputStream {
 
   ~ProtoBufferReader() {
     if (status_.ok()) {
-      g_core_codegen_interface->grpc_byte_buffer_reader_destroy(&reader_);
+      get_g_core_codegen_interface()->grpc_byte_buffer_reader_destroy(&reader_);
     }
   }
 
@@ -81,11 +79,11 @@ class ProtoBufferReader : public ::grpc::protobuf::io::ZeroCopyInputStream {
       return true;
     }
     /// Otherwise get the next slice from the byte buffer reader
-    if (!g_core_codegen_interface->grpc_byte_buffer_reader_next(&reader_,
+    if (!get_g_core_codegen_interface()->grpc_byte_buffer_reader_next(&reader_,
                                                                 &slice_)) {
       return false;
     }
-    g_core_codegen_interface->grpc_slice_unref(slice_);
+    get_g_core_codegen_interface()->grpc_slice_unref(slice_);
     *data = GRPC_SLICE_START_PTR(slice_);
     // On win x64, int is only 32bit
     GPR_CODEGEN_ASSERT(GRPC_SLICE_LENGTH(slice_) <= INT_MAX);
diff --git a/include/grpcpp/impl/codegen/proto_buffer_writer.h b/include/grpcpp/impl/codegen/proto_buffer_writer.h
index fdff4676b04..4497316c7a8 100644
--- a/include/grpcpp/impl/codegen/proto_buffer_writer.h
+++ b/include/grpcpp/impl/codegen/proto_buffer_writer.h
@@ -28,14 +28,12 @@
 #include <grpcpp/impl/codegen/core_codegen_interface.h>
 #include <grpcpp/impl/codegen/serialization_traits.h>
 #include <grpcpp/impl/codegen/status.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 /// This header provides an object that writes bytes directly into a
 /// grpc::ByteBuffer, via the ZeroCopyOutputStream interface
 
 namespace grpc {
-
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 // Forward declaration for testing use only
 namespace internal {
 class ProtoBufferWriterPeer;
@@ -65,14 +63,14 @@ class ProtoBufferWriter : public ::grpc::protobuf::io::ZeroCopyOutputStream {
     GPR_CODEGEN_ASSERT(!byte_buffer->Valid());
     /// Create an empty raw byte buffer and look at its underlying slice buffer
     grpc_byte_buffer* bp =
-        g_core_codegen_interface->grpc_raw_byte_buffer_create(NULL, 0);
+        get_g_core_codegen_interface()->grpc_raw_byte_buffer_create(NULL, 0);
     byte_buffer->set_buffer(bp);
     slice_buffer_ = &bp->data.raw.slice_buffer;
   }
 
   ~ProtoBufferWriter() {
     if (have_backup_) {
-      g_core_codegen_interface->grpc_slice_unref(backup_slice_);
+      get_g_core_codegen_interface()->grpc_slice_unref(backup_slice_);
     }
   }
 
@@ -99,7 +97,7 @@ class ProtoBufferWriter : public ::grpc::protobuf::io::ZeroCopyOutputStream {
       // But make sure the allocated slice is not inlined.
       size_t allocate_length =
           remain > static_cast<size_t>(block_size_) ? block_size_ : remain;
-      slice_ = g_core_codegen_interface->grpc_slice_malloc(
+      slice_ = get_g_core_codegen_interface()->grpc_slice_malloc(
           allocate_length > GRPC_SLICE_INLINED_SIZE
               ? allocate_length
               : GRPC_SLICE_INLINED_SIZE + 1);
@@ -108,7 +106,7 @@ class ProtoBufferWriter : public ::grpc::protobuf::io::ZeroCopyOutputStream {
     // On win x64, int is only 32bit
     GPR_CODEGEN_ASSERT(GRPC_SLICE_LENGTH(slice_) <= INT_MAX);
     byte_count_ += * size = (int)GRPC_SLICE_LENGTH(slice_);
-    g_core_codegen_interface->grpc_slice_buffer_add(slice_buffer_, slice_);
+    get_g_core_codegen_interface()->grpc_slice_buffer_add(slice_buffer_, slice_);
     return true;
   }
 
@@ -121,13 +119,13 @@ class ProtoBufferWriter : public ::grpc::protobuf::io::ZeroCopyOutputStream {
     /// 3. Add the needed part back to the slice buffer
     /// 4. Mark that we still have the remaining part (for later use/unref)
     GPR_CODEGEN_ASSERT(count <= static_cast<int>(GRPC_SLICE_LENGTH(slice_)));
-    g_core_codegen_interface->grpc_slice_buffer_pop(slice_buffer_);
+    get_g_core_codegen_interface()->grpc_slice_buffer_pop(slice_buffer_);
     if ((size_t)count == GRPC_SLICE_LENGTH(slice_)) {
       backup_slice_ = slice_;
     } else {
-      backup_slice_ = g_core_codegen_interface->grpc_slice_split_tail(
+      backup_slice_ = get_g_core_codegen_interface()->grpc_slice_split_tail(
           &slice_, GRPC_SLICE_LENGTH(slice_) - count);
-      g_core_codegen_interface->grpc_slice_buffer_add(slice_buffer_, slice_);
+      get_g_core_codegen_interface()->grpc_slice_buffer_add(slice_buffer_, slice_);
     }
     // It's dangerous to keep an inlined grpc_slice as the backup slice, since
     // on a following Next() call, a reference will be returned to this slice
diff --git a/include/grpcpp/impl/codegen/proto_utils.h b/include/grpcpp/impl/codegen/proto_utils.h
index d9db6de05c0..c28fcd9e60c 100644
--- a/include/grpcpp/impl/codegen/proto_utils.h
+++ b/include/grpcpp/impl/codegen/proto_utils.h
@@ -32,14 +32,12 @@
 #include <grpcpp/impl/codegen/serialization_traits.h>
 #include <grpcpp/impl/codegen/slice.h>
 #include <grpcpp/impl/codegen/status.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 /// This header provides serialization and deserialization between gRPC
 /// messages serialized using protobuf and the C++ objects they represent.
 
 namespace grpc {
-
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 // ProtoBufferWriter must be a subclass of ::protobuf::io::ZeroCopyOutputStream.
 template <class ProtoBufferWriter, class T>
 Status GenericSerialize(const grpc::protobuf::Message& msg, ByteBuffer* bb,
@@ -58,11 +56,11 @@ Status GenericSerialize(const grpc::protobuf::Message& msg, ByteBuffer* bb,
     ByteBuffer tmp(&slice, 1);
     bb->Swap(&tmp);
 
-    return g_core_codegen_interface->ok();
+    return get_g_core_codegen_interface()->ok();
   }
   ProtoBufferWriter writer(bb, kProtoBufferWriterMaxBufferLength, byte_size);
   return msg.SerializeToZeroCopyStream(&writer)
-             ? g_core_codegen_interface->ok()
+             ? get_g_core_codegen_interface()->ok()
              : Status(StatusCode::INTERNAL, "Failed to serialize message");
 }
 
@@ -76,7 +74,7 @@ Status GenericDeserialize(ByteBuffer* buffer, grpc::protobuf::Message* msg) {
   if (buffer == nullptr) {
     return Status(StatusCode::INTERNAL, "No payload");
   }
-  Status result = g_core_codegen_interface->ok();
+  Status result = get_g_core_codegen_interface()->ok();
   {
     ProtoBufferReader reader(buffer);
     if (!reader.status().ok()) {
diff --git a/include/grpcpp/impl/codegen/server_interface.h b/include/grpcpp/impl/codegen/server_interface.h
index 55c94f4d2fa..94e707f9360 100644
--- a/include/grpcpp/impl/codegen/server_interface.h
+++ b/include/grpcpp/impl/codegen/server_interface.h
@@ -27,6 +27,7 @@
 #include <grpcpp/impl/codegen/core_codegen_interface.h>
 #include <grpcpp/impl/codegen/rpc_service_method.h>
 #include <grpcpp/impl/codegen/server_context.h>
+#include <grpcpp/impl/codegen/codegen_init.h>
 
 namespace grpc {
 
@@ -38,8 +39,6 @@ class ServerContext;
 class ServerCredentials;
 class Service;
 
-extern CoreCodegenInterface* g_core_codegen_interface;
-
 /// Models a gRPC server.
 ///
 /// Servers are configured and started via \a grpc::ServerBuilder.
@@ -95,7 +94,7 @@ class ServerInterface : public internal::CallHook {
   /// See \a ServerBuilder::AddCompletionQueue for details.
   void Shutdown() {
     ShutdownInternal(
-        g_core_codegen_interface->gpr_inf_future(GPR_CLOCK_MONOTONIC));
+        get_g_core_codegen_interface()->gpr_inf_future(GPR_CLOCK_MONOTONIC));
   }
 
   /// Block waiting for all work to complete.
@@ -257,9 +256,9 @@ class ServerInterface : public internal::CallHook {
           // a new instance of ourselves to request another call.  We then
           // return false, which prevents the call from being returned to
           // the application.
-          g_core_codegen_interface->grpc_call_cancel_with_status(
+          get_g_core_codegen_interface()->grpc_call_cancel_with_status(
               call_, GRPC_STATUS_INTERNAL, "Unable to parse request", nullptr);
-          g_core_codegen_interface->grpc_call_unref(call_);
+          get_g_core_codegen_interface()->grpc_call_unref(call_);
           new PayloadAsyncRequest(registered_method_, server_, context_,
                                   stream_, call_cq_, notification_cq_, tag_,
                                   request_);
diff --git a/include/grpcpp/impl/codegen/slice.h b/include/grpcpp/impl/codegen/slice.h
index 8966559dc85..87fd45bb717 100644
--- a/include/grpcpp/impl/codegen/slice.h
+++ b/include/grpcpp/impl/codegen/slice.h
@@ -35,14 +35,14 @@ namespace grpc {
 class Slice final {
  public:
   /// Construct an empty slice.
-  Slice() : slice_(g_core_codegen_interface->grpc_empty_slice()) {}
+  Slice() : slice_(get_g_core_codegen_interface()->grpc_empty_slice()) {}
   /// Destructor - drops one reference.
-  ~Slice() { g_core_codegen_interface->grpc_slice_unref(slice_); }
+  ~Slice() { get_g_core_codegen_interface()->grpc_slice_unref(slice_); }
 
   enum AddRef { ADD_REF };
   /// Construct a slice from \a slice, adding a reference.
   Slice(grpc_slice slice, AddRef)
-      : slice_(g_core_codegen_interface->grpc_slice_ref(slice)) {}
+      : slice_(get_g_core_codegen_interface()->grpc_slice_ref(slice)) {}
 
   enum StealRef { STEAL_REF };
   /// Construct a slice from \a slice, stealing a reference.
@@ -50,28 +50,28 @@ class Slice final {
 
   /// Allocate a slice of specified size
   Slice(size_t len)
-      : slice_(g_core_codegen_interface->grpc_slice_malloc(len)) {}
+      : slice_(get_g_core_codegen_interface()->grpc_slice_malloc(len)) {}
 
   /// Construct a slice from a copied buffer
   Slice(const void* buf, size_t len)
-      : slice_(g_core_codegen_interface->grpc_slice_from_copied_buffer(
+      : slice_(get_g_core_codegen_interface()->grpc_slice_from_copied_buffer(
             reinterpret_cast<const char*>(buf), len)) {}
 
   /// Construct a slice from a copied string
   Slice(const grpc::string& str)
-      : slice_(g_core_codegen_interface->grpc_slice_from_copied_buffer(
+      : slice_(get_g_core_codegen_interface()->grpc_slice_from_copied_buffer(
             str.c_str(), str.length())) {}
 
   enum StaticSlice { STATIC_SLICE };
 
   /// Construct a slice from a static buffer
   Slice(const void* buf, size_t len, StaticSlice)
-      : slice_(g_core_codegen_interface->grpc_slice_from_static_buffer(
+      : slice_(get_g_core_codegen_interface()->grpc_slice_from_static_buffer(
             reinterpret_cast<const char*>(buf), len)) {}
 
   /// Copy constructor, adds a reference.
   Slice(const Slice& other)
-      : slice_(g_core_codegen_interface->grpc_slice_ref(other.slice_)) {}
+      : slice_(get_g_core_codegen_interface()->grpc_slice_ref(other.slice_)) {}
 
   /// Assignment, reference count is unchanged.
   Slice& operator=(Slice other) {
@@ -85,7 +85,7 @@ class Slice final {
   /// different (e.g., if data is part of a larger structure that must be
   /// destroyed when the data is no longer needed)
   Slice(void* buf, size_t len, void (*destroy)(void*), void* user_data)
-      : slice_(g_core_codegen_interface->grpc_slice_new_with_user_data(
+      : slice_(get_g_core_codegen_interface()->grpc_slice_new_with_user_data(
             buf, len, destroy, user_data)) {}
 
   /// Specialization of above for common case where buf == user_data
@@ -94,7 +94,7 @@ class Slice final {
 
   /// Similar to the above but has a destroy that also takes slice length
   Slice(void* buf, size_t len, void (*destroy)(void*, size_t))
-      : slice_(g_core_codegen_interface->grpc_slice_new_with_len(buf, len,
+      : slice_(get_g_core_codegen_interface()->grpc_slice_new_with_len(buf, len,
                                                                  destroy)) {}
 
   /// Byte size.
@@ -108,7 +108,7 @@ class Slice final {
 
   /// Raw C slice. Caller needs to call grpc_slice_unref when done.
   grpc_slice c_slice() const {
-    return g_core_codegen_interface->grpc_slice_ref(slice_);
+    return get_g_core_codegen_interface()->grpc_slice_ref(slice_);
   }
 
  private:
@@ -129,12 +129,12 @@ inline grpc::string StringFromCopiedSlice(grpc_slice slice) {
 }
 
 inline grpc_slice SliceReferencingString(const grpc::string& str) {
-  return g_core_codegen_interface->grpc_slice_from_static_buffer(str.data(),
+  return get_g_core_codegen_interface()->grpc_slice_from_static_buffer(str.data(),
                                                                  str.length());
 }
 
 inline grpc_slice SliceFromCopiedString(const grpc::string& str) {
-  return g_core_codegen_interface->grpc_slice_from_copied_buffer(str.data(),
+  return get_g_core_codegen_interface()->grpc_slice_from_copied_buffer(str.data(),
                                                                  str.length());
 }
 
diff --git a/include/grpcpp/impl/grpc_library.h b/include/grpcpp/impl/grpc_library.h
index d1f3ff1297b..d4b3ce3751a 100644
--- a/include/grpcpp/impl/grpc_library.h
+++ b/include/grpcpp/impl/grpc_library.h
@@ -42,12 +42,8 @@ static CoreCodegen g_core_codegen;
 class GrpcLibraryInitializer final {
  public:
   GrpcLibraryInitializer() {
-    if (grpc::g_glip == nullptr) {
-      grpc::g_glip = &g_gli;
-    }
-    if (grpc::g_core_codegen_interface == nullptr) {
-      grpc::g_core_codegen_interface = &g_core_codegen;
-    }
+    grpc::init_g_glip(&g_gli);
+    grpc::init_g_core_codegen_interface(&g_core_codegen);
   }
 
   /// A no-op method to force the linker to reference this class, which will
diff --git a/src/cpp/client/channel_cc.cc b/src/cpp/client/channel_cc.cc
index d1c55319f7c..205990df394 100644
--- a/src/cpp/client/channel_cc.cc
+++ b/src/cpp/client/channel_cc.cc
@@ -72,7 +72,7 @@ Channel::~Channel() {
 namespace {
 
 inline grpc_slice SliceFromArray(const char* arr, size_t len) {
-  return g_core_codegen_interface->grpc_slice_from_copied_buffer(arr, len);
+  return get_g_core_codegen_interface()->grpc_slice_from_copied_buffer(arr, len);
 }
 
 grpc::string GetChannelInfoField(grpc_channel* channel,
diff --git a/src/cpp/codegen/codegen_init.cc b/src/cpp/codegen/codegen_init.cc
index 684d7218b93..18e48b4fb84 100644
--- a/src/cpp/codegen/codegen_init.cc
+++ b/src/cpp/codegen/codegen_init.cc
@@ -16,6 +16,7 @@
  *
  */
 
+#include <grpcpp/impl/codegen/codegen_init.h>
 #include <grpcpp/impl/codegen/core_codegen_interface.h>
 #include <grpcpp/impl/codegen/grpc_library.h>
 
@@ -26,5 +27,26 @@
 /// the following nulled globals. These should be associated with actual
 /// as part of the instantiation of a \a grpc::GrpcLibraryInitializer variable.
 
-grpc::CoreCodegenInterface* grpc::g_core_codegen_interface;
-grpc::GrpcLibraryInterface* grpc::g_glip;
+grpc::CoreCodegenInterface* g_core_codegen_interface = nullptr;
+grpc::GrpcLibraryInterface* g_glip = nullptr;
+
+// Implement getters and setters for interfaces
+grpc::CoreCodegenInterface* grpc::get_g_core_codegen_interface() {
+    return g_core_codegen_interface;
+}
+
+grpc::GrpcLibraryInterface* grpc::get_g_glip() {
+    return g_glip;
+}
+
+void grpc::init_g_core_codegen_interface(grpc::CoreCodegenInterface* ifc_ptr) {
+    if (g_core_codegen_interface == nullptr) {
+        g_core_codegen_interface = ifc_ptr;
+    }
+}
+
+void grpc::init_g_glip(grpc::GrpcLibraryInterface* ifc_ptr) {
+    if (g_glip == nullptr) {
+        g_glip = ifc_ptr;
+    }
+}
diff --git a/src/cpp/server/server_context.cc b/src/cpp/server/server_context.cc
index 9c01f896e6c..808dc2adc53 100644
--- a/src/cpp/server/server_context.cc
+++ b/src/cpp/server/server_context.cc
@@ -125,7 +125,7 @@ class ServerContext::CompletionOp final : public internal::CallOpSetInterface {
     }
     /* Start a dummy op so that we can return the tag */
     GPR_CODEGEN_ASSERT(GRPC_CALL_OK ==
-                       g_core_codegen_interface->grpc_call_start_batch(
+                       get_g_core_codegen_interface()->grpc_call_start_batch(
                            call_.call(), nullptr, 0, this, nullptr));
   }
 
