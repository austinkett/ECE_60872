diff --git a/src/python/grpcio/grpc/_channel.py b/src/python/grpcio/grpc/_channel.py
index 232688c1ca1..f75db5d2ab6 100644
--- a/src/python/grpcio/grpc/_channel.py
+++ b/src/python/grpcio/grpc/_channel.py
@@ -13,6 +13,7 @@
 # limitations under the License.
 """Invocation-side implementation of gRPC Python."""
 
+import copy
 import functools
 import logging
 import sys
@@ -263,35 +264,38 @@ def _rpc_state_string(class_name, rpc_state):
                 rpc_state.debug_error_string)
 
 
-class _RpcError(grpc.RpcError, grpc.Call):
+class _InactiveRpcError(grpc.RpcError, grpc.Call, grpc.Future):
     """An RPC error not tied to the execution of a particular RPC.
 
+    The RPC represented by the state object must not be in-progress or
+    cancelled.
+
     Attributes:
       _state: An instance of _RPCState.
     """
 
     def __init__(self, state):
-        self._state = state
+        with state.condition:
+            self._state = _RPCState((), copy.deepcopy(state.initial_metadata),
+                                    copy.deepcopy(state.trailing_metadata),
+                                    state.code, copy.deepcopy(state.details))
+            self._state.response = copy.copy(state.response)
+            self._state.debug_error_string = copy.copy(state.debug_error_string)
 
     def initial_metadata(self):
-        with self._state.condition:
-            return self._state.initial_metadata
+        return self._state.initial_metadata
 
     def trailing_metadata(self):
-        with self._state.condition:
-            return self._state.trailing_metadata
+        return self._state.trailing_metadata
 
     def code(self):
-        with self._state.condition:
-            return self._state.code
+        return self._state.code
 
     def details(self):
-        with self._state.condition:
-            return _common.decode(self._state.details)
+        return _common.decode(self._state.details)
 
     def debug_error_string(self):
-        with self._state.condition:
-            return _common.decode(self._state.debug_error_string)
+        return _common.decode(self._state.debug_error_string)
 
     def _repr(self):
         return _rpc_state_string(self.__class__.__name__, self._state)
@@ -302,6 +306,41 @@ def __repr__(self):
     def __str__(self):
         return self._repr()
 
+    def cancel(self):
+        """See grpc.Future.cancel."""
+        return False
+
+    def cancelled(self):
+        """See grpc.Future.cancelled."""
+        return False
+
+    def running(self):
+        """See grpc.Future.running."""
+        return False
+
+    def done(self):
+        """See grpc.Future.done."""
+        return True
+
+    def result(self, timeout=None):  # pylint: disable=unused-argument
+        """See grpc.Future.result."""
+        raise self
+
+    def exception(self, timeout=None):  # pylint: disable=unused-argument
+        """See grpc.Future.exception."""
+        return self
+
+    def traceback(self, timeout=None):  # pylint: disable=unused-argument
+        """See grpc.Future.traceback."""
+        try:
+            raise self
+        except grpc.RpcError:
+            return sys.exc_info()[2]
+
+    def add_done_callback(self, fn, timeout=None):  # pylint: disable=unused-argument
+        """See grpc.Future.add_done_callback."""
+        fn(self)
+
 
 class _Rendezvous(grpc.RpcError, grpc.RpcContext):
     """An RPC iterator.
@@ -664,7 +703,7 @@ def _start_unary_request(request, timeout, request_serializer):
     if serialized_request is None:
         state = _RPCState((), (), (), grpc.StatusCode.INTERNAL,
                           'Exception serializing request!')
-        error = _RpcError(state)
+        error = _InactiveRpcError(state)
         return deadline, None, error
     else:
         return deadline, serialized_request, None
@@ -678,7 +717,7 @@ def _end_unary_response_blocking(state, call, with_call, deadline):
         else:
             return state.response
     else:
-        raise _RpcError(state)
+        raise _InactiveRpcError(state)
 
 
 def _stream_unary_invocation_operationses(metadata, initial_metadata_flags):
@@ -836,7 +875,7 @@ def __call__(  # pylint: disable=too-many-locals
         if serialized_request is None:
             state = _RPCState((), (), (), grpc.StatusCode.INTERNAL,
                               'Exception serializing request!')
-            raise _RpcError(state)
+            raise _InactiveRpcError(state)
 
         state = _RPCState(_UNARY_STREAM_INITIAL_DUE, None, None, None, None)
         call_credentials = None if credentials is None else credentials._credentials
diff --git a/src/python/grpcio_tests/tests/unit/_interceptor_test.py b/src/python/grpcio_tests/tests/unit/_interceptor_test.py
index a647e5e720c..6da3d53816a 100644
--- a/src/python/grpcio_tests/tests/unit/_interceptor_test.py
+++ b/src/python/grpcio_tests/tests/unit/_interceptor_test.py
@@ -32,12 +32,18 @@
 _SERIALIZE_RESPONSE = lambda bytestring: bytestring * 3
 _DESERIALIZE_RESPONSE = lambda bytestring: bytestring[:len(bytestring) // 3]
 
+_EXCEPTION_REQUEST = b'\x09\x0a'
+
 _UNARY_UNARY = '/test/UnaryUnary'
 _UNARY_STREAM = '/test/UnaryStream'
 _STREAM_UNARY = '/test/StreamUnary'
 _STREAM_STREAM = '/test/StreamStream'
 
 
+class _ApplicationErrorStandin(Exception):
+    pass
+
+
 class _Callback(object):
 
     def __init__(self):
@@ -70,9 +76,13 @@ def handle_unary_unary(self, request, servicer_context):
                 'testkey',
                 'testvalue',
             ),))
+        if request == _EXCEPTION_REQUEST:
+            raise _ApplicationErrorStandin()
         return request
 
     def handle_unary_stream(self, request, servicer_context):
+        if request == _EXCEPTION_REQUEST:
+            raise _ApplicationErrorStandin()
         for _ in range(test_constants.STREAM_LENGTH):
             self._control.control()
             yield request
@@ -97,6 +107,8 @@ def handle_stream_unary(self, request_iterator, servicer_context):
                 'testkey',
                 'testvalue',
             ),))
+        if _EXCEPTION_REQUEST in response_elements:
+            raise _ApplicationErrorStandin()
         return b''.join(response_elements)
 
     def handle_stream_stream(self, request_iterator, servicer_context):
@@ -107,6 +119,8 @@ def handle_stream_stream(self, request_iterator, servicer_context):
                 'testvalue',
             ),))
         for request in request_iterator:
+            if request == _EXCEPTION_REQUEST:
+                raise _ApplicationErrorStandin()
             self._control.control()
             yield request
         self._control.control()
@@ -232,7 +246,16 @@ def intercept_service(self, continuation, handler_call_details):
 
     def intercept_unary_unary(self, continuation, client_call_details, request):
         self.record.append(self.tag + ':intercept_unary_unary')
-        return continuation(client_call_details, request)
+        result = continuation(client_call_details, request)
+        assert isinstance(
+            result,
+            grpc.Call), '{} ({}) is not an instance of grpc.Call'.format(
+                result, type(result))
+        assert isinstance(
+            result,
+            grpc.Future), '{} ({}) is not an instance of grpc.Future'.format(
+                result, type(result))
+        return result
 
     def intercept_unary_stream(self, continuation, client_call_details,
                                request):
@@ -242,7 +265,14 @@ def intercept_unary_stream(self, continuation, client_call_details,
     def intercept_stream_unary(self, continuation, client_call_details,
                                request_iterator):
         self.record.append(self.tag + ':intercept_stream_unary')
-        return continuation(client_call_details, request_iterator)
+        result = continuation(client_call_details, request_iterator)
+        assert isinstance(
+            result,
+            grpc.Call), '{} is not an instance of grpc.Call'.format(result)
+        assert isinstance(
+            result,
+            grpc.Future), '{} is not an instance of grpc.Future'.format(result)
+        return result
 
     def intercept_stream_stream(self, continuation, client_call_details,
                                 request_iterator):
@@ -440,6 +470,31 @@ def testInterceptedUnaryRequestBlockingUnaryResponse(self):
             's1:intercept_service', 's2:intercept_service'
         ])
 
+    def testInterceptedUnaryRequestBlockingUnaryResponseWithError(self):
+        request = _EXCEPTION_REQUEST
+
+        self._record[:] = []
+
+        channel = grpc.intercept_channel(self._channel,
+                                         _LoggingInterceptor(
+                                             'c1', self._record),
+                                         _LoggingInterceptor(
+                                             'c2', self._record))
+
+        multi_callable = _unary_unary_multi_callable(channel)
+        with self.assertRaises(grpc.RpcError) as exception_context:
+            multi_callable(
+                request,
+                metadata=(('test',
+                           'InterceptedUnaryRequestBlockingUnaryResponse'),))
+        exception = exception_context.exception
+        self.assertFalse(exception.cancelled())
+        self.assertFalse(exception.running())
+        self.assertTrue(exception.done())
+        with self.assertRaises(grpc.RpcError):
+            exception.result()
+        self.assertIsInstance(exception.exception(), grpc.RpcError)
+
     def testInterceptedUnaryRequestBlockingUnaryResponseWithCall(self):
         request = b'\x07\x08'
 
@@ -505,6 +560,30 @@ def testInterceptedUnaryRequestStreamResponse(self):
             's1:intercept_service', 's2:intercept_service'
         ])
 
+    def testInterceptedUnaryRequestStreamResponseWithError(self):
+        request = _EXCEPTION_REQUEST
+
+        self._record[:] = []
+        channel = grpc.intercept_channel(self._channel,
+                                         _LoggingInterceptor(
+                                             'c1', self._record),
+                                         _LoggingInterceptor(
+                                             'c2', self._record))
+
+        multi_callable = _unary_stream_multi_callable(channel)
+        response_iterator = multi_callable(
+            request,
+            metadata=(('test', 'InterceptedUnaryRequestStreamResponse'),))
+        with self.assertRaises(grpc.RpcError) as exception_context:
+            tuple(response_iterator)
+        exception = exception_context.exception
+        self.assertFalse(exception.cancelled())
+        self.assertFalse(exception.running())
+        self.assertTrue(exception.done())
+        with self.assertRaises(grpc.RpcError):
+            exception.result()
+        self.assertIsInstance(exception.exception(), grpc.RpcError)
+
     def testInterceptedStreamRequestBlockingUnaryResponse(self):
         requests = tuple(
             b'\x07\x08' for _ in range(test_constants.STREAM_LENGTH))
@@ -575,6 +654,32 @@ def testInterceptedStreamRequestFutureUnaryResponse(self):
             's1:intercept_service', 's2:intercept_service'
         ])
 
+    def testInterceptedStreamRequestFutureUnaryResponseWithError(self):
+        requests = tuple(
+            _EXCEPTION_REQUEST for _ in range(test_constants.STREAM_LENGTH))
+        request_iterator = iter(requests)
+
+        self._record[:] = []
+        channel = grpc.intercept_channel(self._channel,
+                                         _LoggingInterceptor(
+                                             'c1', self._record),
+                                         _LoggingInterceptor(
+                                             'c2', self._record))
+
+        multi_callable = _stream_unary_multi_callable(channel)
+        response_future = multi_callable.future(
+            request_iterator,
+            metadata=(('test', 'InterceptedStreamRequestFutureUnaryResponse'),))
+        with self.assertRaises(grpc.RpcError) as exception_context:
+            response_future.result()
+        exception = exception_context.exception
+        self.assertFalse(exception.cancelled())
+        self.assertFalse(exception.running())
+        self.assertTrue(exception.done())
+        with self.assertRaises(grpc.RpcError):
+            exception.result()
+        self.assertIsInstance(exception.exception(), grpc.RpcError)
+
     def testInterceptedStreamRequestStreamResponse(self):
         requests = tuple(
             b'\x77\x58' for _ in range(test_constants.STREAM_LENGTH))
@@ -598,6 +703,32 @@ def testInterceptedStreamRequestStreamResponse(self):
             's1:intercept_service', 's2:intercept_service'
         ])
 
+    def testInterceptedStreamRequestStreamResponseWithError(self):
+        requests = tuple(
+            _EXCEPTION_REQUEST for _ in range(test_constants.STREAM_LENGTH))
+        request_iterator = iter(requests)
+
+        self._record[:] = []
+        channel = grpc.intercept_channel(self._channel,
+                                         _LoggingInterceptor(
+                                             'c1', self._record),
+                                         _LoggingInterceptor(
+                                             'c2', self._record))
+
+        multi_callable = _stream_stream_multi_callable(channel)
+        response_iterator = multi_callable(
+            request_iterator,
+            metadata=(('test', 'InterceptedStreamRequestStreamResponse'),))
+        with self.assertRaises(grpc.RpcError) as exception_context:
+            tuple(response_iterator)
+        exception = exception_context.exception
+        self.assertFalse(exception.cancelled())
+        self.assertFalse(exception.running())
+        self.assertTrue(exception.done())
+        with self.assertRaises(grpc.RpcError):
+            exception.result()
+        self.assertIsInstance(exception.exception(), grpc.RpcError)
+
 
 if __name__ == '__main__':
     logging.basicConfig()
