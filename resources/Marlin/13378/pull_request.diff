diff --git a/Marlin/src/feature/I2CPositionEncoder.cpp b/Marlin/src/feature/I2CPositionEncoder.cpp
index 7cb915888fb..bd982aed530 100644
--- a/Marlin/src/feature/I2CPositionEncoder.cpp
+++ b/Marlin/src/feature/I2CPositionEncoder.cpp
@@ -329,8 +329,8 @@ bool I2CPositionEncoder::test_axis() {
 
   float startCoord[NUM_AXIS] = { 0 }, endCoord[NUM_AXIS] = { 0 };
 
-  const float startPosition = soft_endstop_min[encoderAxis] + 10,
-              endPosition = soft_endstop_max[encoderAxis] - 10,
+  const float startPosition = axis_limits[encoderAxis].min + 10,
+              endPosition = axis_limits[encoderAxis].max - 10,
               feedrate = FLOOR(MMM_TO_MMS((encoderAxis == Z_AXIS) ? HOMING_FEEDRATE_Z : HOMING_FEEDRATE_XY));
 
   ec = false;
@@ -391,7 +391,7 @@ void I2CPositionEncoder::calibrate_steps_mm(const uint8_t iter) {
   ec = false;
 
   startDistance = 20;
-  endDistance = soft_endstop_max[encoderAxis] - 20;
+  endDistance = axis_limits[encoderAxis].max - 20;
   travelDistance = endDistance - startDistance;
 
   LOOP_NA(i) {
diff --git a/Marlin/src/gcode/bedlevel/abl/G29.cpp b/Marlin/src/gcode/bedlevel/abl/G29.cpp
index a79c35af9a4..88cf65327c2 100644
--- a/Marlin/src/gcode/bedlevel/abl/G29.cpp
+++ b/Marlin/src/gcode/bedlevel/abl/G29.cpp
@@ -212,7 +212,7 @@ G29_TYPE GcodeSuite::G29() {
   #endif
 
   #if HAS_SOFTWARE_ENDSTOPS && ENABLED(PROBE_MANUALLY)
-    ABL_VAR bool enable_soft_endstops = true;
+    ABL_VAR bool saved_axis_limits_state = true;
   #endif
 
   #if ABL_GRID
@@ -493,9 +493,7 @@ G29_TYPE GcodeSuite::G29() {
     // Abort current G29 procedure, go back to idle state
     if (seenA && g29_in_progress) {
       SERIAL_ECHOLNPGM("Manual G29 aborted");
-      #if HAS_SOFTWARE_ENDSTOPS
-        soft_endstops_enabled = enable_soft_endstops;
-      #endif
+      axis_limits_enabled = saved_axis_limits_state;
       set_bed_leveling_enabled(abl_should_enable);
       g29_in_progress = false;
       #if ENABLED(LCD_BED_LEVELING)
@@ -518,9 +516,7 @@ G29_TYPE GcodeSuite::G29() {
 
     if (abl_probe_index == 0) {
       // For the initial G29 S2 save software endstop state
-      #if HAS_SOFTWARE_ENDSTOPS
-        enable_soft_endstops = soft_endstops_enabled;
-      #endif
+      saved_axis_limits_state = axis_limits_enabled;
       // Move close to the bed before the first point
       do_blocking_move_to_z(0);
     }
@@ -602,11 +598,7 @@ G29_TYPE GcodeSuite::G29() {
       // Is there a next point to move to?
       if (abl_probe_index < abl_points) {
         _manual_goto_xy(xProbe, yProbe); // Can be used here too!
-        #if HAS_SOFTWARE_ENDSTOPS
-          // Disable software endstops to allow manual adjustment
-          // If G29 is not completed, they will not be re-enabled
-          soft_endstops_enabled = false;
-        #endif
+        axis_limits_enabled = false;
         G29_RETURN(false);
       }
       else {
@@ -616,9 +608,7 @@ G29_TYPE GcodeSuite::G29() {
         SERIAL_ECHOLNPGM("Grid probing done.");
 
         // Re-enable software endstops, if needed
-        #if HAS_SOFTWARE_ENDSTOPS
-          soft_endstops_enabled = enable_soft_endstops;
-        #endif
+        axis_limits_enabled = saved_axis_limits_state;
       }
 
     #elif ENABLED(AUTO_BED_LEVELING_3POINT)
@@ -628,11 +618,7 @@ G29_TYPE GcodeSuite::G29() {
         xProbe = points[abl_probe_index].x;
         yProbe = points[abl_probe_index].y;
         _manual_goto_xy(xProbe, yProbe);
-        #if HAS_SOFTWARE_ENDSTOPS
-          // Disable software endstops to allow manual adjustment
-          // If G29 is not completed, they will not be re-enabled
-          soft_endstops_enabled = false;
-        #endif
+        axis_limits_enabled = false;
         G29_RETURN(false);
       }
       else {
@@ -640,9 +626,7 @@ G29_TYPE GcodeSuite::G29() {
         SERIAL_ECHOLNPGM("3-point probing done.");
 
         // Re-enable software endstops, if needed
-        #if HAS_SOFTWARE_ENDSTOPS
-          soft_endstops_enabled = enable_soft_endstops;
-        #endif
+        axis_limits_enabled = saved_axis_limits_state;
 
         if (!dryrun) {
           vector_3 planeNormal = vector_3::cross(points[0] - points[1], points[2] - points[1]).get_normal();
diff --git a/Marlin/src/gcode/bedlevel/mbl/G29.cpp b/Marlin/src/gcode/bedlevel/mbl/G29.cpp
index fd42b165f42..1eec3df185d 100644
--- a/Marlin/src/gcode/bedlevel/mbl/G29.cpp
+++ b/Marlin/src/gcode/bedlevel/mbl/G29.cpp
@@ -59,7 +59,7 @@ void GcodeSuite::G29() {
 
   static int mbl_probe_index = -1;
   #if HAS_SOFTWARE_ENDSTOPS
-    static bool enable_soft_endstops;
+    static bool saved_axis_limits_state;
   #endif
 
   MeshLevelingState state = (MeshLevelingState)parser.byteval('S', (int8_t)MeshReport);
@@ -97,30 +97,21 @@ void GcodeSuite::G29() {
       }
       // For each G29 S2...
       if (mbl_probe_index == 0) {
-        #if HAS_SOFTWARE_ENDSTOPS
-          // For the initial G29 S2 save software endstop state
-          enable_soft_endstops = soft_endstops_enabled;
-        #endif
+        // For the initial G29 S2 save software endstop state
+        saved_axis_limits_state = axis_limits_enabled;
         // Move close to the bed before the first point
         do_blocking_move_to_z(0);
       }
       else {
         // Save Z for the previous mesh position
         mbl.set_zigzag_z(mbl_probe_index - 1, current_position[Z_AXIS]);
-        #if HAS_SOFTWARE_ENDSTOPS
-          soft_endstops_enabled = enable_soft_endstops;
-        #endif
+        axis_limits_enabled = saved_axis_limits_state;
       }
       // If there's another point to sample, move there with optional lift.
       if (mbl_probe_index < GRID_MAX_POINTS) {
-        #if HAS_SOFTWARE_ENDSTOPS
-          // Disable software endstops to allow manual adjustment
-          // If G29 is not completed, they will not be re-enabled
-          soft_endstops_enabled = false;
-        #endif
-
         mbl.zigzag(mbl_probe_index++, ix, iy);
         _manual_goto_xy(mbl.index_to_xpos[ix], mbl.index_to_ypos[iy]);
+        axis_limits_enabled = false;
       }
       else {
         // One last "return to the bed" (as originally coded) at completion
diff --git a/Marlin/src/gcode/calibrate/G28.cpp b/Marlin/src/gcode/calibrate/G28.cpp
index 9b8aa2b51c7..4fd499bd54f 100644
--- a/Marlin/src/gcode/calibrate/G28.cpp
+++ b/Marlin/src/gcode/calibrate/G28.cpp
@@ -189,6 +189,10 @@ void GcodeSuite::G28(const bool always_home_all) {
     }
   #endif
 
+  #if !HAS_SOFTWARE_ENDSTOPS
+    axis_limits_enabled = true; // Ensure that safety limits are enabled
+  #endif
+
   #if ENABLED(DUAL_X_CARRIAGE)
     bool IDEX_saved_duplication_state = extruder_duplication_enabled;
     DualXMode IDEX_saved_mode = dual_x_carriage_mode;
diff --git a/Marlin/src/gcode/calibrate/G425.cpp b/Marlin/src/gcode/calibrate/G425.cpp
index 7758d72ec51..f37217d433d 100644
--- a/Marlin/src/gcode/calibrate/G425.cpp
+++ b/Marlin/src/gcode/calibrate/G425.cpp
@@ -75,7 +75,7 @@ struct measurements_t {
 };
 
 #define TEMPORARY_BED_LEVELING_STATE(enable) TemporaryBedLevelingState tbls(enable)
-#define TEMPORARY_SOFT_ENDSTOP_STATE(enable) REMEMBER(tes, soft_endstops_enabled, enable);
+#define TEMPORARY_SOFT_ENDSTOP_STATE(enable) REMEMBER(tes, axis_limits_enabled, enable);
 
 #if ENABLED(BACKLASH_GCODE)
   #define TEMPORARY_BACKLASH_CORRECTION(value) REMEMBER(tbst, backlash_correction, value)
diff --git a/Marlin/src/gcode/control/M211.cpp b/Marlin/src/gcode/control/M211.cpp
index d846e50bd40..d1502853347 100644
--- a/Marlin/src/gcode/control/M211.cpp
+++ b/Marlin/src/gcode/control/M211.cpp
@@ -35,16 +35,16 @@
 void GcodeSuite::M211() {
   SERIAL_ECHO_START();
   SERIAL_ECHOPGM(MSG_SOFT_ENDSTOPS);
-  if (parser.seen('S')) soft_endstops_enabled = parser.value_bool();
-  serialprint_onoff(soft_endstops_enabled);
+  if (parser.seen('S')) axis_limits_enabled = parser.value_bool();
+  serialprint_onoff(axis_limits_enabled);
   SERIAL_ECHOPGM(MSG_SOFT_MIN);
-  SERIAL_ECHOPAIR(    MSG_X, LOGICAL_X_POSITION(soft_endstop_min[X_AXIS]));
-  SERIAL_ECHOPAIR(" " MSG_Y, LOGICAL_Y_POSITION(soft_endstop_min[Y_AXIS]));
-  SERIAL_ECHOPAIR(" " MSG_Z, LOGICAL_Z_POSITION(soft_endstop_min[Z_AXIS]));
+  SERIAL_ECHOPAIR(    MSG_X, LOGICAL_X_POSITION(axis_limits[X_AXIS].min));
+  SERIAL_ECHOPAIR(" " MSG_Y, LOGICAL_Y_POSITION(axis_limits[Y_AXIS].min));
+  SERIAL_ECHOPAIR(" " MSG_Z, LOGICAL_Z_POSITION(axis_limits[Z_AXIS].min));
   SERIAL_ECHOPGM(MSG_SOFT_MAX);
-  SERIAL_ECHOPAIR(    MSG_X, LOGICAL_X_POSITION(soft_endstop_max[X_AXIS]));
-  SERIAL_ECHOPAIR(" " MSG_Y, LOGICAL_Y_POSITION(soft_endstop_max[Y_AXIS]));
-  SERIAL_ECHOLNPAIR(" " MSG_Z, LOGICAL_Z_POSITION(soft_endstop_max[Z_AXIS]));
+  SERIAL_ECHOPAIR(    MSG_X, LOGICAL_X_POSITION(axis_limits[X_AXIS].max));
+  SERIAL_ECHOPAIR(" " MSG_Y, LOGICAL_Y_POSITION(axis_limits[Y_AXIS].max));
+  SERIAL_ECHOLNPAIR(" " MSG_Z, LOGICAL_Z_POSITION(axis_limits[Z_AXIS].max));
 }
 
 #endif
diff --git a/Marlin/src/gcode/feature/camera/M240.cpp b/Marlin/src/gcode/feature/camera/M240.cpp
index 4c376be5b87..2d2705f926b 100644
--- a/Marlin/src/gcode/feature/camera/M240.cpp
+++ b/Marlin/src/gcode/feature/camera/M240.cpp
@@ -127,7 +127,6 @@ void GcodeSuite::M240() {
        parser.seenval('Y') ? RAW_Y_POSITION(parser.value_linear_units()) : photo_position[Y_AXIS],
       (parser.seenval('Z') ? parser.value_linear_units() : photo_position[Z_AXIS]) + current_position[Z_AXIS]
     };
-    clamp_to_software_endstops(raw);
     do_blocking_move_to(raw, fr_mm_s);
 
     #ifdef PHOTO_SWITCH_POSITION
diff --git a/Marlin/src/gcode/motion/G2_G3.cpp b/Marlin/src/gcode/motion/G2_G3.cpp
index 9193d25599d..02305117be7 100644
--- a/Marlin/src/gcode/motion/G2_G3.cpp
+++ b/Marlin/src/gcode/motion/G2_G3.cpp
@@ -190,7 +190,7 @@ void plan_arc(
     #endif
     raw[E_AXIS] += extruder_per_segment;
 
-    clamp_to_software_endstops(raw);
+    apply_axis_limits(raw);
 
     #if HAS_LEVELING && !PLANNER_LEVELING
       planner.apply_leveling(raw);
diff --git a/Marlin/src/lcd/extensible_ui/ui_api.cpp b/Marlin/src/lcd/extensible_ui/ui_api.cpp
index a7823a10da1..f80f09723cc 100644
--- a/Marlin/src/lcd/extensible_ui/ui_api.cpp
+++ b/Marlin/src/lcd/extensible_ui/ui_api.cpp
@@ -210,29 +210,29 @@ namespace ExtUI {
 
     // Limit to software endstops, if enabled
     #if HAS_SOFTWARE_ENDSTOPS
-      if (soft_endstops_enabled) switch (axis) {
+      if (axis_limits_enabled) switch (axis) {
         case X_AXIS:
           #if ENABLED(MIN_SOFTWARE_ENDSTOP_X)
-            min = soft_endstop_min[X_AXIS];
+            min = axis_limits[X_AXIS].min;
           #endif
           #if ENABLED(MAX_SOFTWARE_ENDSTOP_X)
-            max = soft_endstop_max[X_AXIS];
+            max = axis_limits[X_AXIS].max;
           #endif
           break;
         case Y_AXIS:
           #if ENABLED(MIN_SOFTWARE_ENDSTOP_Y)
-            min = soft_endstop_min[Y_AXIS];
+            min = axis_limits[Y_AXIS].min;
           #endif
           #if ENABLED(MAX_SOFTWARE_ENDSTOP_Y)
-            max = soft_endstop_max[Y_AXIS];
+            max = axis_limits[Y_AXIS].max;
           #endif
           break;
         case Z_AXIS:
           #if ENABLED(MIN_SOFTWARE_ENDSTOP_Z)
-            min = soft_endstop_min[Z_AXIS];
+            min = axis_limits[Z_AXIS].min;
           #endif
           #if ENABLED(MAX_SOFTWARE_ENDSTOP_Z)
-            max = soft_endstop_max[Z_AXIS];
+            max = axis_limits[Z_AXIS].max;
           #endif
         default: break;
       }
diff --git a/Marlin/src/lcd/menu/menu_motion.cpp b/Marlin/src/lcd/menu/menu_motion.cpp
index 58edf0dd33b..808e1813d0b 100644
--- a/Marlin/src/lcd/menu/menu_motion.cpp
+++ b/Marlin/src/lcd/menu/menu_motion.cpp
@@ -82,34 +82,32 @@ static void _lcd_move_xyz(PGM_P name, AxisEnum axis) {
           max = current_position[axis] + 1000;
 
     // Limit to software endstops, if enabled
-    #if HAS_SOFTWARE_ENDSTOPS
-      if (soft_endstops_enabled) switch (axis) {
-        case X_AXIS:
-          #if ENABLED(MIN_SOFTWARE_ENDSTOP_X)
-            min = soft_endstop_min[X_AXIS];
-          #endif
-          #if ENABLED(MAX_SOFTWARE_ENDSTOP_X)
-            max = soft_endstop_max[X_AXIS];
-          #endif
-          break;
-        case Y_AXIS:
-          #if ENABLED(MIN_SOFTWARE_ENDSTOP_Y)
-            min = soft_endstop_min[Y_AXIS];
-          #endif
-          #if ENABLED(MAX_SOFTWARE_ENDSTOP_Y)
-            max = soft_endstop_max[Y_AXIS];
-          #endif
-          break;
-        case Z_AXIS:
-          #if ENABLED(MIN_SOFTWARE_ENDSTOP_Z)
-            min = soft_endstop_min[Z_AXIS];
-          #endif
-          #if ENABLED(MAX_SOFTWARE_ENDSTOP_Z)
-            max = soft_endstop_max[Z_AXIS];
-          #endif
-        default: break;
-      }
-    #endif // HAS_SOFTWARE_ENDSTOPS
+    if (axis_limits_enabled) switch (axis) {
+      case X_AXIS:
+        #if ENABLED(MIN_SOFTWARE_ENDSTOP_X)
+          min = axis_limits[X_AXIS].min;
+        #endif
+        #if ENABLED(MAX_SOFTWARE_ENDSTOP_X)
+          max = axis_limits[X_AXIS].max;
+        #endif
+        break;
+      case Y_AXIS:
+        #if ENABLED(MIN_SOFTWARE_ENDSTOP_Y)
+          min = axis_limits[Y_AXIS].min;
+        #endif
+        #if ENABLED(MAX_SOFTWARE_ENDSTOP_Y)
+          max = axis_limits[Y_AXIS].max;
+        #endif
+        break;
+      case Z_AXIS:
+        #if ENABLED(MIN_SOFTWARE_ENDSTOP_Z)
+          min = axis_limits[Z_AXIS].min;
+        #endif
+        #if ENABLED(MAX_SOFTWARE_ENDSTOP_Z)
+          max = axis_limits[Z_AXIS].max;
+        #endif
+      default: break;
+    }
 
     // Delta limits XY based on the current offset from center
     // This assumes the center is 0,0
@@ -305,7 +303,7 @@ void menu_move() {
   MENU_BACK(MSG_MOTION);
 
   #if HAS_SOFTWARE_ENDSTOPS && ENABLED(SOFT_ENDSTOPS_MENU_ITEM)
-    MENU_ITEM_EDIT(bool, MSG_LCD_SOFT_ENDSTOPS, &soft_endstops_enabled);
+    MENU_ITEM_EDIT(bool, MSG_LCD_SOFT_ENDSTOPS, &axis_limits_enabled);
   #endif
 
   if (
diff --git a/Marlin/src/module/configuration_store.cpp b/Marlin/src/module/configuration_store.cpp
index 13eacae04c1..d3e75da7e0f 100644
--- a/Marlin/src/module/configuration_store.cpp
+++ b/Marlin/src/module/configuration_store.cpp
@@ -321,7 +321,7 @@ void MarlinSettings::postprocess() {
   // Software endstops depend on home_offset
   LOOP_XYZ(i) {
     update_workspace_offset((AxisEnum)i);
-    update_software_endstops((AxisEnum)i);
+    update_axis_limits((AxisEnum)i);
   }
 
   #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
diff --git a/Marlin/src/module/delta.cpp b/Marlin/src/module/delta.cpp
index a202d4f45be..00f3fe58908 100644
--- a/Marlin/src/module/delta.cpp
+++ b/Marlin/src/module/delta.cpp
@@ -77,7 +77,7 @@ void recalc_delta_settings() {
   delta_diagonal_rod_2_tower[A_AXIS] = sq(delta_diagonal_rod + drt[A_AXIS]);
   delta_diagonal_rod_2_tower[B_AXIS] = sq(delta_diagonal_rod + drt[B_AXIS]);
   delta_diagonal_rod_2_tower[C_AXIS] = sq(delta_diagonal_rod + drt[C_AXIS]);
-  update_software_endstops(Z_AXIS);
+  update_axis_limits(Z_AXIS);
   set_all_unhomed();
 }
 
diff --git a/Marlin/src/module/motion.cpp b/Marlin/src/module/motion.cpp
index 362cb7c4f6a..30a14a0dd66 100644
--- a/Marlin/src/module/motion.cpp
+++ b/Marlin/src/module/motion.cpp
@@ -149,13 +149,13 @@ float cartes[XYZ];
   #endif
 
   #if HAS_SOFTWARE_ENDSTOPS
-    float soft_endstop_radius, soft_endstop_radius_2;
+    float delta_limits_radius, delta_limits_radius_2;
   #elif IS_SCARA
-    constexpr float soft_endstop_radius = SCARA_PRINTABLE_RADIUS,
-                    soft_endstop_radius_2 = sq(SCARA_PRINTABLE_RADIUS);
+    constexpr float delta_limits_radius = SCARA_PRINTABLE_RADIUS,
+                    delta_limits_radius_2 = sq(SCARA_PRINTABLE_RADIUS);
   #else // DELTA
-    constexpr float soft_endstop_radius = DELTA_PRINTABLE_RADIUS,
-                    soft_endstop_radius_2 = sq(DELTA_PRINTABLE_RADIUS);
+    constexpr float delta_limits_radius = DELTA_PRINTABLE_RADIUS,
+                    delta_limits_radius_2 = sq(DELTA_PRINTABLE_RADIUS);
   #endif
 
 #endif
@@ -455,108 +455,106 @@ void clean_up_after_endstop_or_probe_move() {
   feedrate_percentage = saved_feedrate_percentage;
 }
 
-#if HAS_SOFTWARE_ENDSTOPS
+bool axis_limits_enabled = true;
 
-  bool soft_endstops_enabled = true;
+axis_limits_t axis_limits[XYZ] = {
+  #if HAS_SOFTWARE_ENDSTOPS
+    { X_MIN_BED, X_MAX_BED }, { Y_MIN_BED, Y_MAX_BED }
+  #else
+    { X_MIN_POS, X_MAX_POS }, { Y_MIN_POS, Y_MAX_POS }
+  #endif
+  , { Z_MIN_POS, Z_MAX_POS }
+};
 
-  // Software Endstops are based on the configured limits.
-  float soft_endstop_min[XYZ] = { X_MIN_BED, Y_MIN_BED, Z_MIN_POS },
-        soft_endstop_max[XYZ] = { X_MAX_BED, Y_MAX_BED, Z_MAX_POS };
+/**
+ * Software endstops can be used to monitor the open end of
+ * an axis that has a hardware endstop on the other end. Or
+ * they can prevent axes from moving past endstops and grinding.
+ *
+ * To keep doing their job as the coordinate system changes,
+ * the software endstop positions must be refreshed to remain
+ * at the same positions relative to the machine.
+ */
+void update_axis_limits(const AxisEnum axis
+  #if HAS_HOTEND_OFFSET
+    , const uint8_t old_tool_index/*=0*/, const uint8_t new_tool_index/*=0*/
+  #endif
+) {
 
-  /**
-   * Software endstops can be used to monitor the open end of
-   * an axis that has a hardware endstop on the other end. Or
-   * they can prevent axes from moving past endstops and grinding.
-   *
-   * To keep doing their job as the coordinate system changes,
-   * the software endstop positions must be refreshed to remain
-   * at the same positions relative to the machine.
-   */
-  void update_software_endstops(const AxisEnum axis
-    #if HAS_HOTEND_OFFSET
-      , const uint8_t old_tool_index/*=0*/, const uint8_t new_tool_index/*=0*/
-    #endif
-  ) {
+  #if ENABLED(DUAL_X_CARRIAGE)
 
-    #if ENABLED(DUAL_X_CARRIAGE)
+    if (axis == X_AXIS) {
 
-      if (axis == X_AXIS) {
+      // In Dual X mode hotend_offset[X] is T1's home position
+      const float dual_max_x = MAX(hotend_offset[X_AXIS][1], X2_MAX_POS);
 
-        // In Dual X mode hotend_offset[X] is T1's home position
-        const float dual_max_x = MAX(hotend_offset[X_AXIS][1], X2_MAX_POS);
-
-        if (new_tool_index != 0) {
-          // T1 can move from X2_MIN_POS to X2_MAX_POS or X2 home position (whichever is larger)
-          soft_endstop_min[X_AXIS] = X2_MIN_POS;
-          soft_endstop_max[X_AXIS] = dual_max_x;
-        }
-        else if (dxc_is_duplicating()) {
-          // In Duplication Mode, T0 can move as far left as X1_MIN_POS
-          // but not so far to the right that T1 would move past the end
-          soft_endstop_min[X_AXIS] = X1_MIN_POS;
-          soft_endstop_max[X_AXIS] = MIN(X1_MAX_POS, dual_max_x - duplicate_extruder_x_offset);
-        }
-        else {
-          // In other modes, T0 can move from X1_MIN_POS to X1_MAX_POS
-          soft_endstop_min[X_AXIS] = X1_MIN_POS;
-          soft_endstop_max[X_AXIS] = X1_MAX_POS;
-        }
+      if (new_tool_index != 0) {
+        // T1 can move from X2_MIN_POS to X2_MAX_POS or X2 home position (whichever is larger)
+        axis_limits[X_AXIS].min = X2_MIN_POS;
+        axis_limits[X_AXIS].max = dual_max_x;
       }
+      else if (dxc_is_duplicating()) {
+        // In Duplication Mode, T0 can move as far left as X1_MIN_POS
+        // but not so far to the right that T1 would move past the end
+        axis_limits[X_AXIS].min = X1_MIN_POS;
+        axis_limits[X_AXIS].max = MIN(X1_MAX_POS, dual_max_x - duplicate_extruder_x_offset);
+      }
+      else {
+        // In other modes, T0 can move from X1_MIN_POS to X1_MAX_POS
+        axis_limits[X_AXIS].min = X1_MIN_POS;
+        axis_limits[X_AXIS].max = X1_MAX_POS;
+      }
+    }
 
-    #elif ENABLED(DELTA)
-
-      soft_endstop_min[axis] = base_min_pos(axis);
-      soft_endstop_max[axis] = (axis == Z_AXIS ? delta_height
-      #if HAS_BED_PROBE
-        - zprobe_zoffset
-      #endif
-      : base_max_pos(axis));
+  #elif ENABLED(DELTA)
 
-      switch (axis) {
-        case X_AXIS:
-        case Y_AXIS:
-          // Get a minimum radius for clamping
-          soft_endstop_radius = MIN(ABS(MAX(soft_endstop_min[X_AXIS], soft_endstop_min[Y_AXIS])), soft_endstop_max[X_AXIS], soft_endstop_max[Y_AXIS]);
-          soft_endstop_radius_2 = sq(soft_endstop_radius);
-          break;
-        case Z_AXIS:
-          delta_clip_start_height = soft_endstop_max[axis] - delta_safe_distance_from_top();
-        default: break;
-      }
+    axis_limits[axis].min = base_min_pos(axis);
+    axis_limits[axis].max = (axis == Z_AXIS ? delta_height
+    #if HAS_BED_PROBE
+      - zprobe_zoffset
+    #endif
+    : base_max_pos(axis));
 
-    #elif HAS_HOTEND_OFFSET
+    switch (axis) {
+      case X_AXIS:
+      case Y_AXIS:
+        // Get a minimum radius for clamping
+        delta_limits_radius = MIN(ABS(MAX(axis_limits[X_AXIS].min, axis_limits[Y_AXIS].min)), axis_limits[X_AXIS].max, axis_limits[Y_AXIS].max);
+        delta_limits_radius_2 = sq(delta_limits_radius);
+        break;
+      case Z_AXIS:
+        delta_clip_start_height = axis_limits[axis].max - delta_safe_distance_from_top();
+      default: break;
+    }
 
-      // Software endstops are relative to the tool 0 workspace, so
-      // the movement limits must be shifted by the tool offset to
-      // retain the same physical limit when other tools are selected.
-      if (old_tool_index != new_tool_index) {
-        const float offs = hotend_offset[axis][new_tool_index] - hotend_offset[axis][old_tool_index];
-        soft_endstop_min[axis] += offs;
-        soft_endstop_max[axis] += offs;
-      }
-      else {
-        const float offs = hotend_offset[axis][active_extruder];
-        soft_endstop_min[axis] = base_min_pos(axis) + offs;
-        soft_endstop_max[axis] = base_max_pos(axis) + offs;
-      }
+  #elif HAS_HOTEND_OFFSET
 
-    #else
+    // Software endstops are relative to the tool 0 workspace, so
+    // the movement limits must be shifted by the tool offset to
+    // retain the same physical limit when other tools are selected.
+    if (old_tool_index != new_tool_index) {
+      const float offs = hotend_offset[axis][new_tool_index] - hotend_offset[axis][old_tool_index];
+      axis_limits[axis].min += offs;
+      axis_limits[axis].max += offs;
+    }
+    else {
+      const float offs = hotend_offset[axis][active_extruder];
+      axis_limits[axis].min = base_min_pos(axis) + offs;
+      axis_limits[axis].max = base_max_pos(axis) + offs;
+    }
 
-      soft_endstop_min[axis] = base_min_pos(axis);
-      soft_endstop_max[axis] = base_max_pos(axis);
+  #else
 
-    #endif
+    axis_limits[axis].min = base_min_pos(axis);
+    axis_limits[axis].max = base_max_pos(axis);
 
-    #if ENABLED(DEBUG_LEVELING_FEATURE)
-      if (DEBUGGING(LEVELING)) {
-        SERIAL_ECHOPAIR("For ", axis_codes[axis]);
-        SERIAL_ECHOPAIR(" axis:\n soft_endstop_min = ", soft_endstop_min[axis]);
-        SERIAL_ECHOLNPAIR("\n soft_endstop_max = ", soft_endstop_max[axis]);
-      }
-    #endif
-  }
+  #endif
 
-#endif // HAS_SOFTWARE_ENDSTOPS
+  #if ENABLED(DEBUG_LEVELING_FEATURE)
+    if (DEBUGGING(LEVELING))
+      SERIAL_ECHOLNPAIR("Axis ", axis_codes[axis], " min:", axis_limits[axis].min, " max:", axis_limits[axis].max);
+  #endif
+}
 
 /**
  * Constrain the given coordinates to the software endstops.
@@ -564,9 +562,9 @@ void clean_up_after_endstop_or_probe_move() {
  * For DELTA/SCARA the XY constraint is based on the smallest
  * radius within the set software endstops.
  */
-void clamp_to_software_endstops(float target[XYZ]) {
+void apply_axis_limits(float target[XYZ]) {
 
-  if (!soft_endstops_enabled) return;
+  if (!axis_limits_enabled) return;
 
   #if IS_KINEMATIC
 
@@ -579,8 +577,8 @@ void clamp_to_software_endstops(float target[XYZ]) {
     #endif
 
     const float dist_2 = HYPOT2(target[X_AXIS] - offx, target[Y_AXIS] - offy);
-    if (dist_2 > soft_endstop_radius_2) {
-      const float ratio = (soft_endstop_radius) / SQRT(dist_2); // 200 / 300 = 0.66
+    if (dist_2 > delta_limits_radius_2) {
+      const float ratio = (delta_limits_radius) / SQRT(dist_2); // 200 / 300 = 0.66
       target[X_AXIS] *= ratio;
       target[Y_AXIS] *= ratio;
     }
@@ -588,25 +586,25 @@ void clamp_to_software_endstops(float target[XYZ]) {
   #else
 
     #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MIN_SOFTWARE_ENDSTOP_X)
-      NOLESS(target[X_AXIS], soft_endstop_min[X_AXIS]);
+      NOLESS(target[X_AXIS], axis_limits[X_AXIS].min);
     #endif
     #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MAX_SOFTWARE_ENDSTOP_X)
-      NOMORE(target[X_AXIS], soft_endstop_max[X_AXIS]);
+      NOMORE(target[X_AXIS], axis_limits[X_AXIS].max);
     #endif
     #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MIN_SOFTWARE_ENDSTOP_Y)
-      NOLESS(target[Y_AXIS], soft_endstop_min[Y_AXIS]);
+      NOLESS(target[Y_AXIS], axis_limits[Y_AXIS].min);
     #endif
     #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MAX_SOFTWARE_ENDSTOP_Y)
-      NOMORE(target[Y_AXIS], soft_endstop_max[Y_AXIS]);
+      NOMORE(target[Y_AXIS], axis_limits[Y_AXIS].max);
     #endif
 
   #endif
 
   #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MIN_SOFTWARE_ENDSTOP_Z)
-    NOLESS(target[Z_AXIS], soft_endstop_min[Z_AXIS]);
+    NOLESS(target[Z_AXIS], axis_limits[Z_AXIS].min);
   #endif
   #if !HAS_SOFTWARE_ENDSTOPS || ENABLED(MAX_SOFTWARE_ENDSTOP_Z)
-    NOMORE(target[Z_AXIS], soft_endstop_max[Z_AXIS]);
+    NOMORE(target[Z_AXIS], axis_limits[Z_AXIS].max);
   #endif
 }
 
@@ -995,7 +993,7 @@ void clamp_to_software_endstops(float target[XYZ]) {
  * before calling or cold/lengthy extrusion may get missed.
  */
 void prepare_move_to_destination() {
-  clamp_to_software_endstops(destination);
+  apply_axis_limits(destination);
 
   #if ENABLED(PREVENT_COLD_EXTRUSION) || ENABLED(PREVENT_LENGTHY_EXTRUDE)
 
diff --git a/Marlin/src/module/motion.h b/Marlin/src/module/motion.h
index e688cdb69ef..a16688ce3a7 100644
--- a/Marlin/src/module/motion.h
+++ b/Marlin/src/module/motion.h
@@ -118,22 +118,16 @@ XYZ_DEFS(signed char, home_dir, HOME_DIR);
   constexpr float hotend_offset[XYZ][HOTENDS] = { { 0 }, { 0 }, { 0 } };
 #endif
 
-#if HAS_SOFTWARE_ENDSTOPS
-  extern bool soft_endstops_enabled;
-  extern float soft_endstop_min[XYZ], soft_endstop_max[XYZ];
-  void update_software_endstops(const AxisEnum axis
-    #if HAS_HOTEND_OFFSET
-      , const uint8_t old_tool_index=0, const uint8_t new_tool_index=0
-    #endif
-  );
-#else
-  constexpr bool soft_endstops_enabled = true;
-  constexpr float soft_endstop_min[XYZ] = { X_MIN_POS, Y_MIN_POS, Z_MIN_POS },
-                  soft_endstop_max[XYZ] = { X_MAX_POS, Y_MAX_POS, Z_MAX_POS };
-  #define update_software_endstops(...) NOOP
-#endif
-
-void clamp_to_software_endstops(float target[XYZ]);
+typedef struct { float min, max; } axis_limits_t;
+
+extern bool axis_limits_enabled;
+extern axis_limits_t axis_limits[XYZ];
+void apply_axis_limits(float target[XYZ]);
+void update_axis_limits(const AxisEnum axis
+  #if HAS_HOTEND_OFFSET
+    , const uint8_t old_tool_index=0, const uint8_t new_tool_index=0
+  #endif
+);
 
 void report_current_position();
 
diff --git a/Marlin/src/module/planner_bezier.cpp b/Marlin/src/module/planner_bezier.cpp
index 56bcb2d2d4c..d9528e3d1d6 100644
--- a/Marlin/src/module/planner_bezier.cpp
+++ b/Marlin/src/module/planner_bezier.cpp
@@ -188,7 +188,7 @@ void cubic_b_spline(const float position[NUM_AXIS], const float target[NUM_AXIS]
     // not linear in the distance.
     bez_target[Z_AXIS] = interp(position[Z_AXIS], target[Z_AXIS], t);
     bez_target[E_AXIS] = interp(position[E_AXIS], target[E_AXIS], t);
-    clamp_to_software_endstops(bez_target);
+    apply_axis_limits(bez_target);
 
     #if HAS_LEVELING && !PLANNER_LEVELING
       float pos[XYZE] = { bez_target[X_AXIS], bez_target[Y_AXIS], bez_target[Z_AXIS], bez_target[E_AXIS] };
diff --git a/Marlin/src/module/scara.cpp b/Marlin/src/module/scara.cpp
index 19b9c7343c3..dd04e2c9000 100644
--- a/Marlin/src/module/scara.cpp
+++ b/Marlin/src/module/scara.cpp
@@ -58,7 +58,7 @@ void scara_set_axis_is_at_home(const AxisEnum axis) {
 
     current_position[axis] = cartes[axis];
 
-    update_software_endstops(axis);
+    update_axis_limits(axis);
   }
 }
 
diff --git a/Marlin/src/module/tool_change.cpp b/Marlin/src/module/tool_change.cpp
index 5f1aced0211..cdcfa9e6164 100644
--- a/Marlin/src/module/tool_change.cpp
+++ b/Marlin/src/module/tool_change.cpp
@@ -736,7 +736,7 @@ void tool_change(const uint8_t tmp_extruder, const float fr_mm_s/*=0.0*/, bool n
       feedrate_mm_s = fr_mm_s > 0.0 ? fr_mm_s : XY_PROBE_FEEDRATE_MM_S;
 
       #if HAS_SOFTWARE_ENDSTOPS && ENABLED(DUAL_X_CARRIAGE)
-        update_software_endstops(X_AXIS, active_extruder, tmp_extruder);
+        update_axis_limits(X_AXIS, active_extruder, tmp_extruder);
       #endif
 
       set_destination_from_current();
@@ -750,7 +750,7 @@ void tool_change(const uint8_t tmp_extruder, const float fr_mm_s/*=0.0*/, bool n
           #endif
           current_position[Z_AXIS] += toolchange_settings.z_raise;
           #if HAS_SOFTWARE_ENDSTOPS
-            NOMORE(current_position[Z_AXIS], soft_endstop_max[Z_AXIS]);
+            NOMORE(current_position[Z_AXIS], axis_limits[Z_AXIS].max);
           #endif
           planner.buffer_line(current_position, feedrate_mm_s, active_extruder);
         #endif
@@ -782,7 +782,7 @@ void tool_change(const uint8_t tmp_extruder, const float fr_mm_s/*=0.0*/, bool n
         // SWITCHING_NOZZLE_TWO_SERVOS, as both nozzles will lift instead.
         current_position[Z_AXIS] += MAX(-zdiff, 0.0) + toolchange_settings.z_raise;
         #if HAS_SOFTWARE_ENDSTOPS
-          NOMORE(current_position[Z_AXIS], soft_endstop_max[Z_AXIS]);
+          NOMORE(current_position[Z_AXIS], axis_limits[Z_AXIS].max);
         #endif
         if (!no_move) fast_line_to_current(Z_AXIS);
         move_nozzle_servo(tmp_extruder);
@@ -805,7 +805,7 @@ void tool_change(const uint8_t tmp_extruder, const float fr_mm_s/*=0.0*/, bool n
       sync_plan_position();
 
       #if ENABLED(DELTA)
-        //LOOP_XYZ(i) update_software_endstops(i); // or modify the constrain function
+        //LOOP_XYZ(i) update_axis_limits(i); // or modify the constrain function
         const bool safe_to_move = current_position[Z_AXIS] < delta_clip_start_height - 1;
       #else
         constexpr bool safe_to_move = true;
@@ -850,9 +850,6 @@ void tool_change(const uint8_t tmp_extruder, const float fr_mm_s/*=0.0*/, bool n
           }
         #endif
 
-        // Prevent a move outside physical bounds
-        clamp_to_software_endstops(destination);
-
         // Move back to the original (or tweaked) position
         do_blocking_move_to(destination);
 
