diff --git a/Marlin/src/feature/fwretract.cpp b/Marlin/src/feature/fwretract.cpp
index a6093205f33..8d6c899fcdf 100644
--- a/Marlin/src/feature/fwretract.cpp
+++ b/Marlin/src/feature/fwretract.cpp
@@ -99,8 +99,10 @@ void FWRetract::retract(const bool retracting
 
   // Simply never allow two retracts or recovers in a row
   if (retracted[active_extruder] == retracting) return;
-
   #if EXTRUDERS > 1
+    // Allow G10S1 after G10 'Priority for common sense'
+    if (swapping && (retracted_swap[active_extruder]== retracting))  return;
+    // G11 priority to recover the long retract if activated ' common sense '
     if (!retracting) swapping = retracted_swap[active_extruder];
   #else
     const bool swapping = false;
@@ -121,16 +123,10 @@ void FWRetract::retract(const bool retracting
   //*/
 
   const bool has_zhop = retract_zlift > 0.01;     // Is there a hop set?
-
   const float old_feedrate_mm_s = feedrate_mm_s;
-  const int16_t old_flow = planner.flow_percentage[active_extruder];
-
-  // Don't apply flow multiplication to retract/recover
-  planner.flow_percentage[active_extruder] = 100;
 
   // The current position will be the destination for E and Z moves
   set_destination_from_current();
-
   stepper.synchronize();  // Wait for buffered moves to complete
 
   if (retracting) {
@@ -145,34 +141,40 @@ void FWRetract::retract(const bool retracting
     prepare_move_to_destination();
 
     // Is a Z hop set, and has the hop not yet been done?
-    if (has_zhop) {
-      hop_amount += retract_zlift;                // Carriage is raised for retraction hop
+    // No double zlifting 
+    // Feedrate to the max
+    if (has_zhop && !hop_amount) {
+      hop_amount += retract_zlift;  	  // Carriage is raised for retraction hop
+      float temp_feedrate_mm_s=feedrate_mm_s; // backup the current feedrate 
+      feedrate_mm_s = planner.max_feedrate_mm_s[Z_AXIS]; // Z feedrate to max
       current_position[Z_AXIS] -= retract_zlift;  // Pretend current pos is lower. Next move raises Z.
       SYNC_PLAN_POSITION_KINEMATIC();             // Set the planner to the new position
       prepare_move_to_destination();              // Raise up to the old current pos
+      feedrate_mm_s = temp_feedrate_mm_s  ; //feedrate restoration
     }
   }
   else {
     // If a hop was done and Z hasn't changed, undo the Z hop
-    if (hop_amount && NEAR(hop_height, destination[Z_AXIS])) {
-      current_position[Z_AXIS] += hop_amount;     // Pretend current pos is higher. Next move lowers Z.
+    if (hop_amount) {
+      current_position[Z_AXIS] -= retract_zlift;  // Pretend current pos is lower. Next move raises Z.
       SYNC_PLAN_POSITION_KINEMATIC();             // Set the planner to the new position
-      prepare_move_to_destination();              // Lower to the old current pos
+      float temp_feedrate_mm_s=feedrate_mm_s; // backup the current feedrate 
+      feedrate_mm_s = planner.max_feedrate_mm_s[Z_AXIS]; // Z feedrate to max
+      prepare_move_to_destination();              // Raise up to the old current pos
       hop_amount = 0.0;
+      feedrate_mm_s = temp_feedrate_mm_s  ; //feedrate restoration
     }
 
     // A retract multiplier has been added here to get faster swap recovery
     feedrate_mm_s = swapping ? swap_retract_recover_feedrate_mm_s : retract_recover_feedrate_mm_s;
-
+    
     const float move_e = swapping ? swap_retract_length + swap_retract_recover_length : retract_length + retract_recover_length;
     current_position[E_AXIS] -= move_e / planner.volumetric_multiplier[active_extruder];
     sync_plan_position_e();
-
     prepare_move_to_destination();  // Recover E
   }
 
-  // Restore flow and feedrate
-  planner.flow_percentage[active_extruder] = old_flow;
+  // Restore feedrate  
   feedrate_mm_s = old_feedrate_mm_s;
 
   // The active extruder is now retracted or recovered
diff --git a/Marlin/src/lcd/language/language_en.h b/Marlin/src/lcd/language/language_en.h
index 3713433530e..024ccda4b3a 100644
--- a/Marlin/src/lcd/language/language_en.h
+++ b/Marlin/src/lcd/language/language_en.h
@@ -617,6 +617,9 @@
 #ifndef MSG_CONTROL_RETRACT_RECOVERF
   #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("UnRet  V")
 #endif
+#ifndef MSG_CONTROL_RETRACT_RECOVER_SWAPF
+  #define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("S UnRet. V")//steeve
+#endif
 #ifndef MSG_AUTORETRACT
   #define MSG_AUTORETRACT                     _UxGT("AutoRetr.")
 #endif
diff --git a/Marlin/src/lcd/language/language_fr.h b/Marlin/src/lcd/language/language_fr.h
index b98fc386438..fda68334a50 100644
--- a/Marlin/src/lcd/language/language_fr.h
+++ b/Marlin/src/lcd/language/language_fr.h
@@ -222,6 +222,7 @@
 #define MSG_CONTROL_RETRACT_RECOVER         _UxGT("UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("Ech. UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("UnRet V")
+#define MSG_CONTROL_RETRACT_RECOVER_SWAPF   _UxGT("Ech. Retr. V")
 #define MSG_AUTORETRACT                     _UxGT("Retract. Auto.")
 #define MSG_FILAMENTCHANGE                  _UxGT("Changer filament")
 #define MSG_INIT_SDCARD                     _UxGT("Init. la carte SD")
diff --git a/Marlin/src/lcd/ultralcd.cpp b/Marlin/src/lcd/ultralcd.cpp
index 42feaced470..f457fe0d3ce 100644
--- a/Marlin/src/lcd/ultralcd.cpp
+++ b/Marlin/src/lcd/ultralcd.cpp
@@ -3713,6 +3713,9 @@ void kill_screen(const char* lcd_msg) {
         MENU_ITEM_EDIT(float52, MSG_CONTROL_RETRACT_RECOVER_SWAP, &fwretract.swap_retract_recover_length, -100, 100);
       #endif
       MENU_ITEM_EDIT(float3, MSG_CONTROL_RETRACT_RECOVERF, &fwretract.retract_recover_feedrate_mm_s, 1, 999);
+      #if EXTRUDERS > 1
+        MENU_ITEM_EDIT(float3, MSG_CONTROL_RETRACT_RECOVER_SWAPF, &fwretract.swap_retract_recover_feedrate_mm_s, 1, 999);//steeve
+	    #endif
       END_MENU();
     }
 
