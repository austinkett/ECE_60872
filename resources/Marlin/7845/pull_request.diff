diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 32258ae58e8..1badc885340 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -3137,7 +3137,6 @@ static void homeaxis(const AxisEnum axis) {
 } // homeaxis()
 
 #if ENABLED(FWRETRACT)
-
   /**
    * Retract or recover according to firmware settings
    *
@@ -3157,19 +3156,19 @@ static void homeaxis(const AxisEnum axis) {
       , bool swapping = false
     #endif
   ) {
-
     static float hop_height,        // Remember where the Z height started
                  hop_amount = 0.0;  // Total amount lifted, for use in recover
 
     // Simply never allow two retracts or recovers in a row
-    if (retracted[active_extruder] == retracting) return;
-
+    if (!swapping && (retracted[active_extruder]== retracting))  return;
+    // Allow G10S1 after G10
+    if (swapping && (retracted_swap[active_extruder]== retracting))  return;
     #if EXTRUDERS < 2
       bool swapping = false;
     #endif
     if (!retracting) swapping = retracted_swap[active_extruder];
 
-    /* // debugging
+     /* // debugging
       SERIAL_ECHOLNPAIR("retracting ", retracting);
       SERIAL_ECHOLNPAIR("swapping ", swapping);
       SERIAL_ECHOLNPAIR("active extruder ", active_extruder);
@@ -3182,18 +3181,14 @@ static void homeaxis(const AxisEnum axis) {
       SERIAL_ECHOLNPAIR("current_position[z] ", current_position[Z_AXIS]);
       SERIAL_ECHOLNPAIR("hop_amount ", hop_amount);
     //*/
-
     const bool has_zhop = retract_zlift > 0.01;     // Is there a hop set?
-
     const float old_feedrate_mm_s = feedrate_mm_s;
     const int16_t old_flow = flow_percentage[active_extruder];
 
     // Don't apply flow multiplication to retract/recover
     flow_percentage[active_extruder] = 100;
-
     // The current position will be the destination for E and Z moves
     set_destination_to_current();
-
     stepper.synchronize(); // Wait for all moves to finish
 
     if (retracting) {
@@ -3207,46 +3202,49 @@ static void homeaxis(const AxisEnum axis) {
       sync_plan_position_e();
       prepare_move_to_destination();
 
-      // Is a Z hop set, and has the hop not yet been done?
-      if (has_zhop) {
-        hop_amount += retract_zlift;                // Carriage is raised for retraction hop
-        current_position[Z_AXIS] -= retract_zlift;  // Pretend current pos is lower. Next move raises Z.
-        SYNC_PLAN_POSITION_KINEMATIC();             // Set the planner to the new position
-        prepare_move_to_destination();              // Raise up to the old current pos
+      // Is a Z hop set, and has the hop not yet been done? && no double zlifting if hop_amount exist
+      if (has_zhop && !hop_amount) {
+        hop_amount += retract_zlift; 
+      // User have to take care about max speed of Z_Axis that can loose steps if too high
+        float temp_feedrate_mm_s=feedrate_mm_s;            // backup the current feedrate 
+        feedrate_mm_s = planner.max_feedrate_mm_s[Z_AXIS]; // Z feedrate to max
+        current_position[Z_AXIS] -= retract_zlift;         // Pretend current pos is lower. Next move raises Z.
+        SYNC_PLAN_POSITION_KINEMATIC();                    // Set the planner to the new position
+        prepare_move_to_destination();                     // Raise up to the old current pos
+        feedrate_mm_s = temp_feedrate_mm_s  ;              //feedrate restoration
       }
     }
     else {
-      // If a hop was done and Z hasn't changed, undo the Z hop
-      if (hop_amount && NEAR(hop_height, destination[Z_AXIS])) {
-        current_position[Z_AXIS] += hop_amount;     // Pretend current pos is higher. Next move lowers Z.
-        SYNC_PLAN_POSITION_KINEMATIC();             // Set the planner to the new position
-        prepare_move_to_destination();              // Lower to the old current pos
+      // If a hop was done undo the hop
+      if (hop_amount) {
+        current_position[Z_AXIS] += hop_amount;            // Pretend current pos is higher. Next move lowers Z.
+        float temp_feedrate_mm_s=feedrate_mm_s;            // backup the current feedrate  
+        feedrate_mm_s = planner.max_feedrate_mm_s[Z_AXIS]; // Z feedrate to max            
+        SYNC_PLAN_POSITION_KINEMATIC();                    // Set the planner to the new position
+        prepare_move_to_destination();                     // Lower to the old current pos
         hop_amount = 0.0;
+        feedrate_mm_s = temp_feedrate_mm_s  ;              // feedrate restoration
       }
-
       // A retract multiplier has been added here to get faster swap recovery
       feedrate_mm_s = swapping ? swap_retract_recover_feedrate_mm_s : retract_recover_feedrate_mm_s;
 
       const float move_e = swapping ? swap_retract_length + swap_retract_recover_length : retract_length + retract_recover_length;
       current_position[E_AXIS] -= move_e / volumetric_multiplier[active_extruder];
       sync_plan_position_e();
-
       prepare_move_to_destination();  // Recover E
     }
-
     // Restore flow and feedrate
     flow_percentage[active_extruder] = old_flow;
     feedrate_mm_s = old_feedrate_mm_s;
-
     // The active extruder is now retracted or recovered
     retracted[active_extruder] = retracting;
-
     // If swap retract/recover then update the retracted_swap flag too
     #if EXTRUDERS > 1
-      if (swapping) retracted_swap[active_extruder] = retracting;
+      if (swapping) {
+        retracted_swap[active_extruder] = retracting;  }
     #endif
 
-    /* // debugging
+     /* // debugging
       SERIAL_ECHOLNPAIR("retracting ", retracting);
       SERIAL_ECHOLNPAIR("swapping ", swapping);
       SERIAL_ECHOLNPAIR("active_extruder ", active_extruder);
@@ -3577,11 +3575,12 @@ inline void gcode_G4() {
 
   /**
    * G10 - Retract filament according to settings of M207
+   * G10S1 for ToolChange long retractation 
+   * Zlift feedrate according to setting of M203 (Feedrate limits)  
    */
   inline void gcode_G10() {
     #if EXTRUDERS > 1
       const bool rs = parser.boolval('S');
-      retracted_swap[active_extruder] = rs; // Use 'S' for swap, default to false
     #endif
     retract(true
       #if EXTRUDERS > 1
diff --git a/Marlin/language_cn.h b/Marlin/language_cn.h
index f6230a01397..93faaaf8768 100644
--- a/Marlin/language_cn.h
+++ b/Marlin/language_cn.h
@@ -140,6 +140,7 @@
 #define MSG_CONTROL_RETRACT_RECOVER         "UnRet mm"
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    "S UnRet mm"
 #define MSG_CONTROL_RETRACT_RECOVERF        "UnRet  V"
+#define MSG_CONTROL_RETRACT_SWAPF           "Swap V"
 #define MSG_AUTORETRACT                     "AutoRetr."
 #define MSG_FILAMENTCHANGE                  "Change filament"
 #define MSG_INIT_SDCARD                     "Init. SD card"
diff --git a/Marlin/language_cz.h b/Marlin/language_cz.h
index edcc9610c98..62065e43dc0 100644
--- a/Marlin/language_cz.h
+++ b/Marlin/language_cz.h
@@ -226,6 +226,7 @@
 #define MSG_CONTROL_RETRACT_RECOVER         _UxGT("UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("S UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("UnRet  V")
+#define MSG_CONTROL_RETRACT_SWAPF           _UxGT("Swap V")
 #define MSG_AUTORETRACT                     _UxGT("AutoRetr.")
 #define MSG_FILAMENTCHANGE                  _UxGT("Vymenit filament")
 #define MSG_INIT_SDCARD                     _UxGT("Nacist SD kartu")
diff --git a/Marlin/language_fr.h b/Marlin/language_fr.h
index d448cf917ae..babd249cd84 100644
--- a/Marlin/language_fr.h
+++ b/Marlin/language_fr.h
@@ -223,6 +223,7 @@
 #define MSG_CONTROL_RETRACT_RECOVER         _UxGT("UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVER_SWAP    _UxGT("Ech. UnRet mm")
 #define MSG_CONTROL_RETRACT_RECOVERF        _UxGT("UnRet V")
+#define MSG_CONTROL_RETRACT_SWAPF           _UxGT("Ech. V")
 #define MSG_AUTORETRACT                     _UxGT("RÃ©tract. Auto.")
 #define MSG_FILAMENTCHANGE                  _UxGT("Changer filament")
 #define MSG_INIT_SDCARD                     _UxGT("Init. la carte SD")
diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index dcfcb350b8b..a543b0b6a81 100644
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -3573,6 +3573,7 @@ void kill_screen(const char* lcd_msg) {
         MENU_ITEM_EDIT(float52, MSG_CONTROL_RETRACT_RECOVER_SWAP, &swap_retract_recover_length, -100, 100);
       #endif
       MENU_ITEM_EDIT(float3, MSG_CONTROL_RETRACT_RECOVERF, &retract_recover_feedrate_mm_s, 1, 999);
+      MENU_ITEM_EDIT(float3, MSG_CONTROL_RETRACT_SWAPF, &swap_retract_recover_feedrate_mm_s, 1, 999);
       END_MENU();
     }
 
