diff --git a/Marlin/stepper.cpp b/Marlin/stepper.cpp
index ddab5416eaf..2bd62a0781e 100644
--- a/Marlin/stepper.cpp
+++ b/Marlin/stepper.cpp
@@ -343,7 +343,7 @@ ISR(TIMER1_COMPA_vect) {
 }
 
 void Stepper::isr() {
-  #define _ENABLE_ISRs() cli(); SBI(TIMSK0, OCIE0B); ENABLE_STEPPER_DRIVER_INTERRUPT()
+  #define _ENABLE_ISRs() cli(); if (thermalManager.in_temp_isr) CBI(TIMSK0, OCIE0B); else SBI(TIMSK0, OCIE0B); ENABLE_STEPPER_DRIVER_INTERRUPT()
 
   uint16_t timer, remainder, ocr_val;
 
@@ -868,7 +868,10 @@ void Stepper::isr() {
 
     // Restore original ISR settings
     cli();
-    SBI(TIMSK0, OCIE0B);
+    if (thermalManager.in_temp_isr)
+      CBI(TIMSK0, OCIE0B);
+    else
+      SBI(TIMSK0, OCIE0B);
     ENABLE_STEPPER_DRIVER_INTERRUPT();
   }
 
diff --git a/Marlin/temperature.cpp b/Marlin/temperature.cpp
index 8120e0d6c5e..3ff1a7563ab 100644
--- a/Marlin/temperature.cpp
+++ b/Marlin/temperature.cpp
@@ -1483,7 +1483,14 @@ void Temperature::set_current_temp_raw() {
  */
 ISR(TIMER0_COMPB_vect) { Temperature::isr(); }
 
+volatile bool Temperature::in_temp_isr = false;
+
 void Temperature::isr() {
+  //The stepper ISR is allowed to interrupt the temperature ISR, and if it does it will re-enable the temperature ISR
+  //at the end of it's run. In this case, the temperature ISR could be entered again. To prevent this, check in_temp_isr first.
+  if (in_temp_isr) return;
+  in_temp_isr = true;
+  
   //Allow UART and stepper ISRs
   CBI(TIMSK0, OCIE0B); //Disable Temperature ISR
   sei();
@@ -1948,6 +1955,8 @@ void Temperature::isr() {
       e_hit--;
     }
   #endif
-
+  
+  cli();
+  in_temp_isr = false;
   SBI(TIMSK0, OCIE0B); //re-enable Temperature ISR
 }
diff --git a/Marlin/temperature.h b/Marlin/temperature.h
index 182efd5645e..539fc947377 100644
--- a/Marlin/temperature.h
+++ b/Marlin/temperature.h
@@ -60,7 +60,9 @@ class Temperature {
                  target_temperature[HOTENDS],
                  current_temperature_bed_raw,
                  target_temperature_bed;
-
+    
+    static volatile bool in_temp_isr;
+    
     #if ENABLED(TEMP_SENSOR_1_AS_REDUNDANT)
       static float redundant_temperature;
     #endif
