diff --git a/.travis.yml b/.travis.yml
index fecb82a8d1e..985a186fbbc 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -105,10 +105,10 @@ script:
   #- opt_enable MAKRPANEL
   #- build_marlin
   #
-  # REPRAP_DISCOUNT_SMART_CONTROLLER
+  # REPRAP_DISCOUNT_SMART_CONTROLLER, SDSUPPORT, and BABYSTEPPING
   #
   - restore_configs
-  - opt_enable REPRAP_DISCOUNT_SMART_CONTROLLER SDSUPPORT
+  - opt_enable REPRAP_DISCOUNT_SMART_CONTROLLER SDSUPPORT BABYSTEPPING
   - build_marlin
   #
   # G3D_PANEL
diff --git a/Marlin/planner.cpp b/Marlin/planner.cpp
index 5e55c7dd887..9f8a4a3c7c1 100644
--- a/Marlin/planner.cpp
+++ b/Marlin/planner.cpp
@@ -1025,18 +1025,18 @@ void Planner::check_axes_activity() {
    * On CORE machines XYZ is derived from ABC.
    */
   vector_3 Planner::adjusted_position() {
-    vector_3 position = vector_3(stepper.get_axis_position_mm(X_AXIS), stepper.get_axis_position_mm(Y_AXIS), stepper.get_axis_position_mm(Z_AXIS));
+    vector_3 pos = vector_3(stepper.get_axis_position_mm(X_AXIS), stepper.get_axis_position_mm(Y_AXIS), stepper.get_axis_position_mm(Z_AXIS));
 
-    //position.debug("in Planner::position");
-    //bed_level_matrix.debug("in Planner::position");
+    //pos.debug("in Planner::adjusted_position");
+    //bed_level_matrix.debug("in Planner::adjusted_position");
 
     matrix_3x3 inverse = matrix_3x3::transpose(bed_level_matrix);
     //inverse.debug("in Planner::inverse");
 
-    position.apply_rotation(inverse);
-    //position.debug("after rotation");
+    pos.apply_rotation(inverse);
+    //pos.debug("after rotation");
 
-    return position;
+    return pos;
   }
 
 #endif // AUTO_BED_LEVELING_FEATURE && !DELTA
diff --git a/Marlin/temperature.cpp b/Marlin/temperature.cpp
index 7fd25bc8a41..3f5b2d1c533 100644
--- a/Marlin/temperature.cpp
+++ b/Marlin/temperature.cpp
@@ -1835,11 +1835,11 @@ ISR(TIMER0_COMPB_vect) {
       int curTodo = babystepsTodo[axis]; //get rid of volatile for performance
 
       if (curTodo > 0) {
-        babystep(axis,/*fwd*/true);
+        stepper.babystep(axis,/*fwd*/true);
         babystepsTodo[axis]--; //fewer to do next time
       }
       else if (curTodo < 0) {
-        babystep(axis,/*fwd*/false);
+        stepper.babystep(axis,/*fwd*/false);
         babystepsTodo[axis]++; //fewer to do next time
       }
     }
