diff --git a/Marlin/src/libs/numtostr.cpp b/Marlin/src/libs/numtostr.cpp
index ead09d86ca3..6054f877e54 100644
--- a/Marlin/src/libs/numtostr.cpp
+++ b/Marlin/src/libs/numtostr.cpp
@@ -201,7 +201,7 @@ const char* ftostr52(const float &f) {
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
 
   // Convert float to rj string with 1234, _123, -123, _-12, 12.3, _1.2, or -1.2 format
-  char* ftostr4sign(const float &f) {
+  const char* ftostr4sign(const float &f) {
     const int i = (f * 100 + (f < 0 ? -5: 5)) / 10;
     if (!WITHIN(i, -99, 999)) return i16tostr4sign((int)f);
     const bool neg = i < 0;
diff --git a/Marlin/src/libs/numtostr.h b/Marlin/src/libs/numtostr.h
index e1b725f6391..f18df094a3e 100644
--- a/Marlin/src/libs/numtostr.h
+++ b/Marlin/src/libs/numtostr.h
@@ -97,7 +97,7 @@ FORCE_INLINE const char* ftostr3(const float &x) { return i16tostr3(int16_t(x +
 
 #if ENABLED(LCD_DECIMAL_SMALL_XY)
   // Convert float to rj string with 1234, _123, 12.3, _1.2, -123, _-12, or -1.2 format
-  char* ftostr4sign(const float &fx);
+  const char* ftostr4sign(const float &fx);
 #else
   // Convert float to rj string with 1234, _123, -123, __12, _-12, ___1, or __-1 format
   FORCE_INLINE const char* ftostr4sign(const float &x) { return i16tostr4sign(int16_t(x + (x < 0 ? -0.5f : 0.5f))); }
