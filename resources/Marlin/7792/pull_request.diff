diff --git a/Marlin/src/feature/fwretract.cpp b/Marlin/src/feature/fwretract.cpp
index 029a11c4101..3108e7960b1 100644
--- a/Marlin/src/feature/fwretract.cpp
+++ b/Marlin/src/feature/fwretract.cpp
@@ -34,20 +34,7 @@ FWRetract fwretract; // Single instance
 
 #include "../module/motion.h"
 #include "../module/planner.h"
-
-bool FWRetract::autoretract_enabled,                 // M209 S - Autoretract switch
-     FWRetract::retracted[EXTRUDERS] = { false };    // Which extruders are currently retracted
-float FWRetract::retract_length,                     // M207 S - G10 Retract length
-      FWRetract::retract_feedrate_mm_s,              // M207 F - G10 Retract feedrate
-      FWRetract::retract_zlift,                      // M207 Z - G10 Retract hop size
-      FWRetract::retract_recover_length,             // M208 S - G11 Recover length
-      FWRetract::retract_recover_feedrate_mm_s,      // M208 F - G11 Recover feedrate
-      FWRetract::swap_retract_length,                // M207 W - G10 Swap Retract length
-      FWRetract::swap_retract_recover_length,        // M208 W - G11 Swap Recover length
-      FWRetract::swap_retract_recover_feedrate_mm_s; // M208 R - G11 Swap Recover feedrate
-#if EXTRUDERS > 1
-  bool FWRetract::retracted_swap[EXTRUDERS] = { false }; // Which extruders are swap-retracted
-#endif
+#include "../module/stepper.h"
 
 void FWRetract::reset() {
   autoretract_enabled = false;
@@ -59,6 +46,13 @@ void FWRetract::reset() {
   swap_retract_length = RETRACT_LENGTH_SWAP;
   swap_retract_recover_length = RETRACT_RECOVER_LENGTH_SWAP;
   swap_retract_recover_feedrate_mm_s = RETRACT_RECOVER_FEEDRATE_SWAP;
+
+  for (uint8_t i = 0; i < EXTRUDERS; ++i) {
+    retracted[i] = false;
+    #if EXTRUDERS > 1
+      retracted_swap[i] = false;
+    #endif
+  }
 }
 
 /**
@@ -87,10 +81,11 @@ void FWRetract::retract(const bool retracting
   // Simply never allow two retracts or recovers in a row
   if (retracted[active_extruder] == retracting) return;
 
-  #if EXTRUDERS < 2
-    bool swapping = false;
+  #if EXTRUDERS > 1
+    if (!retracting) swapping = retracted_swap[active_extruder];
+  #else
+    const bool swapping = false;
   #endif
-  if (!retracting) swapping = retracted_swap[active_extruder];
 
   /* // debugging
     SERIAL_ECHOLNPAIR("retracting ", retracting);
@@ -106,6 +101,8 @@ void FWRetract::retract(const bool retracting
     SERIAL_ECHOLNPAIR("hop_amount ", hop_amount);
   //*/
 
+  stepper.synchronize();  // Wait for buffered moves to complete
+
   const bool has_zhop = retract_zlift > 0.01;     // Is there a hop set?
 
   const float old_feedrate_mm_s = feedrate_mm_s;
diff --git a/Marlin/src/feature/fwretract.h b/Marlin/src/feature/fwretract.h
index ed6b50d062b..9bd77de4c33 100644
--- a/Marlin/src/feature/fwretract.h
+++ b/Marlin/src/feature/fwretract.h
@@ -31,33 +31,39 @@
 
 class FWRetract {
 public:
-  static bool autoretract_enabled,                 // M209 S - Autoretract switch
-              retracted[EXTRUDERS];                // Which extruders are currently retracted
-  static float retract_length,                     // M207 S - G10 Retract length
-               retract_feedrate_mm_s,              // M207 F - G10 Retract feedrate
-               retract_zlift,                      // M207 Z - G10 Retract hop size
-               retract_recover_length,             // M208 S - G11 Recover length
-               retract_recover_feedrate_mm_s,      // M208 F - G11 Recover feedrate
-               swap_retract_length,                // M207 W - G10 Swap Retract length
-               swap_retract_recover_length,        // M208 W - G11 Swap Recover length
-               swap_retract_recover_feedrate_mm_s; // M208 R - G11 Swap Recover feedrate
+  bool  autoretract_enabled;                // M209 S - Autoretract switch
+  float retract_length,                     // M207 S - G10 Retract length
+        retract_feedrate_mm_s,              // M207 F - G10 Retract feedrate
+        retract_zlift,                      // M207 Z - G10 Retract hop size
+        retract_recover_length,             // M208 S - G11 Recover length
+        retract_recover_feedrate_mm_s,      // M208 F - G11 Recover feedrate
+        swap_retract_length,                // M207 W - G10 Swap Retract length
+        swap_retract_recover_length,        // M208 W - G11 Swap Recover length
+        swap_retract_recover_feedrate_mm_s; // M208 R - G11 Swap Recover feedrate
 
-  #if EXTRUDERS > 1
-    static bool retracted_swap[EXTRUDERS];         // Which extruders are swap-retracted
-  #else
-    static bool constexpr retracted_swap[1] = { false };
-  #endif
+  FWRetract() { reset(); }
+
+  void reset();
 
-  FWRetract() {}
+  void enable_autoretract(bool enable) {
+    autoretract_enabled = enable;
+    for (uint8_t i = 0; i < EXTRUDERS; i++) retracted[i] = false;
+  }
 
-  static void reset();
+  bool is_retracted(uint8_t e) { return retracted[e]; }
 
-  static void retract(const bool retracting
+  void retract(const bool retracting
     #if EXTRUDERS > 1
       , bool swapping = false
     #endif
   );
 
+private:
+  bool retracted[EXTRUDERS];                // Which extruders are currently retracted
+
+  #if EXTRUDERS > 1
+    bool retracted_swap[EXTRUDERS];         // Which extruders are swap-retracted
+  #endif
 };
 
 extern FWRetract fwretract;
diff --git a/Marlin/src/gcode/feature/fwretract/G10_G11.cpp b/Marlin/src/gcode/feature/fwretract/G10_G11.cpp
index 86c1037a75d..9231386d351 100644
--- a/Marlin/src/gcode/feature/fwretract/G10_G11.cpp
+++ b/Marlin/src/gcode/feature/fwretract/G10_G11.cpp
@@ -34,7 +34,6 @@
 void GcodeSuite::G10() {
   #if EXTRUDERS > 1
     const bool rs = parser.boolval('S');
-    fwretract.retracted_swap[active_extruder] = rs; // Use 'S' for swap, default to false
   #endif
   fwretract.retract(true
     #if EXTRUDERS > 1
diff --git a/Marlin/src/gcode/feature/fwretract/M207-M209.cpp b/Marlin/src/gcode/feature/fwretract/M207-M209.cpp
index f319cec9c44..827f03ebb06 100644
--- a/Marlin/src/gcode/feature/fwretract/M207-M209.cpp
+++ b/Marlin/src/gcode/feature/fwretract/M207-M209.cpp
@@ -65,8 +65,7 @@ void GcodeSuite::M208() {
 void GcodeSuite::M209() {
   if (MIN_AUTORETRACT <= MAX_AUTORETRACT) {
     if (parser.seen('S')) {
-      fwretract.autoretract_enabled = parser.value_bool();
-      for (uint8_t i = 0; i < EXTRUDERS; i++) fwretract.retracted[i] = false;
+      fwretract.enable_autoretract(parser.value_bool());
     }
   }
 }
diff --git a/Marlin/src/gcode/motion/G0_G1.cpp b/Marlin/src/gcode/motion/G0_G1.cpp
index d2fe3f98b25..b4e080af9cf 100644
--- a/Marlin/src/gcode/motion/G0_G1.cpp
+++ b/Marlin/src/gcode/motion/G0_G1.cpp
@@ -51,7 +51,7 @@ void GcodeSuite::G0_G1(
         if (fwretract.autoretract_enabled && parser.seen('E') && !(parser.seen('X') || parser.seen('Y') || parser.seen('Z'))) {
           const float echange = destination[E_AXIS] - current_position[E_AXIS];
           // Is this a retract or recover move?
-          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.retracted[active_extruder] == (echange > 0.0)) {
+          if (WITHIN(FABS(echange), MIN_AUTORETRACT, MAX_AUTORETRACT) && fwretract.is_retracted(active_extruder) == (echange > 0.0)) {
             current_position[E_AXIS] = destination[E_AXIS]; // Hide a G1-based retract/recover from calculations
             sync_plan_position_e();                         // AND from the planner
             return fwretract.retract(echange < 0.0);        // Firmware-based retract/recover (double-retract ignored)
