diff --git a/numpy/core/src/multiarray/scalartypes.c.src b/numpy/core/src/multiarray/scalartypes.c.src
index 5618e2d19e3..bb11ab80274 100644
--- a/numpy/core/src/multiarray/scalartypes.c.src
+++ b/numpy/core/src/multiarray/scalartypes.c.src
@@ -437,6 +437,18 @@ gentype_format(PyObject *self, PyObject *args)
     return ret;
 }
 
+/*
+ * override method lookup for inconsistent handling of
+ * __radd__ on c-extension types with dual inheritanace
+ */
+static PyObject *
+chartype_radd(PyObject *self, PyObject *args)
+{
+    Py_INCREF(Py_NotImplemented);
+    return Py_NotImplemented;
+}
+
+
 #ifdef FORCE_NO_LONG_DOUBLE_FORMATTING
 #undef NPY_LONGDOUBLE_FMT
 #define NPY_LONGDOUBLE_FMT NPY_DOUBLE_FMT
@@ -2066,6 +2078,11 @@ static PyMethodDef gentype_methods[] = {
     {NULL, NULL, 0, NULL} /* sentinel */
 };
 
+static PyMethodDef chartype_methods[] = {
+    {"__radd__",
+        (PyCFunction)chartype_radd, METH_VARARGS, NULL},
+    {NULL, NULL, 0, NULL} /* sentinel */
+};
 
 static PyGetSetDef voidtype_getsets[] = {
     {"flags",
@@ -4069,6 +4086,8 @@ initialize_numeric_types(void)
     PyGenericArrType_Type.tp_str = gentype_str;
     PyGenericArrType_Type.tp_richcompare = gentype_richcompare;
 
+    PyCharacterArrType_Type.tp_methods = chartype_methods;
+
     PyBoolArrType_Type.tp_as_number = &bool_arrtype_as_number;
     /*
      * need to add dummy versions with filled-in nb_index
diff --git a/numpy/core/tests/test_regression.py b/numpy/core/tests/test_regression.py
index a3c94e312f5..c7646e04daa 100644
--- a/numpy/core/tests/test_regression.py
+++ b/numpy/core/tests/test_regression.py
@@ -2260,5 +2260,17 @@ def test_scalar_copy(self):
             item2 = copy.copy(item)
             assert_equal(item, item2)
 
+
+    def test_char_radd(self):
+        # GH issue 9620, used to reach gentype_add and raise TypeError
+        np_s = np.string_('abc')
+        np_u = np.unicode_('abc')
+        s = 'def'
+        u = u'def'
+        assert np_s.__radd__(np_s) is NotImplemented
+        assert np_u.__radd__(np_u) is NotImplemented
+        assert s + np_s == 'defabc'
+        assert u + np_u == u'defabc'
+
 if __name__ == "__main__":
     run_module_suite()
