diff --git a/numpy/core/setup.py b/numpy/core/setup.py
index a51eb690b4c..bad45787ce9 100644
--- a/numpy/core/setup.py
+++ b/numpy/core/setup.py
@@ -764,6 +764,7 @@ def generate_multiarray_templated_sources(ext, build_dir):
             join('src', 'multiarray', 'ucsnarrow.h'),
             join('src', 'multiarray', 'usertypes.h'),
             join('src', 'multiarray', 'vdot.h'),
+            join('src', 'private', 'npy_config.h'),
             join('src', 'private', 'templ_common.h.src'),
             join('src', 'private', 'lowlevel_strided_loops.h'),
             join('include', 'numpy', 'arrayobject.h'),
diff --git a/numpy/core/src/multiarray/common.c b/numpy/core/src/multiarray/common.c
index 816778b91f8..a5f3b3d5539 100644
--- a/numpy/core/src/multiarray/common.c
+++ b/numpy/core/src/multiarray/common.c
@@ -684,7 +684,16 @@ _IsAligned(PyArrayObject *ap)
 
     /* alignment 1 types should have a efficient alignment for copy loops */
     if (PyArray_ISFLEXIBLE(ap) || PyArray_ISSTRING(ap)) {
-        alignment = NPY_MAX_COPY_ALIGNMENT;
+        npy_intp itemsize = PyArray_ITEMSIZE(ap);
+        /* power of two sizes may be loaded in larger moves */
+        if (((itemsize & (itemsize - 1)) == 0)) {
+            alignment = itemsize > NPY_MAX_COPY_ALIGNMENT ?
+                NPY_MAX_COPY_ALIGNMENT : itemsize;
+        }
+        else {
+            /* if not power of two it will be accessed bytewise */
+            alignment = 1;
+        }
     }
 
     if (alignment == 1) {
diff --git a/numpy/core/src/private/npy_config.h b/numpy/core/src/private/npy_config.h
index 882913e2f20..44ac73a30c3 100644
--- a/numpy/core/src/private/npy_config.h
+++ b/numpy/core/src/private/npy_config.h
@@ -3,6 +3,7 @@
 
 #include "config.h"
 #include "numpy/numpyconfig.h"
+#include "numpy/npy_cpu.h"
 
 /* Disable broken MS math functions */
 #if defined(_MSC_VER) || defined(__MINGW32_VERSION)
@@ -19,7 +20,11 @@
  * amd64 is not harmed much by the bloat as the system provides 16 byte
  * alignment by default.
  */
+#if (defined NPY_CPU_X86 || defined _WIN32)
+#define NPY_MAX_COPY_ALIGNMENT 8
+#else
 #define NPY_MAX_COPY_ALIGNMENT 16
+#endif
 
 /* Disable broken Sun Workshop Pro math functions */
 #ifdef __SUNPRO_C
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index 1e47a22978e..129f3942e0d 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -68,6 +68,17 @@ def test_otherflags(self):
         assert_equal(self.a.flags.aligned, True)
         assert_equal(self.a.flags.updateifcopy, False)
 
+    def test_string_align(self):
+        a = np.zeros(4, dtype=np.dtype('|S4'))
+        assert_(a.flags.aligned)
+        # not power of two are accessed bytewise and thus considered aligned
+        a = np.zeros(5, dtype=np.dtype('|S4'))
+        assert_(a.flags.aligned)
+
+    def test_void_align(self):
+        a = np.zeros(4, dtype=np.dtype([("a", "i4"), ("b", "i4")]))
+        assert_(a.flags.aligned)
+
 class TestHash(TestCase):
     # see #3793
     def test_int(self):
