diff --git a/numpy/lib/histograms.py b/numpy/lib/histograms.py
index 2dc2df31b81..21a7ab8bef6 100644
--- a/numpy/lib/histograms.py
+++ b/numpy/lib/histograms.py
@@ -228,7 +228,7 @@ def _get_outer_edges(a, range):
     if first_edge > last_edge:
         raise ValueError(
             'max must be larger than min in range parameter.')
-    if not np.all(np.isfinite([first_edge, last_edge])):
+    if not (np.isfinite(first_edge) and np.isfinite(last_edge)):
         raise ValueError(
             'range parameter must be finite.')
     if first_edge == last_edge:
diff --git a/numpy/lib/tests/test_histograms.py b/numpy/lib/tests/test_histograms.py
index 59baf91fe02..8319041b8ac 100644
--- a/numpy/lib/tests/test_histograms.py
+++ b/numpy/lib/tests/test_histograms.py
@@ -238,6 +238,17 @@ def test_unsigned_monotonicity_check(self):
         with assert_raises(ValueError):
             hist, edges = np.histogram(arr, bins=bins)
 
+    def test_object_array_of_0d(self):
+        # gh-7864
+        assert_raises(ValueError,
+            histogram, [np.array([0.4]) for i in range(10)] + [-np.inf])
+        assert_raises(ValueError,
+            histogram, [np.array([0.4]) for i in range(10)] + [np.inf])
+
+        # these should not crash
+        np.histogram([np.array([0.5]) for i in range(10)] + [.500000000000001])
+        np.histogram([np.array([0.5]) for i in range(10)] + [.5])
+
 
 class TestHistogramOptimBinNums(object):
     """
