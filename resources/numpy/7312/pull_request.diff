diff --git a/numpy/ma/core.py b/numpy/ma/core.py
index 72774b82040..390b08b8581 100644
--- a/numpy/ma/core.py
+++ b/numpy/ma/core.py
@@ -4775,7 +4775,7 @@ def dot(self, b, out=None, strict=False):
         """
         return dot(self, b, out=out, strict=strict)
 
-    def sum(self, axis=None, dtype=None, out=None):
+    def sum(self, axis=None, dtype=None, out=None, keepdims=False):
         """
         Return the sum of the array elements over the given axis.
         Masked elements are set to 0 internally.
@@ -4795,6 +4795,9 @@ def sum(self, axis=None, dtype=None, out=None):
             Alternative output array in which to place the result. It must
             have the same shape and buffer length as the expected output
             but the type will be cast if necessary.
+        keepdims : bool, optional
+            If this is set to True, the axes which are reduced are left
+            in the result as dimensions with size one.
 
         Returns
         -------
@@ -4825,7 +4828,7 @@ def sum(self, axis=None, dtype=None, out=None):
         newmask = _check_mask_axis(_mask, axis)
         # No explicit output
         if out is None:
-            result = self.filled(0).sum(axis, dtype=dtype)
+            result = self.filled(0).sum(axis, dtype=dtype, keepdims=keepdims)
             rndim = getattr(result, 'ndim', 0)
             if rndim:
                 result = result.view(type(self))
@@ -4834,7 +4837,7 @@ def sum(self, axis=None, dtype=None, out=None):
                 result = masked
             return result
         # Explicit output
-        result = self.filled(0).sum(axis, dtype=dtype, out=out)
+        result = self.filled(0).sum(axis, dtype=dtype, out=out, keepdims=keepdims)
         if isinstance(out, MaskedArray):
             outmask = getattr(out, '_mask', nomask)
             if (outmask is nomask):
diff --git a/numpy/ma/tests/test_core.py b/numpy/ma/tests/test_core.py
index 12fb37bec0f..cdf008da31f 100644
--- a/numpy/ma/tests/test_core.py
+++ b/numpy/ma/tests/test_core.py
@@ -4262,6 +4262,29 @@ def test_default_fill_value_complex():
     # regression test for Python 3, where 'unicode' was not defined
     assert_(default_fill_value(1 + 1j) == 1.e20 + 0.0j)
 
+
+def test_sum_keepdims():
+
+    # Regression test for numpy/numpy#7312 which was due to masked_array.sum
+    # not supporting the keepdims option.
+
+    # First make sure keepdims works when called explicitly
+    result = np.sum(np.ma.masked_array([1, 2, 3], mask=[0, 0, 1]), keepdims=True)
+    assert result.shape == (1,)
+    assert result[0] == 3
+
+    # Also check that nanvar works correctly (which requires sum to support
+    # keepdims)
+    result = np.nanvar(np.ma.masked_array([1, 2, np.nan], mask=[0, 0, 1]))
+    assert result == 0.25
+
+    # Finally, also make sure that everything works correctly when using the
+    # 'out=' option
+    result = np.zeros(1)
+    np.sum(np.ma.masked_array([1, 2, 3], mask=[0, 0, 1]), keepdims=True, out=result)
+    assert result[0] == 3
+
+
 ###############################################################################
 if __name__ == "__main__":
     run_module_suite()
