diff --git a/numpy/lib/histograms.py b/numpy/lib/histograms.py
index 5bcedc7f44c..8474bd5d3c4 100644
--- a/numpy/lib/histograms.py
+++ b/numpy/lib/histograms.py
@@ -3,6 +3,7 @@
 """
 from __future__ import division, absolute_import, print_function
 
+import contextlib
 import functools
 import operator
 import warnings
@@ -922,7 +923,13 @@ def histogram(a, bins=10, range=None, normed=None, weights=None,
 
 def _histogramdd_dispatcher(sample, bins=None, range=None, normed=None,
                             weights=None, density=None):
-    return (sample, bins, weights)
+    if hasattr(sample, 'shape'):  # same condition as used in histogramdd
+        yield sample
+    else:
+        yield from sample
+    with contextlib.suppress(TypeError):
+        yield from bins
+    yield weights
 
 
 @array_function_dispatch(_histogramdd_dispatcher)
diff --git a/numpy/lib/twodim_base.py b/numpy/lib/twodim_base.py
index e165c9b02df..0b4e3021a73 100644
--- a/numpy/lib/twodim_base.py
+++ b/numpy/lib/twodim_base.py
@@ -565,7 +565,20 @@ def vander(x, N=None, increasing=False):
 
 def _histogram2d_dispatcher(x, y, bins=None, range=None, normed=None,
                             weights=None, density=None):
-    return (x, y, bins, weights)
+    yield x
+    yield y
+
+    # This terrible logic is adapted from the checks in histogram2d
+    try:
+        N = len(bins)
+    except TypeError:
+        N = 1
+    if N != 1 and N != 2:
+        yield from bins  # bins=[x, y]
+    else:
+        yield bins
+
+    yield weights
 
 
 @array_function_dispatch(_histogram2d_dispatcher)
