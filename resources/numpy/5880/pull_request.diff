diff --git a/numpy/lib/function_base.py b/numpy/lib/function_base.py
index 04063755cf2..c1238364732 100644
--- a/numpy/lib/function_base.py
+++ b/numpy/lib/function_base.py
@@ -1773,7 +1773,19 @@ def _get_ufunc_and_otypes(self, func, args):
             # the subsequent call when the ufunc is evaluated.
             # Assumes that ufunc first evaluates the 0th elements in the input
             # arrays (the input values are not checked to ensure this)
-            inputs = [asarray(_a).flat[0] for _a in args]
+            #
+            # If there are empty arrays, we instead use a default-constructed
+            # element of the input empty input type.
+            arrinputs = [asarray(_a) for _a in args]
+            if not all(_a.size for _a in arrinputs):
+                msg = ('A function wrapped with numpy.vectorize is being '
+                       'called with arbitrary values to determine output '
+                       'types for an input array of size zero. This warning '
+                       'could be avoided by explicitly defining the otypes '
+                       'in the numpy.vectorize call.')
+                warnings.warn(msg, RuntimeWarning)
+            inputs = [_a.flat[0] if _a.size else _a.dtype.type()
+                      for _a in arrinputs]
             outputs = func(*inputs)
 
             # Performance note: profiling indicates that -- for simple
diff --git a/numpy/lib/tests/test_function_base.py b/numpy/lib/tests/test_function_base.py
index ad71fd3fa64..9325fe400d1 100644
--- a/numpy/lib/tests/test_function_base.py
+++ b/numpy/lib/tests/test_function_base.py
@@ -814,6 +814,21 @@ def test_otypes(self):
         x = np.arange(5)
         assert_array_equal(f(x), x)
 
+    def test_zero_size_array(self):
+        # gh-5868
+
+        def f(x):
+            return x + 1
+        wrapped_f = np.vectorize(f)
+        for shape in (5, 0), (5, 1), (5,), ():
+            x = np.ones(shape)
+            desired_y = f(x)
+            if not x.size:
+                actual_y = assert_warns(RuntimeWarning, wrapped_f, x)
+            else:
+                actual_y = wrapped_f(x)
+            assert_array_equal(actual_y, desired_y)
+
 
 class TestDigitize(TestCase):
     def test_forward(self):
