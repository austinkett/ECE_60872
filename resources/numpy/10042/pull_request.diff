diff --git a/numpy/core/src/multiarray/number.c b/numpy/core/src/multiarray/number.c
index dbf71230a78..915d743c835 100644
--- a/numpy/core/src/multiarray/number.c
+++ b/numpy/core/src/multiarray/number.c
@@ -16,6 +16,15 @@
 
 #include "binop_override.h"
 
+/* <2.7.11 and <3.4.4 have the wrong argument type for Py_EnterRecursiveCall */
+#if (PY_VERSION_HEX < 0x02070B00) || \
+    ((0x03000000 <= PY_VERSION_HEX) && (PY_VERSION_HEX < 0x03040400))
+    #define _Py_EnterRecursiveCall(x) Py_EnterRecursiveCall((char *)(x))
+#else
+    #define _Py_EnterRecursiveCall(x) Py_EnterRecursiveCall(x)
+#endif
+
+
 /*************************************************************************
  ****************   Implement Number Protocol ****************************
  *************************************************************************/
@@ -785,7 +794,7 @@ _array_nonzero(PyArrayObject *mp)
     n = PyArray_SIZE(mp);
     if (n == 1) {
         int res;
-        if (Py_EnterRecursiveCall(" while converting array to bool")) {
+        if (_Py_EnterRecursiveCall(" while converting array to bool")) {
             return -1;
         }
         res = PyArray_DESCR(mp)->f->nonzero(PyArray_DATA(mp), mp);
@@ -814,213 +823,112 @@ _array_nonzero(PyArrayObject *mp)
     }
 }
 
-
+/*
+ * Convert the array to a scalar if allowed, and apply the builtin function
+ * to it. The where argument is passed onto Py_EnterRecursiveCall when the
+ * array contains python objects.
+ */
 NPY_NO_EXPORT PyObject *
-array_int(PyArrayObject *v)
+array_scalar_forward(PyArrayObject *v,
+                     PyObject *(*builtin_func)(PyObject *),
+                     const char *where)
 {
-    PyObject *pv, *pv2;
+    PyObject *scalar;
     if (PyArray_SIZE(v) != 1) {
-        PyErr_SetString(PyExc_TypeError, "only length-1 arrays can be"\
+        PyErr_SetString(PyExc_TypeError, "only size-1 arrays can be"\
                         " converted to Python scalars");
         return NULL;
     }
-    pv = PyArray_GETITEM(v, PyArray_DATA(v));
-    if (pv == NULL) {
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number == 0) {
-        PyErr_SetString(PyExc_TypeError, "cannot convert to an int; "\
-                        "scalar object is not a number");
-        Py_DECREF(pv);
+
+    scalar = PyArray_GETITEM(v, PyArray_DATA(v));
+    if (scalar == NULL) {
         return NULL;
     }
-    if (Py_TYPE(pv)->tp_as_number->nb_int == 0) {
-        PyErr_SetString(PyExc_TypeError, "don't know how to convert "\
-                        "scalar number to int");
-        Py_DECREF(pv);
-        return NULL;
+
+    /* Need to guard against recursion if our array holds references */
+    if (PyDataType_REFCHK(PyArray_DESCR(v))) {
+        PyObject *res;
+        if (_Py_EnterRecursiveCall(where) != 0) {
+            Py_DECREF(scalar);
+            return NULL;
+        }
+        res = builtin_func(scalar);
+        Py_DECREF(scalar);
+        Py_LeaveRecursiveCall();
+        return res;
     }
-    /*
-     * If we still got an array which can hold references, stop
-     * because it could point back at 'v'.
-     */
-    if (PyArray_Check(pv) &&
-                PyDataType_REFCHK(PyArray_DESCR((PyArrayObject *)pv))) {
-        PyErr_SetString(PyExc_TypeError,
-                "object array may be self-referencing");
-        Py_DECREF(pv);
-        return NULL;
+    else {
+        PyObject *res;
+        res = builtin_func(scalar);
+        Py_DECREF(scalar);
+        return res;
     }
-
-    pv2 = Py_TYPE(pv)->tp_as_number->nb_int(pv);
-    Py_DECREF(pv);
-    return pv2;
 }
 
-static PyObject *
+
+NPY_NO_EXPORT PyObject *
 array_float(PyArrayObject *v)
 {
-    PyObject *pv, *pv2;
-    if (PyArray_SIZE(v) != 1) {
-        PyErr_SetString(PyExc_TypeError, "only length-1 arrays can "\
-                        "be converted to Python scalars");
-        return NULL;
-    }
-    pv = PyArray_GETITEM(v, PyArray_DATA(v));
-    if (pv == NULL) {
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number == 0) {
-        PyErr_SetString(PyExc_TypeError, "cannot convert to a "\
-                        "float; scalar object is not a number");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number->nb_float == 0) {
-        PyErr_SetString(PyExc_TypeError, "don't know how to convert "\
-                        "scalar number to float");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    /*
-     * If we still got an array which can hold references, stop
-     * because it could point back at 'v'.
-     */
-    if (PyArray_Check(pv) &&
-                    PyDataType_REFCHK(PyArray_DESCR((PyArrayObject *)pv))) {
-        PyErr_SetString(PyExc_TypeError,
-                "object array may be self-referencing");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    pv2 = Py_TYPE(pv)->tp_as_number->nb_float(pv);
-    Py_DECREF(pv);
-    return pv2;
+    return array_scalar_forward(v, &PyNumber_Float, " in ndarray.__float__");
 }
 
-#if !defined(NPY_PY3K)
+#if defined(NPY_PY3K)
 
-static PyObject *
+NPY_NO_EXPORT PyObject *
+array_int(PyArrayObject *v)
+{
+    return array_scalar_forward(v, &PyNumber_Long, " in ndarray.__int__");
+}
+
+#else
+
+NPY_NO_EXPORT PyObject *
+array_int(PyArrayObject *v)
+{
+    return array_scalar_forward(v, &PyNumber_Int, " in ndarray.__int__");
+}
+
+NPY_NO_EXPORT PyObject *
 array_long(PyArrayObject *v)
 {
-    PyObject *pv, *pv2;
-    if (PyArray_SIZE(v) != 1) {
-        PyErr_SetString(PyExc_TypeError, "only length-1 arrays can "\
-                        "be converted to Python scalars");
-        return NULL;
-    }
-    pv = PyArray_GETITEM(v, PyArray_DATA(v));
-    if (pv == NULL) {
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number == 0) {
-        PyErr_SetString(PyExc_TypeError, "cannot convert to an int; "\
-                        "scalar object is not a number");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number->nb_long == 0) {
-        PyErr_SetString(PyExc_TypeError, "don't know how to convert "\
-                        "scalar number to long");
-        Py_DECREF(pv);
+    return array_scalar_forward(v, &PyNumber_Long, " in ndarray.__long__");
+}
+
+/* hex and oct aren't exposed to the C api, but we need a function pointer */
+static PyObject *
+_PyNumber_Oct(PyObject *o) {
+    PyObject *res;
+    PyObject *mod = PyImport_ImportModule("__builtin__");
+    if (mod == NULL) {
         return NULL;
     }
-    /*
-     * If we still got an array which can hold references, stop
-     * because it could point back at 'v'.
-     */
-    if (PyArray_Check(pv) &&
-                    PyDataType_REFCHK(PyArray_DESCR((PyArrayObject *)pv))) {
-        PyErr_SetString(PyExc_TypeError,
-                "object array may be self-referencing");
-        Py_DECREF(pv);
+    res = PyObject_CallMethod(mod, "oct", "(O)", o);
+    Py_DECREF(mod);
+    return res;
+}
+
+static PyObject *
+_PyNumber_Hex(PyObject *o) {
+    PyObject *res;
+    PyObject *mod = PyImport_ImportModule("__builtin__");
+    if (mod == NULL) {
         return NULL;
     }
-    pv2 = Py_TYPE(pv)->tp_as_number->nb_long(pv);
-    Py_DECREF(pv);
-    return pv2;
+    res = PyObject_CallMethod(mod, "hex", "(O)", o);
+    Py_DECREF(mod);
+    return res;
 }
 
-static PyObject *
+NPY_NO_EXPORT PyObject *
 array_oct(PyArrayObject *v)
 {
-    PyObject *pv, *pv2;
-    if (PyArray_SIZE(v) != 1) {
-        PyErr_SetString(PyExc_TypeError, "only length-1 arrays can "\
-                        "be converted to Python scalars");
-        return NULL;
-    }
-    pv = PyArray_GETITEM(v, PyArray_DATA(v));
-    if (pv == NULL) {
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number == 0) {
-        PyErr_SetString(PyExc_TypeError, "cannot convert to an int; "\
-                        "scalar object is not a number");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number->nb_oct == 0) {
-        PyErr_SetString(PyExc_TypeError, "don't know how to convert "\
-                        "scalar number to oct");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    /*
-     * If we still got an array which can hold references, stop
-     * because it could point back at 'v'.
-     */
-    if (PyArray_Check(pv) &&
-                    PyDataType_REFCHK(PyArray_DESCR((PyArrayObject *)pv))) {
-        PyErr_SetString(PyExc_TypeError,
-                "object array may be self-referencing");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    pv2 = Py_TYPE(pv)->tp_as_number->nb_oct(pv);
-    Py_DECREF(pv);
-    return pv2;
+    return array_scalar_forward(v, &_PyNumber_Oct, " in ndarray.__oct__");
 }
 
-static PyObject *
+NPY_NO_EXPORT PyObject *
 array_hex(PyArrayObject *v)
 {
-    PyObject *pv, *pv2;
-    if (PyArray_SIZE(v) != 1) {
-        PyErr_SetString(PyExc_TypeError, "only length-1 arrays can "\
-                        "be converted to Python scalars");
-        return NULL;
-    }
-    pv = PyArray_GETITEM(v, PyArray_DATA(v));
-    if (pv == NULL) {
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number == 0) {
-        PyErr_SetString(PyExc_TypeError, "cannot convert to an int; "\
-                        "scalar object is not a number");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    if (Py_TYPE(pv)->tp_as_number->nb_hex == 0) {
-        PyErr_SetString(PyExc_TypeError, "don't know how to convert "\
-                        "scalar number to hex");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    /*
-     * If we still got an array which can hold references, stop
-     * because it could point back at 'v'.
-     */
-    if (PyArray_Check(pv) &&
-                    PyDataType_REFCHK(PyArray_DESCR((PyArrayObject *)pv))) {
-        PyErr_SetString(PyExc_TypeError,
-                "object array may be self-referencing");
-        Py_DECREF(pv);
-        return NULL;
-    }
-    pv2 = Py_TYPE(pv)->tp_as_number->nb_hex(pv);
-    Py_DECREF(pv);
-    return pv2;
+    return array_scalar_forward(v, &_PyNumber_Hex, " in ndarray.__hex__");
 }
 
 #endif
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index 90cc473bc5a..a625a1bce18 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -6711,6 +6711,34 @@ def __bool__(self):
             Error = RuntimeError  # python < 3.5
         assert_raises(Error, bool, self_containing)  # previously stack overflow
 
+    def test_to_int_scalar(self):
+        # gh-9972 means that these aren't always the same
+        int_funcs = (int, lambda x: x.__int__())
+        for int_func in int_funcs:
+            assert_equal(int_func(np.array([1])), 1)
+            assert_equal(int_func(np.array([0])), 0)
+            assert_equal(int_func(np.array([[42]])), 42)
+            assert_raises(TypeError, int_func, np.array([1, 2]))
+
+            # gh-9972
+            assert_equal(4, int_func(np.array('4')))
+            assert_equal(5, int_func(np.bytes_(b'5')))
+            assert_equal(6, int_func(np.unicode_(u'6')))
+
+            class HasTrunc:
+                def __trunc__(self):
+                    return 3
+            assert_equal(3, int_func(np.array(HasTrunc())))
+            assert_equal(3, int_func(np.array([HasTrunc()])))
+
+            class NotConvertible(object):
+                def __int__(self):
+                    raise NotImplementedError
+            assert_raises(NotImplementedError,
+                int_func, np.array(NotConvertible()))
+            assert_raises(NotImplementedError,
+                int_func, np.array([NotConvertible()]))
+
 
 class TestWhere(object):
     def test_basic(self):
diff --git a/numpy/core/tests/test_regression.py b/numpy/core/tests/test_regression.py
index fca3312b93d..73edaec0b48 100644
--- a/numpy/core/tests/test_regression.py
+++ b/numpy/core/tests/test_regression.py
@@ -20,6 +20,10 @@
         )
 from numpy.compat import asbytes, asunicode, long
 
+try:
+    RecursionError
+except NameError:
+    RecursionError = RuntimeError  # python < 3.5
 
 class TestRegression(object):
     def test_invalid_round(self):
@@ -1683,25 +1687,47 @@ def test_object_array_self_reference(self):
         # Object arrays with references to themselves can cause problems
         a = np.array(0, dtype=object)
         a[()] = a
-        assert_raises(TypeError, int, a)
-        assert_raises(TypeError, long, a)
-        assert_raises(TypeError, float, a)
-        assert_raises(TypeError, oct, a)
-        assert_raises(TypeError, hex, a)
-
+        assert_raises(RecursionError, int, a)
+        assert_raises(RecursionError, long, a)
+        assert_raises(RecursionError, float, a)
+        if sys.version_info.major == 2:
+            # in python 3, this falls back on operator.index, which fails on
+            # on dtype=object
+            assert_raises(RecursionError, oct, a)
+            assert_raises(RecursionError, hex, a)
+        a[()] = None
+
+    def test_object_array_circular_reference(self):
         # Test the same for a circular reference.
-        b = np.array(a, dtype=object)
+        a = np.array(0, dtype=object)
+        b = np.array(0, dtype=object)
         a[()] = b
-        assert_raises(TypeError, int, a)
+        b[()] = a
+        assert_raises(RecursionError, int, a)
         # NumPy has no tp_traverse currently, so circular references
         # cannot be detected. So resolve it:
-        a[()] = 0
+        a[()] = None
 
         # This was causing a to become like the above
         a = np.array(0, dtype=object)
         a[...] += 1
         assert_equal(a, 1)
 
+    def test_object_array_nested(self):
+        # but is fine with a reference to a different array
+        a = np.array(0, dtype=object)
+        b = np.array(0, dtype=object)
+        a[()] = b
+        assert_equal(int(a), int(0))
+        assert_equal(long(a), long(0))
+        assert_equal(float(a), float(0))
+        if sys.version_info.major == 2:
+            # in python 3, this falls back on operator.index, which fails on
+            # on dtype=object
+            assert_equal(oct(a), oct(0))
+            assert_equal(hex(a), hex(0))
+
+
     def test_object_array_self_copy(self):
         # An object array being copied into itself DECREF'ed before INCREF'ing
         # causing segmentation faults (gh-3787)
