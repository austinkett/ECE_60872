diff --git a/numpy/lib/tests/test_type_check.py b/numpy/lib/tests/test_type_check.py
index f7430c27d12..f28bd49ade1 100644
--- a/numpy/lib/tests/test_type_check.py
+++ b/numpy/lib/tests/test_type_check.py
@@ -278,10 +278,16 @@ def test_generic(self):
 
     def test_integer(self):
         vals = nan_to_num(1)
-        assert_all(vals == 1)
+        assert_all(type(vals) == np.int64)
         vals = nan_to_num([1])
         assert_array_equal(vals, np.array([1], np.int))
 
+    def test_float(self):
+        vals = nan_to_num(1.0)
+        assert_all(type(vals) == np.float64)
+        vals = nan_to_num([1.0])
+        assert_array_equal(vals, np.array([1.0], np.float))
+        
     def test_complex_good(self):
         vals = nan_to_num(1+1j)
         assert_all(vals == 1+1j)
diff --git a/numpy/lib/type_check.py b/numpy/lib/type_check.py
index 1313adff718..876e0114825 100644
--- a/numpy/lib/type_check.py
+++ b/numpy/lib/type_check.py
@@ -357,13 +357,13 @@ def nan_to_num(x):
     """
     x = _nx.array(x, subok=True)
     xtype = x.dtype.type
+    isscalar = (x.ndim == 0)
+    x = x[None] if isscalar else x
     if not issubclass(xtype, _nx.inexact):
-        return x
+        return x[0] if isscalar else x
 
     iscomplex = issubclass(xtype, _nx.complexfloating)
-    isscalar = (x.ndim == 0)
 
-    x = x[None] if isscalar else x
     dest = (x.real, x.imag) if iscomplex else (x,)
     maxf, minf = _getmaxmin(x.real.dtype)
     for d in dest:
