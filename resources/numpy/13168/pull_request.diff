diff --git a/numpy/core/src/multiarray/datetime.c b/numpy/core/src/multiarray/datetime.c
index a33f643f1bf..8c97ed54001 100644
--- a/numpy/core/src/multiarray/datetime.c
+++ b/numpy/core/src/multiarray/datetime.c
@@ -462,8 +462,21 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
             break;
 
         case NPY_FR_W:
-            /* A week is 7 days */
-            set_datetimestruct_days(dt * 7, out);
+            /*
+             * A week is 7 days but we can overflow
+             * if we apply the product directly, so
+             * iteratively account for week when near
+             * max int64 value
+             */
+            if ((dt > 0 && (dt > (NPY_MAX_INT64 / 7))) ||
+                (dt < 0 && (dt < NPY_MIN_INT64 / 7))) {
+                for (int i = 0; i < 7; ++i) {
+                    set_datetimestruct_days(dt, out);
+                }
+            }
+            else {
+                set_datetimestruct_days(dt * 7, out);
+            }
             break;
 
         case NPY_FR_D:
@@ -478,7 +491,12 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                /*
+                 * Careful with extra arithmetic on time delta subtraction
+                 * from the epoch--if dt is near the negative time span
+                 * limit it will be susceptible to overflow
+                 */
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)dt;
@@ -492,7 +510,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / 60);
@@ -507,7 +525,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / (60*60));
@@ -523,7 +541,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / (60*60*1000LL));
@@ -540,7 +558,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / (60*60*1000000LL));
@@ -557,7 +575,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / (60*60*1000000000LL));
@@ -575,7 +593,7 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
                 dt  = dt % perday;
             }
             else {
-                set_datetimestruct_days((dt - (perday-1)) / perday, out);
+                set_datetimestruct_days(dt / perday - (1 - 1/perday), out);
                 dt = (perday-1) + (dt + 1) % perday;
             }
             out->hour = (int)(dt / (60*60*1000000000000LL));
diff --git a/numpy/core/tests/test_datetime.py b/numpy/core/tests/test_datetime.py
index 8d480e7a3a6..7783b383b12 100644
--- a/numpy/core/tests/test_datetime.py
+++ b/numpy/core/tests/test_datetime.py
@@ -1,6 +1,7 @@
 from __future__ import division, absolute_import, print_function
 
 
+import operator
 import numpy
 import numpy as np
 import datetime
@@ -2220,6 +2221,33 @@ def test_corecursive_input(self):
         assert_raises(RecursionError, obj_arr.astype, 'M8')
         assert_raises(RecursionError, obj_arr.astype, 'm8')
 
+    @pytest.mark.parametrize("op1, op2, op3", [
+        # operator check / roundtrip test sequences
+        # around unix epoch
+        (operator.add, operator.gt, operator.sub),
+        (operator.sub, operator.lt, operator.add),
+    ])
+    @pytest.mark.parametrize("time_unit", [
+        "Y", "M", "W", "D", "h", "m",
+        "s", "ms", "us", "ns", "ps",
+        "fs", "as",
+        ])
+    def test_time_span_limit_symmetry(self, time_unit, op1, op2, op3):
+        # time spans around the unix epoch
+        # should have symmetric limits at +/-
+        # np.int64 in respective time units
+        ref = np.datetime64(0, time_unit)
+        max_delta = np.timedelta64(np.iinfo(np.int64).max)
+        # subtraction is particularly prone to overflow
+        # in older code; the overflow shows up in the repr
+        # so test a roundtrip from epoch to limit and back
+        # using the str representation
+        actual = np.datetime64(str(op1(ref, max_delta)))
+        # often this will fail if overflow occurs:
+        assert op2(actual, ref)
+        # finish the roundtrip to unix epoch:
+        restored = op3(actual, max_delta)
+        assert restored == ref
 
 class TestDateTimeData(object):
 
