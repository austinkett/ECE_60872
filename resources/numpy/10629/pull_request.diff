diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index 1f193ecfcf2..81a34aba91b 100644
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -642,122 +642,124 @@ def _extendLine(s, line, word, line_width, next_line_prefix, legacy):
     line += word
     return s, line
 
-def _recursive_fmt(param, index, indent, curr_width):
-    """
-    Helper function for _formatArray, to recursively print array elements.
-
-    "param" are the values that are invariant under recursion, including
-    the array to be printed itself. index, indent and curr_width
-    are updated during recursion.
-    """
-    # unpack parameters
-    a, format_function, separator, edge_items, summary_insert, legacy = param
 
-    axis = len(index)
-    axes_left = a.ndim - axis
+def _formatArray(a, format_function, line_width, next_line_prefix,
+                 separator, edge_items, summary_insert, legacy):
+    """formatArray is designed for two modes of operation:
 
-    if axes_left == 0:
-        return format_function(a[index])
+    1. Full output
 
-    # when recursing, add a space to align with the [ added, and reduce the
-    # length of the line by 1
-    next_indent = indent + ' '
-    if legacy == '1.13':
-        next_width = curr_width
-    else:
-        next_width = curr_width - len(']')
+    2. Summarized output
 
-    a_len = a.shape[axis]
-    show_summary = summary_insert and 2*edge_items < a_len
-    if show_summary:
-        leading_items = edge_items
-        trailing_items = edge_items
-    else:
-        leading_items = 0
-        trailing_items = a_len
+    """
+    def recurser(index, hanging_indent, curr_width):
+        """
+        By using this local function, we don't need to recurse with all the
+        arguments. Since this function is not created recursively, the cost is
+        not significant
+        """
+        axis = len(index)
+        axes_left = a.ndim - axis
 
-    # stringify the array with the hanging indent on the first line too
-    s = ''
+        if axes_left == 0:
+            return format_function(a[index])
 
-    # last axis (rows) - wrap elements if they would not fit on one line
-    if axes_left == 1:
-        # the length up until the beginning of the separator / bracket
+        # when recursing, add a space to align with the [ added, and reduce the
+        # length of the line by 1
+        next_hanging_indent = hanging_indent + ' '
         if legacy == '1.13':
-            elem_width = curr_width - len(separator.rstrip())
+            next_width = curr_width
         else:
-            elem_width = curr_width - max(len(separator.rstrip()), len(']'))
-
-        line = indent
-        for i in range(leading_items):
-            word = _recursive_fmt(param, index + (i,), next_indent, next_width)
-            s, line = _extendLine(s, line, word, elem_width, indent, legacy)
-            line += separator
+            next_width = curr_width - len(']')
 
+        a_len = a.shape[axis]
+        show_summary = summary_insert and 2*edge_items < a_len
         if show_summary:
-            s, line = _extendLine(
-                s, line, summary_insert, elem_width, indent, legacy)
-            if legacy == '1.13':
-                line += ", "
-            else:
-                line += separator
-
-        for i in range(trailing_items, 1, -1):
-            word = _recursive_fmt(param, index + (-i,), next_indent, next_width)
-            s, line = _extendLine(s, line, word, elem_width, indent, legacy)
-            line += separator
-
-        if legacy == '1.13':
-            # width of the separator is not considered on 1.13
-            elem_width = curr_width
-        word =_recursive_fmt(param, index + (-1,), next_indent, next_width)
-        s, line = _extendLine(
-            s, line, word, elem_width, indent, legacy)
-
-        s += line
+            leading_items = edge_items
+            trailing_items = edge_items
+        else:
+            leading_items = 0
+            trailing_items = a_len
 
-    # other axes - insert newlines between rows
-    else:
+        # stringify the array with the hanging indent on the first line too
         s = ''
-        line_sep = separator.rstrip() + '\n'*(axes_left - 1)
-
-        for i in range(leading_items):
-            nested =_recursive_fmt(param, index + (i,), next_indent, next_width)
-            s += indent + nested + line_sep
 
-        if show_summary:
+        # last axis (rows) - wrap elements if they would not fit on one line
+        if axes_left == 1:
+            # the length up until the beginning of the separator / bracket
             if legacy == '1.13':
-                # trailing space, fixed nbr of newlines, and fixed separator
-                s += indent + summary_insert + ", \n"
+                elem_width = curr_width - len(separator.rstrip())
             else:
-                s += indent + summary_insert + line_sep
+                elem_width = curr_width - max(len(separator.rstrip()), len(']'))
 
-        for i in range(trailing_items, 1, -1):
-            nested = _recursive_fmt(param, index + (-i,), next_indent,
-                                    next_width)
-            s += indent + nested + line_sep
+            line = hanging_indent
+            for i in range(leading_items):
+                word = recurser(index + (i,), next_hanging_indent, next_width)
+                s, line = _extendLine(
+                    s, line, word, elem_width, hanging_indent, legacy)
+                line += separator
 
-        nested =_recursive_fmt(param, index + (-1,), next_indent, next_width)
-        s += indent + nested
+            if show_summary:
+                s, line = _extendLine(
+                    s, line, summary_insert, elem_width, hanging_indent, legacy)
+                if legacy == '1.13':
+                    line += ", "
+                else:
+                    line += separator
+
+            for i in range(trailing_items, 1, -1):
+                word = recurser(index + (-i,), next_hanging_indent, next_width)
+                s, line = _extendLine(
+                    s, line, word, elem_width, hanging_indent, legacy)
+                line += separator
 
-    # remove the hanging indent, and wrap in []
-    s = '[' + s[len(indent):] + ']'
-    return s
+            if legacy == '1.13':
+                # width of the seperator is not considered on 1.13
+                elem_width = curr_width
+            word = recurser(index + (-1,), next_hanging_indent, next_width)
+            s, line = _extendLine(
+                s, line, word, elem_width, hanging_indent, legacy)
 
-def _formatArray(a, format_function, line_width, next_line_prefix,
-                 separator, edge_items, summary_insert, legacy):
-    """_formatArray is designed for two modes of operation:
+            s += line
 
-    1. Full output
+        # other axes - insert newlines between rows
+        else:
+            s = ''
+            line_sep = separator.rstrip() + '\n'*(axes_left - 1)
 
-    2. Summarized output
+            for i in range(leading_items):
+                nested = recurser(index + (i,), next_hanging_indent, next_width)
+                s += hanging_indent + nested + line_sep
 
-    """
+            if show_summary:
+                if legacy == '1.13':
+                    # trailing space, fixed nbr of newlines, and fixed separator
+                    s += hanging_indent + summary_insert + ", \n"
+                else:
+                    s += hanging_indent + summary_insert + line_sep
+
+            for i in range(trailing_items, 1, -1):
+                nested = recurser(index + (-i,), next_hanging_indent,
+                                  next_width)
+                s += hanging_indent + nested + line_sep
 
-    # invoke the recursive part with an initial index and prefix
-    param = a, format_function, separator, edge_items, summary_insert, legacy
-    return _recursive_fmt(param, index=(), indent=next_line_prefix,
-                          curr_width=line_width)
+            nested = recurser(index + (-1,), next_hanging_indent, next_width)
+            s += hanging_indent + nested
 
+        # remove the hanging indent, and wrap in []
+        s = '[' + s[len(hanging_indent):] + ']'
+        return s
+
+    try:
+        # invoke the recursive part with an initial index and prefix
+        return recurser(index=(),
+                        hanging_indent=next_line_prefix,
+                        curr_width=line_width)
+    finally:
+        # recursive closures have a cyclic reference to themselves, which
+        # requires gc to collect (gh-10620). To avoid this problem, for
+        # performance and PyPy friendliness, we break the cycle:
+        recurser = None
 
 def _none_or_positive_arg(x, name):
     if x is None:
diff --git a/numpy/core/shape_base.py b/numpy/core/shape_base.py
index 65c3ed00dbd..319c2508810 100644
--- a/numpy/core/shape_base.py
+++ b/numpy/core/shape_base.py
@@ -446,7 +446,13 @@ def block_recursion(arrays, depth=0):
             # type(arrays) is not list
             return atleast_nd(arrays, result_ndim)
 
-    return block_recursion(arrays)
+    try:
+        return block_recursion(arrays)
+    finally:
+        # recursive closures have a cyclic reference to themselves, which
+        # requires gc to collect (gh-10620). To avoid this problem, for
+        # performance and PyPy friendliness, we break the cycle:
+        block_recursion = None
 
 
 def block(arrays):
diff --git a/numpy/lib/npyio.py b/numpy/lib/npyio.py
index 9e979bbe6a7..76b135cc229 100644
--- a/numpy/lib/npyio.py
+++ b/numpy/lib/npyio.py
@@ -1101,6 +1101,11 @@ def tobytes_first(x, conv):
     finally:
         if fown:
             fh.close()
+        # recursive closures have a cyclic reference to themselves, which
+        # requires gc to collect (gh-10620). To avoid this problem, for
+        # performance and PyPy friendliness, we break the cycle:
+        flatten_dtype_internal = None
+        pack_items = None
 
     if X is None:
         X = np.array([], dtype)
