diff --git a/doc/source/reference/random/index.rst b/doc/source/reference/random/index.rst
index 51e72513d2b..7de1c838c67 100644
--- a/doc/source/reference/random/index.rst
+++ b/doc/source/reference/random/index.rst
@@ -41,10 +41,28 @@ statistically more reliable than the legacy methods in `~.RandomState`
   from numpy import random
   random.standard_normal()
 
-`~Generator` can be used as a direct replacement for `~.RandomState`, although
-the random values are generated by `~.PCG64`. The
-`~Generator` holds an instance of a BitGenerator. It is accessible as
-``gen.bit_generator``.
+`~Generator` can be used as a replacement for `~.RandomState`. Both class
+instances now hold a internal `BitGenerator` instance to provide the bit
+stream, it is accessible as ``gen.bit_generator``. Some long-overdue API
+cleanup means that legacy and compatibility methods have been removed from
+`~.Generator`
+
+=================== ============== ============
+`~.RandomState`     `~.Generator`  Notes
+------------------- -------------- ------------
+``random_sample``,  ``random``     Compatible with `random.random`
+``rand``
+------------------- -------------- ------------
+``randint``,        ``integers``   Add an ``endpoint`` kwarg
+``random_integers``
+------------------- -------------- ------------
+``tomaxint``        removed        Use ``integers(0, np.iinfo(np.int).max,``
+                                                 ``endpoint=False)``
+------------------- -------------- ------------
+``seed``            removed        Use `~.SeedSequence.spawn`
+=================== ============== ============
+
+See `new-or-different` for more information
 
 .. code-block:: python
 
diff --git a/doc/source/reference/random/new-or-different.rst b/doc/source/reference/random/new-or-different.rst
index 4eb175d573e..5442f46c9e4 100644
--- a/doc/source/reference/random/new-or-different.rst
+++ b/doc/source/reference/random/new-or-different.rst
@@ -23,10 +23,12 @@ Feature            Older Equivalent     Notes
                                         source, called a `BitGenerator
                                         <bit_generators>` A number of these
                                         are provided.  ``RandomState`` uses
-                                        only the Mersenne Twister.
+                                        the Mersenne Twister `~.MT19937` by
+                                        default, but can also be instantiated
+                                        with any BitGenerator.
 ------------------ -------------------- -------------
-``random``         ``random_sample``    Access the values in a BitGenerator,
-                                        convert them to ``float64`` in the
+``random``         ``random_sample``,   Access the values in a BitGenerator,
+                   ``rand``             convert them to ``float64`` in the
                                         interval ``[0.0.,`` `` 1.0)``.
                                         In addition to the ``size`` kwarg, now
                                         supports ``dtype='d'`` or ``dtype='f'``,
diff --git a/numpy/random/generator.pyx b/numpy/random/generator.pyx
index 6adf0f00b75..bf53248aeca 100644
--- a/numpy/random/generator.pyx
+++ b/numpy/random/generator.pyx
@@ -353,7 +353,8 @@ cdef class Generator:
 
         Return random integers from `low` (inclusive) to `high` (exclusive), or
         if endpoint=True, `low` (inclusive) to `high` (inclusive). Replaces
-        randint (with endpoint=False) and random_integers (with endpoint=True)
+        `RandomState.randint` (with endpoint=False) and
+        `RandomState.random_integers` (with endpoint=True)
 
         Return random integers from the "discrete uniform" distribution of
         the specified dtype. If `high` is None (the default), then results are
@@ -503,13 +504,6 @@ cdef class Generator:
         return self.integers(0, 4294967296, size=n_uint32,
                              dtype=np.uint32).astype('<u4').tobytes()[:length]
 
-    def randint(self, low, high=None, size=None, dtype=np.int64, endpoint=False):
-        """
-        Deprecated, renamed to ``integers``
-        """
-        warnings.warn("Renamed to integers", RuntimeWarning)
-        self.integers(low, high, size, dtype, endpoint)
-
     @cython.wraparound(True)
     def choice(self, a, size=None, replace=True, p=None, axis=0):
         """
