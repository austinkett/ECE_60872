diff --git a/numpy/ma/core.py b/numpy/ma/core.py
index f83e2adcc36..6b5d39b33b4 100644
--- a/numpy/ma/core.py
+++ b/numpy/ma/core.py
@@ -6390,18 +6390,14 @@ def __call__(self, a, *args, **params):
             arr = args[0]
             args[0] = a
             a = arr
-        # Get the method from the array (if possible)
+        marr = asanyarray(a)
         method_name = self.__name__
-        method = getattr(a, method_name, None)
+        method = getattr(type(marr), method_name, None)
         if method is not None:
-            return method(*args, **params)
-        # Still here ? Then a is not a MaskedArray
-        method = getattr(MaskedArray, method_name, None)
-        if method is not None:
-            return method(MaskedArray(a), *args, **params)
+            return method(marr, *args, **params)
         # Still here ? OK, let's call the corresponding np function
         method = getattr(np, method_name)
-        return method(a, *args, **params)
+        return method(marr, *args, **params)
 
 
 all = _frommethod('all')
diff --git a/numpy/ma/tests/test_core.py b/numpy/ma/tests/test_core.py
index 338a6d0dc9d..c89b519ec6f 100644
--- a/numpy/ma/tests/test_core.py
+++ b/numpy/ma/tests/test_core.py
@@ -433,6 +433,11 @@ def test_copy(self):
         assert_not_equal(y._data.ctypes.data, x._data.ctypes.data)
         assert_not_equal(y._mask.ctypes.data, x._mask.ctypes.data)
 
+    def test_copy_on_python_builtins(self):
+        # Tests copy works on python builtins (issue#8019)
+        self.assertTrue(isMaskedArray(np.ma.copy([1,2,3])))
+        self.assertTrue(isMaskedArray(np.ma.copy((1,2,3))))
+
     def test_copy_immutable(self):
         # Tests that the copy method is immutable, GitHub issue #5247
         a = np.ma.array([1, 2, 3])
@@ -1021,6 +1026,11 @@ def test_count_func(self):
         assert_(res.dtype.type is np.intp)
         assert_raises(ValueError, ott.count, axis=1)
 
+    def test_count_on_python_builtins(self):
+        # Tests count works on python builtins (issue#8019)
+        assert_equal(3, count([1,2,3]))
+        assert_equal(2, count((1,2)))
+
     def test_minmax_func(self):
         # Tests minimum and maximum.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf) = self.d
