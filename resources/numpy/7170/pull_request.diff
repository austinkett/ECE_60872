diff --git a/numpy/core/src/multiarray/compiled_base.c b/numpy/core/src/multiarray/compiled_base.c
index b9db3bb8fe7..ec3fde69574 100644
--- a/numpy/core/src/multiarray/compiled_base.c
+++ b/numpy/core/src/multiarray/compiled_base.c
@@ -795,7 +795,49 @@ static int sequence_to_arrays(PyObject *seq,
     return 0;
 }
 
-/* Inner loop for unravel_index */
+/*
+ * Force-cast an array into intp if it is empty. Fail otherwise.
+ *
+ * op        - Pointer to the array pointer. Will be modified if
+ *             recasting is needed.
+ * paramname - Name to be used for error string.
+ */
+static int
+_cast_to_intp_or_fail(PyArrayObject **op, char *paramname)
+{
+    PyArray_Descr *dtype = PyArray_DescrFromType(NPY_INTP);
+
+    if (!PyArray_CanCastArrayTo(*op, dtype, NPY_SAME_KIND_CASTING)) {
+        if (PyArray_SIZE(*op) == 0) {
+            /*
+             * Unfortunately, if the input array is empty, then indices would
+             * likely have a default dtype of float64, which isn't compatibile.
+             * Force a recast of an empty array.
+             */
+            PyArrayObject *op_tmp = NULL;
+            op_tmp = (PyArrayObject*)PyArray_FromArray(*op, dtype,
+                                                       NPY_ARRAY_FORCECAST);
+            if (op_tmp == NULL) {
+                return -1;
+            }
+            Py_DECREF(*op);
+            *op = op_tmp;
+        }
+        else {
+            Py_DECREF(dtype);
+            PyErr_Format(PyExc_TypeError,
+                "non-empty %s array has a non-integer dtype", paramname);
+            return -1;
+        }
+    }
+    else {
+        Py_DECREF(dtype);
+    }
+
+    return 0;
+}
+
+/* Inner loop for ravel_multi_index */
 static int
 ravel_multi_index_loop(int ravel_ndim, npy_intp *ravel_dims,
                         npy_intp *ravel_strides,
@@ -933,7 +975,6 @@ arr_ravel_multi_index(PyObject *self, PyObject *args, PyObject *kwds)
         goto fail;
     }
 
-
     for (i = 0; i < dimensions.len; ++i) {
         op_flags[i] = NPY_ITER_READONLY|
                       NPY_ITER_ALIGNED;
@@ -942,10 +983,17 @@ arr_ravel_multi_index(PyObject *self, PyObject *args, PyObject *kwds)
                                NPY_ITER_ALIGNED|
                                NPY_ITER_ALLOCATE;
     dtype[0] = PyArray_DescrFromType(NPY_INTP);
+
     for (i = 1; i <= dimensions.len; ++i) {
         dtype[i] = dtype[0];
     }
 
+    for (i = 0; i < dimensions.len; ++i) {
+        if (_cast_to_intp_or_fail(&op[i], "multi_index") < 0) {
+            goto fail;
+        }
+    }
+
     iter = NpyIter_MultiNew(dimensions.len+1, op, NPY_ITER_BUFFERED|
                                                   NPY_ITER_EXTERNAL_LOOP|
                                                   NPY_ITER_ZEROSIZE_OK,
@@ -1115,6 +1163,10 @@ arr_unravel_index(PyObject *self, PyObject *args, PyObject *kwds)
         Py_INCREF(indices);
     }
 
+    if (_cast_to_intp_or_fail(&indices, "index") < 0) {
+        goto fail;
+    }
+
     dtype = PyArray_DescrFromType(NPY_INTP);
     if (dtype == NULL) {
         goto fail;
diff --git a/numpy/lib/tests/test_index_tricks.py b/numpy/lib/tests/test_index_tricks.py
index bb2ae150965..9d29b698c4c 100644
--- a/numpy/lib/tests/test_index_tricks.py
+++ b/numpy/lib/tests/test_index_tricks.py
@@ -47,6 +47,15 @@ def test_basic(self):
             [[3, 6, 6], [4, 5, 1]])
         assert_equal(np.unravel_index(1621, (6, 7, 8, 9)), [3, 1, 4, 1])
 
+        assert_equal(np.unravel_index([], (10, 3, 5)),
+                     [[], [], []])
+        assert_equal(np.unravel_index(np.array([]), (10, 3, 5)),
+                     [[], [], []])
+        assert_equal(np.ravel_multi_index(([], [], []), (10, 3, 5)), [])
+        assert_equal(np.ravel_multi_index((np.array([]), np.array([])), (5, 3)),
+                    [])
+        assert_equal(np.ravel_multi_index(np.array([[], []]), (5, 3)), [])
+
     def test_dtypes(self):
         # Test with different data types
         for dtype in [np.int16, np.uint16, np.int32,
