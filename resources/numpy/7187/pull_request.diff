diff --git a/doc/release/1.11.0-notes.rst b/doc/release/1.11.0-notes.rst
index e95225a7c0d..5fb226d9892 100644
--- a/doc/release/1.11.0-notes.rst
+++ b/doc/release/1.11.0-notes.rst
@@ -41,8 +41,19 @@ Future Changes
 The following changes are scheduled for Numpy 1.12.0.
 
 * Support for Python 2.6, 3.2, and 3.3 will be dropped.
-* Slicing a ``MaskedArray`` will return views of both data **and** mask.
-  Currently the mask is returned as a copy.
+* When setting items of a ``MaskedArray`` using the square bracket
+  notation NumPy will in the future never copy the mask. Some
+  examples of this are ``child = ma_array[::2]; view[3] = 3``, where
+  the mask of ``child`` is a view into the mask of ``ma_array``.
+  Also when creating ``ma_array = MaskedArray(data, mask)`` will
+  make ``ma_array`` view the data in ``mask`` and setting an item
+  will currently copy ``mask`` but in the future modify the original.
+  Since this copy may occur much later, it may also avoid propagation
+  to an array such as ``child`` above.
+  NumPy will give a FutureWarning, whenever a mask is currently copied
+  and another array will be modified in the future. To get the new
+  behaviour without the warning, set ``ma_arr._sharedmask = False``.
+  To keep using the old behaviour use ``ma_array.unshare_mask()``.
 * Relaxed stride checking will become the default. See the 1.8.0 release
   notes for a more extended discussion of what this change implies.
 * The behavior of the datetime64 "not a time" (NaT) value will be changed
diff --git a/numpy/ma/core.py b/numpy/ma/core.py
index 24d41bcaa70..e5fd8fdf82b 100644
--- a/numpy/ma/core.py
+++ b/numpy/ma/core.py
@@ -3105,14 +3105,6 @@ def __getitem__(self, indx):
         Return the item described by i, as a masked array.
 
         """
-        # 2016.01.15 -- v1.11.0
-        warnings.warn(
-            "Currently, slicing will try to return a view of the data," +
-            " but will return a copy of the mask. In the future, it will try" +
-            " to return both as views.",
-            FutureWarning
-        )
-
         dout = self.data[indx]
         # We could directly use ndarray.__getitem__ on self.
         # But then we would have to modify __array_finalize__ to prevent the
@@ -3183,15 +3175,6 @@ def __setitem__(self, indx, value):
         locations.
 
         """
-        # 2016.01.15 -- v1.11.0
-        warnings.warn(
-           "Currently, slicing will try to return a view of the data," +
-           " but will return a copy of the mask. In the future, it will try" +
-           " to return both as views. This means that using `__setitem__`" +
-           " will propagate values back through all masks that are present.",
-           FutureWarning
-        )
-
         if self is masked:
             raise MaskError('Cannot alter the masked element.')
         _data = self._data
@@ -3233,7 +3216,22 @@ def __setitem__(self, indx, value):
                 _mask[indx] = mval
         elif not self._hardmask:
             # Unshare the mask if necessary to avoid propagation
+            # We want to remove the unshare logic in the future, when this
+            # is removed, the unshare_mask function could maybe be deprecated
+            # though it is the best way to get the old behaviour possibly.
             if not self._isfield:
+                if self._sharedmask and not (
+                        # No one else _mask, self._mask + 1 holds a reference
+                        # and the array owns its own data
+                        (sys.getrefcount(_mask) == 3) and _mask.flags.owndata):
+                    # 2016.01.15 -- v1.11.0
+                    warnings.warn(
+                       "setting an item on a masked array which has a shared "
+                       "mask will not copy the mask and also change the "
+                       "original mask array in the future.\n"
+                       "Check the NumPy 1.11 release notes for more "
+                       "information.",
+                       FutureWarning, stacklevel=2)
                 self.unshare_mask()
                 _mask = self._mask
             # Set the data, then the mask
diff --git a/numpy/ma/extras.py b/numpy/ma/extras.py
index 9855b4e7648..087eab2c9ec 100644
--- a/numpy/ma/extras.py
+++ b/numpy/ma/extras.py
@@ -1173,9 +1173,9 @@ def _covhelper(x, y=None, rowvar=True, allow_masked=True):
                 # Define some common mask
                 common_mask = np.logical_or(xmask, ymask)
                 if common_mask is not nomask:
-                    x.unshare_mask()
-                    y.unshare_mask()
                     xmask = x._mask = y._mask = ymask = common_mask
+                    x._sharedmask = False
+                    y._sharedmask = False
         x = ma.concatenate((x, y), axis)
         xnotmask = np.logical_not(np.concatenate((xmask, ymask), axis)).astype(int)
     x -= x.mean(axis=rowvar)[tup]
@@ -1326,6 +1326,7 @@ def corrcoef(x, y=None, rowvar=True, bias=np._NoValue, allow_masked=True,
         _denom = ma.sqrt(ma.multiply.outer(diag, diag))
     else:
         _denom = diagflat(diag)
+        _denom._sharedmask = False  # We know return is always a copy
         n = x.shape[1 - rowvar]
         if rowvar:
             for i in range(n - 1):
diff --git a/numpy/ma/tests/test_core.py b/numpy/ma/tests/test_core.py
index d68e63358e5..b163d3b2642 100644
--- a/numpy/ma/tests/test_core.py
+++ b/numpy/ma/tests/test_core.py
@@ -2223,7 +2223,6 @@ def test_inplace_addition_scalar_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 xm[2] = masked
                 x += t(1)
@@ -2238,7 +2237,6 @@ def test_inplace_addition_array_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 m = xm.mask
                 a = arange(10, dtype=t)
@@ -2269,7 +2267,6 @@ def test_inplace_subtraction_array_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 m = xm.mask
                 a = arange(10, dtype=t)
@@ -2300,7 +2297,6 @@ def test_inplace_multiplication_array_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 m = xm.mask
                 a = arange(10, dtype=t)
@@ -2318,7 +2314,6 @@ def test_inplace_floor_division_scalar_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 x = arange(10, dtype=t) * t(2)
                 xm = arange(10, dtype=t) * t(2)
@@ -2335,7 +2330,6 @@ def test_inplace_floor_division_array_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 m = xm.mask
                 a = arange(10, dtype=t)
@@ -2356,7 +2350,6 @@ def test_inplace_division_scalar_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 x = arange(10, dtype=t) * t(2)
                 xm = arange(10, dtype=t) * t(2)
@@ -2392,7 +2385,6 @@ def test_inplace_division_array_type(self):
         for t in self.othertypes:
             with warnings.catch_warnings(record=True) as w:
                 warnings.filterwarnings("always")
-                warnings.simplefilter('ignore', FutureWarning)
                 (x, y, xm) = (_.astype(t) for _ in self.uint8data)
                 m = xm.mask
                 a = arange(10, dtype=t)
