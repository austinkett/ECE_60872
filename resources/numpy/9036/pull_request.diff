diff --git a/.gitignore b/.gitignore
index 64c8a72efb1..964910c2652 100644
--- a/.gitignore
+++ b/.gitignore
@@ -35,7 +35,6 @@ GTAGS
 *.dll
 *.exe
 *.o
-*.o.d
 *.py[ocd]
 *.so
 
@@ -124,7 +123,6 @@ numpy/core/src/multiarray/nditer_templ.c
 numpy/core/src/multiarray/scalartypes.c
 numpy/core/src/npymath/ieee754.c
 numpy/core/src/npymath/npy_math_complex.c
-numpy/core/src/npymath/npy_math_internal.h
 numpy/core/src/npysort/binsearch.c
 numpy/core/src/npysort/heapsort.c
 numpy/core/src/npysort/mergesort.c
diff --git a/numpy/core/code_generators/genapi.py b/numpy/core/code_generators/genapi.py
index 5445977866d..a71ffefdd24 100644
--- a/numpy/core/code_generators/genapi.py
+++ b/numpy/core/code_generators/genapi.py
@@ -9,7 +9,12 @@
 from __future__ import division, absolute_import, print_function
 
 import sys, os, re
-import hashlib
+try:
+    import hashlib
+    md5new = hashlib.md5
+except ImportError:
+    import md5
+    md5new = md5.new
 
 import textwrap
 
@@ -130,7 +135,7 @@ def to_ReST(self):
         return '\n'.join(lines)
 
     def api_hash(self):
-        m = hashlib.md5()
+        m = md5new()
         m.update(remove_whitespace(self.return_type))
         m.update('\000')
         m.update(self.name)
@@ -287,20 +292,6 @@ def should_rebuild(targets, source_files):
         return True
     return False
 
-def write_file(filename, data):
-    """
-    Write data to filename
-    Only write changed data to avoid updating timestamps unnecessarily
-    """
-    if os.path.exists(filename):
-        with open(filename) as f:
-            if data == f.read():
-                return
-
-    with open(filename, 'w') as fid:
-        fid.write(data)
-
-
 # Those *Api classes instances know how to output strings for the generated code
 class TypeApi(object):
     def __init__(self, name, index, ptr_cast, api_name):
@@ -474,7 +465,7 @@ def fullapi_hash(api_dicts):
             a.extend(name)
             a.extend(','.join(map(str, data)))
 
-    return hashlib.md5(''.join(a).encode('ascii')).hexdigest()
+    return md5new(''.join(a).encode('ascii')).hexdigest()
 
 # To parse strings like 'hex = checksum' where hex is e.g. 0x1234567F and
 # checksum a 128 bits md5 checksum (hex format as well)
@@ -499,7 +490,7 @@ def main():
     tagname = sys.argv[1]
     order_file = sys.argv[2]
     functions = get_api_functions(tagname, order_file)
-    m = hashlib.md5(tagname)
+    m = md5new(tagname)
     for func in functions:
         print(func)
         ah = func.api_hash()
diff --git a/numpy/core/code_generators/generate_numpy_api.py b/numpy/core/code_generators/generate_numpy_api.py
index 79d774a89b1..d6d6ab21fa5 100644
--- a/numpy/core/code_generators/generate_numpy_api.py
+++ b/numpy/core/code_generators/generate_numpy_api.py
@@ -231,18 +231,23 @@ def do_generate_api(targets, sources):
         module_list.append(api_item.internal_define())
 
     # Write to header
+    fid = open(header_file, 'w')
     s = h_template % ('\n'.join(module_list), '\n'.join(extension_list))
-    genapi.write_file(header_file, s)
+    fid.write(s)
+    fid.close()
 
     # Write to c-code
+    fid = open(c_file, 'w')
     s = c_template % ',\n'.join(init_list)
-    genapi.write_file(c_file, s)
+    fid.write(s)
+    fid.close()
 
     # write to documentation
-    s = c_api_header
+    fid = open(doc_file, 'w')
+    fid.write(c_api_header)
     for func in numpyapi_list:
-        s += func.to_ReST()
-        s += '\n\n'
-    genapi.write_file(doc_file, s)
+        fid.write(func.to_ReST())
+        fid.write('\n\n')
+    fid.close()
 
     return targets
diff --git a/numpy/core/code_generators/generate_ufunc_api.py b/numpy/core/code_generators/generate_ufunc_api.py
index 3bcf137f7c3..b6034bbe798 100644
--- a/numpy/core/code_generators/generate_ufunc_api.py
+++ b/numpy/core/code_generators/generate_ufunc_api.py
@@ -189,22 +189,27 @@ def do_generate_api(targets, sources):
         module_list.append(api_item.internal_define())
 
     # Write to header
+    fid = open(header_file, 'w')
     s = h_template % ('\n'.join(module_list), '\n'.join(extension_list))
-    genapi.write_file(header_file, s)
+    fid.write(s)
+    fid.close()
 
     # Write to c-code
+    fid = open(c_file, 'w')
     s = c_template % ',\n'.join(init_list)
-    genapi.write_file(c_file, s)
+    fid.write(s)
+    fid.close()
 
     # Write to documentation
-    s = '''
+    fid = open(doc_file, 'w')
+    fid.write('''
 =================
 NumPy Ufunc C-API
 =================
-'''
+''')
     for func in ufunc_api_list:
-        s += func.to_ReST()
-        s += '\n\n'
-    genapi.write_file(doc_file, s)
+        fid.write(func.to_ReST())
+        fid.write('\n\n')
+    fid.close()
 
     return targets
diff --git a/numpy/distutils/ccompiler.py b/numpy/distutils/ccompiler.py
index 5f9bd4a84e6..af48d1d6393 100644
--- a/numpy/distutils/ccompiler.py
+++ b/numpy/distutils/ccompiler.py
@@ -4,12 +4,11 @@
 import re
 import sys
 import types
-import shlex
 from copy import copy
 from distutils import ccompiler
 from distutils.ccompiler import *
 from distutils.errors import DistutilsExecError, DistutilsModuleError, \
-                             DistutilsPlatformError, CompileError
+                             DistutilsPlatformError
 from distutils.sysconfig import customize_compiler
 from distutils.version import LooseVersion
 
@@ -20,44 +19,6 @@
                                       quote_args, get_num_build_jobs
 
 
-def _needs_build(obj):
-    """
-    Check if an objects needs to be rebuild based on its dependencies
-
-    Parameters
-    ----------
-    obj : str
-        object file
-
-    Returns
-    -------
-    bool
-    """
-    # defined in unixcompiler.py
-    dep_file = obj + '.d'
-    if not os.path.exists(dep_file):
-        return True
-
-    # dep_file is a makefile containing 'object: dependencies'
-    # formated like posix shell (spaces escaped, \ line continuations)
-    with open(dep_file, "r") as f:
-        deps = [x for x in shlex.split(f.read(), posix=True)
-                if x != "\n" and not x.endswith(":")]
-
-    try:
-        t_obj = os.stat(obj).st_mtime
-
-        # check if any of the dependencies is newer than the object
-        # the dependencies includes the source used to create the object
-        for f in deps:
-            if os.stat(f).st_mtime > t_obj:
-                return True
-    except OSError:
-        # no object counts as newer (shouldn't happen if dep_file exists)
-        return True
-
-    return False
-
 def replace_method(klass, method_name, func):
     if sys.version_info[0] < 3:
         m = types.MethodType(func, None, klass)
@@ -230,8 +191,7 @@ def CCompiler_compile(self, sources, output_dir=None, macros=None,
 
     def single_compile(args):
         obj, (src, ext) = args
-        if _needs_build(obj):
-            self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)
+        self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)
 
     if isinstance(self, FCompiler):
         objects_to_build = list(build.keys())
@@ -429,30 +389,6 @@ def CCompiler_customize(self, dist, need_cxx=0):
                 log.warn("#### %s #######" % (self.compiler,))
             if not hasattr(self, 'compiler_cxx'):
                 log.warn('Missing compiler_cxx fix for ' + self.__class__.__name__)
-
-
-    # check if compiler supports gcc style automatic dependencies
-    # run on every extension so skip for known good compilers
-    if hasattr(self, 'compiler') and ('gcc' in self.compiler[0] or
-                                      'g++' in self.compiler[0] or
-                                      'clang' in self.compiler[0]):
-        self._auto_depends = True
-    elif os.name == 'posix':
-        import tempfile
-        import shutil
-        tmpdir = tempfile.mkdtemp()
-        try:
-            fn = os.path.join(tmpdir, "file.c")
-            with open(fn, "w") as f:
-                f.write("int a;\n")
-            self.compile([fn], output_dir=tmpdir,
-                         extra_preargs=['-MMD', '-MF', fn + '.d'])
-            self._auto_depends = True
-        except CompileError:
-            self._auto_depends = False
-        finally:
-            shutil.rmtree(tmpdir)
-
     return
 
 replace_method(CCompiler, 'customize', CCompiler_customize)
diff --git a/numpy/distutils/tests/test_system_info.py b/numpy/distutils/tests/test_system_info.py
index 73b841692d1..3576de81466 100644
--- a/numpy/distutils/tests/test_system_info.py
+++ b/numpy/distutils/tests/test_system_info.py
@@ -65,8 +65,7 @@ def have_compiler():
         cmd = compiler.compiler  # Unix compilers
     except AttributeError:
         try:
-            if not compiler.initialized:
-                compiler.initialize()  # MSVC is different
+            compiler.initialize()  # MSVC is different
         except DistutilsError:
             return False
         cmd = [compiler.cc]
diff --git a/numpy/distutils/unixccompiler.py b/numpy/distutils/unixccompiler.py
index 307b56ce491..a92ccd3e7d2 100644
--- a/numpy/distutils/unixccompiler.py
+++ b/numpy/distutils/unixccompiler.py
@@ -44,16 +44,8 @@ def UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts
             self.linker_so = llink_s.split() + opt.split()
 
     display = '%s: %s' % (os.path.basename(self.compiler_so[0]), src)
-
-    # gcc style automatic dependencies, outputs a makefile (-MF) that lists
-    # all headers needed by a c file as a side effect of compilation (-MMD)
-    if getattr(self, '_auto_depends', False):
-        deps = ['-MMD', '-MF', obj + '.d']
-    else:
-        deps = []
-
     try:
-        self.spawn(self.compiler_so + cc_args + [src, '-o', obj] + deps +
+        self.spawn(self.compiler_so + cc_args + [src, '-o', obj] +
                    extra_postargs, display = display)
     except DistutilsExecError:
         msg = str(get_exception())
