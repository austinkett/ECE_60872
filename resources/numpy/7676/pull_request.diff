diff --git a/numpy/lib/function_base.py b/numpy/lib/function_base.py
index 092697f05fb..85efaa949d3 100644
--- a/numpy/lib/function_base.py
+++ b/numpy/lib/function_base.py
@@ -593,14 +593,14 @@ def histogram(a, bins=10, range=None, normed=False, weights=None,
             # Compute the bin indices, and for values that lie exactly on mx we
             # need to subtract one
             indices = tmp_a.astype(np.intp)
-            equals_endpoint = (indices == bins)
-            indices[equals_endpoint] -= 1
+            indices[indices == bins] -= 1
 
             # The index computation is not guaranteed to give exactly
             # consistent results within ~1 ULP of the bin edges.
             decrement = tmp_a_data < bin_edges[indices]
             indices[decrement] -= 1
-            increment = (tmp_a_data >= bin_edges[indices + 1]) & ~equals_endpoint
+            # The last bin includes the right edge. The other bins do not.
+            increment = (tmp_a_data >= bin_edges[indices + 1]) & (indices != bins - 1)
             indices[increment] += 1
 
             # We now compute the histogram using bincount
diff --git a/numpy/lib/tests/test_function_base.py b/numpy/lib/tests/test_function_base.py
index 40769961f6f..5c57246fc0e 100644
--- a/numpy/lib/tests/test_function_base.py
+++ b/numpy/lib/tests/test_function_base.py
@@ -1288,6 +1288,11 @@ def test_bin_edge_cases(self):
             assert_(x >= left)
             assert_(x < right)
 
+    def test_last_bin_inclusive_range(self):
+        arr = np.array([0.,  0.,  0.,  1.,  2.,  3.,  3.,  4.,  5.])
+        hist, edges = np.histogram(arr, bins=30, range=(-0.5, 5))
+        self.assertEqual(hist[-1], 1)
+
 
 class TestHistogramOptimBinNums(TestCase):
     """
