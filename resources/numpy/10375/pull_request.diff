diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index eaec91259f2..62f96713126 100644
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -1167,7 +1167,6 @@ def __call__(self, arr):
 class StructureFormat(object):
     def __init__(self, format_functions):
         self.format_functions = format_functions
-        self.num_fields = len(format_functions)
 
     @classmethod
     def from_data(cls, data, **options):
@@ -1184,11 +1183,14 @@ def from_data(cls, data, **options):
         return cls(format_functions)
 
     def __call__(self, x):
-        s = "("
-        for field, format_function in zip(x, self.format_functions):
-            s += format_function(field) + ", "
-        return (s[:-2] if 1 < self.num_fields else s[:-1]) + ")"
-
+        str_fields = [
+            format_function(field)
+            for field, format_function in zip(x, self.format_functions)
+        ]
+        if len(str_fields) == 1:
+            return "({},)".format(str_fields[0])
+        else:
+            return "({})".format(", ".join(str_fields))
 
 def _void_scalar_repr(x):
     """
@@ -1248,7 +1250,7 @@ def dtype_short_repr(dtype):
     """
     # handle these separately so they don't give garbage like str256
     if issubclass(dtype.type, flexible):
-        if dtype.names:
+        if dtype.names is not None:
             return "%s" % str(dtype)
         else:
             return "'%s'" % str(dtype)
diff --git a/numpy/core/tests/test_arrayprint.py b/numpy/core/tests/test_arrayprint.py
index 95000450868..cea69a59ebe 100644
--- a/numpy/core/tests/test_arrayprint.py
+++ b/numpy/core/tests/test_arrayprint.py
@@ -64,6 +64,12 @@ def test_void_scalar_recursion(self):
         # gh-9345
         repr(np.void(b'test'))  # RecursionError ?
 
+    def test_fieldless_structured(self):
+        # gh-10366
+        no_fields = np.dtype([])
+        arr_no_fields = np.empty(4, dtype=no_fields)
+        assert_equal(repr(arr_no_fields), 'array([(), (), (), ()], dtype=[])')
+
 
 class TestComplexArray(object):
     def test_str(self):
