diff --git a/numpy/distutils/exec_command.py b/numpy/distutils/exec_command.py
index 8faf4b225fe..8118e2fc3ee 100644
--- a/numpy/distutils/exec_command.py
+++ b/numpy/distutils/exec_command.py
@@ -56,6 +56,7 @@
 import os
 import sys
 import subprocess
+import locale
 
 from numpy.distutils.misc_util import is_sequence, make_temp_file
 from numpy.distutils import log
@@ -246,17 +247,32 @@ def _exec_command(command, use_shell=None, use_tee = None, **env):
     # Inherit environment by default
     env = env or None
     try:
+        # universal_newlines is set to False so that communicate()
+        # will return bytes. We need to decode the output ourselves
+        # so that Python will not raise a UnicodeDecodeError when
+        # it encounters an invalid character; rather, we simply replace it
         proc = subprocess.Popen(command, shell=use_shell, env=env,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.STDOUT,
-                                universal_newlines=True)
+                                universal_newlines=False)
     except EnvironmentError:
         # Return 127, as os.spawn*() and /bin/sh do
         return 127, ''
+
     text, err = proc.communicate()
+    text = text.decode(locale.getpreferredencoding(False),
+                       errors='replace')
+
+    text = text.replace('\r\n', '\n')
     # Another historical oddity
     if text[-1:] == '\n':
         text = text[:-1]
+
+    # stdio uses bytes in python 2, so to avoid issues, we simply
+    # remove all non-ascii characters
+    if sys.version_info < (3, 0):
+        text = text.encode('ascii', errors='replace')
+
     if use_tee and text:
         print(text)
     return proc.returncode, text
