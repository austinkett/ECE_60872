diff --git a/numpy/core/src/multiarray/common.c b/numpy/core/src/multiarray/common.c
index 4f695fdc702..1466805d951 100644
--- a/numpy/core/src/multiarray/common.c
+++ b/numpy/core/src/multiarray/common.c
@@ -439,7 +439,23 @@ PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims,
     }
 
     /* Recursive case, first check the sequence contains only one type */
-    seq = PySequence_Fast(obj, "Could not convert object to sequence");
+
+    /* probe the __len__ of obj as a precaution */
+    size = PySequence_Length(obj);
+
+    /* PySequence_Fast can call __getitem__ with
+     * an integer value infinitely without checking
+     * __len__ bounds so slice obj by bounds
+     * before passing in; since PySequence_GetSlice
+     * can also iterate infinitely without a __len__
+     * check we create a new list object that respects
+     * __len__ and fill it in; related to gh-8912 */
+
+    seq = PyList_New(size);
+    for (i = 0; i < size; ++i) {
+        PyList_SetItem(seq, i, PySequence_GetItem(obj, i));
+    }
+
     if (seq == NULL) {
         goto fail;
     }
diff --git a/numpy/core/src/multiarray/ctors.c b/numpy/core/src/multiarray/ctors.c
index f1b8a020977..2b0a26a94bb 100644
--- a/numpy/core/src/multiarray/ctors.c
+++ b/numpy/core/src/multiarray/ctors.c
@@ -528,7 +528,14 @@ setArrayFromSequence(PyArrayObject *a, PyObject *s,
     /* Copy element by element */
     else {
         PyObject * seq;
-        seq = PySequence_Fast(s, "Could not convert object to sequence");
+        Py_ssize_t size;
+        /* Carefully check __len__ of iterable object
+         * see: gh-8912 */
+        size = PySequence_Length(s);
+        seq = PyList_New(size);
+        for (i = 0; i < size; ++i) {
+            PyList_SetItem(seq, i, PySequence_GetItem(s, i));
+        }
         if (seq == NULL) {
             goto fail;
         }
@@ -667,7 +674,7 @@ discover_dimensions(PyObject *obj, int *maxndim, npy_intp *d, int check_it,
                                     int *out_is_object)
 {
     PyObject *e;
-    npy_intp n, i;
+    npy_intp n, i, size;
     Py_buffer buffer_view;
     PyObject * seq;
 
@@ -811,7 +818,16 @@ discover_dimensions(PyObject *obj, int *maxndim, npy_intp *d, int check_it,
         }
     }
 
-    seq = PySequence_Fast(obj, "Could not convert object to sequence");
+
+    /* Carefully check __len__ of iterable object
+     * see: gh-8912 */
+    size = PySequence_Length(obj);
+    seq = PyList_New(size);
+
+    for (i = 0; i < size; ++i) {
+        PyList_SetItem(seq, i, PySequence_GetItem(obj, i));
+    }
+
     if (seq == NULL) {
         /*
          * PySequence_Check detects whether an old type object is a
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index 1c59abaa7c3..7006596b226 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -852,6 +852,32 @@ def __getitem__(self, index):
         assert_(a.dtype == np.dtype(object))
         assert_raises(ValueError, np.array, [Fail()])
 
+    @pytest.mark.parametrize("length, val, expected", [
+        (5, 1, np.ones(5)),
+        (1, 2, np.array(2)),
+        (29, 17.717, np.repeat(17.717, 29)),
+        ])
+    def test_respect_iter_len(self, length, val, expected):
+        # test fix for gh-8912
+        # a user-defined object with
+        # a __getitem__ defined could
+        # cause an infinite loop (hang)
+        # because __len__ of object
+        # was not respected in internal
+        # PySequence_Fast(seq) calls
+        # that are now handled more carefully
+
+        class UserDefined:
+
+            def __len__(self):
+                return length
+
+            def __getitem__(self, x):
+                return val
+
+        result = np.array(UserDefined())
+        assert_equal(result, expected)
+
     def test_no_len_object_type(self):
         # gh-5100, want object array from iterable object without len()
         class Point2:
