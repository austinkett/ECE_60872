diff --git a/doc/release/1.13.0-notes.rst b/doc/release/1.13.0-notes.rst
index ddeeae40fce..70b4fcbc679 100644
--- a/doc/release/1.13.0-notes.rst
+++ b/doc/release/1.13.0-notes.rst
@@ -137,3 +137,10 @@ with the covariance matrix by using two new keyword arguments:
   presence of a matrix that is not positive semidefinite. Valid options are
   ``ignore``, ``warn`` and ``raise``. The default value, ``warn`` keeps the
   the behavior used on previous releases.
+
+``assert_array_less`` compares ``np.inf`` and ``-np.inf`` now
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Previously, ``np.testing.assert_array_less`` ignored all infinite values. This
+is not the expected behavior both according to documentation and intuitively.
+Now, -inf < x < inf is considered ``True`` for any real number x and all
+other cases fail.
diff --git a/numpy/testing/tests/test_utils.py b/numpy/testing/tests/test_utils.py
index 474a7edd5af..4ca6c63543e 100644
--- a/numpy/testing/tests/test_utils.py
+++ b/numpy/testing/tests/test_utils.py
@@ -291,6 +291,9 @@ def test_inf(self):
         a[0, 0] = np.inf
         self.assertRaises(AssertionError,
                 lambda: self._assert_func(a, b))
+        b[0, 0] = -np.inf
+        self.assertRaises(AssertionError,
+                lambda: self._assert_func(a, b))
 
     def test_subclass(self):
         a = np.array([[1., 2.], [3., 4.]])
@@ -337,6 +340,8 @@ def test_inf_item(self):
         self._assert_func(-np.inf, -np.inf)
         self.assertRaises(AssertionError,
                 lambda: self._assert_func(np.inf, 1))
+        self.assertRaises(AssertionError,
+                lambda: self._assert_func(-np.inf, np.inf))
 
     def test_simple_item(self):
         self._test_not_equal(1, 2)
@@ -432,6 +437,146 @@ def test_nan_items(self):
                 lambda: self._assert_func(ainf, anan))
 
 
+class TestArrayAssertLess(unittest.TestCase):
+
+    def setUp(self):
+        self._assert_func = assert_array_less
+
+    def test_simple_arrays(self):
+        x = np.array([1.1, 2.2])
+        y = np.array([1.2, 2.3])
+
+        self._assert_func(x, y)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+        y = np.array([1.0, 2.3])
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, y))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+    def test_rank2(self):
+        x = np.array([[1.1, 2.2], [3.3, 4.4]])
+        y = np.array([[1.2, 2.3], [3.4, 4.5]])
+
+        self._assert_func(x, y)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+        y = np.array([[1.0, 2.3], [3.4, 4.5]])
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, y))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+    def test_rank3(self):
+        x = np.ones(shape=(2, 2, 2))
+        y = np.ones(shape=(2, 2, 2))+1
+
+        self._assert_func(x, y)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+        y[0, 0, 0] = 0
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, y))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+    def test_simple_items(self):
+        x = 1.1
+        y = 2.2
+
+        self._assert_func(x, y)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+        y = np.array([2.2, 3.3])
+
+        self._assert_func(x, y)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(y, x))
+
+        y = np.array([1.0, 3.3])
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, y))
+
+    def test_nan_noncompare(self):
+        anan = np.array(np.nan)
+        aone = np.array(1)
+        ainf = np.array(np.inf)
+        self._assert_func(anan, anan)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(aone, anan))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(anan, aone))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(anan, ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(ainf, anan))
+
+    def test_nan_noncompare_array(self):
+        x = np.array([1.1, 2.2, 3.3])
+        anan = np.array(np.nan)
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, anan))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(anan, x))
+
+        x = np.array([1.1, 2.2, np.nan])
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, anan))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(anan, x))
+
+        y = np.array([1.0, 2.0, np.nan])
+
+        self._assert_func(y, x)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, y))
+
+    def test_inf_compare(self):
+        aone = np.array(1)
+        ainf = np.array(np.inf)
+
+        self._assert_func(aone, ainf)
+        self._assert_func(-ainf, aone)
+        self._assert_func(-ainf, ainf)
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(ainf, aone))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(aone, -ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(ainf, ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(ainf, -ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(-ainf, -ainf))
+
+    def test_inf_compare_array(self):
+        x = np.array([1.1, 2.2, np.inf])
+        ainf = np.array(np.inf)
+
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(ainf, x))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(x, -ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(-x, -ainf))
+        self.assertRaises(AssertionError,
+                          lambda: self._assert_func(-ainf, -x))
+        self._assert_func(-ainf, x)
+
+
 class TestRaises(unittest.TestCase):
 
     def setUp(self):
diff --git a/numpy/testing/utils.py b/numpy/testing/utils.py
index 859a0705b55..7858eefac62 100644
--- a/numpy/testing/utils.py
+++ b/numpy/testing/utils.py
@@ -666,9 +666,11 @@ def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True):
 
 
 def assert_array_compare(comparison, x, y, err_msg='', verbose=True,
-                         header='', precision=6, equal_nan=True):
+                         header='', precision=6, equal_nan=True,
+                         equal_inf=True):
     __tracebackhide__ = True  # Hide traceback for py.test
-    from numpy.core import array, isnan, isinf, any, all, inf
+    from numpy.core import array, isnan, isinf, any, all, inf, zeros_like
+    from numpy.core.numerictypes import bool_
     x = array(x, copy=False, subok=True)
     y = array(y, copy=False, subok=True)
 
@@ -724,25 +726,24 @@ def chk_same_position(x_id, y_id, hasval='nan'):
                 raise AssertionError(msg)
 
         if isnumber(x) and isnumber(y):
+            x_id, y_id = zeros_like(x, dtype=bool_), zeros_like(y, dtype=bool_)
             if equal_nan:
                 x_isnan, y_isnan = isnan(x), isnan(y)
                 # Validate that NaNs are in the same place
                 if any(x_isnan) or any(y_isnan):
                     chk_same_position(x_isnan, y_isnan, hasval='nan')
-
-            x_isinf, y_isinf = isinf(x), isinf(y)
-
-            # Validate that infinite values are in the same place
-            if any(x_isinf) or any(y_isinf):
-                # Check +inf and -inf separately, since they are different
-                chk_same_position(x == +inf, y == +inf, hasval='+inf')
-                chk_same_position(x == -inf, y == -inf, hasval='-inf')
-
-            # Combine all the special values
-            x_id, y_id = x_isinf, y_isinf
-            if equal_nan:
-                x_id |= x_isnan
-                y_id |= y_isnan
+                    x_id |= x_isnan
+                    y_id |= y_isnan
+
+            if equal_inf:
+                x_isinf, y_isinf = isinf(x), isinf(y)
+                # Validate that infinite values are in the same place
+                if any(x_isinf) or any(y_isinf):
+                    # Check +inf and -inf separately, since they are different
+                    chk_same_position(x == +inf, y == +inf, hasval='+inf')
+                    chk_same_position(x == -inf, y == -inf, hasval='-inf')
+                    x_id |= x_isinf
+                    y_id |= y_isinf
 
             # Only do the comparison if actual values are left
             if all(x_id):
@@ -930,7 +931,7 @@ def compare(x, y):
             if npany(gisinf(x)) or npany( gisinf(y)):
                 xinfid = gisinf(x)
                 yinfid = gisinf(y)
-                if not xinfid == yinfid:
+                if not (xinfid == yinfid).all():
                     return False
                 # if one item, x and y is +- inf
                 if x.size == y.size == 1:
@@ -1025,7 +1026,8 @@ def assert_array_less(x, y, err_msg='', verbose=True):
     __tracebackhide__ = True  # Hide traceback for py.test
     assert_array_compare(operator.__lt__, x, y, err_msg=err_msg,
                          verbose=verbose,
-                         header='Arrays are not less-ordered')
+                         header='Arrays are not less-ordered',
+                         equal_inf=False)
 
 
 def runstring(astr, dict):
