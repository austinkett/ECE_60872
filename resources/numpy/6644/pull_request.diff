diff --git a/doc/release/1.10.2-notes.rst b/doc/release/1.10.2-notes.rst
index 4a62be2daec..c17c7160ae3 100644
--- a/doc/release/1.10.2-notes.rst
+++ b/doc/release/1.10.2-notes.rst
@@ -17,7 +17,6 @@ using PyArray_ISFORTRAN to check for Fortran contiguity instead of
 PyArray_IS_F_CONTIGUOUS. You may want to regenerate swigged files using the
 updated numpy.i
 
-
 Issues Fixed
 ============
 
@@ -34,6 +33,7 @@ Issues Fixed
 * gh-6602 Random __all__ missing choice and dirichlet.
 * gh-6618 NPY_FORTRANORDER in make_fortran() in numpy.i
 * gh-6475 np.allclose returns a memmap when one of its arguments is a memmap.
+* gh-6641 Subsetting recarray by fields yields a structured array.
 
 Merged PRs
 ==========
@@ -71,6 +71,7 @@ The following PRs in master have been backported to 1.10.2
 * gh-6614 BUG: Add choice and dirichlet to numpy.random.__all__.
 * gh-6621 BUG: Fix swig make_fortran function.
 * gh-6628 BUG: Make allclose return python bool.
+* gh-6643 ENH: make recarray.getitem return a recarray.
 
 Initial support for mingwpy was reverted as it was causing problems for
 non-windows builds.
diff --git a/numpy/core/records.py b/numpy/core/records.py
index 4ce3fe98a27..b0775538478 100644
--- a/numpy/core/records.py
+++ b/numpy/core/records.py
@@ -502,6 +502,7 @@ def __getitem__(self, indx):
         # we might also be returning a single element
         if isinstance(obj, ndarray):
             if obj.dtype.fields:
+                obj = obj.view(recarray)
                 if issubclass(obj.dtype.type, nt.void):
                     return obj.view(dtype=(self.dtype.type, obj.dtype))
                 return obj
diff --git a/numpy/core/tests/test_records.py b/numpy/core/tests/test_records.py
index 290bc4fa7fe..e0f0a3a8ff5 100644
--- a/numpy/core/tests/test_records.py
+++ b/numpy/core/tests/test_records.py
@@ -121,6 +121,14 @@ def test_recarray_views(self):
         assert_equal(type(rv), np.recarray)
         assert_equal(rv.dtype.type, np.record)
 
+        #check that getitem also preserves np.recarray and np.record
+        r = np.rec.array(np.ones(4, dtype=[('a', 'i4'), ('b', 'i4'), 
+                                           ('c', 'i4,i4')]))
+        assert_equal(r['c'].dtype.type, np.record)
+        assert_equal(type(r['c']), np.recarray)
+        assert_equal(r[['a', 'b']].dtype.type, np.record)
+        assert_equal(type(r[['a', 'b']]), np.recarray)
+
         # check that accessing nested structures keep record type, but
         # not for subarrays, non-void structures, non-structured voids
         test_dtype = [('a', 'f4,f4'), ('b', 'V8'), ('c', ('f4',2)),
