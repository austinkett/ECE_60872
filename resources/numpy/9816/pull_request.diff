diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index e1df556ef34..d3c8e83ac52 100644
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -542,40 +542,51 @@ def _formatArray(a, format_function, rank, max_line_len,
     if rank == 0:
         return format_function(a[()]) + '\n'
 
-    if summary_insert and 2*edge_items < len(a):
+    if summary_insert and 2*edge_items < a.shape[-rank]:
         leading_items = edge_items
         trailing_items = edge_items
         summary_insert1 = summary_insert
     else:
         leading_items = 0
-        trailing_items = len(a)
+        trailing_items = a.shape[-rank]
         summary_insert1 = ""
 
+    # Instead of indexing from the left, index from the right, inserting
+    # padding :s as needed. This allows us to handle `rank != a.ndim` which
+    # happens with np.matrix
+    pre_ind = np.index_exp[...]
+    post_ind = np.index_exp[:]*(rank - 1)
+    get = lambda i: a[pre_ind + (i,) + post_ind]
+
+    ff = lambda x: format_function(x[()])
+
     if rank == 1:
         s = ""
         line = next_line_prefix
         for i in range(leading_items):
-            word = format_function(a[i]) + separator
+            word = ff(get(i)) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
         if summary_insert1:
             s, line = _extendLine(s, line, summary_insert1, max_line_len, next_line_prefix)
 
         for i in range(trailing_items, 1, -1):
-            word = format_function(a[-i]) + separator
+            word = ff(get(-i)) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
-        word = format_function(a[-1])
+        word = ff(get(-1))
         s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
         s += line + "]\n"
         s = '[' + s[len(next_line_prefix):]
     else:
+
         s = '['
         sep = separator.rstrip()
         for i in range(leading_items):
             if i > 0:
                 s += next_line_prefix
-            s += _formatArray(a[i], format_function, rank-1, max_line_len,
+            s += _formatArray(get(i),
+                              format_function, rank-1, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
                               summary_insert)
             s = s.rstrip() + sep.rstrip() + '\n'*max(rank-1, 1)
@@ -586,13 +597,15 @@ def _formatArray(a, format_function, rank, max_line_len,
         for i in range(trailing_items, 1, -1):
             if leading_items or i != trailing_items:
                 s += next_line_prefix
-            s += _formatArray(a[-i], format_function, rank-1, max_line_len,
+            s += _formatArray(get(-i),
+                              format_function, rank-1, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
                               summary_insert)
             s = s.rstrip() + sep.rstrip() + '\n'*max(rank-1, 1)
         if leading_items or trailing_items > 1:
             s += next_line_prefix
-        s += _formatArray(a[-1], format_function, rank-1, max_line_len,
+        s += _formatArray(get(-1),
+                          format_function, rank-1, max_line_len,
                           " " + next_line_prefix, separator, edge_items,
                           summary_insert).rstrip()+']\n'
     return s
diff --git a/numpy/matrixlib/defmatrix.py b/numpy/matrixlib/defmatrix.py
index e016b5f4c5a..6ca974cee07 100644
--- a/numpy/matrixlib/defmatrix.py
+++ b/numpy/matrixlib/defmatrix.py
@@ -297,7 +297,12 @@ def __getitem__(self, index):
                 n = len(index)
             except Exception:
                 n = 0
-            if n > 1 and isscalar(index[1]):
+            # assume that ellipsis is not repeated
+            if n == 3 and Ellipsis in index:
+                index = list(index)
+                index.remove(Ellipsis)
+                n = len(index)
+            if n == 2 and isscalar(index[1]):
                 out.shape = (sh, 1)
             else:
                 out.shape = (1, sh)
@@ -328,19 +333,6 @@ def __ipow__(self, other):
     def __rpow__(self, other):
         return NotImplemented
 
-    def __repr__(self):
-        s = repr(self.__array__()).replace('array', 'matrix')
-        # now, 'matrix' has 6 letters, and 'array' 5, so the columns don't
-        # line up anymore. We need to add a space.
-        l = s.splitlines()
-        for i in range(1, len(l)):
-            if l[i]:
-                l[i] = ' ' + l[i]
-        return '\n'.join(l)
-
-    def __str__(self):
-        return str(self.__array__())
-
     def _align(self, axis):
         """A convenience function for operations that need to preserve axis
         orientation.
diff --git a/numpy/testing/tests/test_utils.py b/numpy/testing/tests/test_utils.py
index c440d8eca03..0a9060a56e0 100644
--- a/numpy/testing/tests/test_utils.py
+++ b/numpy/testing/tests/test_utils.py
@@ -272,9 +272,7 @@ def test_error_message(self):
             msg_reference = "\nArrays are not equal\n\n" \
                 "(shapes (2,), (1, 2) mismatch)\n" \
                 " x: array([1, 2])\n" \
-                " y: [repr failed for <matrix>: The truth value of an array " \
-                "with more than one element is ambiguous. Use a.any() or " \
-                "a.all()]"
+                " y: matrix([[1, 2]])"
             try:
                 self.assertEqual(msg, msg_reference)
             except AssertionError:
