diff --git a/numpy/core/src/multiarray/datetime.c b/numpy/core/src/multiarray/datetime.c
index df9b9cec494..3eb9b7c8591 100644
--- a/numpy/core/src/multiarray/datetime.c
+++ b/numpy/core/src/multiarray/datetime.c
@@ -424,20 +424,16 @@ convert_datetime_to_datetimestruct(PyArray_DatetimeMetaData *meta,
     out->month = 1;
     out->day = 1;
 
-    /* NaT is signaled in the year */
-    if (dt == NPY_DATETIME_NAT) {
+    /* NaT is signaled in the year
+     * and we will also default to
+     * NaT when only generic units
+     * are retrieved
+     */
+    if (dt == NPY_DATETIME_NAT || meta->base == NPY_FR_GENERIC) {
         out->year = NPY_DATETIME_NAT;
         return 0;
     }
 
-    /* Datetimes can't be in generic units */
-    if (meta->base == NPY_FR_GENERIC) {
-        PyErr_SetString(PyExc_ValueError,
-                    "Cannot convert a NumPy datetime value other than NaT "
-                    "with generic units");
-        return -1;
-    }
-
     /* TODO: Change to a mechanism that avoids the potential overflow */
     dt *= meta->num;
 
diff --git a/numpy/core/tests/test_datetime.py b/numpy/core/tests/test_datetime.py
index 8e058d5fb9a..d62336c47a2 100644
--- a/numpy/core/tests/test_datetime.py
+++ b/numpy/core/tests/test_datetime.py
@@ -138,6 +138,16 @@ def test_compare_generic_nat(self):
             assert_(np.datetime64('NaT') == np.datetime64('NaT', 'us'))
             assert_(np.datetime64('NaT', 'us') == np.datetime64('NaT'))
 
+    @pytest.mark.parametrize("arr, expected_repr", [
+    (np.zeros(1, np.dtype([('b', np.datetime64)])),
+     "array([('NaT',)], dtype=[('b', '<M8')])"),
+    (np.zeros(2, np.datetime64),
+     "array(['NaT', 'NaT'], dtype=datetime64)"),
+    ])
+    def test_repr_generic_datetime(self, arr, expected_repr):
+        # regression test for gh-11752
+        assert_equal(repr(arr), expected_repr)
+
     def test_datetime_scalar_construction(self):
         # Construct with different units
         assert_equal(np.datetime64('1950-03-12', 'D'),
