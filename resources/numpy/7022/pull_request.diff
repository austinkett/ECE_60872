diff --git a/numpy/core/src/umath/loops.c.src b/numpy/core/src/umath/loops.c.src
index 563761bc067..e74ac9d40e7 100644
--- a/numpy/core/src/umath/loops.c.src
+++ b/numpy/core/src/umath/loops.c.src
@@ -1688,13 +1688,8 @@ NPY_NO_EXPORT void
     BINARY_LOOP {
         const @type@ in1 = *(@type@ *)ip1;
         const @type@ in2 = *(@type@ *)ip2;
-        const @type@ res = npy_fmod@c@(in1,in2);
-        if (res && ((in2 < 0) != (res < 0))) {
-            *((@type@ *)op1) = res + in2;
-        }
-        else {
-            *((@type@ *)op1) = res;
-        }
+        const @type@ div = in1/in2;
+        *((@type@ *)op1) = in2*(div - npy_floor@c@(div));
     }
 }
 
diff --git a/numpy/core/src/umath/scalarmath.c.src b/numpy/core/src/umath/scalarmath.c.src
index c371a079f65..c35b96d5ce1 100644
--- a/numpy/core/src/umath/scalarmath.c.src
+++ b/numpy/core/src/umath/scalarmath.c.src
@@ -272,10 +272,10 @@ static void
 static @type@ (*_basic_@name@_floor)(@type@);
 static @type@ (*_basic_@name@_sqrt)(@type@);
 static @type@ (*_basic_@name@_fmod)(@type@, @type@);
-#define @name@_ctype_add(a, b, outp) *(outp) = a + b
-#define @name@_ctype_subtract(a, b, outp) *(outp) = a - b
-#define @name@_ctype_multiply(a, b, outp) *(outp) = a * b
-#define @name@_ctype_divide(a, b, outp) *(outp) = a / b
+#define @name@_ctype_add(a, b, outp) *(outp) = (a) + (b)
+#define @name@_ctype_subtract(a, b, outp) *(outp) = (a) - (b)
+#define @name@_ctype_multiply(a, b, outp) *(outp) = (a) * (b)
+#define @name@_ctype_divide(a, b, outp) *(outp) = (a) / (b)
 #define @name@_ctype_true_divide @name@_ctype_divide
 #define @name@_ctype_floor_divide(a, b, outp)   \
     *(outp) = _basic_@name@_floor((a) / (b))
@@ -343,23 +343,16 @@ static npy_half (*_basic_half_fmod)(npy_half, npy_half);
  */
 static void
 @name@_ctype_remainder(@type@ a, @type@ b, @type@ *out) {
-    @type@ mod;
-    mod = _basic_@name@_fmod(a, b);
-    if (mod && (((b < 0) != (mod < 0)))) {
-        mod += b;
-    }
-    *out = mod;
+    @type@ tmp = a/b;
+    *out = b * (tmp - _basic_@name@_floor(tmp));
 }
 /**end repeat**/
 
 static void
 half_ctype_remainder(npy_half a, npy_half b, npy_half *out) {
-    float mod, fa = npy_half_to_float(a), fb = npy_half_to_float(b);
-    mod = _basic_float_fmod(fa, fb);
-    if (mod && (((fb < 0) != (mod < 0)))) {
-        mod += fb;
-    }
-    *out = npy_float_to_half(mod);
+    float tmp, fa = npy_half_to_float(a), fb = npy_half_to_float(b);
+    float_ctype_remainder(fa, fb, &tmp);
+    *out = npy_float_to_half(tmp);
 }
 
 
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index c9e610cbff1..f16222f120b 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -143,7 +143,8 @@ def test_int_subclassing(self):
         numpy_int = np.int_(0)
 
         if sys.version_info[0] >= 3:
-            # On Py3k int_ should not inherit from int, because it's not fixed-width anymore
+            # On Py3k int_ should not inherit from int, because it's not
+            # fixed-width anymore
             assert_equal(isinstance(numpy_int, int), False)
         else:
             # Otherwise, it should inherit from int...
@@ -175,7 +176,8 @@ def test_set_stridesattr(self):
 
         def make_array(size, offset, strides):
             try:
-                r = np.ndarray([size], dtype=int, buffer=x, offset=offset*x.itemsize)
+                r = np.ndarray([size], dtype=int, buffer=x,
+                               offset=offset*x.itemsize)
             except:
                 raise RuntimeError(getexception())
             r.strides = strides = strides*x.itemsize
@@ -2327,6 +2329,41 @@ def test_conjugate(self):
         assert_raises(AttributeError, lambda: a.conj())
         assert_raises(AttributeError, lambda: a.conjugate())
 
+    def test_divmod_basic(self):
+        dt = np.typecodes['AllInteger'] + np.typecodes['Float']
+        for dt1, dt2 in itertools.product(dt, dt):
+            for sg1, sg2 in itertools.product((+1, -1), (+1, -1)):
+                if sg1 == -1 and dt1 in np.typecodes['UnsignedInteger']:
+                    continue
+                if sg2 == -1 and dt2 in np.typecodes['UnsignedInteger']:
+                    continue
+                fmt = 'dt1: %s, dt2: %s, sg1: %s, sg2: %s'
+                msg = fmt % (dt1, dt2, sg1, sg2)
+                a = np.array(sg1*71, dtype=dt1)
+                b = np.array(sg2*19, dtype=dt2)
+                div, rem = divmod(a, b)
+                assert_allclose(div*b + rem, a, err_msg=msg)
+                if sg2 == -1:
+                    assert_(b < rem <= 0, msg)
+                else:
+                    assert_(b > rem >= 0, msg)
+
+    def test_divmod_roundoff(self):
+        # gh-6127
+        dt = 'fdg'
+        for dt1, dt2 in itertools.product(dt, dt):
+            for sg1, sg2 in itertools.product((+1, -1), (+1, -1)):
+                fmt = 'dt1: %s, dt2: %s, sg1: %s, sg2: %s'
+                msg = fmt % (dt1, dt2, sg1, sg2)
+                a = np.array(sg1*78*6e-8, dtype=dt1)
+                b = np.array(sg2*6e-8, dtype=dt2)
+                div, rem = divmod(a, b)
+                assert_allclose(div*b + rem, a, err_msg=msg)
+                if sg2 == -1:
+                    assert_(b < rem <= 0, msg)
+                else:
+                    assert_(b > rem >= 0, msg)
+
 
 class TestBinop(object):
     def test_inplace(self):
diff --git a/numpy/core/tests/test_scalarmath.py b/numpy/core/tests/test_scalarmath.py
index 6dd9aa4550a..f54e3d76ad0 100644
--- a/numpy/core/tests/test_scalarmath.py
+++ b/numpy/core/tests/test_scalarmath.py
@@ -1,12 +1,13 @@
 from __future__ import division, absolute_import, print_function
 
 import sys
+import itertools
 
 import numpy as np
 from numpy.testing.utils import _gen_alignment_data
 from numpy.testing import (
     TestCase, run_module_suite, assert_, assert_equal, assert_raises,
-    assert_almost_equal
+    assert_almost_equal, assert_allclose
 )
 
 types = [np.bool_, np.byte, np.ubyte, np.short, np.ushort, np.intc, np.uintc,
@@ -135,6 +136,44 @@ def test_mixed_types(self):
                 else:
                     assert_almost_equal(result, 9, err_msg=msg)
 
+
+class TestDivmod(TestCase):
+    def test_divmod_basic(self):
+        dt = np.typecodes['AllInteger'] + np.typecodes['Float']
+        for dt1, dt2 in itertools.product(dt, dt):
+            for sg1, sg2 in itertools.product((+1, -1), (+1, -1)):
+                if sg1 == -1 and dt1 in np.typecodes['UnsignedInteger']:
+                    continue
+                if sg2 == -1 and dt2 in np.typecodes['UnsignedInteger']:
+                    continue
+                fmt = 'dt1: %s, dt2: %s, sg1: %s, sg2: %s'
+                msg = fmt % (dt1, dt2, sg1, sg2)
+                a = np.array(sg1*71, dtype=dt1)[()]
+                b = np.array(sg2*19, dtype=dt2)[()]
+                div, rem = divmod(a, b)
+                assert_allclose(div*b + rem, a, err_msg=msg)
+                if sg2 == -1:
+                    assert_(b < rem <= 0, msg)
+                else:
+                    assert_(b > rem >= 0, msg)
+
+    def test_divmod_roundoff(self):
+        # gh-6127
+        dt = 'fdg'
+        for dt1, dt2 in itertools.product(dt, dt):
+            for sg1, sg2 in itertools.product((+1, -1), (+1, -1)):
+                fmt = 'dt1: %s, dt2: %s, sg1: %s, sg2: %s'
+                msg = fmt % (dt1, dt2, sg1, sg2)
+                a = np.array(sg1*78*6e-8, dtype=dt1)[()]
+                b = np.array(sg2*6e-8, dtype=dt2)[()]
+                div, rem = divmod(a, b)
+                assert_allclose(div*b + rem, a, err_msg=msg)
+                if sg2 == -1:
+                    assert_(b < rem <= 0, msg)
+                else:
+                    assert_(b > rem >= 0, msg)
+
+
 class TestComplexDivision(TestCase):
     def test_zero_division(self):
         with np.errstate(all="ignore"):
