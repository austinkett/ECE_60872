diff --git a/benchmarks/benchmarks/bench_app.py b/benchmarks/benchmarks/bench_app.py
index 0e2aca64b00..ccf6e4c4af8 100644
--- a/benchmarks/benchmarks/bench_app.py
+++ b/benchmarks/benchmarks/bench_app.py
@@ -4,6 +4,8 @@
 
 import numpy as np
 
+from six.moves import xrange
+
 
 class LaplaceInplace(Benchmark):
     params = ['inplace', 'normal']
diff --git a/benchmarks/benchmarks/common.py b/benchmarks/benchmarks/common.py
index c99b0afb8e9..e98396bed87 100644
--- a/benchmarks/benchmarks/common.py
+++ b/benchmarks/benchmarks/common.py
@@ -1,3 +1,5 @@
+from __future__ import absolute_import, division, print_function
+
 import numpy
 import random
 
@@ -26,7 +28,7 @@
 # values which will be used to construct our sample data matrices
 # replicate 10 times to speed up initial imports of this helper
 # and generate some redundancy
-values = [random.uniform(0, 100) for x in range(nx*ny/10)]*10
+values = [random.uniform(0, 100) for x in range(nx*ny//10)]*10
 
 squares = {t: numpy.array(values,
                           dtype=getattr(numpy, t)).reshape((nx, ny))
@@ -34,16 +36,16 @@
 
 # adjust complex ones to have non-degenerated imagery part -- use
 # original data transposed for that
-for t, v in squares.iteritems():
+for t, v in squares.items():
     if t.startswith('complex'):
         v += v.T*1j
 
 # smaller squares
-squares_ = {t: s[:nxs, :nys] for t, s in squares.iteritems()}
+squares_ = {t: s[:nxs, :nys] for t, s in squares.items()}
 # vectors
-vectors = {t: s[0] for t, s in squares.iteritems()}
+vectors = {t: s[0] for t, s in squares.items()}
 
-indexes = range(nx)
+indexes = list(range(nx))
 # so we do not have all items
 indexes.pop(5)
 indexes.pop(95)
