diff --git a/numpy/f2py/crackfortran.py b/numpy/f2py/crackfortran.py
index 38f3f248179..dc560f98ec5 100755
--- a/numpy/f2py/crackfortran.py
+++ b/numpy/f2py/crackfortran.py
@@ -652,12 +652,13 @@ def crackline(line, reset=0):
     global filepositiontext, currentfilename, neededmodule, expectbegin
     global skipblocksuntil, skipemptyends, previous_context, gotnextfile
 
-    line, semicolon_line = split_by_unquoted(line, ";")
-    if semicolon_line and not (f2pyenhancementspattern[0].match(line) or
+    _, has_semicolon = split_by_unquoted(line, ";")
+    if has_semicolon and not (f2pyenhancementspattern[0].match(line) or
                                multilinepattern[0].match(line)):
         # XXX: non-zero reset values need testing
         assert reset == 0, repr(reset)
         # split line on unquoted semicolons
+        line, semicolon_line = split_by_unquoted(line, ";")
         while semicolon_line:
             crackline(line, reset)
             line, semicolon_line = split_by_unquoted(semicolon_line[1:], ";")
diff --git a/numpy/f2py/tests/test_semicolon_split.py b/numpy/f2py/tests/test_semicolon_split.py
new file mode 100644
index 00000000000..d844e2eaeed
--- /dev/null
+++ b/numpy/f2py/tests/test_semicolon_split.py
@@ -0,0 +1,53 @@
+from __future__ import division, absolute_import, print_function
+
+from . import util
+from numpy.testing import assert_equal
+
+class TestMultiline(util.F2PyTest):
+    suffix = ".pyf"
+    module_name = "multiline"
+    code = """
+python module {module}
+    usercode '''
+void foo(int* x) {{ 
+    char dummy = ';';
+    *x = 42; 
+}}
+'''
+    interface
+        subroutine foo(x)
+	    intent(c) foo
+            integer intent(out) :: x
+        end subroutine foo
+    end interface
+end python module {module}
+    """.format(module=module_name)
+
+    def test_multiline(self):
+        assert_equal(self.module.foo(), 42)
+
+class TestCallstatement(util.F2PyTest):
+    suffix = ".pyf"
+    module_name = "callstatement"
+    code = """
+python module {module}
+    usercode '''
+void foo(int* x) {{
+}}
+'''
+    interface
+        subroutine foo(x)
+	    intent(c) foo
+            integer intent(out) :: x
+	    callprotoargument int*
+            callstatement {{ &
+	        ; &
+                x = 42; &
+            }}
+        end subroutine foo
+    end interface
+end python module {module}
+    """.format(module=module_name)
+
+    def test_callstatement(self):
+        assert_equal(self.module.foo(), 42)
