diff --git a/doc/release/1.15.0-notes.rst b/doc/release/1.15.0-notes.rst
index 82e50edac31..1688b6f6721 100644
--- a/doc/release/1.15.0-notes.rst
+++ b/doc/release/1.15.0-notes.rst
@@ -126,6 +126,11 @@ unstructured void array's ``.item`` method now returns a bytes object
 This may affect code which assumed the return value was mutable, which is no
 longer the case.
 
+``copy.copy`` and ``copy.deepcopy`` no longer turn ``masked`` into an array
+----------------------------------------------------------------------------
+Since ``np.ma.masked`` is a readonly scalar, copying should be a no-op. These
+functions now behave consistently with ``np.copy()``.
+
 
 C API changes
 =============
diff --git a/numpy/ma/core.py b/numpy/ma/core.py
index fb28fa8e5fd..c0dda6f317d 100644
--- a/numpy/ma/core.py
+++ b/numpy/ma/core.py
@@ -6317,6 +6317,12 @@ def copy(self, *args, **kwargs):
         # precedent for this with `np.bool_` scalars.
         return self
 
+    def __copy__(self):
+        return self
+		
+    def __deepcopy__(self, memo):
+        return self
+
     def __setattr__(self, attr, value):
         if not self.__has_singleton():
             # allow the singleton to be initialized
diff --git a/numpy/ma/tests/test_core.py b/numpy/ma/tests/test_core.py
index 63703f6cd48..4c7440aabb9 100644
--- a/numpy/ma/tests/test_core.py
+++ b/numpy/ma/tests/test_core.py
@@ -4826,6 +4826,16 @@ def test_copy(self):
             np.ma.masked.copy() is np.ma.masked,
             np.True_.copy() is np.True_)
 
+    def test__copy(self):
+        import copy
+        assert_(
+            copy.copy(np.ma.masked) is np.ma.masked)
+
+    def test_deepcopy(self):
+        import copy
+        assert_(
+            copy.deepcopy(np.ma.masked) is np.ma.masked)
+
     def test_immutable(self):
         orig = np.ma.masked
         assert_raises(np.ma.core.MaskError, operator.setitem, orig, (), 1)
