diff --git a/numpy/core/numeric.py b/numpy/core/numeric.py
index a18b380727b..0b728f8043f 100644
--- a/numpy/core/numeric.py
+++ b/numpy/core/numeric.py
@@ -2467,7 +2467,11 @@ def within_tol(x, y, atol, rtol):
             # Make NaN == NaN
             both_nan = isnan(x) & isnan(y)
             cond[both_nan] = both_nan[both_nan]
-        return cond
+
+        if isscalar(a) and isscalar(b):
+            return bool(cond)
+        else:
+            return cond
 
 def array_equal(a1, a2):
     """
diff --git a/numpy/core/tests/test_numeric.py b/numpy/core/tests/test_numeric.py
index a114d5a5a3d..17ea6212c95 100644
--- a/numpy/core/tests/test_numeric.py
+++ b/numpy/core/tests/test_numeric.py
@@ -1589,7 +1589,11 @@ def tst_none_isclose(self, x, y):
 
     def tst_isclose_allclose(self, x, y):
         msg = "isclose.all() and allclose aren't same for %s and %s"
-        assert_array_equal(np.isclose(x, y).all(), np.allclose(x, y), msg % (x, y))
+        msg2 = "isclose and allclose aren't same for %s and %s"
+        if np.isscalar(x) and np.isscalar(y):
+            assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg % (x, y))
+        else:
+            assert_array_equal(np.isclose(x, y).all(), np.allclose(x, y), msg % (x, y))
 
     def test_ip_all_isclose(self):
         self.setup()
@@ -1650,6 +1654,14 @@ def test_no_parameter_modification(self):
         assert_array_equal(x, np.array([np.inf, 1]))
         assert_array_equal(y, np.array([0, np.inf]))
 
+    def test_non_finite_scalar(self):
+        # GH7014, when two scalars are compared the output should also be a
+        # scalar
+        assert_(np.isclose(np.inf, -np.inf) is False)
+        assert_(np.isclose(0, np.inf) is False)
+        assert_(type(np.isclose(0, np.inf)) is bool)
+
+
 class TestStdVar(TestCase):
     def setUp(self):
         self.A = np.array([1, -1, 1, -1])
