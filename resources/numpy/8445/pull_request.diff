diff --git a/numpy/fft/fftpack.py b/numpy/fft/fftpack.py
index 7486ff51eef..bd116b9cb45 100644
--- a/numpy/fft/fftpack.py
+++ b/numpy/fft/fftpack.py
@@ -371,7 +371,9 @@ def rfft(a, n=None, axis=-1, norm=None):
     output = _raw_fft(a, n, axis, fftpack.rffti, fftpack.rfftf,
                       _real_fft_cache)
     if _unitary(norm):
-        output *= 1 / sqrt(a.shape[axis])
+        if n is None:
+            n = a.shape[axis]
+        output *= 1 / sqrt(n)
     return output
 
 
diff --git a/numpy/fft/tests/test_fftpack.py b/numpy/fft/tests/test_fftpack.py
index 2e6294252e8..a2cbc0f637b 100644
--- a/numpy/fft/tests/test_fftpack.py
+++ b/numpy/fft/tests/test_fftpack.py
@@ -71,9 +71,13 @@ def test_ifftn(self):
 
     def test_rfft(self):
         x = random(30)
-        assert_array_almost_equal(np.fft.fft(x)[:16], np.fft.rfft(x))
-        assert_array_almost_equal(np.fft.rfft(x) / np.sqrt(30),
-                                  np.fft.rfft(x, norm="ortho"))
+        for n in [x.size, 2*x.size]:
+            for norm in [None, 'ortho']:
+                assert_array_almost_equal(
+                    np.fft.fft(x, n=n, norm=norm)[:(n//2 + 1)],
+                    np.fft.rfft(x, n=n, norm=norm))
+            assert_array_almost_equal(np.fft.rfft(x, n=n) / np.sqrt(n),
+                                      np.fft.rfft(x, n=n, norm="ortho"))
 
     def test_irfft(self):
         x = random(30)
@@ -122,6 +126,24 @@ def test_ihttf(self):
             x_herm, np.fft.ihfft(np.fft.hfft(x_herm, norm="ortho"),
                                  norm="ortho"))
 
+    def test_all_1d_norm_preserving(self):
+        # verify that round-trip transforms are norm-preserving
+        x = random(30)
+        x_norm = np.linalg.norm(x)
+        n = x.size * 2
+        func_pairs = [(np.fft.fft, np.fft.ifft),
+                      (np.fft.rfft, np.fft.irfft),
+                      # hfft: order so the first function takes x.size samples
+                      #       (necessary for comparison to x_norm above)
+                      (np.fft.ihfft, np.fft.hfft),
+                      ]
+        for forw, back in func_pairs:
+            for n in [x.size, 2*x.size]:
+                for norm in [None, 'ortho']:
+                    tmp = forw(x, n=n, norm=norm)
+                    tmp = back(tmp, n=n, norm=norm)
+                    assert_array_almost_equal(x_norm,
+                                              np.linalg.norm(tmp))
 
 class TestFFTThreadSafe(TestCase):
     threads = 16
