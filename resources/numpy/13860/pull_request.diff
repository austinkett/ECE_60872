diff --git a/numpy/conftest.py b/numpy/conftest.py
index 7834dd39dff..18d5d1ce9b4 100644
--- a/numpy/conftest.py
+++ b/numpy/conftest.py
@@ -16,6 +16,8 @@
 def pytest_configure(config):
     config.addinivalue_line("markers",
         "valgrind_error: Tests that are known to error under valgrind.")
+    config.addinivalue_line("markers",
+        "leaks_references: Tests that are known to leak references.")
     config.addinivalue_line("markers",
         "slow: Tests that are very slow.")
 
diff --git a/numpy/core/src/multiarray/_multiarray_tests.c.src b/numpy/core/src/multiarray/_multiarray_tests.c.src
index 9061c05184f..1365e87bb9e 100644
--- a/numpy/core/src/multiarray/_multiarray_tests.c.src
+++ b/numpy/core/src/multiarray/_multiarray_tests.c.src
@@ -928,6 +928,7 @@ test_as_c_array(PyObject *NPY_UNUSED(self), PyObject *args)
 
     num_dims = PyArray_NDIM(array_obj);
     descr = PyArray_DESCR(array_obj);
+    Py_INCREF(descr);  /* PyArray_AsCArray steals a reference to this */
 
     switch (num_dims) {
         case 1:
@@ -970,6 +971,7 @@ test_as_c_array(PyObject *NPY_UNUSED(self), PyObject *args)
             PyArray_Free((PyObject *) array_obj, (void *) array3);
             break;
         default:
+            Py_DECREF(descr);
             PyErr_SetString(PyExc_ValueError, "array.ndim not in [1, 3]");
             return NULL;
     }
@@ -1263,7 +1265,9 @@ pylong_from_int128(npy_extint128_t value)
     }
 
     Py_DECREF(val);
+    Py_DECREF(val_64);
     val = tmp;
+    val_64 = NULL;
 
     tmp = PyLong_FromUnsignedLongLong(value.lo);
     if (tmp == NULL) {
diff --git a/numpy/core/src/multiarray/common.c b/numpy/core/src/multiarray/common.c
index a17d775860c..3270bc20d1d 100644
--- a/numpy/core/src/multiarray/common.c
+++ b/numpy/core/src/multiarray/common.c
@@ -147,7 +147,6 @@ PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims,
         if (dtype == NULL) {
             goto fail;
         }
-        Py_INCREF(dtype);
         goto promote_types;
     }
     /* Check if it's a NumPy scalar */
@@ -214,6 +213,10 @@ PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims,
             int itemsize;
             PyObject *temp;
 
+            /* dtype is not used in this (string discovery) branch */
+            Py_DECREF(dtype);
+            dtype = NULL;
+
             if (string_type == NPY_STRING) {
                 if ((temp = PyObject_Str(obj)) == NULL) {
                     goto fail;
diff --git a/numpy/core/src/multiarray/ctors.c b/numpy/core/src/multiarray/ctors.c
index 6be3170eb22..c172662518c 100644
--- a/numpy/core/src/multiarray/ctors.c
+++ b/numpy/core/src/multiarray/ctors.c
@@ -1955,6 +1955,7 @@ PyArray_FromAny(PyObject *op, PyArray_Descr *newtype, int min_depth,
     if (arr == NULL) {
         if ((flags & NPY_ARRAY_WRITEBACKIFCOPY) ||
             (flags & NPY_ARRAY_UPDATEIFCOPY)) {
+            Py_DECREF(dtype);
             Py_XDECREF(newtype);
             PyErr_SetString(PyExc_TypeError,
                             "WRITEBACKIFCOPY used for non-array input.");
diff --git a/numpy/core/src/multiarray/datetime.c b/numpy/core/src/multiarray/datetime.c
index f1e4feac2f9..768eb1e64e3 100644
--- a/numpy/core/src/multiarray/datetime.c
+++ b/numpy/core/src/multiarray/datetime.c
@@ -1832,6 +1832,7 @@ convert_datetime_metadata_tuple_to_datetime_metadata(PyObject *tuple,
                 return -1;
             }
             equal_one = PyObject_RichCompareBool(event, one, Py_EQ);
+            Py_DECREF(one);
             if (equal_one == -1) {
                 return -1;
             }
@@ -2250,6 +2251,7 @@ convert_pydatetime_to_datetimestruct(PyObject *obj, npy_datetimestruct *out,
             if (DEPRECATE(
                     "parsing timezone aware datetimes is deprecated; "
                     "this will raise an error in the future") < 0) {
+                Py_DECREF(tmp);
                 return -1;
             }
 
@@ -2266,6 +2268,7 @@ convert_pydatetime_to_datetimestruct(PyObject *obj, npy_datetimestruct *out,
              * which contains the value we want.
              */
             tmp = PyObject_CallMethod(offset, "total_seconds", "");
+            Py_DECREF(offset);
             if (tmp == NULL) {
                 return -1;
             }
diff --git a/numpy/core/src/multiarray/item_selection.c b/numpy/core/src/multiarray/item_selection.c
index 11c45dce54a..9351b5fc78a 100644
--- a/numpy/core/src/multiarray/item_selection.c
+++ b/numpy/core/src/multiarray/item_selection.c
@@ -2236,6 +2236,7 @@ PyArray_Nonzero(PyArrayObject *self)
         static npy_intp const zero_dim_shape[1] = {1};
         static npy_intp const zero_dim_strides[1] = {0};
 
+        Py_INCREF(PyArray_DESCR(self));  /* array creation steals reference */
         PyArrayObject *self_1d = (PyArrayObject *)PyArray_NewFromDescrAndBase(
             Py_TYPE(self), PyArray_DESCR(self),
             1, zero_dim_shape, zero_dim_strides, PyArray_BYTES(self),
@@ -2243,7 +2244,9 @@ PyArray_Nonzero(PyArrayObject *self)
         if (self_1d == NULL) {
             return NULL;
         }
-        return PyArray_Nonzero(self_1d);
+        ret_tuple = PyArray_Nonzero(self_1d);
+        Py_DECREF(self_1d);
+        return ret_tuple;
     }
 
     /*
diff --git a/numpy/core/src/multiarray/iterators.c b/numpy/core/src/multiarray/iterators.c
index 64c97836132..83eafaf7467 100644
--- a/numpy/core/src/multiarray/iterators.c
+++ b/numpy/core/src/multiarray/iterators.c
@@ -1399,6 +1399,7 @@ arraymultiter_new(PyTypeObject *NPY_UNUSED(subtype), PyObject *args,
     }
     n = PySequence_Fast_GET_SIZE(fast_seq);
     if (n > NPY_MAXARGS) {
+        Py_DECREF(fast_seq);
         return multiiter_wrong_number_of_args();
     }
     ret = multiiter_new_impl(n, PySequence_Fast_ITEMS(fast_seq));
diff --git a/numpy/core/src/multiarray/mapping.c b/numpy/core/src/multiarray/mapping.c
index 9e54a2c6468..add1143b2d6 100644
--- a/numpy/core/src/multiarray/mapping.c
+++ b/numpy/core/src/multiarray/mapping.c
@@ -2516,6 +2516,7 @@ PyArray_MapIterCheckIndices(PyArrayMapIterObject *mit)
                 indval = *((npy_intp*)data);
                 if (check_and_adjust_index(&indval,
                                            outer_dim, outer_axis, _save) < 0) {
+                    Py_DECREF(intp_type);
                     return -1;
                 }
                 data += stride;
@@ -2616,7 +2617,8 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     PyArrayObject *original_extra_op = extra_op;
 
     PyArrayObject *index_arrays[NPY_MAXDIMS];
-    PyArray_Descr *dtypes[NPY_MAXDIMS];
+    PyArray_Descr *intp_descr;
+    PyArray_Descr *dtypes[NPY_MAXDIMS];  /* borrowed references */
 
     npy_uint32 op_flags[NPY_MAXDIMS];
     npy_uint32 outer_flags;
@@ -2629,9 +2631,15 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     int nops;
     int uses_subspace;
 
+    intp_descr = PyArray_DescrFromType(NPY_INTP);
+    if (intp_descr == NULL) {
+        return NULL;
+    }
+
     /* create new MapIter object */
     mit = (PyArrayMapIterObject *)PyArray_malloc(sizeof(PyArrayMapIterObject));
     if (mit == NULL) {
+        Py_DECREF(intp_descr);
         return NULL;
     }
     /* set all attributes of mapiter to zero */
@@ -2661,6 +2669,7 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     mit->nd_fancy = fancy_ndim;
     if (mapiter_fill_info(mit, indices, index_num, arr) < 0) {
         Py_DECREF(mit);
+        Py_DECREF(intp_descr);
         return NULL;
     }
 
@@ -2670,7 +2679,7 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     for (i=0; i < index_num; i++) {
         if (indices[i].type & HAS_FANCY) {
             index_arrays[mit->numiter] = (PyArrayObject *)indices[i].object;
-            dtypes[mit->numiter] = PyArray_DescrFromType(NPY_INTP);
+            dtypes[mit->numiter] = intp_descr;
 
             op_flags[mit->numiter] = (NPY_ITER_NBO |
                                       NPY_ITER_ALIGNED |
@@ -2693,9 +2702,10 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
                                         PyArray_DescrFromType(NPY_INTP), 0);
         if (index_arrays[0] == NULL) {
             Py_DECREF(mit);
+            Py_DECREF(intp_descr);
             return NULL;
         }
-        dtypes[0] = PyArray_DescrFromType(NPY_INTP);
+        dtypes[0] = intp_descr;
         op_flags[0] = NPY_ITER_NBO | NPY_ITER_ALIGNED | NPY_ITER_READONLY;
 
         mit->fancy_dims[0] = 1;
@@ -2925,7 +2935,6 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
         nops += 1;
         index_arrays[mit->numiter] = extra_op;
 
-        Py_INCREF(extra_op_dtype);
         dtypes[mit->numiter] = extra_op_dtype;
         op_flags[mit->numiter] = (extra_op_flags |
                                   NPY_ITER_ALLOCATE |
@@ -2951,9 +2960,6 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     }
 
     /* NpyIter cleanup and information: */
-    for (i=0; i < nops; i++) {
-        Py_DECREF(dtypes[i]);
-    }
     if (dummy_array) {
         Py_DECREF(index_arrays[0]);
     }
@@ -3039,6 +3045,7 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     /* Can now return early if no subspace is being used */
     if (!uses_subspace) {
         Py_XDECREF(extra_op);
+        Py_DECREF(intp_descr);
         return (PyObject *)mit;
     }
 
@@ -3108,6 +3115,7 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
     }
 
     Py_XDECREF(extra_op);
+    Py_DECREF(intp_descr);
     return (PyObject *)mit;
 
   fail:
@@ -3176,6 +3184,7 @@ PyArray_MapIterNew(npy_index_info *indices , int index_num, int index_type,
 
   finish:
     Py_XDECREF(extra_op);
+    Py_DECREF(intp_descr);
     Py_DECREF(mit);
     return NULL;
 }
diff --git a/numpy/core/src/multiarray/methods.c b/numpy/core/src/multiarray/methods.c
index d458638ae2d..79c60aa2e04 100644
--- a/numpy/core/src/multiarray/methods.c
+++ b/numpy/core/src/multiarray/methods.c
@@ -365,6 +365,7 @@ PyArray_GetField(PyArrayObject *self, PyArray_Descr *typed, int offset)
         npy_cache_import("numpy.core._internal", "_getfield_is_safe",
                          &checkfunc);
         if (checkfunc == NULL) {
+            Py_DECREF(typed);
             return NULL;
         }
 
@@ -372,6 +373,7 @@ PyArray_GetField(PyArrayObject *self, PyArray_Descr *typed, int offset)
         safe = PyObject_CallFunction(checkfunc, "OOi", PyArray_DESCR(self),
                                      typed, offset);
         if (safe == NULL) {
+            Py_DECREF(typed);
             return NULL;
         }
         Py_DECREF(safe);
@@ -382,14 +384,17 @@ PyArray_GetField(PyArrayObject *self, PyArray_Descr *typed, int offset)
     /* check that values are valid */
     if (typed_elsize > self_elsize) {
         PyErr_SetString(PyExc_ValueError, "new type is larger than original type");
+        Py_DECREF(typed);
         return NULL;
     }
     if (offset < 0) {
         PyErr_SetString(PyExc_ValueError, "offset is negative");
+        Py_DECREF(typed);
         return NULL;
     }
     if (offset > self_elsize - typed_elsize) {
         PyErr_SetString(PyExc_ValueError, "new type plus offset is larger than original type");
+        Py_DECREF(typed);
         return NULL;
     }
 
@@ -434,6 +439,7 @@ PyArray_SetField(PyArrayObject *self, PyArray_Descr *dtype,
     int retval = 0;
 
     if (PyArray_FailUnlessWriteable(self, "assignment destination") < 0) {
+        Py_DECREF(dtype);
         return -1;
     }
 
@@ -583,14 +589,13 @@ array_tofile(PyArrayObject *self, PyObject *args, PyObject *kwds)
         return NULL;
     }
     if (PyBytes_Check(file) || PyUnicode_Check(file)) {
-        file = npy_PyFile_OpenFile(file, "wb");
+        Py_SETREF(file, npy_PyFile_OpenFile(file, "wb"));
         if (file == NULL) {
             return NULL;
         }
         own = 1;
     }
     else {
-        Py_INCREF(file);
         own = 0;
     }
 
@@ -2035,6 +2040,7 @@ array_setstate(PyArrayObject *self, PyObject *args)
 #endif
             npy_intp num = PyArray_NBYTES(self);
             if (num == 0) {
+                Py_DECREF(rawdata);
                 Py_RETURN_NONE;
             }
             fa->data = PyDataMem_NEW(num);
@@ -2385,7 +2391,6 @@ array_clip(PyArrayObject *self, PyObject *args, PyObject *kwds)
 static PyObject *
 array_conjugate(PyArrayObject *self, PyObject *args)
 {
-
     PyArrayObject *out = NULL;
     if (!PyArg_ParseTuple(args, "|O&:conjugate",
                           PyArray_OutputConverter,
diff --git a/numpy/core/src/multiarray/methods.h b/numpy/core/src/multiarray/methods.h
index b96a3c8a8fa..7a9a24a0020 100644
--- a/numpy/core/src/multiarray/methods.h
+++ b/numpy/core/src/multiarray/methods.h
@@ -8,7 +8,10 @@ extern NPY_NO_EXPORT PyMethodDef array_methods[];
 NPY_NO_EXPORT const char *
 npy_casting_to_string(NPY_CASTING casting);
 
-/* Pathlib support */
+/*
+ * Pathlib support, takes a borrowed reference and returns a new one.
+ * The new object may be the same as the old.
+ */
 static inline PyObject *
 NpyPath_PathlikeToFspath(PyObject *file)
 {
@@ -24,6 +27,7 @@ NpyPath_PathlikeToFspath(PyObject *file)
     }
 
     if (!PyObject_IsInstance(file, os_PathLike)) {
+        Py_INCREF(file);
         return file;
     }
     return PyObject_CallFunctionObjArgs(os_fspath, file, NULL);
diff --git a/numpy/core/src/multiarray/multiarraymodule.c b/numpy/core/src/multiarray/multiarraymodule.c
index 915c9fcd979..e5df6bf1b63 100644
--- a/numpy/core/src/multiarray/multiarraymodule.c
+++ b/numpy/core/src/multiarray/multiarraymodule.c
@@ -2086,22 +2086,25 @@ array_fromfile(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *keywds)
     
     if (offset != 0 && strcmp(sep, "") != 0) {
         PyErr_SetString(PyExc_TypeError, "'offset' argument only permitted for binary files");
+        Py_XDECREF(type);
+        Py_DECREF(file);
         return NULL;
     }
     if (PyString_Check(file) || PyUnicode_Check(file)) {
-        file = npy_PyFile_OpenFile(file, "rb");
+        Py_SETREF(file, npy_PyFile_OpenFile(file, "rb"));
         if (file == NULL) {
+            Py_XDECREF(type);
             return NULL;
         }
         own = 1;
     }
     else {
-        Py_INCREF(file);
         own = 0;
     }
     fp = npy_PyFile_Dup2(file, "rb", &orig_pos);
     if (fp == NULL) {
         Py_DECREF(file);
+        Py_XDECREF(type);
         return NULL;
     }
     if (npy_fseek(fp, offset, SEEK_CUR) != 0) {
@@ -3825,9 +3828,11 @@ _vec_string(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject *kwds)
     else {
         PyErr_SetString(PyExc_TypeError,
                 "string operation on non-string array");
+        Py_DECREF(type);
         goto err;
     }
     if (method == NULL) {
+        Py_DECREF(type);
         goto err;
     }
 
diff --git a/numpy/core/src/multiarray/nditer_pywrap.c b/numpy/core/src/multiarray/nditer_pywrap.c
index 30a81e0ca64..ffea08bb3fe 100644
--- a/numpy/core/src/multiarray/nditer_pywrap.c
+++ b/numpy/core/src/multiarray/nditer_pywrap.c
@@ -572,6 +572,7 @@ npyiter_convert_op_axes(PyObject *op_axes_in, npy_intp nop,
                 if (*oa_ndim > NPY_MAXDIMS) {
                     PyErr_SetString(PyExc_ValueError,
                             "Too many dimensions in op_axes");
+                    Py_DECREF(a);
                     return 0;
                 }
             }
@@ -602,8 +603,8 @@ npyiter_convert_op_axes(PyObject *op_axes_in, npy_intp nop,
                 }
                 Py_DECREF(v);
             }
-            Py_DECREF(a);
         }
+        Py_DECREF(a);
     }
 
     if (*oa_ndim == -1) {
diff --git a/numpy/core/src/umath/funcs.inc.src b/numpy/core/src/umath/funcs.inc.src
index c2732f92523..10ed66e50ef 100644
--- a/numpy/core/src/umath/funcs.inc.src
+++ b/numpy/core/src/umath/funcs.inc.src
@@ -161,7 +161,7 @@ npy_ObjectLogicalNot(PyObject *i1)
 
 static PyObject *
 npy_ObjectFloor(PyObject *obj) {
-    PyObject *math_floor_func = NULL;
+    static PyObject *math_floor_func = NULL;
 
     npy_cache_import("math", "floor", &math_floor_func);
     if (math_floor_func == NULL) {
@@ -172,7 +172,7 @@ npy_ObjectFloor(PyObject *obj) {
 
 static PyObject *
 npy_ObjectCeil(PyObject *obj) {
-    PyObject *math_ceil_func = NULL;
+    static PyObject *math_ceil_func = NULL;
 
     npy_cache_import("math", "ceil", &math_ceil_func);
     if (math_ceil_func == NULL) {
@@ -183,7 +183,7 @@ npy_ObjectCeil(PyObject *obj) {
 
 static PyObject *
 npy_ObjectTrunc(PyObject *obj) {
-    PyObject *math_trunc_func = NULL;
+    static PyObject *math_trunc_func = NULL;
 
     npy_cache_import("math", "trunc", &math_trunc_func);
     if (math_trunc_func == NULL) {
@@ -228,7 +228,8 @@ npy_ObjectGCD(PyObject *i1, PyObject *i2)
             return NULL;
         }
         /* _gcd has some unusual behaviour regarding sign */
-        return PyNumber_Absolute(gcd);
+        Py_SETREF(gcd, PyNumber_Absolute(gcd));
+        return gcd;
     }
 }
 
@@ -246,17 +247,19 @@ npy_ObjectLCM(PyObject *i1, PyObject *i2)
      * no remainder
      */
     tmp = PyNumber_FloorDivide(i1, gcd);
+    Py_DECREF(gcd);
     if(tmp == NULL) {
         return NULL;
     }
 
-    tmp = PyNumber_Multiply(tmp, i2);
+    Py_SETREF(tmp, PyNumber_Multiply(tmp, i2));
     if(tmp == NULL) {
         return NULL;
     }
 
     /* even though we fix gcd to be positive, we need to do it again here */
-    return PyNumber_Absolute(tmp);
+    Py_SETREF(tmp,  PyNumber_Absolute(tmp));
+    return tmp;
 }
 
 
diff --git a/numpy/core/src/umath/loops.c.src b/numpy/core/src/umath/loops.c.src
index f84d74efe11..1a488513330 100644
--- a/numpy/core/src/umath/loops.c.src
+++ b/numpy/core/src/umath/loops.c.src
@@ -394,9 +394,11 @@ PyUFunc_O_O_method(char **args, npy_intp *dimensions, npy_intp *steps, void *fun
                          i, type->tp_name, meth);
             npy_PyErr_ChainExceptionsCause(exc, val, tb);
             Py_DECREF(tup);
+            Py_XDECREF(func);
             return;
         }
         ret = PyObject_Call(func, tup, NULL);
+        Py_DECREF(func);
         if (ret == NULL) {
             Py_DECREF(tup);
             return;
diff --git a/numpy/core/src/umath/reduction.c b/numpy/core/src/umath/reduction.c
index fda2a12f68c..8ae2f65e043 100644
--- a/numpy/core/src/umath/reduction.c
+++ b/numpy/core/src/umath/reduction.c
@@ -528,7 +528,9 @@ PyUFunc_ReduceWrapper(PyArrayObject *operand, PyArrayObject *out,
                   NPY_ITER_ALIGNED;
     if (wheremask != NULL) {
         op[2] = wheremask;
-        op_dtypes[2] = PyArray_DescrFromType(NPY_BOOL);
+        /* wheremask is guaranteed to be NPY_BOOL, so borrow its reference */
+        op_dtypes[2] = PyArray_DESCR(wheremask);
+        assert(op_dtypes[2]->type_num == NPY_BOOL);
         if (op_dtypes[2] == NULL) {
             goto fail;
         }
diff --git a/numpy/core/src/umath/ufunc_object.c b/numpy/core/src/umath/ufunc_object.c
index cb24f2a70c4..5f9a0f7f431 100644
--- a/numpy/core/src/umath/ufunc_object.c
+++ b/numpy/core/src/umath/ufunc_object.c
@@ -4766,6 +4766,9 @@ ufunc_generic_call(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds)
         wrapped = _apply_array_wrap(wraparr[i], mps[j], &context);
         mps[j] = NULL;  /* Prevent fail double-freeing this */
         if (wrapped == NULL) {
+            for (j = 0; j < i; j++) {
+                Py_DECREF(retobj[j]);
+            }
             goto fail;
         }
 
@@ -5693,18 +5696,13 @@ ufunc_at(PyUFuncObject *ufunc, PyObject *args)
      * Create dtypes array for either one or two input operands.
      * The output operand is set to the first input operand
      */
-    dtypes[0] = PyArray_DESCR(op1_array);
     operands[0] = op1_array;
     if (op2_array != NULL) {
-        dtypes[1] = PyArray_DESCR(op2_array);
-        dtypes[2] = dtypes[0];
         operands[1] = op2_array;
         operands[2] = op1_array;
         nop = 3;
     }
     else {
-        dtypes[1] = dtypes[0];
-        dtypes[2] = NULL;
         operands[1] = op1_array;
         operands[2] = NULL;
         nop = 2;
@@ -5861,9 +5859,10 @@ ufunc_at(PyUFuncObject *ufunc, PyObject *args)
     Py_XDECREF(op2_array);
     Py_XDECREF(iter);
     Py_XDECREF(iter2);
-    Py_XDECREF(array_operands[0]);
-    Py_XDECREF(array_operands[1]);
-    Py_XDECREF(array_operands[2]);
+    for (i = 0; i < 3; i++) {
+        Py_XDECREF(dtypes[i]);
+        Py_XDECREF(array_operands[i]);
+    }
 
     if (needs_api && PyErr_Occurred()) {
         return NULL;
@@ -5880,9 +5879,10 @@ ufunc_at(PyUFuncObject *ufunc, PyObject *args)
     Py_XDECREF(op2_array);
     Py_XDECREF(iter);
     Py_XDECREF(iter2);
-    Py_XDECREF(array_operands[0]);
-    Py_XDECREF(array_operands[1]);
-    Py_XDECREF(array_operands[2]);
+    for (i = 0; i < 3; i++) {
+        Py_XDECREF(dtypes[i]);
+        Py_XDECREF(array_operands[i]);
+    }
 
     return NULL;
 }
diff --git a/numpy/core/src/umath/ufunc_type_resolution.c b/numpy/core/src/umath/ufunc_type_resolution.c
index 25dd002ac29..d837df11766 100644
--- a/numpy/core/src/umath/ufunc_type_resolution.c
+++ b/numpy/core/src/umath/ufunc_type_resolution.c
@@ -548,6 +548,7 @@ PyUFunc_SimpleUniformOperationTypeResolver(
         }
 
         out_dtypes[0] = ensure_dtype_nbo(dtype);
+        Py_DECREF(dtype);
         if (out_dtypes[0] == NULL) {
             return -1;
         }
@@ -2264,7 +2265,6 @@ PyUFunc_DivmodTypeResolver(PyUFuncObject *ufunc,
             out_dtypes[1] = out_dtypes[0];
             Py_INCREF(out_dtypes[1]);
             out_dtypes[2] = PyArray_DescrFromType(NPY_LONGLONG);
-            Py_INCREF(out_dtypes[2]);
             out_dtypes[3] = out_dtypes[0];
             Py_INCREF(out_dtypes[3]);
         }
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index 1f21c5f4dbe..3a5a5b9393f 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -4183,6 +4183,7 @@ def test_np_vs_ndarray(self):
         assert_equal(a.argmax(out=out1, axis=0), np.argmax(a, out=out2, axis=0))
         assert_equal(out1, out2)
 
+    @pytest.mark.leaks_references(reason="replaces None with NULL.")
     def test_object_argmax_with_NULLs(self):
         # See gh-6032
         a = np.empty(4, dtype='O')
@@ -4331,6 +4332,7 @@ def test_np_vs_ndarray(self):
         assert_equal(a.argmin(out=out1, axis=0), np.argmin(a, out=out2, axis=0))
         assert_equal(out1, out2)
 
+    @pytest.mark.leaks_references(reason="replaces None with NULL.")
     def test_object_argmin_with_NULLs(self):
         # See gh-6032
         a = np.empty(4, dtype='O')
@@ -7200,6 +7202,13 @@ def make_ctype(shape, scalar_type):
             RuntimeError, "ndim",
             np.array, m)
 
+        # The above seems to create some deep cycles, clean them up for
+        # easier reference count debugging:
+        del c_u8_33d, m
+        for i in range(33):
+            if gc.collect() == 0:
+                break
+
     def test_error_pointer_type(self):
         # gh-6741
         m = memoryview(ctypes.pointer(ctypes.c_uint8()))
diff --git a/numpy/core/tests/test_umath.py b/numpy/core/tests/test_umath.py
index cd2034d9cee..d2ce7428209 100644
--- a/numpy/core/tests/test_umath.py
+++ b/numpy/core/tests/test_umath.py
@@ -1655,7 +1655,6 @@ def __array_wrap__(self, obj):
 
         ok = np.empty(1).view(Ok)
         bad = np.empty(1).view(Bad)
-
         # double-free (segfault) of "ok" if "bad" raises an exception
         for i in range(10):
             assert_raises(RuntimeError, ncu.frexp, 1, ok, bad)
diff --git a/numpy/lib/tests/test__iotools.py b/numpy/lib/tests/test__iotools.py
index e04fdc8080b..15cd3ad9d8d 100644
--- a/numpy/lib/tests/test__iotools.py
+++ b/numpy/lib/tests/test__iotools.py
@@ -204,14 +204,18 @@ def test_missing(self):
     def test_upgrademapper(self):
         "Tests updatemapper"
         dateparser = _bytes_to_date
-        StringConverter.upgrade_mapper(dateparser, date(2000, 1, 1))
-        convert = StringConverter(dateparser, date(2000, 1, 1))
-        test = convert('2001-01-01')
-        assert_equal(test, date(2001, 1, 1))
-        test = convert('2009-01-01')
-        assert_equal(test, date(2009, 1, 1))
-        test = convert('')
-        assert_equal(test, date(2000, 1, 1))
+        _original_mapper = StringConverter._mapper[:]
+        try:
+            StringConverter.upgrade_mapper(dateparser, date(2000, 1, 1))
+            convert = StringConverter(dateparser, date(2000, 1, 1))
+            test = convert('2001-01-01')
+            assert_equal(test, date(2001, 1, 1))
+            test = convert('2009-01-01')
+            assert_equal(test, date(2009, 1, 1))
+            test = convert('')
+            assert_equal(test, date(2000, 1, 1))
+        finally:
+            StringConverter._mapper = _original_mapper
 
     def test_string_to_object(self):
         "Make sure that string-to-object functions are properly recognized"
