diff --git a/numpy/lib/npyio.py b/numpy/lib/npyio.py
index e7303fc65ff..869a7af4b68 100644
--- a/numpy/lib/npyio.py
+++ b/numpy/lib/npyio.py
@@ -1600,6 +1600,8 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,
             except TypeError:
                 usecols = [usecols, ]
     nbcols = len(usecols or first_values)
+    if not nbcols and converters is not None:
+        nbcols = len(converters)
 
     # Check the names and overwrite the dtype.names if needed
     if names is True:
@@ -1952,7 +1954,8 @@ def genfromtxt(fname, dtype=float, comments='#', delimiter=None,
                     if i in user_converters:
                         ishomogeneous &= (ttype == dtype.type)
                         if ttype == np.string_:
-                            ttype = "|S%i" % max(len(row[i]) for row in data)
+                            ttype = "|S%i" % (1 if not data else
+                                              max(len(row[i]) for row in data))
                         descr.append(('', ttype))
                     else:
                         descr.append(('', dtype))
diff --git a/numpy/lib/tests/test_io.py b/numpy/lib/tests/test_io.py
index e6b1eac7af1..6ea38705a9c 100644
--- a/numpy/lib/tests/test_io.py
+++ b/numpy/lib/tests/test_io.py
@@ -1835,6 +1835,22 @@ def test_auto_dtype_largeint(self):
         assert_equal(test['f1'], 17179869184)
         assert_equal(test['f2'], 1024)
 
+    def test_empty_file_with_converters(self):
+        with suppress_warnings() as sup:
+            sup.filter(message="genfromtxt: Empty input file:")
+            data = TextIO()
+            test = np.genfromtxt(data, converters={0: lambda arg: int(arg)})
+            assert_equal(test, np.array([], dtype=int))
+
+            test = np.genfromtxt(data, converters={0: lambda arg: arg})
+            assert_equal(test, np.array([], dtype='|S1'))
+
+            dtype = np.dtype([('f', 'float32'), ('i', 'int64')])
+            test = np.genfromtxt(data, converters={0: lambda arg: arg},
+                                 dtype=dtype)
+            assert_equal(test, np.array([], dtype=dtype))
+
+
 
 class TestPathUsage(object):
     # Test that pathlib.Path can be used
