diff --git a/numpy/core/records.py b/numpy/core/records.py
index 24364543635..b1ea176e404 100644
--- a/numpy/core/records.py
+++ b/numpy/core/records.py
@@ -245,13 +245,12 @@ def __getattribute__(self, attr):
                 #happens if field is Object type
                 return obj
             if dt.fields:
-                return obj.view((record, obj.dtype.descr))
+                return obj.view((self.__class__, obj.dtype.fields))
             return obj
         else:
             raise AttributeError("'record' object has no "
                     "attribute '%s'" % attr)
 
-
     def __setattr__(self, attr, val):
         if attr in ['setfield', 'getfield', 'dtype']:
             raise AttributeError("Cannot set '%s' attribute" % attr)
@@ -266,6 +265,16 @@ def __setattr__(self, attr, val):
                 raise AttributeError("'record' object has no "
                         "attribute '%s'" % attr)
 
+    def __getitem__(self, indx):
+        obj = nt.void.__getitem__(self, indx)
+
+        # copy behavior of record.__getattribute__,
+        if isinstance(obj, nt.void) and obj.dtype.fields:
+            return obj.view((self.__class__, obj.dtype.fields))
+        else:
+            # return a single element
+            return obj
+
     def pprint(self):
         """Pretty-print all fields."""
         # pretty-print all fields
@@ -438,7 +447,7 @@ def __getattribute__(self, attr):
         # to preserve numpy.record type if present), since nested structured
         # fields do not inherit type.
         if obj.dtype.fields:
-            return obj.view(dtype=(self.dtype.type, obj.dtype.descr))
+            return obj.view(dtype=(self.dtype.type, obj.dtype.fields))
         else:
             return obj.view(ndarray)
 
@@ -478,7 +487,7 @@ def __getitem__(self, indx):
         # we might also be returning a single element
         if isinstance(obj, ndarray):
             if obj.dtype.fields:
-                return obj.view(dtype=(self.dtype.type, obj.dtype.descr))
+                return obj.view(dtype=(self.dtype.type, obj.dtype.fields))
             else:
                 return obj.view(type=ndarray)
         else:
diff --git a/numpy/core/tests/test_records.py b/numpy/core/tests/test_records.py
index a7895a30a7b..2f86b7ccb71 100644
--- a/numpy/core/tests/test_records.py
+++ b/numpy/core/tests/test_records.py
@@ -149,19 +149,32 @@ def test_recarray_stringtypes(self):
         assert_equal(a.foo[0] == a.foo[1], False)
 
     def test_recarray_returntypes(self):
-        a = np.rec.array([('abc ', (1,1), 1), ('abc', (2,3), 1)],
+        qux_fields = {'C': (np.dtype('S5'), 0), 'D': (np.dtype('S5'), 6)}
+        a = np.rec.array([('abc ', (1,1), 1, ('abcde', 'fgehi')),
+                          ('abc', (2,3), 1, ('abcde', 'jklmn'))],
                          dtype=[('foo', 'S4'),
                                 ('bar', [('A', int), ('B', int)]),
-                                ('baz', int)])
+                                ('baz', int), ('qux', qux_fields)])
         assert_equal(type(a.foo), np.ndarray)
         assert_equal(type(a['foo']), np.ndarray)
         assert_equal(type(a.bar), np.recarray)
         assert_equal(type(a['bar']), np.recarray)
         assert_equal(a.bar.dtype.type, np.record)
+        assert_equal(type(a['qux']), np.recarray)
+        assert_equal(a.qux.dtype.type, np.record)
+        assert_equal(dict(a.qux.dtype.fields), qux_fields)
         assert_equal(type(a.baz), np.ndarray)
         assert_equal(type(a['baz']), np.ndarray)
         assert_equal(type(a[0].bar), np.record)
+        assert_equal(type(a[0]['bar']), np.record)
         assert_equal(a[0].bar.A, 1)
+        assert_equal(a[0].bar['A'], 1)
+        assert_equal(a[0]['bar'].A, 1)
+        assert_equal(a[0]['bar']['A'], 1)
+        assert_equal(a[0].qux.D, asbytes('fgehi'))
+        assert_equal(a[0].qux['D'], asbytes('fgehi'))
+        assert_equal(a[0]['qux'].D, asbytes('fgehi'))
+        assert_equal(a[0]['qux']['D'], asbytes('fgehi'))
 
 
 class TestRecord(TestCase):
