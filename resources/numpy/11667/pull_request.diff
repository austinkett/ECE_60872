diff --git a/doc/release/1.16.0-notes.rst b/doc/release/1.16.0-notes.rst
index 9bed41e2911..c06a1d96e8d 100644
--- a/doc/release/1.16.0-notes.rst
+++ b/doc/release/1.16.0-notes.rst
@@ -72,6 +72,13 @@ details.
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The ``out`` argument to these functions is now always tested for memory overlap
 to avoid corrupted results when memory overlap occurs.
+Ufuncs will not write to "broadcasted arrays"
+---------------------------------------------
+Code that uses `numpy.broadcast_arrays` can create an array with a 0-stride
+which effectively duplicates the underlying data along an axis. Using such
+an array for output of a ufunc such as `u += v` (where `u` has repeated data)
+will give an incorrect answer. This situation is now detected and an error
+raised.
 
 
 Changes
diff --git a/numpy/core/src/umath/ufunc_object.c b/numpy/core/src/umath/ufunc_object.c
index 20c448d8bd5..f8aab48463b 100644
--- a/numpy/core/src/umath/ufunc_object.c
+++ b/numpy/core/src/umath/ufunc_object.c
@@ -1418,6 +1418,22 @@ iterator_loop(PyUFuncObject *ufunc,
             baseptrs[nin+i] = PyArray_BYTES(op[nin+i]);
         }
         else {
+            if (NpyIter_GetIterSize(iter) != 0) {
+                /* Check for broadcasted output arrays */
+                npy_intp *strides = PyArray_STRIDES(op[nin+i]);
+                npy_intp *shape = PyArray_SHAPE(op[nin+i]);
+                int j, out_dims = PyArray_NDIM(op[nin+i]);
+                for (j=0; j < out_dims; j++) {
+                    if (strides[j] == 0 && shape[j] > 1) {
+                        PyErr_SetString(PyExc_ValueError,
+                             "non-broadcastable output operand "
+                             "with stride == 0 provided "
+                             "but broadcasting required");
+                        NpyIter_Deallocate(iter);
+                        return -1;
+                    }
+                }
+            }
             baseptrs[nin+i] = PyArray_BYTES(op_it[nin+i]);
         }
     }
diff --git a/numpy/core/tests/test_mem_overlap.py b/numpy/core/tests/test_mem_overlap.py
index f4ce6a84ae5..4b7d213729f 100644
--- a/numpy/core/tests/test_mem_overlap.py
+++ b/numpy/core/tests/test_mem_overlap.py
@@ -609,11 +609,21 @@ def assert_copy_equivalent(operation, args, out, **kwargs):
     kwargs2['out'] = out.copy()
 
     out_orig = out.copy()
-    out[...] = operation(*args, **kwargs2)
+    retval = operation(*args, **kwargs2)
+    out[...] = retval
     expected = out.copy()
     out[...] = out_orig
 
-    got = operation(*args, **kwargs).copy()
+    try:
+        got = operation(*args, **kwargs).copy()
+    except ValueError as e:
+        if np.prod(out.strides) == 0:
+            # broadcasted output may raise, but not in 100% of cases; gh-2705
+            assert_('stride == 0' in e.args[0])
+            # make sure out and retval differ if the operation failed
+            assert_(np.any(out != retval))
+            return
+        raise
 
     if (got != expected).any():
         assert_equal(got, expected)
diff --git a/numpy/core/tests/test_ufunc.py b/numpy/core/tests/test_ufunc.py
index 0e564e305a5..444d6914a31 100644
--- a/numpy/core/tests/test_ufunc.py
+++ b/numpy/core/tests/test_ufunc.py
@@ -545,6 +545,12 @@ def test_broadcast(self):
         a = np.arange(2).reshape((2, 1, 1))
         b = np.arange(3).reshape((3, 1, 1))
         assert_raises(ValueError, umt.inner1d, a, b)
+        # Writing to a broadcasted array should fail, gh-2705
+        a = np.arange(2)
+        b = np.arange(4).reshape((2, 2))
+        u, v = np.broadcast_arrays(a, b)
+        assert_equal(u.strides[0], 0)
+        assert_raises(ValueError, u.__iadd__, v)
 
     def test_type_cast(self):
         msg = "type cast"
