diff --git a/numpy/core/src/multiarray/arraytypes.c.src b/numpy/core/src/multiarray/arraytypes.c.src
index 43dd101c5ad..ccf3a3a7d7b 100644
--- a/numpy/core/src/multiarray/arraytypes.c.src
+++ b/numpy/core/src/multiarray/arraytypes.c.src
@@ -289,37 +289,26 @@ static int
 {
     PyArrayObject *ap = vap;
     Py_complex oop;
-    PyObject *op2;
     @type@ temp;
     int rsize;
 
+    if (PyArray_IsZeroDim(op)) {
+        return convert_to_scalar_and_retry(op, ov, vap, @NAME@_setitem);
+    }
+
     if (PyArray_IsScalar(op, @kind@)){
         temp = ((Py@kind@ScalarObject *)op)->obval;
     }
     else {
-        if (PyArray_IsZeroDim(op)) {
-            /*
-             * TODO: Elsewhere in this file we use PyArray_ToScalar. Is this
-             *       better or worse? Possibly an optimization.
-             */
-            op2 = PyArray_DESCR((PyArrayObject *)op)->f->getitem(
-                                    PyArray_BYTES((PyArrayObject *)op),
-                                    (PyArrayObject *)op);
-        }
-        else {
-            op2 = op;
-            Py_INCREF(op);
-        }
-        if (op2 == Py_None) {
+        if (op == Py_None) {
             oop.real = NPY_NAN;
             oop.imag = NPY_NAN;
         }
         else {
-            oop = PyComplex_AsCComplex (op2);
-        }
-        Py_DECREF(op2);
-        if (PyErr_Occurred()) {
-            return -1;
+            oop = PyComplex_AsCComplex (op);
+            if (PyErr_Occurred()) {
+                return -1;
+            }
         }
         temp.real = (@ftype@) oop.real;
         temp.imag = (@ftype@) oop.imag;
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index bbdf4dbfa59..88456a8169e 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -423,30 +423,33 @@ def test_longdouble_assignment(self):
         # only relevant if longdouble is larger than float
         # we're looking for loss of precision
 
-        # gh-8902
-        tinyb = np.nextafter(np.longdouble(0), 1)
-        tinya =  np.nextafter(np.longdouble(0), -1)
-        tiny1d = np.array([tinya])
-        assert_equal(tiny1d[0], tinya)
+        for dtype in (np.longdouble, np.longcomplex):
+            # gh-8902
+            tinyb = np.nextafter(np.longdouble(0), 1).astype(dtype)
+            tinya = np.nextafter(np.longdouble(0), -1).astype(dtype)
+
+            # construction
+            tiny1d = np.array([tinya])
+            assert_equal(tiny1d[0], tinya)
 
-        # scalar = scalar
-        tiny1d[0] = tinyb
-        assert_equal(tiny1d[0], tinyb)
+            # scalar = scalar
+            tiny1d[0] = tinyb
+            assert_equal(tiny1d[0], tinyb)
 
-        # 0d = scalar
-        tiny1d[0, ...] = tinya
-        assert_equal(tiny1d[0], tinya)
+            # 0d = scalar
+            tiny1d[0, ...] = tinya
+            assert_equal(tiny1d[0], tinya)
 
-        # 0d = 0d
-        tiny1d[0, ...] = tinyb[...]
-        assert_equal(tiny1d[0], tinyb)
+            # 0d = 0d
+            tiny1d[0, ...] = tinyb[...]
+            assert_equal(tiny1d[0], tinyb)
 
-        # scalar = 0d
-        tiny1d[0] = tinyb[...]
-        assert_equal(tiny1d[0], tinyb)
+            # scalar = 0d
+            tiny1d[0] = tinyb[...]
+            assert_equal(tiny1d[0], tinyb)
 
-        arr = np.array([np.array(tinya)])
-        assert_equal(arr[0], tinya)
+            arr = np.array([np.array(tinya)])
+            assert_equal(arr[0], tinya)
 
 
 class TestDtypedescr(object):
