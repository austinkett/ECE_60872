diff --git a/numpy/core/fromnumeric.py b/numpy/core/fromnumeric.py
index a8c2fd2fb08..4922fc3e402 100644
--- a/numpy/core/fromnumeric.py
+++ b/numpy/core/fromnumeric.py
@@ -1120,18 +1120,16 @@ def resize(a, new_shape):
         new_shape = (new_shape,)
     a = ravel(a)
     Na = len(a)
-    if not Na:
-        return mu.zeros(new_shape, a.dtype)
     total_size = um.multiply.reduce(new_shape)
+    if Na == 0 or total_size == 0:
+        return mu.zeros(new_shape, a.dtype)
+
     n_copies = int(total_size / Na)
     extra = total_size % Na
 
-    if total_size == 0:
-        return a[:0]
-
     if extra != 0:
-        n_copies = n_copies+1
-        extra = Na-extra
+        n_copies = n_copies + 1
+        extra = Na - extra
 
     a = concatenate((a,)*n_copies)
     if extra > 0:
diff --git a/numpy/core/tests/test_numeric.py b/numpy/core/tests/test_numeric.py
index a5149d4f7d3..1e51c4a61cd 100644
--- a/numpy/core/tests/test_numeric.py
+++ b/numpy/core/tests/test_numeric.py
@@ -34,6 +34,12 @@ def test_zeroresize(self):
         assert_array_equal(Ar, np.array([]))
         assert_equal(A.dtype, Ar.dtype)
 
+        Ar = np.resize(A, (0, 2))
+        assert_equal(Ar.shape, (0, 2))
+
+        Ar = np.resize(A, (2, 0))
+        assert_equal(Ar.shape, (2, 0))
+
     def test_reshape_from_zero(self):
         # See also gh-6740
         A = np.zeros(0, dtype=[('a', np.float32, 1)])
