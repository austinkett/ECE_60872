diff --git a/numpy/core/src/multiarray/multiarraymodule.c b/numpy/core/src/multiarray/multiarraymodule.c
index 620f8d109b0..1511094b5ee 100644
--- a/numpy/core/src/multiarray/multiarraymodule.c
+++ b/numpy/core/src/multiarray/multiarraymodule.c
@@ -1466,8 +1466,8 @@ PyArray_EquivTypes(PyArray_Descr *type1, PyArray_Descr *type2)
                 && _equivalent_fields(type1->fields, type2->fields));
     }
     if (type_num1 == NPY_DATETIME
-            || type_num1 == NPY_DATETIME
-            || type_num2 == NPY_TIMEDELTA
+            || type_num1 == NPY_TIMEDELTA
+            || type_num2 == NPY_DATETIME
             || type_num2 == NPY_TIMEDELTA) {
         return ((type_num1 == type_num2)
                 && has_equivalent_datetime_metadata(type1, type2));
diff --git a/numpy/core/src/umath/loops.c.src b/numpy/core/src/umath/loops.c.src
index 12dc324e815..3c119086545 100644
--- a/numpy/core/src/umath/loops.c.src
+++ b/numpy/core/src/umath/loops.c.src
@@ -1226,7 +1226,7 @@ NPY_NO_EXPORT void
         const @type@ in2 = *(@type@ *)ip2;
         *((npy_bool *)op1) = in1 != in2;
 
-        if (in1 == NPY_DATETIME_NAT && in1 == NPY_DATETIME_NAT) {
+        if (in1 == NPY_DATETIME_NAT && in2 == NPY_DATETIME_NAT) {
             NPY_ALLOW_C_API_DEF
             NPY_ALLOW_C_API;
             /* 2016-01-18, 1.11 */
diff --git a/numpy/core/tests/test_datetime.py b/numpy/core/tests/test_datetime.py
index e443b3be0b2..94391f84c88 100644
--- a/numpy/core/tests/test_datetime.py
+++ b/numpy/core/tests/test_datetime.py
@@ -1118,11 +1118,15 @@ def test_datetime_compare_nat(self):
                     assert_warns(FutureWarning, op, td_other, td_nat)
 
             assert_warns(FutureWarning, np.not_equal, dt_nat, dt_nat)
+            assert_warns(FutureWarning, np.not_equal, td_nat, td_nat)
+
+        with suppress_warnings() as sup:
+            sup.record(FutureWarning)
             assert_(np.not_equal(dt_nat, dt_other))
             assert_(np.not_equal(dt_other, dt_nat))
-            assert_warns(FutureWarning, np.not_equal, td_nat, td_nat)
             assert_(np.not_equal(td_nat, td_other))
             assert_(np.not_equal(td_other, td_nat))
+            self.assertEqual(len(sup.log), 0)
 
     def test_datetime_minmax(self):
         # The metadata of the result should become the GCD
