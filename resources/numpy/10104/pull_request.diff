diff --git a/numpy/ma/core.py b/numpy/ma/core.py
index a09ec6bdb66..ba813ba4938 100644
--- a/numpy/ma/core.py
+++ b/numpy/ma/core.py
@@ -1624,7 +1624,7 @@ def make_mask(m, copy=False, shrink=True, dtype=MaskType):
 
     # Make sure the input dtype is valid.
     dtype = make_mask_descr(dtype)
-    
+
     # legacy boolean special case: "existence of fields implies true"
     if isinstance(m, ndarray) and m.dtype.fields and dtype == np.bool_:
         return np.ones(m.shape, dtype=dtype)
@@ -3968,7 +3968,7 @@ def _delegate_binop(self, other):
             return array_ufunc is None
 
     def _comparison(self, other, compare):
-        """Compare self with other using operator.eq or operator.ne.
+        """Compare self with other using ``compare`` on the data.
 
         When either of the elements is masked, the result is masked as well,
         but the underlying boolean data are still set, with self and other
@@ -3977,6 +3977,9 @@ def _comparison(self, other, compare):
         For structured arrays, all fields are combined, with masked values
         ignored. The result is masked if all fields were masked, with self
         and other considered equal only if both were fully masked.
+
+        The comparison function is defined in __eq__ and __ne__ to return
+        ``getattr(self, {'__eq__', '__ne__'})(other)``.
         """
         omask = getmask(other)
         smask = self.mask
@@ -4003,6 +4006,9 @@ def _comparison(self, other, compare):
 
         check = compare(sdata, odata)
 
+        if check is NotImplemented:
+            return NotImplemented
+
         if isinstance(check, (np.bool_, bool)):
             return masked if mask else check
 
@@ -4032,7 +4038,8 @@ def __eq__(self, other):
         ignored. The result is masked if all fields were masked, with self
         and other considered equal only if both were fully masked.
         """
-        return self._comparison(other, operator.eq)
+        return self._comparison(other, lambda self, other:
+                                getattr(self, '__eq__')(other))
 
     def __ne__(self, other):
         """Check whether other does not equal self elementwise.
@@ -4045,7 +4052,8 @@ def __ne__(self, other):
         ignored. The result is masked if all fields were masked, with self
         and other considered equal only if both were fully masked.
         """
-        return self._comparison(other, operator.ne)
+        return self._comparison(other, lambda self, other:
+                                getattr(self, '__ne__')(other))
 
     def __add__(self, other):
         """
@@ -4301,7 +4309,7 @@ def __int__(self):
         elif self._mask:
             raise MaskError('Cannot convert masked element to a Python int.')
         return int(self.item())
-    
+
     def __long__(self):
         """
         Convert to long.
@@ -4312,7 +4320,6 @@ def __long__(self):
         elif self._mask:
             raise MaskError('Cannot convert masked element to a Python long.')
         return long(self.item())
-      
 
     def get_imag(self):
         """
diff --git a/numpy/ma/tests/test_core.py b/numpy/ma/tests/test_core.py
index be56833fdf0..6e98fdb4b3d 100644
--- a/numpy/ma/tests/test_core.py
+++ b/numpy/ma/tests/test_core.py
@@ -1602,6 +1602,45 @@ def test_eq_different_dimensions(self):
             assert_equal(test.mask, [[False, True],
                                      [False, True]])
 
+    def test_eq_subclass_knowledge(self):
+        # Test a case where only of the internal data classes knows how to
+        # handle the other. The test case is based on astropy issue
+        # https://github.com/astropy/astropy/issues/6838.
+        class BAS(np.ndarray):
+            """If unicode, compares with bytes assuming utf-8 encoding."""
+            def __eq__(self, other):
+                if (self.dtype.kind == 'S' and
+                        isinstance(other, np.ndarray) and
+                        other.dtype.kind == 'U'):
+                    other = np.char.encode(other, encoding='utf-8')
+                return super(BAS, self).__eq__(other)
+
+        class MaskedBAS(np.ma.MaskedArray, BAS):
+            pass
+
+        bas = np.array([b'a']).view(BAS)
+        a = np.array(['a'])
+        mbas = bas.view(MaskedBAS)
+        ma = a.view(np.ma.MaskedArray)
+        # Normal arrays cannot compare bytes and str, but BAS can.
+        assert_(a.__eq__(bas) is NotImplemented)
+        assert_equal(bas.__eq__(a), [True])
+        assert_equal(a == bas, [True])
+        # So, a normal masked array should also be unable to compare.
+        assert_(ma.__eq__(bas) is NotImplemented)
+        assert_(ma.__eq__(mbas) is NotImplemented)
+        assert_(ma.__ne__(bas) is NotImplemented)
+        assert_(ma.__ne__(mbas) is NotImplemented)
+        # A masked BAS should be able to compare equality.
+        assert_equal(mbas.__eq__(a), [True])
+        assert_equal(mbas.__eq__(ma), [True])
+        assert_equal(mbas == ma, [True])
+        # but since we didn't define __ne__, it cannot compare inequality.
+        assert_(mbas.__ne__(a) is NotImplemented)
+        assert_(mbas.__ne__(ma) is NotImplemented)
+        assert_((mbas != a) is True)
+        assert_((mbas != ma) is True)
+
     def test_numpyarithmetics(self):
         # Check that the mask is not back-propagated when using numpy functions
         a = masked_array([-1, 0, 1, 2, 3], mask=[0, 0, 0, 0, 1])
