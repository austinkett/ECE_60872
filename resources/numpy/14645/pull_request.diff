diff --git a/numpy/lib/financial.py b/numpy/lib/financial.py
index d72384e99d1..f2767fde908 100644
--- a/numpy/lib/financial.py
+++ b/numpy/lib/financial.py
@@ -645,7 +645,7 @@ def rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100):
         rn = rnp1
     if not close:
         # Return nan's in array of the same shape as rn
-        return np.nan + rn
+        return default_type(np.nan) + rn
     else:
         return rn
 
diff --git a/numpy/lib/tests/test_financial.py b/numpy/lib/tests/test_financial.py
index 21088765ff2..8926127d8ea 100644
--- a/numpy/lib/tests/test_financial.py
+++ b/numpy/lib/tests/test_financial.py
@@ -2,6 +2,8 @@
 
 from decimal import Decimal
 
+import pytest
+
 import numpy as np
 from numpy.testing import (
     assert_, assert_almost_equal, assert_allclose, assert_equal, assert_raises
@@ -344,3 +346,25 @@ def test_broadcast_decimal(self):
                                     Decimal('0'), [Decimal('0'), Decimal('0'), Decimal('1'), 'end', 'begin']),
                             [Decimal('-74.998201'), Decimal('-75.62318601'), Decimal('-75.62318601'),
                              Decimal('-76.88882405'), Decimal('-76.88882405')], 4)
+        
+    # Test for checking inputs whose output is NaN
+    @pytest.mark.parametrize('number_type', [Decimal, float])
+    def test_rate_nan(self, number_type):
+        # Rate will return NaN, if newton raphson method's change or diff was not able to become
+        # less than default tolerance value i.e. 1e-6 in max iterations possible,
+        rate = np.rate(number_type(12.0), number_type('400.0'), number_type('10000.0'), number_type(0))
+        assert_equal(np.nan, float(rate))
+        rate = np.rate(number_type(12.0), number_type('-400.0'), number_type('10000.0'), number_type(20000))
+        assert_equal(np.nan, float(rate))
+        
+        # begin
+        rate = np.rate(number_type(12.0), number_type('400.0'), number_type('10000.0'), number_type(20000), 1)
+        assert_equal(np.nan, float(rate))
+        rate = np.rate(number_type(12.0), number_type('400.0'), number_type('10000.0'), number_type(20000), 'begin')
+        assert_equal(np.nan, float(rate))
+        # end
+        
+        rate = np.rate(number_type(12.0), number_type('400.0'), number_type('10000.0'), number_type(0))
+        assert_equal(np.nan, float(rate))
+        rate = np.rate(number_type(12.0), number_type('400.0'), number_type('10000.0'), number_type(0), 'end')
+        assert_equal(np.nan, float(rate))  
