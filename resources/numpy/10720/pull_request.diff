diff --git a/numpy/distutils/from_template.py b/numpy/distutils/from_template.py
index 8f587eab9ae..65c60c498c3 100644
--- a/numpy/distutils/from_template.py
+++ b/numpy/distutils/from_template.py
@@ -98,6 +98,11 @@ def find_repl_patterns(astr):
         names[name] = thelist
     return names
 
+def find_and_remove_repl_patterns(astr):
+    names = find_repl_patterns(astr)
+    astr = re.subn(named_re, '', astr)[0]
+    return astr, names
+
 item_re = re.compile(r"\A\\(?P<index>\d+)\Z")
 def conv(astr):
     b = astr.split(',')
@@ -186,7 +191,7 @@ def namerepl(mobj):
 
 def process_str(allstr):
     newstr = allstr
-    writestr = '' #_head # using _head will break free-format files
+    writestr = ''
 
     struct = parse_structure(newstr)
 
@@ -194,8 +199,9 @@ def process_str(allstr):
     names = {}
     names.update(_special_names)
     for sub in struct:
-        writestr += newstr[oldend:sub[0]]
-        names.update(find_repl_patterns(newstr[oldend:sub[0]]))
+        cleanedstr, defs = find_and_remove_repl_patterns(newstr[oldend:sub[0]])
+        writestr += cleanedstr
+        names.update(defs)
         writestr += expand_sub(newstr[sub[0]:sub[1]], names)
         oldend =  sub[1]
     writestr += newstr[oldend:]
diff --git a/numpy/distutils/tests/test_from_template.py b/numpy/distutils/tests/test_from_template.py
new file mode 100644
index 00000000000..d3c5134371f
--- /dev/null
+++ b/numpy/distutils/tests/test_from_template.py
@@ -0,0 +1,48 @@
+
+from numpy.distutils.from_template import process_str
+from numpy.testing import assert_equal, run_module_suite
+
+
+pyf_src = """
+python module foo
+    <_rd=real,double precision>
+    interface
+        subroutine <s,d>foosub(tol)
+            <_rd>, intent(in,out) :: tol
+        end subroutine <s,d>foosub
+    end interface
+end python module foo
+"""
+
+expected_pyf = """
+python module foo
+    interface
+        subroutine sfoosub(tol)
+            real, intent(in,out) :: tol
+        end subroutine sfoosub
+        subroutine dfoosub(tol)
+            double precision, intent(in,out) :: tol
+        end subroutine dfoosub
+    end interface
+end python module foo
+"""
+
+
+def normalize_whitespace(s):
+    """
+    Remove leading and trailing whitespace, and convert internal
+    stretches of whitespace to a single space.
+    """
+    return ' '.join(s.split())
+
+
+def test_from_template():
+    """Regression test for gh-10712."""
+    pyf = process_str(pyf_src)
+    normalized_pyf = normalize_whitespace(pyf)
+    normalized_expected_pyf = normalize_whitespace(expected_pyf)
+    assert_equal(normalized_pyf, normalized_expected_pyf)
+
+
+if __name__ == "__main__":
+    run_module_suite()
