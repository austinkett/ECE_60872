diff --git a/numpy/core/src/multiarray/methods.c b/numpy/core/src/multiarray/methods.c
index d6f2577a3a3..89f08931e14 100644
--- a/numpy/core/src/multiarray/methods.c
+++ b/numpy/core/src/multiarray/methods.c
@@ -970,15 +970,72 @@ array_getarray(PyArrayObject *self, PyObject *args)
     }
 }
 
+/*
+ * Check whether an object has __array_ufunc__ defined on its class and it
+ * is not the default, i.e., the object is not an ndarray, and its
+ * __array_ufunc__ is not the same as that of ndarray.
+ *
+ * Returns 1 if this is the case, 0 if not.
+ */
+NPY_NO_EXPORT int
+has_non_default_array_ufunc(PyObject * obj)
+{
+    PyObject *method = get_non_default_array_ufunc(obj);
+    if (method) {
+        Py_DECREF(method);
+        return 1;
+    }
+    else {
+        return 0;
+    }
+}
+
+/*
+ * Check whether any of a set of input and output args have a non-default
+ *  `__array_ufunc__` method. Return 1 if so, 0 if not.
+ */
+static npy_bool
+has_override(PyObject *args, PyObject *kwds)
+{
+    int i;
+    int nin, nout;
+    PyObject *out_kwd_obj;
+
+    /* check inputs */
+    nin = PyTuple_GET_SIZE(args);
+    for (i = 0; i < nin; ++i) {
+        if (has_non_default_array_ufunc(PyTuple_GET_ITEM(args, i))) {
+            return 1;
+        }
+    }
+    if (!kwds) {
+        return 0;
+    }
+    out_kwd_obj = PyDict_GetItemString(kwds, "out");
+    if (out_kwd_obj == NULL) {
+        return 0;
+    }
+    if (!PyTuple_CheckExact(out_kwd_obj)) {
+        return has_non_default_array_ufunc(out_kwd_obj);
+    }
+    nout = PyTuple_GET_SIZE(out_kwd_obj);
+    for (i = 0; i < nout; i++) {
+        if (has_non_default_array_ufunc(PyTuple_GET_ITEM(out_kwd_obj, i))) {
+            return 1;
+        }
+    }
+    return 0;
+}
 
 static PyObject *
 array_ufunc(PyArrayObject *self, PyObject *args, PyObject *kwds)
 {
     PyObject *ufunc, *method_name, *normal_args, *ufunc_method;
     PyObject *result = NULL;
-    int num_override_args;
 
-    if (PyTuple_Size(args) < 2) {
+    assert(PyTuple_CheckExact(args));
+    assert(PyDict_CheckExact(kwds));
+    if (PyTuple_GET_SIZE(args) < 2) {
         PyErr_SetString(PyExc_TypeError,
                         "__array_ufunc__ requires at least 2 arguments");
         return NULL;
@@ -988,11 +1045,7 @@ array_ufunc(PyArrayObject *self, PyObject *args, PyObject *kwds)
         return NULL;
     }
     /* ndarray cannot handle overrides itself */
-    num_override_args = PyUFunc_WithOverride(normal_args, kwds, NULL, NULL);
-    if (num_override_args == -1) {
-        return NULL;
-    }
-    if (num_override_args) {
+    if (has_override(normal_args, kwds)) {
         result = Py_NotImplemented;
         Py_INCREF(Py_NotImplemented);
         goto cleanup;
diff --git a/numpy/core/src/private/ufunc_override.c b/numpy/core/src/private/ufunc_override.c
index e405155cf9a..7b24033175b 100644
--- a/numpy/core/src/private/ufunc_override.c
+++ b/numpy/core/src/private/ufunc_override.c
@@ -22,7 +22,7 @@
  * nor to the default __array_ufunc__ method, so instead we import locally.
  * TODO: Can this really not be done more smartly?
  */
-static PyObject *
+NPY_NO_EXPORT PyObject *
 get_non_default_array_ufunc(PyObject *obj)
 {
     static PyObject *ndarray = NULL;
@@ -52,104 +52,3 @@ get_non_default_array_ufunc(PyObject *obj)
     Py_DECREF(cls_array_ufunc);
     return NULL;
 }
-
-/*
- * Check whether a set of input and output args have a non-default
- *  `__array_ufunc__` method. Return the number of overrides, setting
- * corresponding objects in PyObject array with_override and the corresponding
- * __array_ufunc__ methods in methods (both only if not NULL, and both using
- * new references).
- *
- * returns -1 on failure.
- */
-NPY_NO_EXPORT int
-PyUFunc_WithOverride(PyObject *args, PyObject *kwds,
-                     PyObject **with_override, PyObject **methods)
-{
-    int i;
-
-    int nargs;
-    int nout_kwd = 0;
-    int out_kwd_is_tuple = 0;
-    int num_override_args = 0;
-
-    PyObject *obj;
-    PyObject *out_kwd_obj = NULL;
-    /*
-     * Check inputs
-     */
-    if (!PyTuple_Check(args)) {
-        PyErr_SetString(PyExc_TypeError,
-                        "Internal Numpy error: call to PyUFunc_HasOverride "
-                        "with non-tuple");
-        goto fail;
-    }
-    nargs = PyTuple_GET_SIZE(args);
-    if (nargs > NPY_MAXARGS) {
-        PyErr_SetString(PyExc_TypeError,
-                        "Internal Numpy error: too many arguments in call "
-                        "to PyUFunc_HasOverride");
-        goto fail;
-    }
-    /* be sure to include possible 'out' keyword argument. */
-    if (kwds && PyDict_CheckExact(kwds)) {
-        out_kwd_obj = PyDict_GetItemString(kwds, "out");
-        if (out_kwd_obj != NULL) {
-            out_kwd_is_tuple = PyTuple_CheckExact(out_kwd_obj);
-            if (out_kwd_is_tuple) {
-                nout_kwd = PyTuple_GET_SIZE(out_kwd_obj);
-            }
-            else {
-                nout_kwd = 1;
-            }
-        }
-    }
-
-    for (i = 0; i < nargs + nout_kwd; ++i) {
-        PyObject *method;
-        if (i < nargs) {
-            obj = PyTuple_GET_ITEM(args, i);
-        }
-        else {
-            if (out_kwd_is_tuple) {
-                obj = PyTuple_GET_ITEM(out_kwd_obj, i - nargs);
-            }
-            else {
-                obj = out_kwd_obj;
-            }
-        }
-        /*
-         * Now see if the object provides an __array_ufunc__. However, we should
-         * ignore the base ndarray.__ufunc__, so we skip any ndarray as well as
-         * any ndarray subclass instances that did not override __array_ufunc__.
-         */
-        method = get_non_default_array_ufunc(obj);
-        if (method != NULL) {
-            if (method == Py_None) {
-                PyErr_Format(PyExc_TypeError,
-                             "operand '%.200s' does not support ufuncs "
-                             "(__array_ufunc__=None)",
-                             obj->ob_type->tp_name);
-                Py_DECREF(method);
-                goto fail;
-            }
-            if (with_override != NULL) {
-                Py_INCREF(obj);
-                with_override[num_override_args] = obj;
-            }
-            if (methods != NULL) {
-                methods[num_override_args] = method;
-            }
-            ++num_override_args;
-        }
-    }
-    return num_override_args;
-
-fail:
-    if (methods != NULL) {
-        for (i = 0; i < num_override_args; i++) {
-            Py_XDECREF(methods[i]);
-        }
-    }
-    return -1;
-}
diff --git a/numpy/core/src/private/ufunc_override.h b/numpy/core/src/private/ufunc_override.h
index 2ed1c626fd2..8342d31004a 100644
--- a/numpy/core/src/private/ufunc_override.h
+++ b/numpy/core/src/private/ufunc_override.h
@@ -4,12 +4,21 @@
 #include "npy_config.h"
 
 /*
- * Check whether a set of input and output args have a non-default
- *  `__array_ufunc__` method. Returns the number of overrides, setting
- * corresponding objects in PyObject array with_override (if not NULL).
- * returns -1 on failure.
+ * Check whether an object has __array_ufunc__ defined on its class and it
+ * is not the default, i.e., the object is not an ndarray, and its
+ * __array_ufunc__ is not the same as that of ndarray.
+ *
+ * Returns a new reference, the value of type(obj).__array_ufunc__
+ *
+ * If the __array_ufunc__ matches that of ndarray, or does not exist, return
+ * NULL.
+ *
+ * Note that since this module is used with both multiarray and umath, we do
+ * not have access to PyArray_Type and therewith neither to PyArray_CheckExact
+ * nor to the default __array_ufunc__ method, so instead we import locally.
+ * TODO: Can this really not be done more smartly?
  */
-NPY_NO_EXPORT int
-PyUFunc_WithOverride(PyObject *args, PyObject *kwds,
-                     PyObject **with_override, PyObject **methods);
+NPY_NO_EXPORT PyObject *
+get_non_default_array_ufunc(PyObject *obj);
+
 #endif
diff --git a/numpy/core/src/umath/override.c b/numpy/core/src/umath/override.c
index c0bc47b7b3c..7e0ec50f9c2 100644
--- a/numpy/core/src/umath/override.c
+++ b/numpy/core/src/umath/override.c
@@ -323,6 +323,95 @@ normalize_at_args(PyUFuncObject *ufunc, PyObject *args,
     return (*normal_args == NULL);
 }
 
+/*
+ * Check whether a set of input and output args have a non-default
+ *  `__array_ufunc__` method. Return the number of overrides, setting
+ * corresponding objects in PyObject array with_override and the corresponding
+ * __array_ufunc__ methods in methods (both using new references).
+ *
+ * Only the first override for a given class is returned.
+ *
+ * returns -1 on failure.
+ */
+NPY_NO_EXPORT int
+check_overrides(PyObject *args, PyObject *out_kwd_obj,
+                PyObject **with_override, PyObject **methods)
+{
+    int i;
+    PyObject *obj, *out_obj = NULL;
+
+    int num_override_args = 0;
+    int nin, nout;
+
+    nin = PyTuple_GET_SIZE(args);
+    if (out_kwd_obj == NULL) {
+        nout = 0;
+    }
+    else if (PyTuple_CheckExact(out_kwd_obj)) {
+        nout = PyTuple_GET_SIZE(out_kwd_obj);
+        if (nout == 1) {
+            /* saves special-casing the tuple-of-one below */
+            out_obj = PyTuple_GET_ITEM(out_kwd_obj, 0);
+        }
+    }
+    else {
+        nout = 1;
+        out_obj = out_kwd_obj;
+    }
+    for (i = 0; i < nin + nout; ++i) {
+        PyObject *method;
+        int j = 0;
+        npy_bool new_class = 1;
+
+        if (i < nin) {
+            obj = PyTuple_GET_ITEM(args, i);
+        }
+        else if (nout == 1) {
+            obj = out_obj;
+        }
+        else {
+            obj = PyTuple_GET_ITEM(out_kwd_obj, i - nin);
+        }
+        /*
+         * Now see if the object provides an __array_ufunc__. However, we should
+         * ignore the base ndarray.__ufunc__, so we skip any ndarray as well as
+         * any ndarray subclass instances that did not override __array_ufunc__.
+         *
+         * Furthermore, like the python __op__ overloads, we should look at
+         * a given class only once.
+         */
+        while (j < num_override_args && new_class) {
+            new_class = (Py_TYPE(obj) != Py_TYPE(with_override[j]));
+            j++;
+        }
+        if (new_class) {
+            method = get_non_default_array_ufunc(obj);
+            if (method != NULL) {
+                if (method == Py_None) {
+                    PyErr_Format(PyExc_TypeError,
+                                 "operand '%.200s' does not support ufuncs "
+                                 "(__array_ufunc__=None)",
+                                 obj->ob_type->tp_name);
+                    Py_DECREF(method);
+                    goto fail;
+                }
+                Py_INCREF(obj);
+                with_override[num_override_args] = obj;
+                methods[num_override_args] = method;
+                ++num_override_args;
+            }
+        }
+    }
+    return num_override_args;
+
+fail:
+    for (i = 0; i < num_override_args; i++) {
+        Py_DECREF(with_override[i]);
+        Py_DECREF(methods[i]);
+    }
+    return -1;
+}
+
 /*
  * Check a set of args for the `__array_ufunc__` method.  If more than one of
  * the input arguments implements `__array_ufunc__`, they are tried in the
@@ -348,8 +437,7 @@ PyUFunc_CheckOverride(PyUFuncObject *ufunc, char *method,
     PyObject *array_ufunc_methods[NPY_MAXARGS];
 
     PyObject *obj;
-    PyObject *other_obj;
-    PyObject *out;
+    PyObject *out = NULL;
 
     PyObject *method_name = NULL;
     PyObject *normal_args = NULL; /* normal_* holds normalized arguments. */
@@ -359,10 +447,13 @@ PyUFunc_CheckOverride(PyUFuncObject *ufunc, char *method,
     Py_ssize_t len;
 
     /*
-     * Check inputs for overrides
+     * Check inputs and outputs for overrides.
      */
-    num_override_args = PyUFunc_WithOverride(
-        args, kwds, with_override, array_ufunc_methods);
+    if (kwds && PyDict_CheckExact(kwds)) {
+        out = PyDict_GetItemString(kwds, "out");
+    }
+    num_override_args = check_overrides(args, out, with_override,
+                                        array_ufunc_methods);
     if (num_override_args == -1) {
         goto fail;
     }
@@ -378,10 +469,8 @@ PyUFunc_CheckOverride(PyUFuncObject *ufunc, char *method,
 
     /* Build new kwds */
     if (kwds && PyDict_CheckExact(kwds)) {
-
-        /* ensure out is always a tuple */
         normal_kwds = PyDict_Copy(kwds);
-        out = PyDict_GetItemString(normal_kwds, "out");
+        /* ensure out is always a tuple */
         if (out != NULL) {
             int nout = ufunc->nout;
 
@@ -521,11 +610,11 @@ PyUFunc_CheckOverride(PyUFuncObject *ufunc, char *method,
 
             /* Check for sub-types to the right of obj. */
             for (j = i + 1; j < num_override_args; j++) {
-                other_obj = with_override[j];
+                PyObject *other_obj = with_override[j];
                 if (other_obj != NULL &&
-                    PyObject_Type(other_obj) != PyObject_Type(obj) &&
+                    Py_TYPE(other_obj) != Py_TYPE(obj) &&
                     PyObject_IsInstance(other_obj,
-                                        PyObject_Type(override_obj))) {
+                                        (PyObject *)Py_TYPE(override_obj))) {
                     override_obj = NULL;
                     break;
                 }
diff --git a/numpy/core/tests/test_umath.py b/numpy/core/tests/test_umath.py
index 4772913be6b..95107b538bc 100644
--- a/numpy/core/tests/test_umath.py
+++ b/numpy/core/tests/test_umath.py
@@ -1745,18 +1745,22 @@ def __array_ufunc__(self, func, method, *inputs, **kwargs):
                 return "B"
 
         class C(object):
+            def __init__(self):
+                self.count = 0
+
             def __array_ufunc__(self, func, method, *inputs, **kwargs):
+                self.count += 1
                 return NotImplemented
 
         class CSub(C):
             def __array_ufunc__(self, func, method, *inputs, **kwargs):
+                self.count += 1
                 return NotImplemented
 
         a = A()
         a_sub = ASub()
         b = B()
         c = C()
-        c_sub = CSub()
 
         # Standard
         res = np.multiply(a, a_sub)
@@ -1767,11 +1771,27 @@ def __array_ufunc__(self, func, method, *inputs, **kwargs):
         # With 1 NotImplemented
         res = np.multiply(c, a)
         assert_equal(res, "A")
+        assert_equal(c.count, 1)
+        # Check our counter works, so we can trust tests below.
+        res = np.multiply(c, a)
+        assert_equal(c.count, 2)
 
         # Both NotImplemented.
+        c = C()
+        c_sub = CSub()
         assert_raises(TypeError, np.multiply, c, c_sub)
+        assert_equal(c.count, 1)
+        assert_equal(c_sub.count, 1)
+        c.count = c_sub.count = 0
         assert_raises(TypeError, np.multiply, c_sub, c)
+        assert_equal(c.count, 1)
+        assert_equal(c_sub.count, 1)
+        c.count = 0
+        assert_raises(TypeError, np.multiply, c, c)
+        assert_equal(c.count, 1)
+        c.count = 0
         assert_raises(TypeError, np.multiply, 2, c)
+        assert_equal(c.count, 1)
 
         # Ternary testing.
         assert_equal(three_mul_ufunc(a, 1, 2), "A")
@@ -1783,11 +1803,19 @@ def __array_ufunc__(self, func, method, *inputs, **kwargs):
         assert_equal(three_mul_ufunc(a, 2, b), "A")
         assert_equal(three_mul_ufunc(a, 2, a_sub), "ASub")
         assert_equal(three_mul_ufunc(a, a_sub, 3), "ASub")
+        c.count = 0
         assert_equal(three_mul_ufunc(c, a_sub, 3), "ASub")
+        assert_equal(c.count, 1)
+        c.count = 0
         assert_equal(three_mul_ufunc(1, a_sub, c), "ASub")
+        assert_equal(c.count, 0)
 
+        c.count = 0
         assert_equal(three_mul_ufunc(a, b, c), "A")
+        assert_equal(c.count, 0)
+        c_sub.count = 0
         assert_equal(three_mul_ufunc(a, b, c_sub), "A")
+        assert_equal(c_sub.count, 0)
         assert_equal(three_mul_ufunc(1, 2, b), "B")
 
         assert_raises(TypeError, three_mul_ufunc, 1, 2, c)
@@ -1806,9 +1834,25 @@ def __array_ufunc__(self, func, method, *inputs, **kwargs):
         assert_equal(four_mul_ufunc(a_sub, 1, 2, a), "ASub")
         assert_equal(four_mul_ufunc(a, 1, 2, a_sub), "ASub")
 
+        c = C()
+        c_sub = CSub()
         assert_raises(TypeError, four_mul_ufunc, 1, 2, 3, c)
+        assert_equal(c.count, 1)
+        c.count = 0
         assert_raises(TypeError, four_mul_ufunc, 1, 2, c_sub, c)
-        assert_raises(TypeError, four_mul_ufunc, 1, c, c_sub, c)
+        assert_equal(c_sub.count, 1)
+        assert_equal(c.count, 1)
+        c2 = C()
+        c.count = c_sub.count = 0
+        assert_raises(TypeError, four_mul_ufunc, 1, c, c_sub, c2)
+        assert_equal(c_sub.count, 1)
+        assert_equal(c.count, 1)
+        assert_equal(c2.count, 0)
+        c.count = c2.count = c_sub.count = 0
+        assert_raises(TypeError, four_mul_ufunc, c2, c, c_sub, c)
+        assert_equal(c_sub.count, 1)
+        assert_equal(c.count, 0)
+        assert_equal(c2.count, 1)
 
     def test_ufunc_override_methods(self):
 
