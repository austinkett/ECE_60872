diff --git a/numpy/testing/tests/test_utils.py b/numpy/testing/tests/test_utils.py
index c191aea5ba3..5ca29d3c5f0 100644
--- a/numpy/testing/tests/test_utils.py
+++ b/numpy/testing/tests/test_utils.py
@@ -554,6 +554,18 @@ def test_report_fail_percentage(self):
             msg = exc.args[0]
         self.assertTrue("mismatch 25.0%" in msg)
 
+    def test_equal_nan(self):
+        a = np.array([np.nan])
+        b = np.array([np.nan])
+        # Should not raise:
+        assert_allclose(a, b, equal_nan=True)
+
+    def test_not_equal_nan(self):
+        a = np.array([np.nan])
+        b = np.array([np.nan])
+        self.assertRaises(AssertionError, assert_allclose, a, b,
+                          equal_nan=False)
+
 
 class TestArrayAlmostEqualNulp(unittest.TestCase):
 
diff --git a/numpy/testing/utils.py b/numpy/testing/utils.py
index 599e73cb0b8..b01de173d82 100644
--- a/numpy/testing/utils.py
+++ b/numpy/testing/utils.py
@@ -666,7 +666,7 @@ def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True):
 
 
 def assert_array_compare(comparison, x, y, err_msg='', verbose=True,
-                         header='', precision=6):
+                         header='', precision=6, equal_nan=True):
     __tracebackhide__ = True  # Hide traceback for py.test
     from numpy.core import array, isnan, isinf, any, all, inf
     x = array(x, copy=False, subok=True)
@@ -724,21 +724,25 @@ def chk_same_position(x_id, y_id, hasval='nan'):
                 raise AssertionError(msg)
 
         if isnumber(x) and isnumber(y):
-            x_isnan, y_isnan = isnan(x), isnan(y)
+            if equal_nan:
+                x_isnan, y_isnan = isnan(x), isnan(y)
+                # Validate that NaNs are in the same place
+                if any(x_isnan) or any(y_isnan):
+                    chk_same_position(x_isnan, y_isnan, hasval='nan')
+
             x_isinf, y_isinf = isinf(x), isinf(y)
 
-            # Validate that the special values are in the same place
-            if any(x_isnan) or any(y_isnan):
-                chk_same_position(x_isnan, y_isnan, hasval='nan')
+            # Validate that infinite values are in the same place
             if any(x_isinf) or any(y_isinf):
                 # Check +inf and -inf separately, since they are different
                 chk_same_position(x == +inf, y == +inf, hasval='+inf')
                 chk_same_position(x == -inf, y == -inf, hasval='-inf')
 
             # Combine all the special values
-            x_id, y_id = x_isnan, y_isnan
-            x_id |= x_isinf
-            y_id |= y_isinf
+            x_id, y_id = x_isinf, y_isinf
+            if equal_nan:
+                x_id |= x_isnan
+                y_id |= y_isnan
 
             # Only do the comparison if actual values are left
             if all(x_id):
@@ -1381,7 +1385,7 @@ def compare(x, y):
     actual, desired = np.asanyarray(actual), np.asanyarray(desired)
     header = 'Not equal to tolerance rtol=%g, atol=%g' % (rtol, atol)
     assert_array_compare(compare, actual, desired, err_msg=str(err_msg),
-                         verbose=verbose, header=header)
+                         verbose=verbose, header=header, equal_nan=equal_nan)
 
 
 def assert_array_almost_equal_nulp(x, y, nulp=1):
