diff --git a/numpy/core/records.py b/numpy/core/records.py
index 9f5dcc8110c..704bdff22f9 100644
--- a/numpy/core/records.py
+++ b/numpy/core/records.py
@@ -496,7 +496,11 @@ def __setattr__(self, attr, val):
         return self.setfield(val, *res)
 
     def __getitem__(self, indx):
-        obj = super(recarray, self).__getitem__(indx)
+        try:
+            obj = super(recarray, self).__getitem__(indx)
+        except:
+            del self  # prevents reference leaks
+            raise
 
         # copy behavior of getattr, except that here
         # we might also be returning a single element
diff --git a/numpy/core/tests/test_records.py b/numpy/core/tests/test_records.py
index 2c85546a762..0ed7e3373c5 100644
--- a/numpy/core/tests/test_records.py
+++ b/numpy/core/tests/test_records.py
@@ -328,6 +328,15 @@ def test_missing_field(self):
         # https://github.com/numpy/numpy/issues/4806
         arr = np.zeros((3,), dtype=[('x', int), ('y', int)])
         assert_raises(ValueError, lambda: arr[['nofield']])
+        
+    def test_ref_count(self):
+        # https://github.com/numpy/numpy/issues/7581
+        arr = np.recarray(2, dtype=[('x', int)])
+        assert_equal(sys.getrefcount(arr), 2)
+        # this bug does not appear with assert_raises
+        with self.assertRaises(IndexError):
+            arr[20]
+        assert_equal(sys.getrefcount(arr), 2)
 
 def test_find_duplicate():
     l1 = [1, 2, 3, 4, 5, 6]
