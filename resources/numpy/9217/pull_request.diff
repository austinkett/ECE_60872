diff --git a/numpy/core/src/multiarray/shape.c b/numpy/core/src/multiarray/shape.c
index b32b6714641..3a1a200321f 100644
--- a/numpy/core/src/multiarray/shape.c
+++ b/numpy/core/src/multiarray/shape.c
@@ -145,26 +145,33 @@ PyArray_Resize(PyArrayObject *self, PyArray_Dims *newshape, int refcheck,
         }
     }
 
-    if (PyArray_NDIM(self) != new_nd) {
-        /* Different number of dimensions. */
-        ((PyArrayObject_fields *)self)->nd = new_nd;
-        /* Need new dimensions and strides arrays */
-        dimptr = PyDimMem_RENEW(PyArray_DIMS(self), 3*new_nd);
-        if (dimptr == NULL) {
-            PyErr_SetString(PyExc_MemoryError,
-                    "cannot allocate memory for array");
-            return NULL;
+    if (new_nd > 0) {
+        if (PyArray_NDIM(self) != new_nd) {
+            /* Different number of dimensions. */
+            ((PyArrayObject_fields *)self)->nd = new_nd;
+            /* Need new dimensions and strides arrays */
+            dimptr = PyDimMem_RENEW(PyArray_DIMS(self), 3*new_nd);
+            if (dimptr == NULL) {
+                PyErr_SetString(PyExc_MemoryError,
+                                "cannot allocate memory for array");
+                return NULL;
+            }
+            ((PyArrayObject_fields *)self)->dimensions = dimptr;
+            ((PyArrayObject_fields *)self)->strides = dimptr + new_nd;
         }
-        ((PyArrayObject_fields *)self)->dimensions = dimptr;
-        ((PyArrayObject_fields *)self)->strides = dimptr + new_nd;
+        /* make new_strides variable */
+        _array_fill_strides(new_strides, new_dimensions, new_nd,
+                            PyArray_DESCR(self)->elsize, PyArray_FLAGS(self),
+                            &(((PyArrayObject_fields *)self)->flags));
+        memmove(PyArray_DIMS(self), new_dimensions, new_nd*sizeof(npy_intp));
+        memmove(PyArray_STRIDES(self), new_strides, new_nd*sizeof(npy_intp));
+    }
+    else {
+        PyDimMem_FREE(((PyArrayObject_fields *)self)->dimensions);
+        ((PyArrayObject_fields *)self)->nd = 0;
+        ((PyArrayObject_fields *)self)->dimensions = NULL;
+        ((PyArrayObject_fields *)self)->strides = NULL;
     }
-
-    /* make new_strides variable */
-    _array_fill_strides(
-        new_strides, new_dimensions, new_nd, PyArray_DESCR(self)->elsize,
-        PyArray_FLAGS(self), &(((PyArrayObject_fields *)self)->flags));
-    memmove(PyArray_DIMS(self), new_dimensions, new_nd*sizeof(npy_intp));
-    memmove(PyArray_STRIDES(self), new_strides, new_nd*sizeof(npy_intp));
     Py_RETURN_NONE;
 }
 
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index 835d0352899..81d20777150 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -4270,6 +4270,18 @@ def test_none_shape(self):
         x.resize()
         assert_array_equal(x, np.eye(3))
 
+    def test_0d_shape(self):
+        # to it multiple times to test it does not break alloc cache gh-9216
+        for i in range(10):
+            x = np.empty((1,))
+            x.resize(())
+            assert_equal(x.shape, ())
+            assert_equal(x.size, 1)
+            x = np.empty(())
+            x.resize((1,))
+            assert_equal(x.shape, (1,))
+            assert_equal(x.size, 1)
+
     def test_invalid_arguments(self):
         self.assertRaises(TypeError, np.eye(3).resize, 'hi')
         self.assertRaises(ValueError, np.eye(3).resize, -1)
