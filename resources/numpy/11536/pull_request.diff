diff --git a/numpy/ctypeslib.py b/numpy/ctypeslib.py
index 329c7a280ca..34e4f96232b 100644
--- a/numpy/ctypeslib.py
+++ b/numpy/ctypeslib.py
@@ -51,10 +51,11 @@
 """
 from __future__ import division, absolute_import, print_function
 
-__all__ = ['load_library', 'ndpointer', 'test', 'ctypes_load_library',
-           'c_intp', 'as_ctypes', 'as_array']
+__all__ = ['load_library', 'ctypes_load_library',
+           'c_intp', 'ndpointer',
+           'as_ctypes', 'as_array']
 
-import sys, os
+import os
 from numpy import integer, ndarray, dtype as _dtype, deprecate, array
 from numpy.core.multiarray import _flagdict, flagsobj
 
@@ -149,13 +150,14 @@ def load_library(libname, loader_path):
                 try:
                     return ctypes.cdll[libpath]
                 except OSError:
-                    ## defective lib file
-                    raise
+                    raise ## defective lib file
+
         ## if no successful return in the libname_ext loop:
         raise OSError("no file with expected extension")
 
-    ctypes_load_library = deprecate(load_library, 'ctypes_load_library',
-                                    'load_library')
+    ctypes_load_library = deprecate(load_library,
+                                   'ctypes_load_library',
+                                   'load_library')
 
 def _num_fromflags(flaglist):
     num = 0
@@ -163,8 +165,14 @@ def _num_fromflags(flaglist):
         num += _flagdict[val]
     return num
 
-_flagnames = ['C_CONTIGUOUS', 'F_CONTIGUOUS', 'ALIGNED', 'WRITEABLE',
-              'OWNDATA', 'UPDATEIFCOPY', 'WRITEBACKIFCOPY']
+_flagnames = ['C_CONTIGUOUS',
+              'F_CONTIGUOUS',
+              'ALIGNED',
+              'WRITEABLE',
+              'OWNDATA',
+              'UPDATEIFCOPY',
+              'WRITEBACKIFCOPY']
+
 def _flags_fromnum(num):
     res = []
     for key in _flagnames:
@@ -173,25 +181,27 @@ def _flags_fromnum(num):
             res.append(key)
     return res
 
-
 class _ndptr(_ndptr_base):
 
     def _check_retval_(self):
-        """This method is called when this class is used as the .restype
-        attribute for a shared-library function.   It constructs a numpy
-        array from a void pointer."""
+        """ This method is called when this class is used as the .restype
+            attribute for a shared-library function. It constructs a numpy
+            array from a void pointer.
+        """
         return array(self)
 
     @property
     def __array_interface__(self):
-        return {'descr': self._dtype_.descr,
-                '__ref': self,
-                'strides': None,
-                'shape': self._shape_,
-                'version': 3,
-                'typestr': self._dtype_.descr[0][1],
-                'data': (self.value, False),
-                }
+        return {
+            'descr'     :   self._dtype_.descr,
+            '__ref'     :   self,
+            'strides'   :   None,
+            'shape'     :   self._shape_,
+            'version'   :   3,
+            'typestr'   :   self._dtype_.descr[0][1],
+            'data'      :  (self.value,
+                            False)
+        }
 
     @classmethod
     def from_param(cls, obj):
@@ -214,8 +224,11 @@ def from_param(cls, obj):
 
 
 # Factory for an array-checking class with from_param defined for
-#  use with ctypes argtypes mechanism
+# use with ctypes argtypes mechanism
+
+# Module-local pointer type cache dict:
 _pointer_type_cache = {}
+
 def ndpointer(dtype=None, ndim=None, shape=None, flags=None):
     """
     Array-checking restype/argtypes.
@@ -268,10 +281,11 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):
     ... #doctest: +SKIP
 
     """
-
+    # Confirm the dtype:
     if dtype is not None:
         dtype = _dtype(dtype)
-    num = None
+    
+    # Transform flag strings to their integer equivaluent:
     if flags is not None:
         if isinstance(flags, str):
             flags = flags.split(',')
@@ -287,18 +301,17 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):
             except Exception:
                 raise TypeError("invalid flags specification")
             num = _num_fromflags(flags)
-    try:
-        return _pointer_type_cache[(dtype, ndim, shape, num)]
-    except KeyError:
-        pass
+    
+    # Choose a name string based on the dtype:
     if dtype is None:
         name = 'any'
     elif dtype.names:
         name = str(id(dtype))
     else:
         name = dtype.str
-    if ndim is not None:
-        name += "_%dd" % ndim
+    
+    # Normalize the shape, and append a stringified
+    # copy to the name string:
     if shape is not None:
         try:
             strshape = [str(x) for x in shape]
@@ -306,17 +319,35 @@ def ndpointer(dtype=None, ndim=None, shape=None, flags=None):
             strshape = [str(shape)]
             shape = (shape,)
         shape = tuple(shape)
-        name += "_"+"x".join(strshape)
+        name += "_" + "x".join(strshape)
+    
+    # Compose cache key tuple:
+    cache_key = (dtype, ndim, shape, num)
+    
+    # Return with a cached class value,
+    # if we have one:
+    try:
+        return _pointer_type_cache[cache_key]
+    except KeyError:
+        pass
+    
+    # Amend the name with the `ndim` value:
+    if ndim is not None:
+        name += "_%dd" % str(ndim)
+    
+    # Further amend the name with any flag strings:
     if flags is not None:
-        name += "_"+"_".join(flags)
-    else:
-        flags = []
-    klass = type("ndpointer_%s"%name, (_ndptr,),
-                 {"_dtype_": dtype,
-                  "_shape_" : shape,
-                  "_ndim_" : ndim,
-                  "_flags_" : num})
-    _pointer_type_cache[(dtype, shape, ndim, num)] = klass
+        name += "_" + "_".join(flags)
+    
+    # Create new `_ndptr` subclass:
+    klass = type("ndpointer_%s" % name, (_ndptr,), {
+                 "_dtype_"  : dtype,
+                 "_shape_"  : shape,
+                 "_ndim_"   : ndim,
+                 "_flags_"  : num })
+    
+    # Cache the newly created class and return it:
+    _pointer_type_cache[cache_key] = klass
     return klass
 
 
