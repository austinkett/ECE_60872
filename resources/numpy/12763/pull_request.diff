diff --git a/numpy/core/__init__.py b/numpy/core/__init__.py
index 80ce84f00ae..97c18c482e8 100644
--- a/numpy/core/__init__.py
+++ b/numpy/core/__init__.py
@@ -52,7 +52,67 @@
 del env_added
 del os
 
+############### HACK for broken installations #########################
+
+# Test that multiarray is a pure python module wrapping _multiarray_umath,
+# and not the old c-extension module.
+msg = ("Something is wrong with the NumPy installation. "
+       "While importing 'multiarray' we detected an older version of "
+       "numpy. One method of fixing this is to repeatedly 'pip uninstall' "
+       "numpy until none is found, then reinstall this version.")
+if not getattr(multiarray, '_multiarray_umath', None):
+    # Old multiarray. Can we override it?
+    import sys, os.path as osp
+    def get_params():
+        for name in ('multiarray', 'umath'):
+            modname = "numpy.core.{}".format(name)
+            fname = osp.join(osp.dirname(__file__), '{}.py'.format(name))
+            # try py, pyc, pyo
+            for ext in ('', 'c', 'o'):
+                if osp.exists(fname + ext):
+                    fname += ext
+                    break
+            yield modname, fname, name
+
+    if sys.version_info >= (3,5):
+        import importlib.util
+        try:
+            for modname, fname, name in get_params():
+                spec = importlib.util.spec_from_file_location(modname, fname)
+                mod = importlib.util.module_from_spec(spec)
+                spec.loader.exec_module(mod)
+                sys.modules[modname] = mod
+                locals()[name] = mod
+        except Exception as e:
+            print(e)
+            raise ImportError(msg)
+    elif sys.version_info[:2] == (2, 7):
+        import imp
+        try:
+            for modname, fname, name in get_params():
+                mod = imp.load_source(modname, fname)
+                sys.modules[modname] = mod
+                locals()[name] = mod
+        except Exception as e:
+            print(e)
+            raise ImportError(msg)
+    else:
+        raise ImportError(msg)
+    del sys, osp
+    import warnings
+    warnings.warn(msg, ImportWarning, stacklevel=1)
+
+# when this HACK is removed, keep this line
 from . import umath
+
+if not getattr(umath, '_multiarray_umath', None):
+    # The games in the previous block failed. Give up.
+    # The warning above may already have been emitted.
+    raise ImportError(msg)
+
+del msg
+############### end of HACK for broken installations #######################
+
 from . import _internal  # for freeze programs
 from . import numerictypes as nt
 multiarray.set_typeDict(nt.sctypeDict)
diff --git a/numpy/core/_methods.py b/numpy/core/_methods.py
index baeab6383a0..6224c95b235 100644
--- a/numpy/core/_methods.py
+++ b/numpy/core/_methods.py
@@ -7,11 +7,11 @@
 
 import warnings
 
-from numpy.core import multiarray as mu
-from numpy.core import umath as um
-from numpy.core.numeric import asanyarray
-from numpy.core import numerictypes as nt
-from numpy._globals import _NoValue
+from . import multiarray as mu
+from . import umath as um
+from .numeric import asanyarray
+from . import numerictypes as nt
+from .._globals import _NoValue
 
 # save those O(100) nanoseconds!
 umr_maximum = um.maximum.reduce
diff --git a/numpy/core/setup.py b/numpy/core/setup.py
index 467b590ac0a..24ea09110c1 100644
--- a/numpy/core/setup.py
+++ b/numpy/core/setup.py
@@ -960,6 +960,14 @@ def generate_umath_c(ext, build_dir):
     config.add_extension('_operand_flag_tests',
                     sources=[join('src', 'umath', '_operand_flag_tests.c.src')])
 
+    #######################################################################
+    #                        _multiarray_module_test module               #
+    #######################################################################
+
+    config.add_extension('_multiarray_module_test',
+                    sources=[join('src', 'multiarray',
+                                         '_multiarray_module_test.c')])
+
     config.add_data_dir('tests')
     config.add_data_dir('tests/data')
 
diff --git a/numpy/core/src/multiarray/_multiarray_module_test.c b/numpy/core/src/multiarray/_multiarray_module_test.c
new file mode 100644
index 00000000000..8dc017279e1
--- /dev/null
+++ b/numpy/core/src/multiarray/_multiarray_module_test.c
@@ -0,0 +1,129 @@
+#include "Python.h"
+
+/*
+ * This is a dummy module. It will be used to ruin the import of multiarray
+ * during testing. It exports two entry points, one to make the build happy,
+ * and a multiarray one for the actual test. The content of the module is
+ * irrelevant to the test.
+ *
+ * The code is from
+ * https://docs.python.org/3/howto/cporting.html
+ * or
+ * https://github.com/python/cpython/blob/v3.7.0/Doc/howto/cporting.rst
+ */
+
+#if defined _WIN32 || defined __CYGWIN__ || defined __MINGW32__
+  #if defined __GNUC__ || defined __clang__
+    #define DLL_PUBLIC __attribute__ ((dllexport))
+  #else
+    #define DLL_PUBLIC __declspec(dllexport)
+  #endif
+#elif defined __GNUC__  || defined __clang__
+  #define DLL_PUBLIC __attribute__ ((visibility ("default")))
+#else
+    /* Enhancement: error now instead ? */
+    #define DLL_PUBLIC
+#endif
+
+struct module_state {
+    PyObject *error;
+};
+
+#if PY_MAJOR_VERSION >= 3
+#define GETSTATE(m) ((struct module_state*)PyModule_GetState(m))
+#else
+#define GETSTATE(m) (&_state)
+static struct module_state _state;
+#endif
+
+static PyObject *
+error_out(PyObject *m) {
+    struct module_state *st = GETSTATE(m);
+    PyErr_SetString(st->error, "something bad happened");
+    return NULL;
+}
+
+static PyMethodDef multiarray_methods[] = {
+    {"error_out", (PyCFunction)error_out, METH_NOARGS, NULL},
+    {NULL, NULL}
+};
+
+#if PY_MAJOR_VERSION >= 3
+
+static int multiarray_traverse(PyObject *m, visitproc visit, void *arg) {
+    Py_VISIT(GETSTATE(m)->error);
+    return 0;
+}
+
+static int multiarray_clear(PyObject *m) {
+    Py_CLEAR(GETSTATE(m)->error);
+    return 0;
+}
+
+
+static struct PyModuleDef moduledef = {
+        PyModuleDef_HEAD_INIT,
+        "multiarray",
+        NULL,
+        sizeof(struct module_state),
+        multiarray_methods,
+        NULL,
+        multiarray_traverse,
+        multiarray_clear,
+        NULL
+};
+
+#define INITERROR return NULL
+
+DLL_PUBLIC PyObject *
+PyInit_multiarray(void)
+
+#else
+#define INITERROR return
+
+void
+DLL_PUBLIC initmultiarray(void)
+#endif
+{
+#if PY_MAJOR_VERSION >= 3
+    PyObject *module = PyModule_Create(&moduledef);
+#else
+    PyObject *module = Py_InitModule("multiarray", multiarray_methods);
+#endif
+    struct module_state *st;
+    if (module == NULL)
+        INITERROR;
+    st = GETSTATE(module);
+
+    st->error = PyErr_NewException("multiarray.Error", NULL, NULL);
+    if (st->error == NULL) {
+        Py_DECREF(module);
+        INITERROR;
+    }
+
+#if PY_MAJOR_VERSION >= 3
+    return module;
+#endif
+}
+
+/*
+ * Define a dummy entry point to make MSVC happy
+ * Python's build system will export this function automatically
+ */
+#if PY_MAJOR_VERSION >= 3
+
+PyObject *
+PyInit__multiarray_module_test(void)
+{
+    return PyInit_multiarray();
+}
+
+#else
+
+void
+init_multiarray_module_test(void)
+{
+    initmultiarray();
+}
+
+#endif                                                    
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index cdacdabbea0..4bbf2c8f40b 100644
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -7938,3 +7938,51 @@ def test_getfield():
     pytest.raises(ValueError, a.getfield, 'uint8', -1)
     pytest.raises(ValueError, a.getfield, 'uint8', 16)
     pytest.raises(ValueError, a.getfield, 'uint64', 0)
+
+def test_multiarray_module():
+    # gh-12736
+    # numpy 1.16 replaced the multiarray and umath c-extension modules with
+    # a single _multiarray_umath one. For backward compatibility, it added a
+    # pure-python multiarray.py and umath.py shim so people can still do
+    # from numpy.core.multirarray import something-public-api
+    # It turns out pip can leave old pieces of previous versions of numpy
+    # around when installing a newer version. If the old c-extension modules
+    # are found, they will be given precedence to the new pure-python ones.
+    #
+    # This test copies a multiarray c-extension in parallel with the pure-
+    # python one, and starts another python interpreter to load multiarray.
+    # The expectation is that it will find the c-extension module, raise a
+    # warning, and use importlib trickery to replace the loaded module with
+    # the correct pure-python one. The test checks that a warning is raised,
+    # and that the overrid mechanism works (by finding the mean of an array).
+    import subprocess, shutil
+    core_dir = os.path.dirname(np.core.multiarray.__file__)
+    cextension = np.core._multiarray_umath.__file__
+    testfile = cextension.replace('_multiarray_umath', '_multiarray_module_test')
+    badfile = cextension.replace('_multiarray_umath', 'multiarray')
+    assert not os.path.exists(badfile), '%s exists, this numpy ' \
+                                    'installation is faulty' % badfile
+    try:
+        shutil.copy(testfile, badfile)
+        p = subprocess.Popen([sys.executable, '-Walways::ImportWarning', '-c',
+                ('import numpy; print(numpy.core.multiarray); '
+                 'a = numpy.ones((10, 10), dtype=float); '
+                 'print(numpy.mean(a))')],
+                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
+                env=os.environ.copy())
+        stdout, stderr = p.communicate()
+        # print(stdout.decode())
+        # print(stderr.decode())
+        # make sure numpy.core.multiarray is a py file (maybe pyc or pyo)
+        assert b'multiarray.py' in stdout
+        assert b'1.0' in stdout
+        # make sure we hit the hack in numpy/core/init
+        assert b'ImportWarning: Something is wrong' in stderr
+    finally:
+        if os.path.exists(badfile):
+            try:
+                # can this fail?
+                os.remove(badfile)
+            except:
+                print("Could not remove %s, remove it by hand" % badfile)
+                raise
