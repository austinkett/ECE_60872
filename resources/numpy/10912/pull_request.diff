diff --git a/numpy/random/mtrand/distributions.c b/numpy/random/mtrand/distributions.c
index b7e1579158b..0bf32aecfeb 100644
--- a/numpy/random/mtrand/distributions.c
+++ b/numpy/random/mtrand/distributions.c
@@ -42,6 +42,7 @@
  */
 
 #include "distributions.h"
+#include <signal.h>
 #include <stdio.h>
 #include <math.h>
 #include <stdlib.h>
@@ -718,12 +719,33 @@ double rk_wald(rk_state *state, double mean, double scale)
     }
 }
 
+static void kb_interrupt_handler(int signum) {
+    /* signal handlers are extremely limited
+     * and attempting to raise a Python
+     * KeyboardInterrupt via the Python
+     * C API here causes a segfault
+     */
+    printf("\nCaught Keyboard Interrupt\n");
+    exit(1);
+}
+
 long rk_zipf(rk_state *state, double a)
 {
     double am1, b;
 
     am1 = a - 1.0;
     b = pow(2.0, am1);
+
+    /* using PyErr_CheckSignals() from
+     * the Python C API would allow
+     * for keyboard interrupt handling
+     * BUT results in a segfault
+     * after Ctrl+C, so an alternative
+     * approach is used here;
+     * Related to Issue #9829
+     */
+    signal(SIGINT, kb_interrupt_handler);
+
     while (1) {
         double T, U, V, X;
 
diff --git a/numpy/random/tests/test_random.py b/numpy/random/tests/test_random.py
index 61c6e912dae..6e20f50166c 100644
--- a/numpy/random/tests/test_random.py
+++ b/numpy/random/tests/test_random.py
@@ -10,6 +10,10 @@
 from numpy import random
 import sys
 import warnings
+import signal
+import pytest
+import subprocess
+import os
 
 
 class TestSeed(object):
@@ -1634,3 +1638,23 @@ def test_three_arg_funcs(self):
 
             out = func(self.argOne, self.argTwo[0], self.argThree)
             assert_equal(out.shape, self.tgtShape)
+
+def test_zipf_interrupt(tmpdir):
+    # test that zipf can be interrupted
+    # with i.e., KeyboardInterrupt
+    # for pathological inputs
+    # related to Issue #9829
+    p = str(tmpdir.mkdir("sub").join("zipf_pathological.py"))
+
+    with open(p, 'w') as tempfile:
+        tempfile.write("import numpy as np\n")
+        tempfile.write("np.random.zipf(1.0000000000001)\n")
+
+        process = subprocess.Popen(["python", "{script}".format(script=p)])
+        if os.name == 'nt':
+            process.send_signal(signal.CTRL_C_EVENT)
+        else:
+            process.send_signal(signal.SIGINT)
+        process.communicate()
+        ret_code = process.returncode
+        assert ret_code != 0
