diff --git a/numpy/lib/arraypad.py b/numpy/lib/arraypad.py
index 4f6371058ee..8650685a71a 100644
--- a/numpy/lib/arraypad.py
+++ b/numpy/lib/arraypad.py
@@ -244,27 +244,19 @@ def _prepend_ramp(arr, pad_amt, end, axis=-1):
     if pad_amt == 0:
         return arr
 
-    # Generate shape for final concatenated array
-    padshape = tuple(x if i != axis else pad_amt
-                     for (i, x) in enumerate(arr.shape))
-
-    # Generate an n-dimensional array incrementing along `axis`
-    ramp_arr = _arange_ndarray(arr, padshape, axis,
-                               reverse=True).astype(np.float64)
-
-    # Appropriate slicing to extract n-dimensional edge along `axis`
+    # Slice a chunk from the edge to calculate stats on and extract edge
     edge_slice = _slice_first(arr.shape, 1, axis=axis)
+    edge = arr[edge_slice]
 
-    # Extract edge, and extend along `axis`
-    edge_pad = arr[edge_slice].repeat(pad_amt, axis)
-
-    # Linear ramp
-    slope = (end - edge_pad) / float(pad_amt)
-    ramp_arr = ramp_arr * slope
-    ramp_arr += edge_pad
-    _round_ifneeded(ramp_arr, arr.dtype)
+    ramp_arr = np.linspace(
+        start=end,
+        stop=edge.squeeze(axis),
+        num=pad_amt,
+        endpoint=False,
+        dtype=arr.dtype,
+        axis=axis
+    )
 
-    # Ramp values will most likely be float, cast them to the same type as arr
     return _do_prepend(arr, ramp_arr, axis)
 
 
@@ -294,27 +286,23 @@ def _append_ramp(arr, pad_amt, end, axis=-1):
     if pad_amt == 0:
         return arr
 
-    # Generate shape for final concatenated array
-    padshape = tuple(x if i != axis else pad_amt
-                     for (i, x) in enumerate(arr.shape))
-
-    # Generate an n-dimensional array incrementing along `axis`
-    ramp_arr = _arange_ndarray(arr, padshape, axis,
-                               reverse=False).astype(np.float64)
-
-    # Slice a chunk from the edge to calculate stats on
+    # Slice a chunk from the edge to calculate stats on and extract edge
     edge_slice = _slice_last(arr.shape, 1, axis=axis)
+    edge = arr[edge_slice]
+
+    ramp_arr = np.linspace(
+        start=end,
+        stop=edge.squeeze(axis),
+        num=pad_amt,
+        endpoint=False,
+        dtype=arr.dtype,
+        axis=axis
+    )
+    # Reverse linear space in appropriate dimension
+    ramp_arr = ramp_arr[
+        _slice_at_axis(ramp_arr.shape, slice(None, None, -1), axis)
+    ]
 
-    # Extract edge, and extend along `axis`
-    edge_pad = arr[edge_slice].repeat(pad_amt, axis)
-
-    # Linear ramp
-    slope = (end - edge_pad) / float(pad_amt)
-    ramp_arr = ramp_arr * slope
-    ramp_arr += edge_pad
-    _round_ifneeded(ramp_arr, arr.dtype)
-
-    # Ramp values will most likely be float, cast them to the same type as arr
     return _do_append(arr, ramp_arr, axis)
 
 
diff --git a/numpy/lib/tests/test_arraypad.py b/numpy/lib/tests/test_arraypad.py
index 20f6e4a1bf2..6620db8df31 100644
--- a/numpy/lib/tests/test_arraypad.py
+++ b/numpy/lib/tests/test_arraypad.py
@@ -679,6 +679,30 @@ def test_object_array(self):
         ])
         assert_equal(actual, expected)
 
+    @pytest.mark.parametrize("dtype", (
+        np.sctypes["uint"]
+        + np.sctypes["int"]
+        + np.sctypes["float"]
+        + np.sctypes["complex"]
+    ))
+    def test_negative_difference(self, dtype):
+        """
+        Check correct behavior of unsigned dtypes if there is a negative
+        difference between the edge to pad and `end_values`. Check both cases
+        to be independent of implementation. Test behavior for all other dtypes
+        in case dtype casting interferes with complex dtypes. See gh-14191.
+        """
+        x = np.array([3], dtype=dtype)
+        result = np.pad(x, 3, mode="linear_ramp", end_values=0)
+        expected = np.array([0, 1, 2, 3, 2, 1, 0], dtype=dtype)
+        assert_equal(result, expected)
+
+        x = np.array([0], dtype=dtype)
+        result = np.pad(x, 3, mode="linear_ramp", end_values=3)
+        expected = np.array([3, 2, 1, 0, 1, 2, 3], dtype=dtype)
+        assert_equal(result, expected)
+
+
 
 class TestReflect(object):
     def test_check_simple(self):
