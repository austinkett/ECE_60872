diff --git a/numpy/lib/function_base.py b/numpy/lib/function_base.py
index 8440be52e58..b727ee71385 100644
--- a/numpy/lib/function_base.py
+++ b/numpy/lib/function_base.py
@@ -248,6 +248,10 @@ def iterable(y):
 def average(a, axis=None, weights=None, returned=False):
     """
     Compute the weighted average along the specified axis.
+    
+    .. math:: \\bar{x} = \\frac{ \\sum_{i=1}^n w_i x_i}{\\sum_{i=1}^n w_i}
+
+    with :math:`\\sum_{i=1}^n w_i > 0`
 
     Parameters
     ----------
@@ -265,12 +269,13 @@ def average(a, axis=None, weights=None, returned=False):
         specified in the tuple instead of a single axis or all the axes as
         before.
     weights : array_like, optional
-        An array of weights associated with the values in `a`. Each value in
-        `a` contributes to the average according to its associated weight.
-        The weights array can either be 1-D (in which case its length must be
-        the size of `a` along the given axis) or of the same shape as `a`.
-        If `weights=None`, then all data in `a` are assumed to have a
-        weight equal to one.
+        An array of weights associated with the values in `a`.
+        Each value in `a` contributes to the average according to its
+        associated weight. The weights array can either be 1-D (in which case
+        its length must be the size of `a` along the given axis) or of the same
+        shape as `a`. The sum of weights should be positive.
+        If `weights=None`, then all data in `a` are assumed to have a weight
+        equal to one.
     returned : bool, optional
         Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)
         is returned, otherwise only the average is returned.
@@ -357,11 +362,10 @@ def average(a, axis=None, weights=None, returned=False):
             wgt = wgt.swapaxes(-1, axis)
 
         scl = wgt.sum(axis=axis, dtype=result_dtype)
-        if np.any(scl == 0.0):
-            raise ZeroDivisionError(
-                "Weights sum to zero, can't be normalized")
+        if np.any(scl <= 0.0):
+            raise ValueError("Sum of weights should be positive.")
 
-        avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis)/scl
+        avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis) / scl
 
     if returned:
         if scl.shape != avg.shape:
diff --git a/numpy/lib/tests/test_function_base.py b/numpy/lib/tests/test_function_base.py
index c28257c6d6d..5c276f690dc 100644
--- a/numpy/lib/tests/test_function_base.py
+++ b/numpy/lib/tests/test_function_base.py
@@ -265,6 +265,10 @@ def test_weights(self):
         actual = average(y, weights=w)
         desired = (np.arange(10) ** 2).sum() * 1. / np.arange(10).sum()
         assert_almost_equal(actual, desired)
+        
+        assert_raises(ValueError, average, y, weights=-w)
+        assert_raises(ValueError, average, y, weights=np.zeros_like(w))
+        assert_raises(ValueError, average, y, weights=w - w.mean())
 
         y1 = np.array([[1, 2, 3], [4, 5, 6]])
         w0 = [1, 2]
@@ -281,7 +285,7 @@ def test_weights(self):
         # assert_equal(average(y1, weights=w1), 9./2.)
 
         # 2D Case
-        w2 = [[0, 0, 1], [0, 0, 2]]
+        w2 = np.array([[0, 0, 1], [0, 0, 2]])
         desired = np.array([3., 6.])
         assert_array_equal(average(y1, weights=w2, axis=1), desired)
         assert_equal(average(y1, weights=w2), 5.)
@@ -291,6 +295,10 @@ def test_weights(self):
 
         assert_(np.average(y3, weights=w3).dtype == np.result_type(y3, w3))
 
+        assert_raises(ValueError, average, y1, weights=-w2)
+        assert_raises(ValueError, average, y1, weights=np.zeros_like(w2))
+        assert_raises(ValueError, average, y1, weights=w2 - w2.mean())
+
     def test_returned(self):
         y = np.array([[1, 2, 3], [4, 5, 6]])
 
diff --git a/numpy/ma/extras.py b/numpy/ma/extras.py
index 8272dced9bb..236129d5196 100644
--- a/numpy/ma/extras.py
+++ b/numpy/ma/extras.py
@@ -521,6 +521,10 @@ def average(a, axis=None, weights=None, returned=False):
     """
     Return the weighted average of array over the given axis.
 
+    .. math:: \\bar{x} = \\frac{ \\sum_{i=1}^n w_i x_i}{\\sum_{i=1}^n w_i}
+
+    with :math:`\\sum_{i=1}^n w_i > 0`
+    
     Parameters
     ----------
     a : array_like
@@ -533,6 +537,7 @@ def average(a, axis=None, weights=None, returned=False):
         The importance that each element has in the computation of the average.
         The weights array can either be 1-D (in which case its length must be
         the size of `a` along the given axis) or of the same shape as `a`.
+        The sum of weights should be positive.
         If ``weights=None``, then all data in `a` are assumed to have a
         weight equal to one.   If `weights` is complex, the imaginary parts
         are ignored.
@@ -605,7 +610,11 @@ def average(a, axis=None, weights=None, returned=False):
             wgt = wgt*(~a.mask)
 
         scl = wgt.sum(axis=axis, dtype=result_dtype)
-        avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis)/scl
+        if((axis is None and scl <= 0.0) or 
+           (m is nomask and np.any(scl <= 0.0)) or
+           (m is not nomask and np.any(scl[np.any(~a.mask, axis=axis)] <= 0.0))):
+            raise ValueError("Sum of weights should be positive.")
+        avg = np.multiply(a, wgt, dtype=result_dtype).sum(axis) / scl
 
     if returned:
         if scl.shape != avg.shape:
diff --git a/numpy/ma/tests/test_extras.py b/numpy/ma/tests/test_extras.py
index 95319eb6572..b933c5c14c4 100644
--- a/numpy/ma/tests/test_extras.py
+++ b/numpy/ma/tests/test_extras.py
@@ -17,7 +17,8 @@
     run_module_suite, assert_warns, suppress_warnings, assert_raises,
     )
 from numpy.ma.testutils import (
-    assert_, assert_array_equal, assert_equal, assert_almost_equal
+    assert_, assert_array_equal, assert_equal, assert_almost_equal, 
+    assert_raises
     )
 from numpy.ma.core import (
     array, arange, masked, MaskedArray, masked_array, getmaskarray, shape,
@@ -165,17 +166,24 @@ def test_testAverage1(self):
 
     def test_testAverage2(self):
         # More tests of average.
-        w1 = [0, 1, 1, 1, 1, 0]
-        w2 = [[0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1]]
+        w1 = np.asarray([0., 1., 1., 1., 1., 0.])
+        w2 = np.asarray([[0., 1., 1., 1., 1., 0.], [1., 0., 0., 0., 0., 1.]])
         x = arange(6, dtype=np.float_)
         assert_equal(average(x, axis=0), 2.5)
-        assert_equal(average(x, axis=0, weights=w1), 2.5)
+        assert_equal(average(x, axis=0, weights=w1), 2.5)        
+        assert_raises(ValueError, average, x, weights=-w1)
+        assert_raises(ValueError, average, x, weights=np.zeros_like(w1))
+        assert_raises(ValueError, average, x, weights=w1 - 1.1 * w1.mean())
+        
         y = array([arange(6, dtype=np.float_), 2.0 * arange(6)])
         assert_equal(average(y, None), np.add.reduce(np.arange(6)) * 3. / 12.)
         assert_equal(average(y, axis=0), np.arange(6) * 3. / 2.)
         assert_equal(average(y, axis=1),
                      [average(x, axis=0), average(x, axis=0) * 2.0])
         assert_equal(average(y, None, weights=w2), 20. / 6.)
+        assert_raises(ValueError, average, y, weights=-w2)
+        assert_raises(ValueError, average, y, weights=np.zeros_like(w2))
+        assert_raises(ValueError, average, y, weights=w2 - 1.1 * w2.mean())
         assert_equal(average(y, axis=0, weights=w2),
                      [0., 1., 2., 3., 4., 10.])
         assert_equal(average(y, axis=1),
@@ -196,6 +204,17 @@ def test_testAverage2(self):
         assert_equal(average(z, axis=1), [2.5, 5.0])
         assert_equal(average(z, axis=0, weights=w2),
                      [0., 1., 99., 99., 4.0, 10.0])
+        w3 = w2.copy()
+        w3[~z.mask] *= -1
+        assert_raises(ValueError, average, z, weights=w3)
+        w3 = w2.copy()
+        w3[~z.mask] = 0
+        assert_raises(ValueError, average, z, weights=w3)
+        w3 = w2.copy()
+        w3[~z.mask] -= 1.1 * w3[~z.mask].mean()
+        assert_raises(ValueError, average, z, weights=w3)
+
+
 
     def test_testAverage3(self):
         # Yet more tests of average!
