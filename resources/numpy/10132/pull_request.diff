diff --git a/numpy/matrixlib/defmatrix.py b/numpy/matrixlib/defmatrix.py
index 08e867dea56..407f39beba6 100644
--- a/numpy/matrixlib/defmatrix.py
+++ b/numpy/matrixlib/defmatrix.py
@@ -289,8 +289,8 @@ def __getitem__(self, index):
             return out
 
         if out.ndim == 0:
-            return out[()]
-        if out.ndim == 1:
+            out.shape = (1, 1)
+        elif out.ndim == 1:
             sh = out.shape[0]
             # Determine when we should have a column array
             try:
diff --git a/numpy/matrixlib/tests/test_defmatrix.py b/numpy/matrixlib/tests/test_defmatrix.py
index 77f26203159..5f7a89c19e6 100644
--- a/numpy/matrixlib/tests/test_defmatrix.py
+++ b/numpy/matrixlib/tests/test_defmatrix.py
@@ -394,6 +394,17 @@ def test_list_indexing(self):
         assert_array_equal(x[:, [1, 0]], x[:, ::-1])
         assert_array_equal(x[[2, 1, 0],:], x[::-1,:])
 
+    def test_ellipsis_indexing(self):
+        A = np.arange(6)
+        A.shape = (3, 2)
+        x = asmatrix(A)
+
+        # Indexing with ... would normally return a 0d array, but np.matrix
+        # promotes to 2d as usual
+        x_item = x[1, 1, ...]
+        assert_(type(x_item) is matrix)
+        assert_equal(x_item.shape, (1, 1))
+
 
 class TestPower(object):
     def test_returntype(self):
