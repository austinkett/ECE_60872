diff --git a/numpy/core/src/multiarray/multiarraymodule.c b/numpy/core/src/multiarray/multiarraymodule.c
index 682705a1b8e..10acc7f02a7 100644
--- a/numpy/core/src/multiarray/multiarraymodule.c
+++ b/numpy/core/src/multiarray/multiarraymodule.c
@@ -940,11 +940,43 @@ PyArray_MatrixProduct2(PyObject *op1, PyObject *op2, PyArrayObject* out)
         Py_DECREF(typec);
         return NULL;
     }
+    
     ap2 = (PyArrayObject *)PyArray_FromAny(op2, typec, 0, 0,
                                         NPY_ARRAY_ALIGNED, NULL);
     if (ap2 == NULL) {
         goto fail;
     }
+    
+    if (out != NULL){
+        if (arrays_overlap(ap1, out)) {
+            /* The array in output is overlaping with the input array. It will 
+	       lead to errors in the computation because that operator is 
+	       non-local.
+            */
+            PyArrayObject *safe_ap1;
+            safe_ap1 = (PyArrayObject *)PyArray_NewCopy(ap1, NPY_KEEPORDER);
+            if (safe_ap1 == NULL) {
+   	        Py_DECREF(ap1);
+   	        Py_DECREF(typec);
+   	        return NULL;
+                }
+            Py_DECREF(ap1);
+            ap1 = safe_ap1;
+        }
+        if (arrays_overlap(ap2, out)) {
+            /* Same test and copy as above for the second array */
+            PyArrayObject *safe_ap2;
+            safe_ap2 = (PyArrayObject *)PyArray_NewCopy(ap2, NPY_KEEPORDER);
+            if (safe_ap2 == NULL) {
+   	        Py_DECREF(ap2);
+   	        Py_DECREF(typec);
+   	        return NULL;
+                }
+            Py_DECREF(ap2);
+            ap2 = safe_ap2;
+        }
+    }
+
     if (PyArray_NDIM(ap1) == 0 || PyArray_NDIM(ap2) == 0) {
         ret = (PyArray_NDIM(ap1) == 0 ? ap1 : ap2);
         ret = (PyArrayObject *)Py_TYPE(ret)->tp_as_number->nb_multiply(
diff --git a/numpy/core/tests/test_blasdot.py b/numpy/core/tests/test_blasdot.py
index caa576abcf7..1814a271400 100644
--- a/numpy/core/tests/test_blasdot.py
+++ b/numpy/core/tests/test_blasdot.py
@@ -62,6 +62,20 @@ def test_dot_3args():
     assert_(r is np.dot(f, v, r))
     assert_array_equal(r2, r)
 
+def test_inplace_dot():
+    """ Testing that inplace dot product doesn't fail by overwriting itself.
+    """
+    a = np.array([[1, 2], [3, 4]], dtype=float)
+    b = np.array([[1, 0], [1, 1]], dtype=float)
+    c = np.array([[3, 2], [7, 4]], dtype=float)
+    _ = np.dot(a, b, a)
+    assert_array_equal(a, c)
+    
+    # Reset overwritten 'a'
+    a = np.array([[1, 2], [3, 4]], dtype=float)
+    _ = np.dot(a, b, b)
+    assert_array_equal(b, c)
+
 def test_dot_3args_errors():
     np.random.seed(22)
     f = np.random.random_sample((1024, 16))
