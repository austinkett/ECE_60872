diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java
index 17a7ae4ebe58..943a1252218e 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filters/FiltersAggregator.java
@@ -194,6 +194,11 @@ public InternalAggregation buildEmptyAggregation() {
             InternalFilters.InternalBucket bucket = new InternalFilters.InternalBucket(keys[i], 0, subAggs, keyed);
             buckets.add(bucket);
         }
+        // other bucket
+        if (showOtherBucket) {
+            InternalFilters.InternalBucket bucket = new InternalFilters.InternalBucket(otherBucketKey, 0, subAggs, keyed);
+            buckets.add(bucket);
+        }
         return new InternalFilters(name, buckets, keyed, pipelineAggregators(), metaData());
     }
 
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
index 21b860ad8cb5..1aab254517ab 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/FiltersIT.java
@@ -28,6 +28,7 @@
 import org.elasticsearch.search.aggregations.bucket.filters.Filters;
 import org.elasticsearch.search.aggregations.bucket.filters.FiltersAggregator.KeyedFilter;
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
+import org.elasticsearch.search.aggregations.bucket.histogram.Histogram.Bucket;
 import org.elasticsearch.search.aggregations.metrics.avg.Avg;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.hamcrest.Matchers;
@@ -312,6 +313,77 @@ public void testOtherBucket() throws Exception {
         assertThat(bucket.getDocCount(), equalTo((long) numOtherDocs));
     }
 
+    public void testEmptyBucketWithOtherBucket() throws Exception {
+        SearchResponse response = client().prepareSearch("empty_bucket_idx")
+                .addAggregation(histogram("histo").interval(1).field("value")
+                        .subAggregation(filters("foo", new KeyedFilter("0", termQuery("value", 0))).otherBucket(true)))
+                .execute().actionGet();
+
+        assertSearchResponse(response);
+
+        Histogram histo = response.getAggregations().get("histo");
+        assertThat(histo, notNullValue());
+        assertThat(histo.getName(), equalTo("histo"));
+
+        List<? extends Bucket> buckets = histo.getBuckets();
+        assertThat(buckets, notNullValue());
+        assertThat(buckets.size(), equalTo(3));
+
+        Bucket histoBucket = buckets.get(0);
+        assertThat(histoBucket, notNullValue());
+        assertThat(histoBucket.getKey(), equalTo(0L));
+        assertThat(histoBucket.getDocCount(), equalTo(1L));
+
+        Filters filters = histoBucket.getAggregations().get("foo");
+        assertThat(filters, notNullValue());
+        assertThat(filters.getName(), equalTo("foo"));
+        assertThat(filters.getBuckets().size(), equalTo(2));
+
+        Filters.Bucket filtersBucket = filters.getBucketByKey("0");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(1L));
+
+        filtersBucket = filters.getBucketByKey("_other_");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(0L));
+
+        histoBucket = buckets.get(1);
+        assertThat(histoBucket, notNullValue());
+        assertThat(histoBucket.getKey(), equalTo(1L));
+        assertThat(histoBucket.getDocCount(), equalTo(0L));
+
+        filters = histoBucket.getAggregations().get("foo");
+        assertThat(filters, notNullValue());
+        assertThat(filters.getName(), equalTo("foo"));
+        assertThat(filters.getBuckets().size(), equalTo(2));
+
+        filtersBucket = filters.getBucketByKey("0");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(0L));
+
+        filtersBucket = filters.getBucketByKey("_other_");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(0L));
+
+        histoBucket = buckets.get(2);
+        assertThat(histoBucket, notNullValue());
+        assertThat(histoBucket.getKey(), equalTo(2L));
+        assertThat(histoBucket.getDocCount(), equalTo(1L));
+
+        filters = histoBucket.getAggregations().get("foo");
+        assertThat(filters, notNullValue());
+        assertThat(filters.getName(), equalTo("foo"));
+        assertThat(filters.getBuckets().size(), equalTo(2));
+
+        filtersBucket = filters.getBucketByKey("0");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(0L));
+
+        filtersBucket = filters.getBucketByKey("_other_");
+        assertThat(filtersBucket, Matchers.notNullValue());
+        assertThat(filtersBucket.getDocCount(), equalTo(1L));
+    }
+
     public void testOtherNamedBucket() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(filters("tags", new KeyedFilter("tag1", termQuery("tag", "tag1")),
