diff --git a/docs/reference/migration/migrate_7_0/search.asciidoc b/docs/reference/migration/migrate_7_0/search.asciidoc
index 0d3770993b2f..dcc953114762 100644
--- a/docs/reference/migration/migrate_7_0/search.asciidoc
+++ b/docs/reference/migration/migrate_7_0/search.asciidoc
@@ -9,6 +9,9 @@
     `all_fields`, `locale`, `auto_generate_phrase_query` and
     `lowercase_expanded_terms` deprecated in 6.x have been removed.
 
+*   Purely negative queries (only MUST_NOT clauses) now return a score of `0`
+    rather than `1`.
+
 ==== Adaptive replica selection enabled by default
 
 Adaptive replica selection has been enabled by default. If you wish to return to
diff --git a/server/src/main/java/org/elasticsearch/common/lucene/search/Queries.java b/server/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
index d004c798996c..22aa336e460d 100644
--- a/server/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
+++ b/server/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
@@ -99,18 +99,13 @@ public static Query not(Query q) {
             .build();
     }
 
-    private static boolean isNegativeQuery(Query q) {
+    static boolean isNegativeQuery(Query q) {
         if (!(q instanceof BooleanQuery)) {
             return false;
         }
         List<BooleanClause> clauses = ((BooleanQuery) q).clauses();
-        if (clauses.isEmpty()) {
-            return false;
-        }
-        for (BooleanClause clause : clauses) {
-            if (!clause.isProhibited()) return false;
-        }
-        return true;
+        return clauses.isEmpty() == false &&
+                clauses.stream().allMatch(BooleanClause::isProhibited);
     }
 
     public static Query fixNegativeQueryIfNeeded(Query q) {
@@ -120,7 +115,7 @@ public static Query fixNegativeQueryIfNeeded(Query q) {
             for (BooleanClause clause : bq) {
                 builder.add(clause);
             }
-            builder.add(newMatchAllQuery(), BooleanClause.Occur.MUST);
+            builder.add(newMatchAllQuery(), BooleanClause.Occur.FILTER);
             return builder.build();
         }
         return q;
diff --git a/server/src/test/java/org/apache/lucene/search/QueriesTests.java b/server/src/test/java/org/elasticsearch/common/lucene/search/QueriesTests.java
similarity index 55%
rename from server/src/test/java/org/apache/lucene/search/QueriesTests.java
rename to server/src/test/java/org/elasticsearch/common/lucene/search/QueriesTests.java
index 9256c8b31a3f..a1236fd53df9 100644
--- a/server/src/test/java/org/apache/lucene/search/QueriesTests.java
+++ b/server/src/test/java/org/elasticsearch/common/lucene/search/QueriesTests.java
@@ -17,10 +17,16 @@
  * under the License.
  */
 
-package org.apache.lucene.search;
+package org.elasticsearch.common.lucene.search;
 
+import org.apache.lucene.index.Term;
+import org.apache.lucene.search.BooleanClause;
+import org.apache.lucene.search.BooleanClause.Occur;
+import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.DocValuesFieldExistsQuery;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.TermQuery;
 import org.elasticsearch.Version;
-import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.index.mapper.SeqNoFieldMapper;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.VersionUtils;
@@ -43,4 +49,25 @@ public void testNonNestedQuery() {
         }
     }
 
+    public void testIsNegativeQuery() {
+        assertFalse(Queries.isNegativeQuery(new MatchAllDocsQuery()));
+        assertFalse(Queries.isNegativeQuery(new BooleanQuery.Builder().build()));
+        assertFalse(Queries.isNegativeQuery(new BooleanQuery.Builder()
+                .add(new TermQuery(new Term("foo", "bar")), Occur.MUST).build()));
+        assertTrue(Queries.isNegativeQuery(new BooleanQuery.Builder()
+                .add(new TermQuery(new Term("foo", "bar")), Occur.MUST_NOT).build()));
+        assertFalse(Queries.isNegativeQuery(new BooleanQuery.Builder()
+                .add(new MatchAllDocsQuery(), Occur.MUST)
+                .add(new MatchAllDocsQuery(), Occur.MUST_NOT).build()));
+    }
+
+    public void testFixNegativeQuery() {
+        assertEquals(new BooleanQuery.Builder()
+                .add(new MatchAllDocsQuery(), Occur.FILTER)
+                .add(new TermQuery(new Term("foo", "bar")), Occur.MUST_NOT).build(),
+                Queries.fixNegativeQueryIfNeeded(
+                        new BooleanQuery.Builder()
+                        .add(new TermQuery(new Term("foo", "bar")), Occur.MUST_NOT)
+                        .build()));
+    }
 }
