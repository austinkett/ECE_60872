diff --git a/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java
index 572cda21d09d..fae398e1a909 100644
--- a/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java
+++ b/core/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardRepository.java
@@ -19,15 +19,10 @@
 
 package org.elasticsearch.index.snapshots.blobstore;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.io.ByteStreams;
-import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.IndexFormatTooNewException;
-import org.apache.lucene.index.IndexFormatTooOldException;
-import org.apache.lucene.index.SegmentInfos;
+import org.apache.lucene.index.*;
 import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
@@ -902,13 +897,14 @@ public void restore() throws IOException {
                 /// now, go over and clean files that are in the store, but were not in the snapshot
                 try {
                     for (String storeFile : store.directory().listAll()) {
-                        if (!Store.isChecksum(storeFile) && !snapshotFiles.containPhysicalIndexFile(storeFile)) {
-                            try {
-                                store.deleteQuiet("restore", storeFile);
-                                store.directory().deleteFile(storeFile);
-                            } catch (IOException e) {
-                                logger.warn("[{}] failed to delete file [{}] during snapshot cleanup", snapshotId, storeFile);
-                            }
+                        if (Store.isAutogenerated(storeFile) || snapshotFiles.containPhysicalIndexFile(storeFile)) {
+                            continue; //skip write.lock, checksum files and files that exist in the snapshot
+                        }
+                        try {
+                            store.deleteQuiet("restore", storeFile);
+                            store.directory().deleteFile(storeFile);
+                        } catch (IOException e) {
+                            logger.warn("[{}] failed to delete file [{}] during snapshot cleanup", snapshotId, storeFile);
                         }
                     }
                 } catch (IOException e) {
diff --git a/core/src/main/java/org/elasticsearch/index/store/Store.java b/core/src/main/java/org/elasticsearch/index/store/Store.java
index d92128a319c4..2617e95b418d 100644
--- a/core/src/main/java/org/elasticsearch/index/store/Store.java
+++ b/core/src/main/java/org/elasticsearch/index/store/Store.java
@@ -586,7 +586,7 @@ public void cleanupAndVerify(String reason, MetadataSnapshot sourceMetaData) thr
         try (Lock writeLock = Lucene.acquireWriteLock(directory)) {
             final StoreDirectory dir = directory;
             for (String existingFile : dir.listAll()) {
-                if (existingFile.equals(IndexWriter.WRITE_LOCK_NAME) || Store.isChecksum(existingFile) || sourceMetaData.contains(existingFile)) {
+                if (Store.isAutogenerated(existingFile) || sourceMetaData.contains(existingFile)) {
                     continue; // don't delete snapshot file, or the checksums file (note, this is extra protection since the Store won't delete checksum)
                 }
                 try {
@@ -1206,11 +1206,19 @@ public void remove(String name) {
 
     public static final String CHECKSUMS_PREFIX = "_checksums-";
 
-    public static final boolean isChecksum(String name) {
+    public static boolean isChecksum(String name) {
         // TODO can we drowp .cks
         return name.startsWith(CHECKSUMS_PREFIX) || name.endsWith(".cks"); // bwcomapt - .cks used to be a previous checksum file
     }
 
+    /**
+     * Returns true if the file is auto-generated by the store and shouldn't be deleted during cleanup.
+     * This includes write lock and checksum files
+     */
+    public static boolean isAutogenerated(String name) {
+        return IndexWriter.WRITE_LOCK_NAME.equals(name) || isChecksum(name);
+    }
+
     /**
      * Produces a string representation of the given digest value.
      */
