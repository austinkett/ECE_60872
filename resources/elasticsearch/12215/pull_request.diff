diff --git a/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java
index f0b1a96e1d56..b03c667c9392 100644
--- a/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java
+++ b/core/src/main/java/org/elasticsearch/action/percolate/PercolateShardRequest.java
@@ -37,6 +37,7 @@
     private BytesReference docSource;
     private boolean onlyCount;
     private int numberOfShards;
+    private long startTime;
 
     PercolateShardRequest() {
     }
@@ -48,6 +49,7 @@
         this.docSource = request.docSource();
         this.onlyCount = request.onlyCount();
         this.numberOfShards = numberOfShards;
+        this.startTime = request.startTime;
     }
 
     PercolateShardRequest(ShardId shardId, OriginalIndices originalIndices) {
@@ -60,6 +62,7 @@
         this.source = request.source();
         this.docSource = request.docSource();
         this.onlyCount = request.onlyCount();
+        this.startTime = request.startTime;
     }
 
     public String documentType() {
@@ -98,6 +101,10 @@ public int getNumberOfShards() {
         return numberOfShards;
     }
 
+    public long getStartTime() {
+        return startTime;
+    }
+
     OriginalIndices originalIndices() {
         return originalIndices;
     }
@@ -110,6 +117,7 @@ public void readFrom(StreamInput in) throws IOException {
         docSource = in.readBytesReference();
         onlyCount = in.readBoolean();
         numberOfShards = in.readVInt();
+        startTime = in.readLong(); // no vlong, this can be negative!
     }
 
     @Override
@@ -120,6 +128,7 @@ public void writeTo(StreamOutput out) throws IOException {
         out.writeBytesReference(docSource);
         out.writeBoolean(onlyCount);
         out.writeVInt(numberOfShards);
+        out.writeLong(startTime);
     }
 
 }
diff --git a/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java
index d9e689d5f75e..9368860a6891 100644
--- a/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java
+++ b/core/src/main/java/org/elasticsearch/percolator/PercolateContext.java
@@ -98,6 +98,7 @@
     private final ConcurrentMap<BytesRef, Query> percolateQueries;
     private final int numberOfShards;
     private final Query aliasFilter;
+    private final long startTime;
     private String[] types;
 
     private Engine.Searcher docSearcher;
@@ -133,6 +134,7 @@ public PercolateContext(PercolateShardRequest request, SearchShardTarget searchS
         this.scriptService = scriptService;
         this.numberOfShards = request.getNumberOfShards();
         this.aliasFilter = aliasFilter;
+        this.startTime = request.getStartTime();
     }
 
     public IndexSearcher docSearcher() {
@@ -337,7 +339,7 @@ public SearchContext queryBoost(float queryBoost) {
 
     @Override
     protected long nowInMillisImpl() {
-        throw new UnsupportedOperationException();
+        return startTime;
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
index 41a2a0b5412c..b035f3fb8b06 100644
--- a/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
+++ b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
@@ -180,6 +180,7 @@ public PercolateShardResponse percolate(PercolateShardRequest request) {
         final PercolateContext context = new PercolateContext(
                 request, searchShardTarget, indexShard, percolateIndexService, pageCacheRecycler, bigArrays, scriptService, aliasFilter, parseFieldMatcher
         );
+        SearchContext.setCurrent(context);
         try {
             ParsedDocument parsedDocument = parseRequest(percolateIndexService, request, context);
             if (context.percolateQueries().isEmpty()) {
@@ -235,6 +236,7 @@ public PercolateShardResponse percolate(PercolateShardRequest request) {
             percolatorIndex.prepare(context, parsedDocument);
             return action.doPercolate(request, context, isNested);
         } finally {
+            SearchContext.removeCurrent();
             context.close();
             shardPercolateService.postPercolate(System.nanoTime() - startTime);
         }
@@ -258,7 +260,6 @@ private ParsedDocument parseRequest(IndexService documentIndexService, Percolate
         // not the in memory percolate doc
         String[] previousTypes = context.types();
         context.types(new String[]{TYPE_NAME});
-        SearchContext.setCurrent(context);
         try {
             parser = XContentFactory.xContent(source).createParser(source);
             String currentFieldName = null;
@@ -359,7 +360,6 @@ private ParsedDocument parseRequest(IndexService documentIndexService, Percolate
             throw new ElasticsearchParseException("failed to parse request", e);
         } finally {
             context.types(previousTypes);
-            SearchContext.removeCurrent();
             if (parser != null) {
                 parser.close();
             }
diff --git a/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java b/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java
index 91fd2af3bd1a..46144a0b39fc 100644
--- a/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java
+++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorTests.java
@@ -2079,5 +2079,21 @@ public void testPercolateDocumentWithParentField() throws Exception {
         assertThat(response.getMatches()[0].getId().string(), equalTo("1"));
     }
 
+    @Test
+    public void testFilterByNow() throws Exception {
+        client().prepareIndex("index", PercolatorService.TYPE_NAME, "1")
+                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("created", "2015-07-10T14:41:54+0000").endObject())
+                .get();
+        refresh();
+
+        PercolateResponse response = client().preparePercolate()
+                .setIndices("index")
+                .setDocumentType("type")
+                .setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc("{}"))
+                .setPercolateQuery(rangeQuery("created").lte("now"))
+                .get();
+        assertMatchCount(response, 1);
+    }
+
 }
 
