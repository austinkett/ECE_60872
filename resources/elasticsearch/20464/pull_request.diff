diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java
index ce90858f49a9..afe6ca4797e9 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/CommonStats.java
@@ -97,14 +97,15 @@
     @Nullable
     public RecoveryStats recoveryStats;
 
+    private CommonStatsFlags flags;
+
     public CommonStats() {
         this(CommonStatsFlags.NONE);
     }
 
     public CommonStats(CommonStatsFlags flags) {
-        CommonStatsFlags.Flag[] setFlags = flags.getFlags();
-
-        for (CommonStatsFlags.Flag flag : setFlags) {
+        this.flags = flags;
+        for (CommonStatsFlags.Flag flag : flags.getFlags()) {
             switch (flag) {
                 case Docs:
                     docs = new DocsStats();
@@ -164,8 +165,8 @@ public CommonStats(CommonStatsFlags flags) {
     }
 
     public CommonStats(IndicesQueryCache indicesQueryCache, IndexShard indexShard, CommonStatsFlags flags) {
-        CommonStatsFlags.Flag[] setFlags = flags.getFlags();
-        for (CommonStatsFlags.Flag flag : setFlags) {
+        this.flags = flags;
+        for (CommonStatsFlags.Flag flag : flags.getFlags()) {
             switch (flag) {
                 case Docs:
                     docs = indexShard.docStats();
@@ -225,6 +226,7 @@ public CommonStats(IndicesQueryCache indicesQueryCache, IndexShard indexShard, C
     }
 
     public CommonStats(StreamInput in) throws IOException {
+        flags = new CommonStatsFlags(in);
         if (in.readBoolean()) {
             docs = DocsStats.readDocStats(in);
         }
@@ -271,6 +273,7 @@ public CommonStats(StreamInput in) throws IOException {
 
     @Override
     public void writeTo(StreamOutput out) throws IOException {
+        flags.writeTo(out);
         if (docs == null) {
             out.writeBoolean(false);
         } else {
@@ -486,6 +489,10 @@ public void add(CommonStats stats) {
         }
     }
 
+    public CommonStatsFlags getFlags() {
+        return this.flags;
+    }
+
     @Nullable
     public DocsStats getDocs() {
         return this.docs;
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexShardStats.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexShardStats.java
index dd4cc640a3d7..5377b1cbcdb3 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexShardStats.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexShardStats.java
@@ -36,11 +36,14 @@
 
     private ShardStats[] shards;
 
+    private CommonStatsFlags flags;
+
     private IndexShardStats() {}
 
-    public IndexShardStats(ShardId shardId, ShardStats[] shards) {
+    public IndexShardStats(ShardId shardId, CommonStatsFlags flags, ShardStats[] shards) {
         this.shardId = shardId;
         this.shards = shards;
+        this.flags = flags;
     }
 
     public ShardId getShardId() {
@@ -63,31 +66,19 @@ public ShardStats getAt(int position) {
     private CommonStats total = null;
 
     public CommonStats getTotal() {
-        if (total != null) {
-            return total;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            stats.add(shard.getStats());
+        if (total == null) {
+            total = ShardStats.calculateTotalStats(shards, flags);
         }
-        total = stats;
-        return stats;
+        return total;
     }
 
     private CommonStats primary = null;
 
     public CommonStats getPrimary() {
-        if (primary != null) {
-            return primary;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            if (shard.getShardRouting().primary()) {
-                stats.add(shard.getStats());
-            }
+        if (primary == null) {
+            primary = ShardStats.calculatePrimaryStats(shards, flags);
         }
-        primary = stats;
-        return stats;
+        return primary;
     }
 
     @Override
@@ -98,6 +89,7 @@ public void readFrom(StreamInput in) throws IOException {
         for (int i = 0; i < shardSize; i++) {
             shards[i] = ShardStats.readShardStats(in);
         }
+        flags = new CommonStatsFlags(in);
     }
 
     @Override
@@ -107,6 +99,7 @@ public void writeTo(StreamOutput out) throws IOException {
         for (ShardStats stats : shards) {
             stats.writeTo(out);
         }
+        flags.writeTo(out);
     }
 
     public static IndexShardStats readIndexShardStats(StreamInput in) throws IOException {
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexStats.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexStats.java
index f13b714c2842..ff77266d1267 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexStats.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndexStats.java
@@ -33,9 +33,27 @@
 
     private final ShardStats shards[];
 
-    public IndexStats(String index, ShardStats[] shards) {
+    private final CommonStats total;
+
+    private final CommonStats primary;
+
+    private final Map<Integer, IndexShardStats> indexShards;
+
+    public IndexStats(String index, CommonStatsFlags flags, ShardStats[] shards) {
         this.index = index;
         this.shards = shards;
+        this.total = ShardStats.calculateTotalStats(shards, flags);
+        this.primary = ShardStats.calculatePrimaryStats(shards, flags);
+        Map<Integer, List<ShardStats>> tmpIndexShards = new HashMap<>();
+        for (ShardStats shard : shards) {
+            List<ShardStats> shardStatList = tmpIndexShards.computeIfAbsent(shard.getShardRouting().id(), integer -> new ArrayList<>());
+            shardStatList.add(shard);
+        }
+        Map<Integer, IndexShardStats> indexShardList = new HashMap<>();
+        for (Map.Entry<Integer, List<ShardStats>> entry : tmpIndexShards.entrySet()) {
+            indexShardList.put(entry.getKey(), new IndexShardStats(entry.getValue().get(0).getShardRouting().shardId(), flags, entry.getValue().toArray(new ShardStats[entry.getValue().size()])));
+        }
+        indexShards = indexShardList;
     }
 
     public String getIndex() {
@@ -46,25 +64,8 @@ public String getIndex() {
         return this.shards;
     }
 
-    private Map<Integer, IndexShardStats> indexShards;
 
     public Map<Integer, IndexShardStats> getIndexShards() {
-        if (indexShards != null) {
-            return indexShards;
-        }
-        Map<Integer, List<ShardStats>> tmpIndexShards = new HashMap<>();
-        for (ShardStats shard : shards) {
-            List<ShardStats> lst = tmpIndexShards.get(shard.getShardRouting().id());
-            if (lst == null) {
-                lst = new ArrayList<>();
-                tmpIndexShards.put(shard.getShardRouting().id(), lst);
-            }
-            lst.add(shard);
-        }
-        indexShards = new HashMap<>();
-        for (Map.Entry<Integer, List<ShardStats>> entry : tmpIndexShards.entrySet()) {
-            indexShards.put(entry.getKey(), new IndexShardStats(entry.getValue().get(0).getShardRouting().shardId(), entry.getValue().toArray(new ShardStats[entry.getValue().size()])));
-        }
         return indexShards;
     }
 
@@ -73,33 +74,12 @@ public String getIndex() {
         return getIndexShards().values().iterator();
     }
 
-    private CommonStats total = null;
 
     public CommonStats getTotal() {
-        if (total != null) {
-            return total;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            stats.add(shard.getStats());
-        }
-        total = stats;
-        return stats;
+        return total;
     }
 
-    private CommonStats primary = null;
-
     public CommonStats getPrimaries() {
-        if (primary != null) {
-            return primary;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            if (shard.getShardRouting().primary()) {
-                stats.add(shard.getStats());
-            }
-        }
-        primary = stats;
-        return stats;
+        return primary;
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java
index e4357f7ba126..0ba97761e2b7 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsRequest.java
@@ -265,6 +265,10 @@ public IndicesStatsRequest includeSegmentFileSizes(boolean includeSegmentFileSiz
         return this;
     }
 
+    protected CommonStatsFlags getFlags() {
+        return flags;
+    }
+
     @Override
     public void writeTo(StreamOutput out) throws IOException {
         super.writeTo(out);
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
index 2caa0da95694..85a4cc2bbb2e 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
@@ -46,13 +46,16 @@
 
     private Map<ShardRouting, ShardStats> shardStatsMap;
 
+    private CommonStatsFlags flags;
+
     IndicesStatsResponse() {
 
     }
 
-    IndicesStatsResponse(ShardStats[] shards, int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures) {
+    IndicesStatsResponse(CommonStatsFlags flags, ShardStats[] shards, int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures) {
         super(totalShards, successfulShards, failedShards, shardFailures);
         this.shards = shards;
+        this.flags = flags;
     }
 
     public Map<ShardRouting, ShardStats> asMap() {
@@ -98,7 +101,7 @@ public IndexStats getIndex(String index) {
                     shards.add(shard);
                 }
             }
-            indicesStats.put(indexName, new IndexStats(indexName, shards.toArray(new ShardStats[shards.size()])));
+            indicesStats.put(indexName, new IndexStats(indexName, flags, shards.toArray(new ShardStats[shards.size()])));
         }
         this.indicesStats = indicesStats;
         return indicesStats;
@@ -107,31 +110,19 @@ public IndexStats getIndex(String index) {
     private CommonStats total = null;
 
     public CommonStats getTotal() {
-        if (total != null) {
-            return total;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            stats.add(shard.getStats());
+        if (total == null) {
+            total = ShardStats.calculateTotalStats(shards, flags);
         }
-        total = stats;
-        return stats;
+        return total;
     }
 
     private CommonStats primary = null;
 
     public CommonStats getPrimaries() {
-        if (primary != null) {
-            return primary;
-        }
-        CommonStats stats = new CommonStats();
-        for (ShardStats shard : shards) {
-            if (shard.getShardRouting().primary()) {
-                stats.add(shard.getStats());
-            }
+        if (primary == null) {
+            primary = ShardStats.calculatePrimaryStats(shards, flags);
         }
-        primary = stats;
-        return stats;
+        return primary;
     }
 
     @Override
@@ -141,6 +132,7 @@ public void readFrom(StreamInput in) throws IOException {
         for (int i = 0; i < shards.length; i++) {
             shards[i] = ShardStats.readShardStats(in);
         }
+        flags = new CommonStatsFlags(in);
     }
 
     @Override
@@ -150,6 +142,7 @@ public void writeTo(StreamOutput out) throws IOException {
         for (ShardStats shard : shards) {
             shard.writeTo(out);
         }
+        flags.writeTo(out);
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
index 5bc6ce810645..cd1a89a3dc3b 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
@@ -54,6 +54,30 @@ public ShardStats(ShardRouting routing, ShardPath shardPath, CommonStats commonS
         this.commonStats = commonStats;
     }
 
+    /** calculates primary stats for shard stats */
+    static CommonStats calculatePrimaryStats(ShardStats[] shards, CommonStatsFlags flags) {
+        CommonStats primaryStats = new CommonStats();
+        boolean primaryFound = false;
+        for (ShardStats shard : shards) {
+            if (shard.getShardRouting().primary()) {
+                primaryStats.add(shard.getStats());
+                primaryFound = true;
+            }
+        }
+        return primaryFound ? primaryStats : new CommonStats(flags);
+    }
+
+    /** calculates total stats for shard stats */
+    static CommonStats calculateTotalStats(ShardStats[] shards, CommonStatsFlags flags) {
+        CommonStats totalStats = new CommonStats();
+        boolean shardFound = false;
+        for (ShardStats shard : shards) {
+            totalStats.add(shard.getStats());
+            shardFound = true;
+        }
+        return shardFound ? totalStats : new CommonStats(flags);
+    }
+
     /**
      * The shard routing information (cluster wide shard state).
      */
diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
index 7e8ccd30a8aa..500a1d01b82a 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
@@ -82,7 +82,7 @@ protected ShardStats readShardResult(StreamInput in) throws IOException {
 
     @Override
     protected IndicesStatsResponse newResponse(IndicesStatsRequest request, int totalShards, int successfulShards, int failedShards, List<ShardStats> responses, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) {
-        return new IndicesStatsResponse(responses.toArray(new ShardStats[responses.size()]), totalShards, successfulShards, failedShards, shardFailures);
+        return new IndicesStatsResponse(request.getFlags(), responses.toArray(new ShardStats[responses.size()]), totalShards, successfulShards, failedShards, shardFailures);
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/index/engine/CommitStats.java b/core/src/main/java/org/elasticsearch/index/engine/CommitStats.java
index 48fb8a80eeb8..2aeb3dc1463d 100644
--- a/core/src/main/java/org/elasticsearch/index/engine/CommitStats.java
+++ b/core/src/main/java/org/elasticsearch/index/engine/CommitStats.java
@@ -52,17 +52,10 @@ private CommitStats() {
 
     }
 
-    public static CommitStats readCommitStatsFrom(StreamInput in) throws IOException {
-        CommitStats commitStats = new CommitStats();
-        commitStats.readFrom(in);
-        return commitStats;
-    }
-
     public static CommitStats readOptionalCommitStatsFrom(StreamInput in) throws IOException {
         return in.readOptionalStreamable(CommitStats::new);
     }
 
-
     public Map<String, String> getUserData() {
         return userData;
     }
diff --git a/core/src/main/java/org/elasticsearch/indices/IndicesService.java b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
index abc9873efaf8..e1d5892bb6ed 100644
--- a/core/src/main/java/org/elasticsearch/indices/IndicesService.java
+++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
@@ -290,7 +290,8 @@ public NodeIndicesStats stats(boolean includePrevious, CommonStatsFlags flags) {
                     if (indexShard.routingEntry() == null) {
                         continue;
                     }
-                    IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats()) });
+                    IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), flags,
+                            new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats()) });
                     if (!statsByShard.containsKey(indexService.index())) {
                         statsByShard.put(indexService.index(), arrayAsArrayList(indexShardStats));
                     } else {
diff --git a/core/src/main/java/org/elasticsearch/indices/NodeIndicesStats.java b/core/src/main/java/org/elasticsearch/indices/NodeIndicesStats.java
index 6c251d3bf1ce..c8aef4fb00e5 100644
--- a/core/src/main/java/org/elasticsearch/indices/NodeIndicesStats.java
+++ b/core/src/main/java/org/elasticsearch/indices/NodeIndicesStats.java
@@ -230,17 +230,13 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
     private Map<Index, CommonStats> createStatsByIndex() {
         Map<Index, CommonStats> statsMap = new HashMap<>();
         for (Map.Entry<Index, List<IndexShardStats>> entry : statsByShard.entrySet()) {
-            if (!statsMap.containsKey(entry.getKey())) {
-                statsMap.put(entry.getKey(), new CommonStats());
-            }
-
+            CommonStats indexStats = statsMap.computeIfAbsent(entry.getKey(), index -> new CommonStats());
             for (IndexShardStats indexShardStats : entry.getValue()) {
                 for (ShardStats shardStats : indexShardStats.getShards()) {
-                    statsMap.get(entry.getKey()).add(shardStats.getStats());
+                    indexStats.add(shardStats.getStats());
                 }
             }
         }
-
         return statsMap;
     }
 
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsTests.java b/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsTests.java
index dfc10169e709..bb82e57a039b 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsTests.java
@@ -114,9 +114,9 @@ public void testCommitStats() throws Exception {
     /**
      * Gives access to package private IndicesStatsResponse constructor for test purpose.
      **/
-    public static IndicesStatsResponse newIndicesStatsResponse(ShardStats[] shards, int totalShards, int successfulShards,
+    public static IndicesStatsResponse newIndicesStatsResponse(CommonStatsFlags flags, ShardStats[] shards, int totalShards, int successfulShards,
                                                                int failedShards, List<ShardOperationFailedException> shardFailures) {
-        return new IndicesStatsResponse(shards, totalShards, successfulShards, failedShards, shardFailures);
+        return new IndicesStatsResponse(flags, shards, totalShards, successfulShards, failedShards, shardFailures);
     }
 
 }
diff --git a/core/src/test/java/org/elasticsearch/rest/action/cat/RestIndicesActionTests.java b/core/src/test/java/org/elasticsearch/rest/action/cat/RestIndicesActionTests.java
index abaefcf438ed..ce8986c29ed0 100644
--- a/core/src/test/java/org/elasticsearch/rest/action/cat/RestIndicesActionTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/action/cat/RestIndicesActionTests.java
@@ -22,6 +22,7 @@
 import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;
 import org.elasticsearch.action.admin.indices.stats.CommonStats;
+import org.elasticsearch.action.admin.indices.stats.CommonStatsFlags;
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsTests;
 import org.elasticsearch.action.admin.indices.stats.ShardStats;
@@ -143,25 +144,28 @@ private IndicesStatsResponse randomIndicesStatsResponse(final Index[] indices) {
                     );
                 shardRouting = shardRouting.initialize("node-0", null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);
                 shardRouting = shardRouting.moveToStarted();
-                CommonStats stats = new CommonStats();
-                stats.fieldData = new FieldDataStats();
-                stats.queryCache = new QueryCacheStats();
-                stats.docs = new DocsStats();
-                stats.store = new StoreStats();
-                stats.indexing = new IndexingStats();
-                stats.search = new SearchStats();
-                stats.segments = new SegmentsStats();
-                stats.merge = new MergeStats();
-                stats.refresh = new RefreshStats();
-                stats.completion = new CompletionStats();
-                stats.requestCache = new RequestCacheStats();
-                stats.get = new GetStats();
-                stats.flush = new FlushStats();
-                stats.warmer = new WarmerStats();
+                CommonStats stats = new CommonStats(CommonStatsFlags.ALL);
+                // rarely none of the stats fields would be initialized due to the index missing all shards for reporting stats
+                if (frequently()) {
+                    stats.fieldData = new FieldDataStats();
+                    stats.queryCache = new QueryCacheStats();
+                    stats.docs = new DocsStats();
+                    stats.store = new StoreStats();
+                    stats.indexing = new IndexingStats();
+                    stats.search = new SearchStats();
+                    stats.segments = new SegmentsStats();
+                    stats.merge = new MergeStats();
+                    stats.refresh = new RefreshStats();
+                    stats.completion = new CompletionStats();
+                    stats.requestCache = new RequestCacheStats();
+                    stats.get = new GetStats();
+                    stats.flush = new FlushStats();
+                    stats.warmer = new WarmerStats();
+                }
                 shardStats.add(new ShardStats(shardRouting, new ShardPath(false, path, path, shardId), stats, null));
             }
         }
-        return IndicesStatsTests.newIndicesStatsResponse(
+        return IndicesStatsTests.newIndicesStatsResponse(CommonStatsFlags.ALL,
             shardStats.toArray(new ShardStats[shardStats.size()]), shardStats.size(), shardStats.size(), 0, emptyList()
         );
     }
