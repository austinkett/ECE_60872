diff --git a/server/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java b/server/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
index 667e91b21523..365fd818de6e 100644
--- a/server/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
@@ -174,7 +174,7 @@ public SimpleQueryStringBuilder(StreamInput in) throws IOException {
             in.readBoolean(); // lowercase_expanded_terms
         }
         settings.lenient(in.readBoolean());
-        if (in.getVersion().onOrAfter(Version.V_5_1_1)) {
+        if (in.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {
             this.lenientSet = in.readBoolean();
         }
         settings.analyzeWildcard(in.readBoolean());
@@ -214,7 +214,7 @@ protected void doWriteTo(StreamOutput out) throws IOException {
             out.writeBoolean(true); // lowercase_expanded_terms
         }
         out.writeBoolean(settings.lenient());
-        if (out.getVersion().onOrAfter(Version.V_5_1_1)) {
+        if (out.getVersion().onOrAfter(Version.V_6_0_0_alpha1)) {
             out.writeBoolean(lenientSet);
         }
         out.writeBoolean(settings.analyzeWildcard());
diff --git a/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
index 6cbfb79452f9..00c0bac84f77 100644
--- a/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
+++ b/server/src/test/java/org/elasticsearch/index/query/SimpleQueryStringBuilderTests.java
@@ -41,15 +41,20 @@
 import org.apache.lucene.util.TestUtil;
 import org.elasticsearch.Version;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
+import org.elasticsearch.common.io.stream.BytesStreamOutput;
+import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;
+import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.lucene.all.AllTermQuery;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.search.SimpleQueryStringQueryParser;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.AbstractQueryTestCase;
+import org.elasticsearch.test.VersionUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Base64;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -754,4 +759,31 @@ private static IndexMetaData newIndexMeta(String name, Settings oldIndexSettings
             .build();
         return IndexMetaData.builder(name).settings(build).build();
     }
+
+    public void testSerializationRandomVersion() throws IOException {
+        SimpleQueryStringBuilder queryBuilder = new SimpleQueryStringBuilder("query").field("field");
+        Version version = VersionUtils.randomVersion(random());
+        try (BytesStreamOutput out = new BytesStreamOutput()) {
+            out.setVersion(version);
+            queryBuilder.writeTo(out);
+            try (StreamInput in = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), namedWriteableRegistry())) {
+                in.setVersion(version);
+                SimpleQueryStringBuilder deserializedQuery = new SimpleQueryStringBuilder(in);
+                assertNotSame(queryBuilder, deserializedQuery);
+                assertEquals("query", deserializedQuery.value());
+                assertEquals(1, deserializedQuery.fields().size());
+                assertEquals("field", deserializedQuery.fields().keySet().iterator().next());
+            }
+        }
+    }
+
+    public void testReadFrom_5_6() throws IOException {
+        String encodedQuery = "P4AAAAAFcXVlcnkAAAAA/////wAAAAAAAAIAAAAAAAA=";
+        byte[] bytes = Base64.getDecoder().decode(encodedQuery);
+        try (StreamInput in = StreamInput.wrap(bytes)) {
+            in.setVersion(Version.V_5_6_14);
+            SimpleQueryStringBuilder query = new SimpleQueryStringBuilder(in);
+            assertEquals("query", query.value());
+        }
+    }
 }
