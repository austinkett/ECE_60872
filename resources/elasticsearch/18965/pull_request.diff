diff --git a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
index cbeacf631595..568ebe9f8d63 100644
--- a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
@@ -267,20 +267,24 @@ public ClusterState execute(ClusterState currentState) throws Exception {
                     }
                     // now, put the request settings, so they override templates
                     indexSettingsBuilder.put(request.settings());
+                    int defaultNumberOfShards;
+                    int defaultNumberOfReplicas;
                     if (request.index().equals(ScriptService.SCRIPT_INDEX)) {
-                        indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, settings.getAsInt(SETTING_NUMBER_OF_SHARDS, 1));
+                        defaultNumberOfShards = 1;
+                        defaultNumberOfReplicas = 0;
                     } else {
-                        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_SHARDS) == null) {
-                            indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, settings.getAsInt(SETTING_NUMBER_OF_SHARDS, 5));
-                        }
+                        defaultNumberOfShards = 5;
+                        defaultNumberOfReplicas = 1;
                     }
-                    if (request.index().equals(ScriptService.SCRIPT_INDEX)) {
-                        indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS, settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, 0));
+                    if (request.index().equals(ScriptService.SCRIPT_INDEX) && indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {
+                        // For .script index it only make sense to set auto expand replicas if number of replicas hasn't been set:
                         indexSettingsBuilder.put(SETTING_AUTO_EXPAND_REPLICAS, "0-all");
-                    } else {
-                        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {
-                            indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS, settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, 1));
-                        }
+                    }
+                    if (indexSettingsBuilder.get(SETTING_NUMBER_OF_SHARDS) == null) {
+                        indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS, settings.getAsInt(SETTING_NUMBER_OF_SHARDS, defaultNumberOfShards));
+                    }
+                    if (indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {
+                        indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS, settings.getAsInt(SETTING_NUMBER_OF_REPLICAS, defaultNumberOfReplicas));
                     }
 
                     if (settings.get(SETTING_AUTO_EXPAND_REPLICAS) != null && indexSettingsBuilder.get(SETTING_AUTO_EXPAND_REPLICAS) == null) {
diff --git a/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
index f2a7566e7d94..4f265a6a0775 100644
--- a/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
+++ b/modules/lang-groovy/src/test/java/org/elasticsearch/messy/tests/ScriptIndexSettingsTests.java
@@ -26,6 +26,8 @@
 import org.elasticsearch.action.indexedscripts.get.GetIndexedScriptResponse;
 import org.elasticsearch.action.indexedscripts.put.PutIndexedScriptResponse;
 import org.elasticsearch.action.support.IndicesOptions;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.script.ScriptService;
@@ -33,9 +35,13 @@
 import org.elasticsearch.test.ESIntegTestCase;
 import org.junit.Test;
 
+import java.io.IOException;
 import java.util.Collection;
 import java.util.Collections;
 
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.nullValue;
+
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST)
 public class ScriptIndexSettingsTests extends ESIntegTestCase {
 
@@ -44,6 +50,19 @@
         return pluginList(GroovyPlugin.class);
     }
 
+    @Override
+    public void randomIndexTemplate() throws IOException {
+        // don't set random index template, because we are testing here what happens if no custom settings have been
+        // specified
+    }
+
+    @Override
+    public Settings indexSettings() {
+        // don't set random index settings, because we are testing here what happens if no custom settings have been
+        // specified
+        return Settings.EMPTY;
+    }
+
     @Test
     public void testScriptIndexSettings() {
         PutIndexedScriptResponse putIndexedScriptResponse =
@@ -77,6 +96,27 @@ public void testScriptIndexSettings() {
         assertEquals("Auto expand replicas should be 0-all", "0-all", numberOfReplicas);
     }
 
+    @Test
+    public void testScriptIndexDefaults() {
+        createIndex(ScriptService.SCRIPT_INDEX);
+        IndexMetaData indexMetaData = client().admin().cluster().prepareState().get()
+                .getState().getMetaData().index(ScriptService.SCRIPT_INDEX);
+        assertThat(indexMetaData.getNumberOfShards(), equalTo(1));
+        assertThat(indexMetaData.getNumberOfReplicas(), equalTo(0));
+        assertThat(indexMetaData.getSettings().get("index.auto_expand_replicas"), equalTo("0-all"));
+
+        client().admin().indices().prepareDelete(ScriptService.SCRIPT_INDEX).get();
+        client().admin().indices().prepareCreate(ScriptService.SCRIPT_INDEX)
+                .setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 3)
+                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 2))
+                .get();
+        indexMetaData = client().admin().cluster().prepareState().get()
+                .getState().getMetaData().index(ScriptService.SCRIPT_INDEX);
+        assertThat(indexMetaData.getNumberOfShards(), equalTo(3));
+        assertThat(indexMetaData.getNumberOfReplicas(), equalTo(2));
+        assertThat(indexMetaData.getSettings().get("index.auto_expand_replicas"), nullValue());
+    }
+
     @Test
     public void testDeleteScriptIndex() {
         PutIndexedScriptResponse putIndexedScriptResponse =
