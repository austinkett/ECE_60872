diff --git a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java
index b7934da00e96..c0b3f1e0fb78 100644
--- a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java
+++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/Netty3HttpServerTransport.java
@@ -45,13 +45,11 @@
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.http.HttpStats;
 import org.elasticsearch.http.netty3.cors.Netty3CorsConfig;
-import org.elasticsearch.http.netty3.cors.Netty3CorsConfigBuilder;
 import org.elasticsearch.http.netty3.cors.Netty3CorsHandler;
 import org.elasticsearch.http.netty3.pipelining.HttpPipeliningHandler;
 import org.elasticsearch.monitor.jvm.JvmInfo;
 import org.elasticsearch.rest.RestChannel;
 import org.elasticsearch.rest.RestRequest;
-import org.elasticsearch.rest.RestUtils;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.BindTransportException;
 import org.elasticsearch.transport.netty3.Netty3OpenChannelsHandler;
@@ -71,7 +69,6 @@
 import org.jboss.netty.handler.codec.http.HttpChunkAggregator;
 import org.jboss.netty.handler.codec.http.HttpContentCompressor;
 import org.jboss.netty.handler.codec.http.HttpContentDecompressor;
-import org.jboss.netty.handler.codec.http.HttpMethod;
 import org.jboss.netty.handler.codec.http.HttpRequestDecoder;
 import org.jboss.netty.handler.timeout.ReadTimeoutException;
 
@@ -81,21 +78,13 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import java.util.Set;
 import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 import static org.elasticsearch.common.settings.Setting.boolSetting;
 import static org.elasticsearch.common.settings.Setting.byteSizeSetting;
 import static org.elasticsearch.common.util.concurrent.EsExecutors.daemonThreadFactory;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_CREDENTIALS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_MAX_AGE;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_BIND_HOST;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_COMPRESSION;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_COMPRESSION_LEVEL;
@@ -110,7 +99,6 @@
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_RESET_COOKIES;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_PIPELINING;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_PIPELINING_MAX_EVENTS;
-import static org.elasticsearch.http.netty3.cors.Netty3CorsHandler.ANY_ORIGIN;
 
 public class Netty3HttpServerTransport extends AbstractLifecycleComponent implements HttpServerTransport {
 
@@ -257,7 +245,7 @@ public Netty3HttpServerTransport(Settings settings, NetworkService networkServic
         this.compressionLevel = SETTING_HTTP_COMPRESSION_LEVEL.get(settings);
         this.pipelining = SETTING_PIPELINING.get(settings);
         this.pipeliningMaxEvents = SETTING_PIPELINING_MAX_EVENTS.get(settings);
-        this.corsConfig = buildCorsConfig(settings);
+        this.corsConfig = Netty3CorsConfig.buildCorsConfig(settings);
 
         // validate max content length
         if (maxContentLength.bytes() > Integer.MAX_VALUE) {
@@ -371,35 +359,6 @@ static int resolvePublishPort(Settings settings, List<InetSocketTransportAddress
         return publishPort;
     }
 
-    private Netty3CorsConfig buildCorsConfig(Settings settings) {
-        if (SETTING_CORS_ENABLED.get(settings) == false) {
-            return Netty3CorsConfigBuilder.forOrigins().disable().build();
-        }
-        String origin = SETTING_CORS_ALLOW_ORIGIN.get(settings);
-        final Netty3CorsConfigBuilder builder;
-        if (Strings.isNullOrEmpty(origin)) {
-            builder = Netty3CorsConfigBuilder.forOrigins();
-        } else if (origin.equals(ANY_ORIGIN)) {
-            builder = Netty3CorsConfigBuilder.forAnyOrigin();
-        } else {
-            Pattern p = RestUtils.checkCorsSettingForRegex(origin);
-            if (p == null) {
-                builder = Netty3CorsConfigBuilder.forOrigins(RestUtils.corsSettingAsArray(origin));
-            } else {
-                builder = Netty3CorsConfigBuilder.forPattern(p);
-            }
-        }
-        if (SETTING_CORS_ALLOW_CREDENTIALS.get(settings)) {
-            builder.allowCredentials();
-        }
-        Set<String> strMethods = Strings.splitStringByCommaToSet(SETTING_CORS_ALLOW_METHODS.get(settings));
-        return builder.allowedRequestMethods(strMethods.stream().map(HttpMethod::valueOf).collect(Collectors.toSet()))
-                      .maxAge(SETTING_CORS_MAX_AGE.get(settings))
-                      .allowedRequestHeaders(Strings.splitStringByCommaToSet(SETTING_CORS_ALLOW_HEADERS.get(settings)))
-                      .shortCircuit()
-                      .build();
-    }
-
     private InetSocketTransportAddress bindAddress(final InetAddress hostAddress) {
         final AtomicReference<Exception> lastException = new AtomicReference<>();
         final AtomicReference<InetSocketAddress> boundSocket = new AtomicReference<>();
diff --git a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsConfig.java b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsConfig.java
index 796dfa93a115..68a7519e9ed4 100644
--- a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsConfig.java
+++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsConfig.java
@@ -19,6 +19,9 @@
 
 package org.elasticsearch.http.netty3.cors;
 
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.rest.RestUtils;
 import org.jboss.netty.handler.codec.http.DefaultHttpHeaders;
 import org.jboss.netty.handler.codec.http.HttpHeaders;
 import org.jboss.netty.handler.codec.http.HttpMethod;
@@ -30,6 +33,15 @@
 import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_CREDENTIALS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_MAX_AGE;
+import static org.elasticsearch.http.netty3.cors.Netty3CorsHandler.ANY_ORIGIN;
 
 /**
  * Configuration for Cross-Origin Resource Sharing (CORS).
@@ -219,6 +231,38 @@ public boolean isShortCircuit() {
         }
     }
 
+    /**
+     * Build a {@link Netty3CorsConfig} from the given settings.
+     */
+    public static Netty3CorsConfig buildCorsConfig(Settings settings) {
+        if (SETTING_CORS_ENABLED.get(settings) == false) {
+            return Netty3CorsConfigBuilder.forOrigins().disable().build();
+        }
+        String origin = SETTING_CORS_ALLOW_ORIGIN.get(settings);
+        final Netty3CorsConfigBuilder builder;
+        if (Strings.isNullOrEmpty(origin)) {
+            builder = Netty3CorsConfigBuilder.forOrigins();
+        } else if (origin.equals(ANY_ORIGIN)) {
+            builder = Netty3CorsConfigBuilder.forAnyOrigin();
+        } else {
+            Pattern p = RestUtils.checkCorsSettingForRegex(origin);
+            if (p == null) {
+                builder = Netty3CorsConfigBuilder.forOrigins(RestUtils.corsSettingAsArray(origin));
+            } else {
+                builder = Netty3CorsConfigBuilder.forPattern(p);
+            }
+        }
+        if (SETTING_CORS_ALLOW_CREDENTIALS.get(settings)) {
+            builder.allowCredentials();
+        }
+        Set<String> strMethods = Strings.splitStringByCommaToSet(SETTING_CORS_ALLOW_METHODS.get(settings));
+        return builder.allowedRequestMethods(strMethods.stream().map(HttpMethod::valueOf).collect(Collectors.toSet()))
+                   .maxAge(SETTING_CORS_MAX_AGE.get(settings))
+                   .allowedRequestHeaders(Strings.splitStringByCommaToSet(SETTING_CORS_ALLOW_HEADERS.get(settings)))
+                   .shortCircuit()
+                   .build();
+    }
+
     @Override
     public String toString() {
         return  "CorsConfig[enabled=" + enabled +
diff --git a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandler.java b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandler.java
index d051e0081c6c..62e150accf32 100644
--- a/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandler.java
+++ b/modules/transport-netty3/src/main/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandler.java
@@ -58,7 +58,6 @@
     private static Pattern SCHEME_PATTERN = Pattern.compile("^https?://");
 
     private final Netty3CorsConfig config;
-    private HttpRequest request;
 
     /**
      * Creates a new instance with the specified {@link Netty3CorsConfig}.
@@ -73,12 +72,12 @@ public Netty3CorsHandler(final Netty3CorsConfig config) {
     @Override
     public void messageReceived(final ChannelHandlerContext ctx, final MessageEvent e) throws Exception {
         if (config.isCorsSupportEnabled() && e.getMessage() instanceof HttpRequest) {
-            request = (HttpRequest) e.getMessage();
+            final HttpRequest request = (HttpRequest) e.getMessage();
             if (isPreflightRequest(request)) {
                 handlePreflight(ctx, request);
                 return;
             }
-            if (config.isShortCircuit() && !validateOrigin()) {
+            if (config.isShortCircuit() && !validateOrigin(request)) {
                 forbidden(ctx, request);
                 return;
             }
@@ -110,16 +109,26 @@ public static void setCorsResponseHeaders(HttpRequest request, HttpResponse resp
     }
 
     private void handlePreflight(final ChannelHandlerContext ctx, final HttpRequest request) {
+        final HttpResponse response = handlePreflight(request);
+        if (response != null) {
+            ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
+        } else {
+            forbidden(ctx, request);
+        }
+    }
+
+    // package private for testing
+    HttpResponse handlePreflight(final HttpRequest request) {
         final HttpResponse response = new DefaultHttpResponse(request.getProtocolVersion(), OK);
-        if (setOrigin(response)) {
+        if (setOrigin(request, response)) {
             setAllowMethods(response);
             setAllowHeaders(response);
             setAllowCredentials(response);
             setMaxAge(response);
             setPreflightHeaders(response);
-            ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
+            return response;
         } else {
-            forbidden(ctx, request);
+            return null;
         }
     }
 
@@ -149,7 +158,7 @@ private void setPreflightHeaders(final HttpResponse response) {
         response.headers().add(config.preflightResponseHeaders());
     }
 
-    private boolean setOrigin(final HttpResponse response) {
+    private boolean setOrigin(final HttpRequest request, final HttpResponse response) {
         final String origin = request.headers().get(ORIGIN);
         if (!Strings.isNullOrEmpty(origin)) {
             if ("null".equals(origin) && config.isNullOriginAllowed()) {
@@ -158,7 +167,7 @@ private boolean setOrigin(final HttpResponse response) {
             }
             if (config.isAnyOriginSupported()) {
                 if (config.isCredentialsAllowed()) {
-                    echoRequestOrigin(response);
+                    echoRequestOrigin(request, response);
                     setVaryHeader(response);
                 } else {
                     setAnyOrigin(response);
@@ -174,7 +183,7 @@ private boolean setOrigin(final HttpResponse response) {
         return false;
     }
 
-    private boolean validateOrigin() {
+    private boolean validateOrigin(final HttpRequest request) {
         if (config.isAnyOriginSupported()) {
             return true;
         }
@@ -197,7 +206,7 @@ private boolean validateOrigin() {
         return config.isOriginAllowed(origin);
     }
 
-    private void echoRequestOrigin(final HttpResponse response) {
+    private static void echoRequestOrigin(final HttpRequest request, final HttpResponse response) {
         setOrigin(response, request.headers().get(ORIGIN));
     }
 
@@ -228,13 +237,13 @@ private static boolean isPreflightRequest(final HttpRequest request) {
     }
 
     private void setAllowMethods(final HttpResponse response) {
-        response.headers().set(ACCESS_CONTROL_ALLOW_METHODS, config.allowedRequestMethods().stream()
-                                          .map(m -> m.getName().trim())
-                                          .collect(Collectors.toList()));
+        response.headers().set(ACCESS_CONTROL_ALLOW_METHODS, Strings.collectionToCommaDelimitedString(
+            config.allowedRequestMethods().stream().map(m -> m.getName().trim()).collect(Collectors.toList()))
+        );
     }
 
     private void setAllowHeaders(final HttpResponse response) {
-        response.headers().set(ACCESS_CONTROL_ALLOW_HEADERS, config.allowedRequestHeaders());
+        response.headers().set(ACCESS_CONTROL_ALLOW_HEADERS, Strings.collectionToCommaDelimitedString(config.allowedRequestHeaders()));
     }
 
     private void setMaxAge(final HttpResponse response) {
diff --git a/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpChannelTests.java b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpChannelTests.java
index ccb8aedd94cf..874165fea19c 100644
--- a/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpChannelTests.java
+++ b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/Netty3HttpChannelTests.java
@@ -370,7 +370,7 @@ public int compareTo(Channel o) {
         }
     }
 
-    private static class TestHttpRequest implements HttpRequest {
+    public static class TestHttpRequest implements HttpRequest {
 
         private HttpHeaders headers = new DefaultHttpHeaders();
 
diff --git a/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandlerTests.java b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandlerTests.java
new file mode 100644
index 000000000000..96c0bff598cb
--- /dev/null
+++ b/modules/transport-netty3/src/test/java/org/elasticsearch/http/netty3/cors/Netty3CorsHandlerTests.java
@@ -0,0 +1,94 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.http.netty3.cors;
+
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.http.netty3.Netty3HttpChannelTests;
+import org.elasticsearch.test.ESTestCase;
+import org.jboss.netty.handler.codec.http.HttpHeaders;
+import org.jboss.netty.handler.codec.http.HttpMethod;
+import org.jboss.netty.handler.codec.http.HttpRequest;
+import org.jboss.netty.handler.codec.http.HttpResponse;
+
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
+
+/**
+ * Tests for {@link Netty3CorsHandler}
+ */
+public class Netty3CorsHandlerTests extends ESTestCase {
+
+    public void testPreflightMultiValueResponseHeaders() {
+        // test when only one value
+        String headersRequestHeader = "content-type";
+        String methodsRequestHeader = "GET";
+        Settings settings = Settings.builder()
+                                .put(SETTING_CORS_ENABLED.getKey(), true)
+                                .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty3CorsHandler.ANY_ORIGIN)
+                                .put(SETTING_CORS_ALLOW_HEADERS.getKey(), headersRequestHeader)
+                                .put(SETTING_CORS_ALLOW_METHODS.getKey(), methodsRequestHeader)
+                                .build();
+        HttpResponse response = execPreflight(settings, Netty3CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(headersRequestHeader, response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS));
+        assertEquals(methodsRequestHeader, response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS));
+
+        // test with a set of values
+        headersRequestHeader = "content-type,x-requested-with,accept";
+        methodsRequestHeader = "GET,POST";
+        settings = Settings.builder()
+                       .put(SETTING_CORS_ENABLED.getKey(), true)
+                       .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty3CorsHandler.ANY_ORIGIN)
+                       .put(SETTING_CORS_ALLOW_HEADERS.getKey(), headersRequestHeader)
+                       .put(SETTING_CORS_ALLOW_METHODS.getKey(), methodsRequestHeader)
+                       .build();
+        response = execPreflight(settings, Netty3CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(Strings.commaDelimitedListToSet(headersRequestHeader),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS)));
+        assertEquals(Strings.commaDelimitedListToSet(methodsRequestHeader),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS)));
+
+        // test with defaults
+        settings = Settings.builder()
+                       .put(SETTING_CORS_ENABLED.getKey(), true)
+                       .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty3CorsHandler.ANY_ORIGIN)
+                       .build();
+        response = execPreflight(settings, Netty3CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(Strings.commaDelimitedListToSet(SETTING_CORS_ALLOW_HEADERS.getDefault(settings)),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS)));
+        assertEquals(Strings.commaDelimitedListToSet(SETTING_CORS_ALLOW_METHODS.getDefault(settings)),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS)));
+    }
+
+    private HttpResponse execPreflight(final Settings settings, final String originValue, final String host) {
+        // simulate execution of a preflight request
+        HttpRequest httpRequest = new Netty3HttpChannelTests.TestHttpRequest();
+        httpRequest.setMethod(HttpMethod.OPTIONS);
+        httpRequest.headers().add(HttpHeaders.Names.ORIGIN, originValue);
+        httpRequest.headers().add(HttpHeaders.Names.HOST, host);
+        httpRequest.headers().add(HttpHeaders.Names.ACCESS_CONTROL_REQUEST_METHOD, "GET");
+
+        Netty3CorsHandler corsHandler = new Netty3CorsHandler(Netty3CorsConfig.buildCorsConfig(settings));
+        return corsHandler.handlePreflight(httpRequest);
+    }
+
+}
diff --git a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java
index 7472d87209e0..bf96d85e281e 100644
--- a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java
+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/Netty4HttpServerTransport.java
@@ -33,13 +33,11 @@
 import io.netty.channel.RecvByteBufAllocator;
 import io.netty.channel.nio.NioEventLoopGroup;
 import io.netty.channel.oio.OioEventLoopGroup;
-import io.netty.channel.socket.SocketChannel;
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.channel.socket.oio.OioServerSocketChannel;
 import io.netty.handler.codec.ByteToMessageDecoder;
 import io.netty.handler.codec.http.HttpContentCompressor;
 import io.netty.handler.codec.http.HttpContentDecompressor;
-import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpRequestDecoder;
 import io.netty.handler.codec.http.HttpResponseEncoder;
@@ -68,13 +66,11 @@
 import org.elasticsearch.http.HttpServerTransport;
 import org.elasticsearch.http.HttpStats;
 import org.elasticsearch.http.netty4.cors.Netty4CorsConfig;
-import org.elasticsearch.http.netty4.cors.Netty4CorsConfigBuilder;
 import org.elasticsearch.http.netty4.cors.Netty4CorsHandler;
 import org.elasticsearch.http.netty4.pipelining.HttpPipeliningHandler;
 import org.elasticsearch.monitor.jvm.JvmInfo;
 import org.elasticsearch.rest.RestChannel;
 import org.elasticsearch.rest.RestRequest;
-import org.elasticsearch.rest.RestUtils;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.BindTransportException;
 import org.elasticsearch.transport.netty4.Netty4OpenChannelsHandler;
@@ -88,17 +84,11 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-import java.util.regex.Pattern;
 
 import static org.elasticsearch.common.settings.Setting.boolSetting;
 import static org.elasticsearch.common.settings.Setting.byteSizeSetting;
 import static org.elasticsearch.common.util.concurrent.EsExecutors.daemonThreadFactory;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_CREDENTIALS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
-import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_MAX_AGE;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_BIND_HOST;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_COMPRESSION;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_COMPRESSION_LEVEL;
@@ -113,7 +103,6 @@
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_HTTP_RESET_COOKIES;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_PIPELINING;
 import static org.elasticsearch.http.HttpTransportSettings.SETTING_PIPELINING_MAX_EVENTS;
-import static org.elasticsearch.http.netty4.cors.Netty4CorsHandler.ANY_ORIGIN;
 
 public class Netty4HttpServerTransport extends AbstractLifecycleComponent implements HttpServerTransport {
 
@@ -261,7 +250,7 @@ public Netty4HttpServerTransport(Settings settings, NetworkService networkServic
         this.compressionLevel = SETTING_HTTP_COMPRESSION_LEVEL.get(settings);
         this.pipelining = SETTING_PIPELINING.get(settings);
         this.pipeliningMaxEvents = SETTING_PIPELINING_MAX_EVENTS.get(settings);
-        this.corsConfig = buildCorsConfig(settings);
+        this.corsConfig = Netty4CorsConfig.buildCorsConfig(settings);
 
         // validate max content length
         if (maxContentLength.bytes() > Integer.MAX_VALUE) {
@@ -382,39 +371,6 @@ static int resolvePublishPort(Settings settings, List<InetSocketTransportAddress
         return publishPort;
     }
 
-    private Netty4CorsConfig buildCorsConfig(Settings settings) {
-        if (SETTING_CORS_ENABLED.get(settings) == false) {
-            return Netty4CorsConfigBuilder.forOrigins().disable().build();
-        }
-        String origin = SETTING_CORS_ALLOW_ORIGIN.get(settings);
-        final Netty4CorsConfigBuilder builder;
-        if (Strings.isNullOrEmpty(origin)) {
-            builder = Netty4CorsConfigBuilder.forOrigins();
-        } else if (origin.equals(ANY_ORIGIN)) {
-            builder = Netty4CorsConfigBuilder.forAnyOrigin();
-        } else {
-            Pattern p = RestUtils.checkCorsSettingForRegex(origin);
-            if (p == null) {
-                builder = Netty4CorsConfigBuilder.forOrigins(RestUtils.corsSettingAsArray(origin));
-            } else {
-                builder = Netty4CorsConfigBuilder.forPattern(p);
-            }
-        }
-        if (SETTING_CORS_ALLOW_CREDENTIALS.get(settings)) {
-            builder.allowCredentials();
-        }
-        String[] strMethods = settings.getAsArray(SETTING_CORS_ALLOW_METHODS.getKey());
-        HttpMethod[] methods = Arrays.asList(strMethods)
-            .stream()
-            .map(HttpMethod::valueOf)
-            .toArray(size -> new HttpMethod[size]);
-        return builder.allowedRequestMethods(methods)
-            .maxAge(SETTING_CORS_MAX_AGE.get(settings))
-            .allowedRequestHeaders(settings.getAsArray(SETTING_CORS_ALLOW_HEADERS.getKey()))
-            .shortCircuit()
-            .build();
-    }
-
     private InetSocketTransportAddress bindAddress(final InetAddress hostAddress) {
         final AtomicReference<Exception> lastException = new AtomicReference<>();
         final AtomicReference<InetSocketAddress> boundSocket = new AtomicReference<>();
diff --git a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsConfig.java b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsConfig.java
index 9c81c07e6631..217da491d385 100644
--- a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsConfig.java
+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsConfig.java
@@ -23,7 +23,11 @@
 import io.netty.handler.codec.http.EmptyHttpHeaders;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.rest.RestUtils;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Map;
@@ -32,6 +36,14 @@
 import java.util.concurrent.Callable;
 import java.util.regex.Pattern;
 
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_CREDENTIALS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_MAX_AGE;
+import static org.elasticsearch.http.netty4.cors.Netty4CorsHandler.ANY_ORIGIN;
+
 /**
  * Configuration for Cross-Origin Resource Sharing (CORS).
  *
@@ -232,4 +244,40 @@ public String toString() {
             ", preflightHeaders=" + preflightHeaders + ']';
     }
 
+    /**
+     * Constructs a {@link Netty4CorsConfig} from the given settings.
+     */
+    public static Netty4CorsConfig buildCorsConfig(Settings settings) {
+        if (SETTING_CORS_ENABLED.get(settings) == false) {
+            return Netty4CorsConfigBuilder.forOrigins().disable().build();
+        }
+        String origin = SETTING_CORS_ALLOW_ORIGIN.get(settings);
+        final Netty4CorsConfigBuilder builder;
+        if (Strings.isNullOrEmpty(origin)) {
+            builder = Netty4CorsConfigBuilder.forOrigins();
+        } else if (origin.equals(ANY_ORIGIN)) {
+            builder = Netty4CorsConfigBuilder.forAnyOrigin();
+        } else {
+            Pattern p = RestUtils.checkCorsSettingForRegex(origin);
+            if (p == null) {
+                builder = Netty4CorsConfigBuilder.forOrigins(RestUtils.corsSettingAsArray(origin));
+            } else {
+                builder = Netty4CorsConfigBuilder.forPattern(p);
+            }
+        }
+        if (SETTING_CORS_ALLOW_CREDENTIALS.get(settings)) {
+            builder.allowCredentials();
+        }
+        String[] strMethods = Strings.splitStringByCommaToArray(SETTING_CORS_ALLOW_METHODS.get(settings));
+        HttpMethod[] methods = Arrays.asList(strMethods)
+                                   .stream()
+                                   .map(HttpMethod::valueOf)
+                                   .toArray(size -> new HttpMethod[size]);
+        return builder.allowedRequestMethods(methods)
+                   .maxAge(SETTING_CORS_MAX_AGE.get(settings))
+                   .allowedRequestHeaders(Strings.splitStringByCommaToArray(SETTING_CORS_ALLOW_HEADERS.get(settings)))
+                   .shortCircuit()
+                   .build();
+    }
+
 }
diff --git a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandler.java b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandler.java
index 779eb4fe2e46..dd4b02453e7d 100644
--- a/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandler.java
+++ b/modules/transport-netty4/src/main/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandler.java
@@ -48,7 +48,6 @@
     private static Pattern SCHEME_PATTERN = Pattern.compile("^https?://");
 
     private final Netty4CorsConfig config;
-    private HttpRequest request;
 
     /**
      * Creates a new instance with the specified {@link Netty4CorsConfig}.
@@ -63,12 +62,12 @@ public Netty4CorsHandler(final Netty4CorsConfig config) {
     @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (config.isCorsSupportEnabled() && msg instanceof HttpRequest) {
-            request = (HttpRequest) msg;
+            final HttpRequest request = (HttpRequest) msg;
             if (isPreflightRequest(request)) {
                 handlePreflight(ctx, request);
                 return;
             }
-            if (config.isShortCircuit() && !validateOrigin()) {
+            if (config.isShortCircuit() && !validateOrigin(request)) {
                 forbidden(ctx, request);
                 return;
             }
@@ -100,16 +99,26 @@ public static void setCorsResponseHeaders(HttpRequest request, HttpResponse resp
     }
 
     private void handlePreflight(final ChannelHandlerContext ctx, final HttpRequest request) {
+        final HttpResponse response = handlePreflight(request);
+        if (response != null) {
+            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
+        } else {
+            forbidden(ctx, request);
+        }
+    }
+
+    // package private for testing
+    HttpResponse handlePreflight(final HttpRequest request) {
         final HttpResponse response = new DefaultFullHttpResponse(request.protocolVersion(), HttpResponseStatus.OK, true, true);
-        if (setOrigin(response)) {
+        if (setOrigin(request, response)) {
             setAllowMethods(response);
             setAllowHeaders(response);
             setAllowCredentials(response);
             setMaxAge(response);
             setPreflightHeaders(response);
-            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
+            return response;
         } else {
-            forbidden(ctx, request);
+            return null;
         }
     }
 
@@ -139,7 +148,7 @@ private void setPreflightHeaders(final HttpResponse response) {
         response.headers().add(config.preflightResponseHeaders());
     }
 
-    private boolean setOrigin(final HttpResponse response) {
+    private boolean setOrigin(final HttpRequest request, final HttpResponse response) {
         final String origin = request.headers().get(HttpHeaderNames.ORIGIN);
         if (!Strings.isNullOrEmpty(origin)) {
             if ("null".equals(origin) && config.isNullOriginAllowed()) {
@@ -149,7 +158,7 @@ private boolean setOrigin(final HttpResponse response) {
 
             if (config.isAnyOriginSupported()) {
                 if (config.isCredentialsAllowed()) {
-                    echoRequestOrigin(response);
+                    echoRequestOrigin(request, response);
                     setVaryHeader(response);
                 } else {
                     setAnyOrigin(response);
@@ -165,7 +174,7 @@ private boolean setOrigin(final HttpResponse response) {
         return false;
     }
 
-    private boolean validateOrigin() {
+    private boolean validateOrigin(final HttpRequest request) {
         if (config.isAnyOriginSupported()) {
             return true;
         }
@@ -188,7 +197,7 @@ private boolean validateOrigin() {
         return config.isOriginAllowed(origin);
     }
 
-    private void echoRequestOrigin(final HttpResponse response) {
+    private static void echoRequestOrigin(final HttpRequest request, final HttpResponse response) {
         setOrigin(response, request.headers().get(HttpHeaderNames.ORIGIN));
     }
 
@@ -219,9 +228,8 @@ private static boolean isPreflightRequest(final HttpRequest request) {
     }
 
     private void setAllowMethods(final HttpResponse response) {
-        response.headers().set(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS, config.allowedRequestMethods().stream()
-            .map(m -> m.name().trim())
-            .collect(Collectors.toList()));
+        response.headers().set(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS,
+            config.allowedRequestMethods().stream().map(m -> m.name().trim()).collect(Collectors.toList()));
     }
 
     private void setAllowHeaders(final HttpResponse response) {
diff --git a/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandlerTests.java b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandlerTests.java
new file mode 100644
index 000000000000..a1867e1eb70e
--- /dev/null
+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/http/netty4/cors/Netty4CorsHandlerTests.java
@@ -0,0 +1,94 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.http.netty4.cors;
+
+import io.netty.handler.codec.http.DefaultFullHttpRequest;
+import io.netty.handler.codec.http.FullHttpRequest;
+import io.netty.handler.codec.http.HttpHeaderNames;
+import io.netty.handler.codec.http.HttpMethod;
+import io.netty.handler.codec.http.HttpResponse;
+import io.netty.handler.codec.http.HttpVersion;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.test.ESTestCase;
+
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_HEADERS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_METHODS;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ALLOW_ORIGIN;
+import static org.elasticsearch.http.HttpTransportSettings.SETTING_CORS_ENABLED;
+
+/**
+ * Tests for {@link Netty4CorsHandler}
+ */
+public class Netty4CorsHandlerTests extends ESTestCase {
+
+    public void testPreflightMultiValueResponseHeaders() {
+        // test when only one value
+        String headersRequestHeader = "content-type";
+        String methodsRequestHeader = "GET";
+        Settings settings = Settings.builder()
+                                .put(SETTING_CORS_ENABLED.getKey(), true)
+                                .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty4CorsHandler.ANY_ORIGIN)
+                                .put(SETTING_CORS_ALLOW_HEADERS.getKey(), headersRequestHeader)
+                                .put(SETTING_CORS_ALLOW_METHODS.getKey(), methodsRequestHeader)
+                                .build();
+        HttpResponse response = execPreflight(settings, Netty4CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(headersRequestHeader, response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS));
+        assertEquals(methodsRequestHeader, response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS));
+
+        // test with a set of values
+        headersRequestHeader = "content-type,x-requested-with,accept";
+        methodsRequestHeader = "GET,POST";
+        settings = Settings.builder()
+                       .put(SETTING_CORS_ENABLED.getKey(), true)
+                       .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty4CorsHandler.ANY_ORIGIN)
+                       .put(SETTING_CORS_ALLOW_HEADERS.getKey(), headersRequestHeader)
+                       .put(SETTING_CORS_ALLOW_METHODS.getKey(), methodsRequestHeader)
+                       .build();
+        response = execPreflight(settings, Netty4CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(Strings.commaDelimitedListToSet(headersRequestHeader),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS)));
+        assertEquals(Strings.commaDelimitedListToSet(methodsRequestHeader),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS)));
+
+        // test with defaults
+        settings = Settings.builder()
+                       .put(SETTING_CORS_ENABLED.getKey(), true)
+                       .put(SETTING_CORS_ALLOW_ORIGIN.getKey(), Netty4CorsHandler.ANY_ORIGIN)
+                       .build();
+        response = execPreflight(settings, Netty4CorsHandler.ANY_ORIGIN, "request-host");
+        assertEquals(Strings.commaDelimitedListToSet(SETTING_CORS_ALLOW_HEADERS.getDefault(settings)),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_HEADERS)));
+        assertEquals(Strings.commaDelimitedListToSet(SETTING_CORS_ALLOW_METHODS.getDefault(settings)),
+            Strings.commaDelimitedListToSet(response.headers().get(HttpHeaderNames.ACCESS_CONTROL_ALLOW_METHODS)));
+    }
+
+    private HttpResponse execPreflight(final Settings settings, final String originValue, final String host) {
+        // simulate execution of a preflight request
+        final FullHttpRequest httpRequest = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, "/");
+        httpRequest.setMethod(HttpMethod.OPTIONS);
+        httpRequest.headers().add(HttpHeaderNames.ORIGIN, originValue);
+        httpRequest.headers().add(HttpHeaderNames.HOST, host);
+        httpRequest.headers().add(HttpHeaderNames.ACCESS_CONTROL_REQUEST_METHOD, "GET");
+
+        Netty4CorsHandler corsHandler = new Netty4CorsHandler(Netty4CorsConfig.buildCorsConfig(settings));
+        return corsHandler.handlePreflight(httpRequest);
+    }
+}
