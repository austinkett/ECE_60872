diff --git a/server/src/main/java/org/elasticsearch/common/lucene/MinimumScoreCollector.java b/server/src/main/java/org/elasticsearch/common/lucene/MinimumScoreCollector.java
index f99d68952e55..4e558f163ebc 100644
--- a/server/src/main/java/org/elasticsearch/common/lucene/MinimumScoreCollector.java
+++ b/server/src/main/java/org/elasticsearch/common/lucene/MinimumScoreCollector.java
@@ -65,6 +65,6 @@ public void doSetNextReader(LeafReaderContext context) throws IOException {
 
     @Override
     public ScoreMode scoreMode() {
-        return ScoreMode.COMPLETE;
+        return collector.scoreMode() == ScoreMode.TOP_SCORES ? ScoreMode.TOP_SCORES :  ScoreMode.COMPLETE;
     }
 }
diff --git a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
index 582e1caa7ce8..192e54506495 100644
--- a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
+++ b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
@@ -681,6 +681,39 @@ public void testMaxScoreQueryVisitor() {
         }
     }
 
+    public void testMinScore() throws Exception {
+        Directory dir = newDirectory();
+        IndexWriterConfig iwc = newIndexWriterConfig();
+        RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);
+        for (int i = 0; i < 10; i++) {
+            Document doc = new Document();
+            doc.add(new StringField("foo", "bar", Store.NO));
+            doc.add(new StringField("filter", "f1", Store.NO));
+            w.addDocument(doc);
+        }
+        w.close();
+
+        IndexReader reader = DirectoryReader.open(dir);
+        IndexSearcher contextSearcher = new IndexSearcher(reader);
+        TestSearchContext context = new TestSearchContext(null, indexShard);
+        context.parsedQuery(new ParsedQuery(
+            new BooleanQuery.Builder()
+                .add(new TermQuery(new Term("foo", "bar")), Occur.MUST)
+                .add(new TermQuery(new Term("filter", "f1")), Occur.SHOULD)
+                .build()
+        ));
+        context.minimumScore(0.01f);
+        context.setTask(new SearchTask(123L, "", "", "", null, Collections.emptyMap()));
+        context.setSize(1);
+        context.trackTotalHitsUpTo(5);
+
+        QueryPhase.execute(context, contextSearcher, checkCancelled -> {});
+        assertEquals(10, context.queryResult().topDocs().topDocs.totalHits.value);
+
+        reader.close();
+        dir.close();
+    }
+
     private static IndexSearcher getAssertingEarlyTerminationSearcher(IndexReader reader, int size) {
         return new IndexSearcher(reader) {
             @Override
