diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java
index eec9548dd08a..52aa9afd4811 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/UnicastZenPing.java
@@ -30,6 +30,7 @@
 import org.elasticsearch.cluster.node.DiscoveryNodes;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.UUIDs;
+import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.component.AbstractComponent;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
@@ -292,24 +293,13 @@ public void clearTemporalResponses() {
      */
     @Override
     public void ping(final PingListener listener, final TimeValue duration) {
-        final List<DiscoveryNode> resolvedDiscoveryNodes;
-        try {
-            resolvedDiscoveryNodes = resolveDiscoveryNodes(
-                unicastZenPingExecutorService,
-                logger,
-                configuredHosts,
-                limitPortCounts,
-                transportService,
-                () -> UNICAST_NODE_PREFIX + unicastNodeIdGenerator.incrementAndGet() + "#",
-                resolveTimeout);
-        } catch (InterruptedException e) {
-            throw new RuntimeException(e);
-        }
+        final HashSet<DiscoveryNode> nodesToPing = buildNodesToPing();
+
         final SendPingsHandler sendPingsHandler = new SendPingsHandler(pingHandlerIdGenerator.incrementAndGet());
         try {
             receivedResponses.put(sendPingsHandler.id(), sendPingsHandler);
             try {
-                sendPings(duration, null, sendPingsHandler, resolvedDiscoveryNodes);
+                sendPings(duration, null, sendPingsHandler, nodesToPing);
             } catch (RejectedExecutionException e) {
                 logger.debug("Ping execution rejected", e);
                 // The RejectedExecutionException can come from the fact unicastZenPingExecutorService is at its max down in sendPings
@@ -319,11 +309,12 @@ public void ping(final PingListener listener, final TimeValue duration) {
             threadPool.schedule(TimeValue.timeValueMillis(duration.millis() / 2), ThreadPool.Names.GENERIC, new AbstractRunnable() {
                 @Override
                 protected void doRun() {
-                    sendPings(duration, null, sendPingsHandler, resolvedDiscoveryNodes);
+                    sendPings(duration, null, sendPingsHandler, nodesToPing);
                     threadPool.schedule(TimeValue.timeValueMillis(duration.millis() / 2), ThreadPool.Names.GENERIC, new AbstractRunnable() {
                         @Override
                         protected void doRun() throws Exception {
-                            sendPings(duration, TimeValue.timeValueMillis(duration.millis() / 2), sendPingsHandler, resolvedDiscoveryNodes);
+                            sendPings(duration, TimeValue.timeValueMillis(duration.millis() / 2),
+                                sendPingsHandler, nodesToPing);
                             sendPingsHandler.close();
                             listener.onPing(sendPingsHandler.pingCollection().toList());
                             for (DiscoveryNode node : sendPingsHandler.nodeToDisconnect) {
@@ -392,7 +383,7 @@ void sendPings(
         final TimeValue timeout,
         @Nullable TimeValue waitTime,
         final SendPingsHandler sendPingsHandler,
-        final List<DiscoveryNode> resolvedDiscoveryNodes) {
+        final HashSet<DiscoveryNode> initialNodesToPingSet) {
         final UnicastPingRequest pingRequest = new UnicastPingRequest();
         pingRequest.id = sendPingsHandler.id();
         pingRequest.timeout = timeout;
@@ -400,27 +391,16 @@ void sendPings(
 
         pingRequest.pingResponse = createPingResponse(discoNodes);
 
-        HashSet<DiscoveryNode> nodesToPingSet = new HashSet<>();
-        for (PingResponse temporalResponse : temporalResponses) {
-            // Only send pings to nodes that have the same cluster name.
-            if (clusterName.equals(temporalResponse.clusterName())) {
-                nodesToPingSet.add(temporalResponse.node());
-            }
-        }
-        nodesToPingSet.addAll(hostsProvider.buildDynamicNodes());
+        HashSet<DiscoveryNode> nodesToPingSet = new HashSet<>(initialNodesToPingSet);
 
-        // add all possible master nodes that were active in the last known cluster configuration
-        for (ObjectCursor<DiscoveryNode> masterNode : discoNodes.getMasterNodes().values()) {
-            nodesToPingSet.add(masterNode.value);
-        }
+        // Only send pings to nodes that have the same cluster name.
+        Set<DiscoveryNode> sameNameNodes = temporalResponses.stream()
+            .filter(temporalResponse -> clusterName.equals(temporalResponse.clusterName()))
+            .map(PingResponse::node).collect(Collectors.toSet());
+        nodesToPingSet.addAll(sameNameNodes);
 
         // sort the nodes by likelihood of being an active master
-        List<DiscoveryNode> sortedNodesToPing = ElectMasterService.sortByMasterLikelihood(nodesToPingSet);
-
-        // add the configured hosts first
-        final List<DiscoveryNode> nodesToPing = new ArrayList<>(resolvedDiscoveryNodes.size() + sortedNodesToPing.size());
-        nodesToPing.addAll(resolvedDiscoveryNodes);
-        nodesToPing.addAll(sortedNodesToPing);
+        List<DiscoveryNode> nodesToPing = ElectMasterService.sortByMasterLikelihood(nodesToPingSet);
 
         final CountDownLatch latch = new CountDownLatch(nodesToPing.size());
         for (final DiscoveryNode node : nodesToPing) {
@@ -518,6 +498,33 @@ public void run() {
         }
     }
 
+    private HashSet<DiscoveryNode> buildNodesToPing() {
+        final List<DiscoveryNode> resolvedDiscoveryNodes;
+        try {
+            resolvedDiscoveryNodes = resolveDiscoveryNodes(
+                unicastZenPingExecutorService,
+                logger,
+                configuredHosts,
+                limitPortCounts,
+                transportService,
+                () -> UNICAST_NODE_PREFIX + unicastNodeIdGenerator.incrementAndGet() + "#",
+                resolveTimeout);
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        }
+
+        HashSet<DiscoveryNode> nodesToPingSet = new HashSet<>(resolvedDiscoveryNodes);
+
+        nodesToPingSet.addAll(hostsProvider.buildDynamicNodes());
+
+        // add all possible master nodes that were active in the last known cluster configuration
+        for (ObjectCursor<DiscoveryNode> masterNode : contextProvider.nodes().getMasterNodes().values()) {
+            nodesToPingSet.add(masterNode.value);
+        }
+
+        return nodesToPingSet;
+    }
+
     private void sendPingRequestToNode(final int id, final TimeValue timeout, final UnicastPingRequest pingRequest,
                                        final CountDownLatch latch, final DiscoveryNode node, final DiscoveryNode nodeToSend) {
         logger.trace("[{}] sending to {}", id, nodeToSend);
diff --git a/core/src/test/java/org/elasticsearch/discovery/zen/UnicastZenPingTests.java b/core/src/test/java/org/elasticsearch/discovery/zen/UnicastZenPingTests.java
index 5a91426d6bcd..11d680690cdf 100644
--- a/core/src/test/java/org/elasticsearch/discovery/zen/UnicastZenPingTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/zen/UnicastZenPingTests.java
@@ -81,9 +81,11 @@
 import static org.hamcrest.Matchers.empty;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.hasItem;
 import static org.hamcrest.Matchers.hasSize;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
@@ -252,6 +254,152 @@ public ClusterState clusterState() {
         assertCounters(handleD, handleA, handleB, handleC, handleD);
     }
 
+    public void testHostProviderBuildDynamicNodesShouldBeCalledOnlyOnceInEachRound() throws IOException, InterruptedException {
+        final Settings settings = Settings.builder().put("cluster.name", "test").put(TransportSettings.PORT.getKey(), 0).build();
+
+        NetworkService networkService = new NetworkService(settings, Collections.emptyList());
+
+        final BiFunction<Settings, Version, Transport> supplier = (s, v) -> new MockTcpTransport(
+            s,
+            threadPool,
+            BigArrays.NON_RECYCLING_INSTANCE,
+            new NoneCircuitBreakerService(),
+            new NamedWriteableRegistry(Collections.emptyList()),
+            networkService,
+            v);
+
+        NetworkHandle handleA = startServices(settings, threadPool, "UZP_A", Version.CURRENT, supplier);
+        closeables.push(handleA.transportService);
+
+        final ClusterState state = ClusterState.builder(new ClusterName("test")).version(randomPositiveLong()).build();
+
+        Settings hostsSettings = Settings.builder()
+            .putArray("discovery.zen.ping.unicast.hosts",
+                NetworkAddress.format(new InetSocketAddress(handleA.address.address().getAddress(), handleA.address.address().getPort())))
+            .put("cluster.name", "test")
+            .build();
+
+        UnicastHostsProvider unicastHostsProviderA = mock(UnicastHostsProvider.class);
+        UnicastZenPing zenPingA = new UnicastZenPing(hostsSettings, threadPool, handleA.transportService, unicastHostsProviderA);
+        zenPingA.start(new PingContextProvider() {
+            @Override
+            public DiscoveryNodes nodes() {
+                return DiscoveryNodes.builder().add(handleA.node).localNodeId("UZP_A").build();
+            }
+
+            @Override
+            public ClusterState clusterState() {
+                return ClusterState.builder(state).blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK)).build();
+            }
+        });
+        closeables.push(zenPingA);
+
+        zenPingA.pingAndWait(TimeValue.timeValueSeconds(1));
+        verify(unicastHostsProviderA, times(1)).buildDynamicNodes();
+    }
+
+    //test that nodes discover each other if they ping a common host
+    public void testDiscoveryOfNoneConfiguredNodes() throws IOException, InterruptedException {
+        final Settings settings = Settings.builder().put("cluster.name", "test").put(TransportSettings.PORT.getKey(), 0).build();
+
+        NetworkService networkService = new NetworkService(settings, Collections.emptyList());
+
+        final BiFunction<Settings, Version, Transport> supplier = (s, v) -> new MockTcpTransport(
+            s,
+            threadPool,
+            BigArrays.NON_RECYCLING_INSTANCE,
+            new NoneCircuitBreakerService(),
+            new NamedWriteableRegistry(Collections.emptyList()),
+            networkService,
+            v);
+
+        NetworkHandle handleA = startServices(settings, threadPool, "UZP_A", Version.CURRENT, supplier);
+        closeables.push(handleA.transportService);
+        NetworkHandle handleB = startServices(settings, threadPool, "UZP_B", Version.CURRENT, supplier);
+        closeables.push(handleB.transportService);
+        NetworkHandle handleC = startServices(settings, threadPool, "UZP_C", Version.CURRENT, supplier);
+        closeables.push(handleC.transportService);
+
+        final ClusterState state = ClusterState.builder(new ClusterName("test")).version(randomPositiveLong()).build();
+
+        Settings hostsSettingsA = Settings.builder()
+            .putArray("discovery.zen.ping.unicast.hosts",
+                NetworkAddress.format(new InetSocketAddress(handleA.address.address().getAddress(), handleA.address.address().getPort())),
+                NetworkAddress.format(new InetSocketAddress(handleB.address.address().getAddress(), handleB.address.address().getPort())))
+            .put("cluster.name", "test")
+            .build();
+
+        UnicastZenPing zenPingA = new UnicastZenPing(hostsSettingsA, threadPool, handleA.transportService, EMPTY_HOSTS_PROVIDER);
+        zenPingA.start(new PingContextProvider() {
+            @Override
+            public DiscoveryNodes nodes() {
+                return DiscoveryNodes.builder().add(handleA.node).localNodeId("UZP_A").build();
+            }
+
+            @Override
+            public ClusterState clusterState() {
+                return ClusterState.builder(state).blocks(ClusterBlocks.builder().addGlobalBlock(STATE_NOT_RECOVERED_BLOCK)).build();
+            }
+        });
+        closeables.push(zenPingA);
+
+        Settings hostsSettingsB = Settings.builder()
+            .putArray("discovery.zen.ping.unicast.hosts",
+                NetworkAddress.format(new InetSocketAddress(handleA.address.address().getAddress(), handleA.address.address().getPort())),
+                NetworkAddress.format(new InetSocketAddress(handleB.address.address().getAddress(), handleB.address.address().getPort())),
+                NetworkAddress.format(new InetSocketAddress(handleC.address.address().getAddress(), handleC.address.address().getPort())))
+            .put("cluster.name", "test")
+            .build();
+        UnicastZenPing zenPingB = new UnicastZenPing(hostsSettingsB, threadPool, handleB.transportService, EMPTY_HOSTS_PROVIDER);
+        zenPingB.start(new PingContextProvider() {
+            @Override
+            public DiscoveryNodes nodes() {
+                return DiscoveryNodes.builder().add(handleB.node).localNodeId("UZP_B").build();
+            }
+
+            @Override
+            public ClusterState clusterState() {
+                return state;
+            }
+        });
+        closeables.push(zenPingB);
+
+        Settings hostsSettingsC = Settings.builder()
+            .putArray("discovery.zen.ping.unicast.hosts",
+                NetworkAddress.format(new InetSocketAddress(handleB.address.address().getAddress(), handleB.address.address().getPort())),
+                NetworkAddress.format(new InetSocketAddress(handleC.address.address().getAddress(), handleC.address.address().getPort())))
+            .put("cluster.name", "test")
+            .build();
+        UnicastZenPing zenPingC = new UnicastZenPing(hostsSettingsC, threadPool, handleC.transportService, EMPTY_HOSTS_PROVIDER);
+        zenPingC.start(new PingContextProvider() {
+            @Override
+            public DiscoveryNodes nodes() {
+                return DiscoveryNodes.builder().add(handleC.node).localNodeId("UZP_C").build();
+            }
+
+            @Override
+            public ClusterState clusterState() {
+                return state;
+            }
+        });
+        closeables.push(zenPingC);
+
+
+        logger.info("ping from UZP_C");
+        Collection<ZenPing.PingResponse> pingResponsesC = zenPingC.pingAndWait(TimeValue.timeValueSeconds(1));
+        assertThat(pingResponsesC.size(), equalTo(1));
+        ZenPing.PingResponse pingC = pingResponsesC.iterator().next();
+        assertThat(pingC.node().getId(), equalTo("UZP_B"));
+
+        logger.info("ping from UZP_A");
+        Collection<ZenPing.PingResponse> pingResponsesA = zenPingA.pingAndWait(TimeValue.timeValueSeconds(1));
+        assertThat(pingResponsesA.size(), equalTo(2));
+        List<String> responseIds =
+            pingResponsesA.stream().map(response -> response.node().getId()).collect(Collectors.toList());
+        assertThat(responseIds, hasItem("UZP_B"));
+        assertThat(responseIds, hasItem("UZP_C"));
+    }
+
     public void testUnknownHostNotCached() {
         // use ephemeral ports
         final Settings settings = Settings.builder().put("cluster.name", "test").put(TransportSettings.PORT.getKey(), 0).build();
