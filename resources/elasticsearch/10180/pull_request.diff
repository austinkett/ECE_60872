diff --git a/dev-tools/build_release.py b/dev-tools/build_release.py
index 18acfac865ff..e33a267f49a2 100644
--- a/dev-tools/build_release.py
+++ b/dev-tools/build_release.py
@@ -437,7 +437,7 @@ def smoke_test_release(release, files, expected_hash, plugins):
     else:
       background = '-d'
     print('  Starting elasticsearch deamon from [%s]' % os.path.join(tmp_dir, 'elasticsearch-%s' % release))
-    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.node.bench=true -Des.script.disable_dynamic=false %s'
+    run('%s; %s -Des.node.name=smoke_tester -Des.cluster.name=prepare_release -Des.discovery.zen.ping.multicast.enabled=false -Des.script.disable_dynamic=false %s'
          % (java_exe(), es_run_path, background))
     conn = HTTPConnection('127.0.0.1', 9200, 20);
     wait_for_node_startup()
diff --git a/docs/reference/search/benchmark.asciidoc b/docs/reference/search/benchmark.asciidoc
deleted file mode 100644
index 8b35717defc2..000000000000
--- a/docs/reference/search/benchmark.asciidoc
+++ /dev/null
@@ -1,247 +0,0 @@
-[[search-benchmark]]
-== Benchmark
-
-experimental[]
-
-The benchmark API provides a standard mechanism for submitting queries and
-measuring their performance relative to one another.
-
-[IMPORTANT]
-=====
-To be eligible to run benchmarks nodes must be started with: `--node.bench true`. This is just a way to mark certain nodes as "executors". Searches will still be distributed out to the cluster in the normal manner. This is primarily a defensive measure to prevent production nodes from being flooded with potentially many requests. Typically one would start a single node with this setting and submit benchmark requests to it.
-=====
-
-[source,bash]
---------------------------------------------------
-$ ./bin/elasticsearch --node.bench true
---------------------------------------------------
-
-Benchmarking a search request is as simple as executing the following command:
-
-[source,js]
---------------------------------------------------
-$ curl -XPUT 'localhost:9200/_bench/?pretty=true' -d '{
-    "name": "my_benchmark",
-    "competitors": [ {
-        "name": "my_competitor",
-        "requests": [ {
-            "query": {
-                "match": { "_all": "a*" }
-            }
-        } ]
-    } ]
-}'
---------------------------------------------------
-
-Response:
-
-[source,js]
---------------------------------------------------
-{
-  "status" : "complete",
-  "competitors" : {
-    "my_competitor" : {
-      "summary" : {
-        "nodes" : [ "localhost" ],
-        "total_iterations" : 5,
-        "completed_iterations" : 5,
-        "total_queries" : 1000,
-        "concurrency" : 5,
-        "multiplier" : 100,
-        "avg_warmup_time" : 43.0,
-        "statistics" : {
-          "min" : 1,
-          "max" : 10,
-          "mean" : 4.19,
-          "qps" : 238.663,
-          "std_dev" : 1.938,
-          "millis_per_hit" : 1.064,
-          "percentile_10" : 2,
-          "percentile_25" : 3,
-          "percentile_50" : 4,
-          "percentile_75" : 5,
-          "percentile_90" : 7,
-          "percentile_99" : 10
-        }
-      }
-    }
-  }
-}
---------------------------------------------------
-
-A 'competitor' defines one or more search requests to execute along with parameters that describe how the search(es) should be run. 
-Multiple competitors may be submitted as a group in which case they will execute one after the other. This makes it easy to compare various
-competing alternatives side-by-side.
-
-There are several parameters which may be set at the competition level:
-[horizontal]
-`name`::            Unique name for the competition.
-`iterations`::      Number of times to run the competitors. Defaults to `5`.
-`concurrency`::     Within each iteration use this level of parallelism. Defaults to `5`.
-`multiplier`::      Within each iteration run the query this many times. Defaults to `1000`.
-`warmup`::          Perform warmup of query. Defaults to `true`.
-`num_slowest`::     Record N slowest queries. Defaults to `1`.
-`search_type`::     Type of search, e.g. "query_then_fetch", "dfs_query_then_fetch", "count". Defaults to `query_then_fetch`.
-`requests`::        Query DSL describing search requests.
-`clear_caches`::    Whether caches should be cleared on each iteration, and if so, how. Caches are not cleared by default.
-`indices`::         Array of indices to search, e.g. ["my_index_1", "my_index_2", "my_index_3"].
-`types`::           Array of index types to search, e.g. ["my_type_1", "my_type_2"].
-
-Cache clearing parameters:
-[horizontal]
-`clear_caches`::                Set to 'false' to disable cache clearing completely.
-`clear_caches.filter`::         Whether to clear the filter cache.
-`clear_caches.field_data`::     Whether to clear the field data cache.
-`clear_caches.id`::             Whether to clear the id cache.
-`clear_caches.recycler`::       Whether to clear the recycler cache.
-`clear_caches.fields`::         Array of fields to clear.
-`clear_caches.filter_keys`::    Array of filter keys to clear.
-
-Global parameters:
-[horizontal]
-`name`::                    Unique name for the benchmark.
-`num_executor_nodes`::      Number of cluster nodes from which to submit and time benchmarks. Allows user to run a benchmark simultaneously on one or more nodes and compare timings. Note that this does not control how many nodes a search request will actually execute on. Defaults to: 1.
-`percentiles`::             Array of percentile values to report. Defaults to: [10, 25, 50, 75, 90, 99].
-
-Additionally, the following competition-level parameters may be set globally: iteration, concurrency, multiplier, warmup, and clear_caches.
-
-Using these parameters it is possible to describe precisely how to execute a benchmark under various conditions. In the following example we run a filtered query against two different indices using two different search types.
-
-[source,js]
---------------------------------------------------
-$ curl -XPUT 'localhost:9200/_bench/?pretty=true' -d '{
-    "name": "my_benchmark",
-    "num_executor_nodes": 1,
-    "percentiles" : [ 25, 50, 75 ],
-    "iterations": 5,
-    "multiplier": 1000,
-    "concurrency": 5,
-    "num_slowest": 0,
-    "warmup": true,
-    "clear_caches": false,
-
-    "requests": [ {
-        "query" : {
-            "filtered" : {
-                "query" : { "match" : { "_all" : "*" } },
-                "filter" : {
-                    "and" : [ { "term" : { "title" : "Spain" } },
-                              { "term" : { "title" : "rain" } },
-                              { "term" : { "title" : "plain" } } ]
-                }
-            }
-        }
-    } ],
-
-    "competitors": [ {
-        "name": "competitor_1",
-        "search_type": "query_then_fetch",
-        "indices": [ "my_index_1" ],
-        "types": [ "my_type_1" ],
-        "clear_caches" : {
-            "filter" : true,
-            "field_data" : true,
-            "id" : true,
-            "recycler" : true,
-            "fields": ["title"]
-        }
-    }, {
-        "name": "competitor_2",
-        "search_type": "dfs_query_then_fetch",
-        "indices": [ "my_index_2" ],
-        "types": [ "my_type_2" ],
-        "clear_caches" : {
-            "filter" : true,
-            "field_data" : true,
-            "id" : true,
-            "recycler" : true,
-            "fields": ["title"]
-        }
-    } ]
-}'
---------------------------------------------------
-
-Response:
-
-[source,js]
---------------------------------------------------
-{
-  "status" : "complete",
-  "competitors" : {
-    "competitor_1" : {
-      "summary" : {
-        "nodes" : [ "localhost" ],
-        "total_iterations" : 5,
-        "completed_iterations" : 5,
-        "total_queries" : 5000,
-        "concurrency" : 5,
-        "multiplier" : 1000,
-        "avg_warmup_time" : 54.0,
-        "statistics" : {
-          "min" : 0,
-          "max" : 3,
-          "mean" : 0.533,
-          "qps" : 1872.659,
-          "std_dev" : 0.528,
-          "millis_per_hit" : 0.0,
-          "percentile_25" : 0.0,
-          "percentile_50" : 1.0,
-          "percentile_75" : 1.0
-        }
-      }
-    },
-    "competitor_2" : {
-      "summary" : {
-        "nodes" : [ "localhost" ],
-        "total_iterations" : 5,
-        "completed_iterations" : 5,
-        "total_queries" : 5000,
-        "concurrency" : 5,
-        "multiplier" : 1000,
-        "avg_warmup_time" : 4.0,
-        "statistics" : {
-          "min" : 0,
-          "max" : 4,
-          "mean" : 0.487,
-          "qps" : 2049.180,
-          "std_dev" : 0.545,
-          "millis_per_hit" : 0.0,
-          "percentile_25" : 0.0,
-          "percentile_50" : 0.0,
-          "percentile_75" : 1.0
-        }
-      }
-    }
-  }
-}
---------------------------------------------------
-
-In some cases it may be desirable to view the progress of a long-running benchmark and optionally terminate it early. To view all active benchmarks use:
-
-[source,js]
---------------------------------------------------
-$ curl -XGET 'localhost:9200/_bench?pretty'
---------------------------------------------------
-
-This would display run-time statistics in the same format as the sample output above.
-
-To abort a long-running benchmark use the 'abort' endpoint:
-
-[source,js]
---------------------------------------------------
-$ curl -XPOST 'localhost:9200/_bench/abort/my_benchmark?pretty'
---------------------------------------------------
-
-Response:
-
-[source,js]
---------------------------------------------------
-{
-    "aborted_benchmarks" : [
-        "node" "localhost",
-        "benchmark_name", "my_benchmark",
-        "aborted", true
-    ]
-}
---------------------------------------------------
-
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/BenchmarkMetaData.java b/src/main/java/org/elasticsearch/cluster/metadata/BenchmarkMetaData.java
deleted file mode 100644
index 6638efda76f8..000000000000
--- a/src/main/java/org/elasticsearch/cluster/metadata/BenchmarkMetaData.java
+++ /dev/null
@@ -1,222 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.elasticsearch.cluster.metadata;
-
-import com.google.common.collect.ImmutableList;
-import org.elasticsearch.ElasticsearchIllegalArgumentException;
-import org.elasticsearch.common.io.stream.StreamInput;
-import org.elasticsearch.common.io.stream.StreamOutput;
-import org.elasticsearch.common.xcontent.ToXContent;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentParser;
-
-import java.io.IOException;
-
-/**
- * Meta data about benchmarks that are currently executing
- */
-public class BenchmarkMetaData implements MetaData.Custom {
-    public static final String TYPE = "benchmark";
-
-    public static final Factory FACTORY = new Factory();
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        BenchmarkMetaData that = (BenchmarkMetaData) o;
-
-        if (!entries.equals(that.entries)) return false;
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return entries.hashCode();
-    }
-
-    public static class Entry {
-        private final State state;
-        private final String benchmarkId;
-        private final String[] nodeids;
-
-        public Entry(Entry e, State state) {
-            this(e.benchmarkId(), state, e.nodes());
-        }
-
-        public Entry(String benchmarkId, State state, String[] nodeIds) {
-            this.state = state;
-            this.benchmarkId = benchmarkId;
-            this.nodeids =  nodeIds;
-        }
-
-        public String benchmarkId() {
-            return this.benchmarkId;
-        }
-
-        public State state() {
-            return state;
-        }
-
-        public String[] nodes() {
-            return nodeids;
-        }
-
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            Entry entry = (Entry) o;
-
-            if (!benchmarkId.equals(entry.benchmarkId)) return false;
-            if (state != entry.state) return false;
-
-            return true;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = state.hashCode();
-            result = 31 * result + benchmarkId.hashCode();
-            return result;
-        }
-    }
-
-    public static enum State {
-        STARTED((byte) 0),
-        SUCCESS((byte) 1),
-        FAILED((byte) 2),
-        ABORTED((byte) 3);
-
-        private static final State[] STATES = new State[State.values().length];
-
-        static {
-            for (State state : State.values()) {
-                assert state.id() < STATES.length && state.id() >= 0;
-                STATES[state.id()] = state;
-            }
-        }
-
-        private final byte id;
-
-        State(byte id) {
-            this.id = id;
-        }
-
-        public byte id() {
-            return id;
-        }
-
-        public boolean completed() {
-            return this == SUCCESS || this == FAILED;
-        }
-
-        public static State fromId(byte id) {
-            if (id < 0 || id >= State.values().length) {
-                throw new ElasticsearchIllegalArgumentException("No benchmark state for value [" + id + "]");
-            }
-            return STATES[id];
-        }
-    }
-
-    private final ImmutableList<Entry> entries;
-
-
-    public BenchmarkMetaData(ImmutableList<Entry> entries) {
-        this.entries = entries;
-    }
-
-    public BenchmarkMetaData(Entry... entries) {
-        this.entries = ImmutableList.copyOf(entries);
-    }
-
-    public ImmutableList<Entry> entries() {
-        return this.entries;
-    }
-
-
-    public static class Factory extends MetaData.Custom.Factory<BenchmarkMetaData> {
-
-        @Override
-        public String type() {
-            return TYPE;
-        }
-
-        @Override
-        public BenchmarkMetaData readFrom(StreamInput in) throws IOException {
-            Entry[] entries = new Entry[in.readVInt()];
-            for (int i = 0; i < entries.length; i++) {
-                String benchmarkId = in.readString();
-                State state = State.fromId(in.readByte());
-                String[] nodes = in.readStringArray();
-                entries[i] = new Entry(benchmarkId, state, nodes);
-            }
-            return new BenchmarkMetaData(entries);
-        }
-
-        @Override
-        public void writeTo(BenchmarkMetaData repositories, StreamOutput out) throws IOException {
-            out.writeVInt(repositories.entries().size());
-            for (Entry entry : repositories.entries()) {
-                out.writeString(entry.benchmarkId());
-                out.writeByte(entry.state().id());
-                out.writeStringArray(entry.nodes());
-            }
-        }
-
-        @Override
-        public BenchmarkMetaData fromXContent(XContentParser parser) throws IOException {
-            throw new UnsupportedOperationException();
-        }
-
-        @Override
-        public void toXContent(BenchmarkMetaData customIndexMetaData, XContentBuilder builder, ToXContent.Params params) throws IOException {
-            builder.startArray("benchmarks");
-            for (Entry entry : customIndexMetaData.entries()) {
-                toXContent(entry, builder, params);
-            }
-            builder.endArray();
-        }
-
-        public void toXContent(Entry entry, XContentBuilder builder, ToXContent.Params params) throws IOException {
-            builder.startObject();
-            builder.field("id", entry.benchmarkId());
-            builder.field("state", entry.state());
-            builder.startArray("on_nodes");
-            for (String nodeid : entry.nodes()) {
-                builder.value(nodeid);
-            }
-            builder.endArray();
-            builder.endObject();
-        }
-    }
-
-    public boolean contains(String benchmarkId) {
-        for (Entry e : entries) {
-           if (e.benchmarkId.equals(benchmarkId)) {
-               return true;
-           }
-        }
-        return false;
-    }
-}
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
index e1d7d2911a89..87bc6f26df5e 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
@@ -102,7 +102,6 @@
         registerFactory(RepositoriesMetaData.TYPE, RepositoriesMetaData.FACTORY);
         registerFactory(SnapshotMetaData.TYPE, SnapshotMetaData.FACTORY);
         registerFactory(RestoreMetaData.TYPE, RestoreMetaData.FACTORY);
-        registerFactory(BenchmarkMetaData.TYPE, BenchmarkMetaData.FACTORY);
     }
 
     /**
diff --git a/src/main/java/org/elasticsearch/threadpool/ThreadPool.java b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
index 2918b3cc6b3d..9db30bf93222 100644
--- a/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
+++ b/src/main/java/org/elasticsearch/threadpool/ThreadPool.java
@@ -79,7 +79,6 @@
         public static final String WARMER = "warmer";
         public static final String SNAPSHOT = "snapshot";
         public static final String OPTIMIZE = "optimize";
-        public static final String BENCH = "bench";
     }
 
     public static final String THREADPOOL_GROUP = "threadpool.";
@@ -128,7 +127,6 @@ public ThreadPool(Settings settings, @Nullable NodeSettingsService nodeSettingsS
                 .put(Names.WARMER, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build())
                 .put(Names.SNAPSHOT, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build())
                 .put(Names.OPTIMIZE, settingsBuilder().put("type", "fixed").put("size", 1).build())
-                .put(Names.BENCH, settingsBuilder().put("type", "scaling").put("keep_alive", "5m").put("size", halfProcMaxAt5).build())
                 .build();
 
         Map<String, ExecutorHolder> executors = Maps.newHashMap();
diff --git a/src/test/java/org/elasticsearch/test/CompositeTestCluster.java b/src/test/java/org/elasticsearch/test/CompositeTestCluster.java
index 7b5229b515b0..bf4a58e6de89 100644
--- a/src/test/java/org/elasticsearch/test/CompositeTestCluster.java
+++ b/src/test/java/org/elasticsearch/test/CompositeTestCluster.java
@@ -236,11 +236,6 @@ public int numDataAndMasterNodes() {
         return runningNodes().size() + cluster.numDataAndMasterNodes();
     }
 
-    @Override
-    public int numBenchNodes() {
-        return cluster.numBenchNodes();
-    }
-
     @Override
     public InetSocketAddress[] httpAddresses() {
         return cluster.httpAddresses();
diff --git a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
index 3eebc85e3ef1..edda40ff18f0 100644
--- a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
@@ -20,7 +20,6 @@
 
 import com.carrotsearch.randomizedtesting.RandomizedContext;
 import com.carrotsearch.randomizedtesting.Randomness;
-import com.carrotsearch.randomizedtesting.SeedUtils;
 import com.carrotsearch.randomizedtesting.generators.RandomInts;
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 import com.google.common.base.Joiner;
@@ -121,11 +120,7 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
+import java.lang.annotation.*;
 import java.nio.file.DirectoryStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -1511,12 +1506,6 @@ private void postIndexAsyncActions(String[] indices, List<CountDownLatch> inFlig
          */
         int numClientNodes() default InternalTestCluster.DEFAULT_NUM_CLIENT_NODES;
 
-        /**
-         * Returns whether the ability to randomly have benchmark (client) nodes as part of the cluster needs to be enabled.
-         * Default is {@link InternalTestCluster#DEFAULT_ENABLE_RANDOM_BENCH_NODES}.
-         */
-        boolean enableRandomBenchNodes() default InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES;
-
         /**
          * Returns the transport client ratio. By default this returns <code>-1</code> which means a random
          * ratio in the interval <code>[0..1]</code> is used.
@@ -1622,11 +1611,6 @@ private int getNumClientNodes() {
         return annotation == null ? InternalTestCluster.DEFAULT_NUM_CLIENT_NODES : annotation.numClientNodes();
     }
 
-    private boolean enableRandomBenchNodes() {
-        ClusterScope annotation = getAnnotation(this.getClass());
-        return annotation == null ? InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES : annotation.enableRandomBenchNodes();
-    }
-
     private boolean randomDynamicTemplates() {
         ClusterScope annotation = getAnnotation(this.getClass());
         return annotation == null || annotation.randomDynamicTemplates();
@@ -1721,7 +1705,7 @@ public Settings transportClient() {
 
         return new InternalTestCluster(seed, minNumDataNodes, maxNumDataNodes,
                 clusterName(scope.name(), Integer.toString(CHILD_JVM_ID), seed), settingsSource, getNumClientNodes(),
-                enableRandomBenchNodes(), InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING, CHILD_JVM_ID, nodePrefix);
+                InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING, CHILD_JVM_ID, nodePrefix);
     }
 
     /**
diff --git a/src/test/java/org/elasticsearch/test/ExternalTestCluster.java b/src/test/java/org/elasticsearch/test/ExternalTestCluster.java
index d31bede6bdb4..78b418d27a45 100644
--- a/src/test/java/org/elasticsearch/test/ExternalTestCluster.java
+++ b/src/test/java/org/elasticsearch/test/ExternalTestCluster.java
@@ -63,7 +63,6 @@
 
     private final int numDataNodes;
     private final int numMasterAndDataNodes;
-    private final int numBenchNodes;
 
     public ExternalTestCluster(TransportAddress... transportAddresses) {
         super(0);
@@ -79,7 +78,6 @@ public ExternalTestCluster(TransportAddress... transportAddresses) {
         httpAddresses = new InetSocketAddress[nodeInfos.getNodes().length];
         this.clusterName = nodeInfos.getClusterName().value();
         int dataNodes = 0;
-        int benchNodes = 0;
         int masterAndDataNodes = 0;
         for (int i = 0; i < nodeInfos.getNodes().length; i++) {
             NodeInfo nodeInfo = nodeInfos.getNodes()[i];
@@ -90,12 +88,8 @@ public ExternalTestCluster(TransportAddress... transportAddresses) {
             } else if (DiscoveryNode.masterNode(nodeInfo.getSettings())) {
                 masterAndDataNodes++;
             }
-            if (nodeInfo.getSettings().getAsBoolean("node.bench", false)) {
-                benchNodes++;
-            }
         }
         this.numDataNodes = dataNodes;
-        this.numBenchNodes = benchNodes;
         this.numMasterAndDataNodes = masterAndDataNodes;
         logger.info("Setup ExternalTestCluster [{}] made of [{}] nodes", nodeInfos.getClusterName().value(), size());
     }
@@ -125,11 +119,6 @@ public int numDataAndMasterNodes() {
         return numMasterAndDataNodes;
     }
 
-    @Override
-    public int numBenchNodes() {
-        return numBenchNodes;
-    }
-
     @Override
     public InetSocketAddress[] httpAddresses() {
         return httpAddresses;
diff --git a/src/test/java/org/elasticsearch/test/InternalTestCluster.java b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
index 1b818bdfccfb..2fa53167c267 100644
--- a/src/test/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
@@ -158,7 +158,6 @@
     static final int DEFAULT_MIN_NUM_CLIENT_NODES = 0;
     static final int DEFAULT_MAX_NUM_CLIENT_NODES = 1;
 
-    static final boolean DEFAULT_ENABLE_RANDOM_BENCH_NODES = true;
     static final boolean DEFAULT_ENABLE_HTTP_PIPELINING = true;
 
     public static final String NODE_MODE = nodeMode();
@@ -185,8 +184,6 @@
 
     private final int numSharedClientNodes;
 
-    private final boolean enableRandomBenchNodes;
-
     private final SettingsSource settingsSource;
 
     private final ExecutorService executor;
@@ -200,15 +197,14 @@
 
     private ServiceDisruptionScheme activeDisruptionScheme;
 
-    public InternalTestCluster(long clusterSeed, int minNumDataNodes, int maxNumDataNodes, String clusterName, int numClientNodes, boolean enableRandomBenchNodes,
+    public InternalTestCluster(long clusterSeed, int minNumDataNodes, int maxNumDataNodes, String clusterName, int numClientNodes,
                                boolean enableHttpPipelining, int jvmOrdinal, String nodePrefix) {
-        this(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, DEFAULT_SETTINGS_SOURCE, numClientNodes, enableRandomBenchNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
+        this(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, DEFAULT_SETTINGS_SOURCE, numClientNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
     }
 
     public InternalTestCluster(long clusterSeed,
                                int minNumDataNodes, int maxNumDataNodes, String clusterName, SettingsSource settingsSource, int numClientNodes,
-                               boolean enableRandomBenchNodes, boolean enableHttpPipelining,
-                               int jvmOrdinal, String nodePrefix) {
+                                boolean enableHttpPipelining, int jvmOrdinal, String nodePrefix) {
         super(clusterSeed);
         this.clusterName = clusterName;
 
@@ -237,8 +233,6 @@ public InternalTestCluster(long clusterSeed,
         }
         assert this.numSharedClientNodes >= 0;
 
-        this.enableRandomBenchNodes = enableRandomBenchNodes;
-
         this.nodePrefix = nodePrefix;
 
         assert nodePrefix != null;
@@ -925,10 +919,6 @@ private synchronized void reset(boolean wipeData) throws IOException {
             if (nodeAndClient == null) {
                 changed = true;
                 Builder clientSettingsBuilder = ImmutableSettings.builder().put("node.client", true);
-                if (enableRandomBenchNodes && usually(random)) {
-                    //client nodes might also be bench nodes
-                    clientSettingsBuilder.put("node.bench", true);
-                }
                 nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT);
                 nodeAndClient.node.start();
                 logger.info("Start Shared Node [{}] not shared", nodeAndClient.name);
@@ -1471,11 +1461,6 @@ public int numDataAndMasterNodes() {
         return dataAndMasterNodes().size();
     }
 
-    @Override
-    public int numBenchNodes() {
-        return benchNodeAndClients().size();
-    }
-
     @Override
     public boolean hasFilterCache() {
         return hasFilterCache;
@@ -1566,17 +1551,6 @@ public boolean apply(NodeAndClient nodeAndClient) {
         }
     }
 
-    private synchronized Collection<NodeAndClient> benchNodeAndClients() {
-        return Collections2.filter(nodes.values(), new BenchNodePredicate());
-    }
-
-    private static final class BenchNodePredicate implements Predicate<NodeAndClient> {
-        @Override
-        public boolean apply(NodeAndClient nodeAndClient) {
-            return nodeAndClient.node.settings().getAsBoolean("node.bench", false);
-        }
-    }
-
     private static final class EntryNodePredicate implements Predicate<Map.Entry<String, NodeAndClient>> {
         private final Predicate<NodeAndClient> delegateNodePredicate;
 
diff --git a/src/test/java/org/elasticsearch/test/TestCluster.java b/src/test/java/org/elasticsearch/test/TestCluster.java
index fd3531b677dd..c03bedcc90ed 100644
--- a/src/test/java/org/elasticsearch/test/TestCluster.java
+++ b/src/test/java/org/elasticsearch/test/TestCluster.java
@@ -111,11 +111,6 @@ public void assertAfterTest() throws IOException {
      */
     public abstract int numDataAndMasterNodes();
 
-    /**
-     * Returns the number of bench nodes in the cluster.
-     */
-    public abstract int numBenchNodes();
-
     /**
      * Returns the http addresses of the nodes within the cluster.
      * Can be used to run REST tests against the test cluster.
diff --git a/src/test/java/org/elasticsearch/test/rest/support/Features.java b/src/test/java/org/elasticsearch/test/rest/support/Features.java
index 85a7a63b76e2..a73a3fe79e8b 100644
--- a/src/test/java/org/elasticsearch/test/rest/support/Features.java
+++ b/src/test/java/org/elasticsearch/test/rest/support/Features.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.test.rest.support;
 
 import com.google.common.collect.Lists;
-import org.elasticsearch.test.ElasticsearchIntegrationTest;
 
 import java.util.List;
 
@@ -45,9 +44,6 @@ private Features() {
      */
     public static boolean areAllSupported(List<String> features) {
         for (String feature : features) {
-            if ("benchmark".equals(feature) && ElasticsearchIntegrationTest.cluster().numBenchNodes() > 0) {
-                continue;
-            }
             if (!SUPPORTED.contains(feature)) {
                 return false;
             }
diff --git a/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
index 203f53a2d645..617703de0e22 100644
--- a/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
+++ b/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
@@ -54,8 +54,8 @@ public void testInitializiationIsConsistent() {
         int jvmOrdinal = randomIntBetween(0, 10);
         String nodePrefix = randomRealisticUnicodeOfCodepointLengthBetween(1, 10);
 
-        InternalTestCluster cluster0 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableRandomBenchNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
-        InternalTestCluster cluster1 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableRandomBenchNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
+        InternalTestCluster cluster0 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
+        InternalTestCluster cluster1 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
         assertClusters(cluster0, cluster1, true);
 
     }
@@ -65,7 +65,6 @@ public static void assertClusters(InternalTestCluster cluster0, InternalTestClus
         Settings defaultSettings1 = cluster1.getDefaultSettings();
         assertSettings(defaultSettings0, defaultSettings1, assertClusterName);
         assertThat(cluster0.numDataNodes(), equalTo(cluster1.numDataNodes()));
-        assertThat(cluster0.numBenchNodes(), equalTo(cluster1.numBenchNodes()));
         if (assertClusterName) {
             assertThat(cluster0.getClusterName(), equalTo(cluster1.getClusterName()));
         }
@@ -99,8 +98,8 @@ public void testBeforeTest() throws IOException {
         int jvmOrdinal = randomIntBetween(0, 10);
         String nodePrefix = "foobar";
 
-        InternalTestCluster cluster0 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableRandomBenchNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
-        InternalTestCluster cluster1 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName1, settingsSource, numClientNodes, enableRandomBenchNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
+        InternalTestCluster cluster0 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName, settingsSource, numClientNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
+        InternalTestCluster cluster1 = new InternalTestCluster(clusterSeed, minNumDataNodes, maxNumDataNodes, clusterName1, settingsSource, numClientNodes, enableHttpPipelining, jvmOrdinal, nodePrefix);
 
         assertClusters(cluster0, cluster1, false);
         long seed = randomLong();
diff --git a/src/test/java/org/elasticsearch/transport/ActionNamesTests.java b/src/test/java/org/elasticsearch/transport/ActionNamesTests.java
index 13e548d107eb..92b8e6059a49 100644
--- a/src/test/java/org/elasticsearch/transport/ActionNamesTests.java
+++ b/src/test/java/org/elasticsearch/transport/ActionNamesTests.java
@@ -66,7 +66,6 @@ public void testActionNamesCategories() throws NoSuchFieldException, IllegalAcce
         for (String action : transportService.serverHandlers.keySet()) {
             assertThat("action doesn't belong to known category", action, either(startsWith("indices:admin")).or(startsWith("indices:monitor"))
                     .or(startsWith("indices:data/read")).or(startsWith("indices:data/write"))
-                    .or(startsWith("indices:data/benchmark"))
                     .or(startsWith("cluster:admin")).or(startsWith("cluster:monitor"))
                     .or(startsWith("internal:")));
         }
diff --git a/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationTests.java b/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationTests.java
index 92ff86ff1613..10b7fa91ac07 100644
--- a/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationTests.java
+++ b/src/test/java/org/elasticsearch/transport/netty/NettyTransportMultiPortIntegrationTests.java
@@ -37,7 +37,7 @@
 import static org.elasticsearch.test.ElasticsearchIntegrationTest.Scope;
 import static org.hamcrest.Matchers.*;
 
-@ClusterScope(scope = Scope.SUITE, numDataNodes = 1, enableRandomBenchNodes = false, numClientNodes = 0)
+@ClusterScope(scope = Scope.SUITE, numDataNodes = 1, numClientNodes = 0)
 public class NettyTransportMultiPortIntegrationTests extends ElasticsearchIntegrationTest {
 
     private static int randomPort = -1;
diff --git a/src/test/java/org/elasticsearch/tribe/TribeTests.java b/src/test/java/org/elasticsearch/tribe/TribeTests.java
index a9a8bf2faab9..c4871ac2fa63 100644
--- a/src/test/java/org/elasticsearch/tribe/TribeTests.java
+++ b/src/test/java/org/elasticsearch/tribe/TribeTests.java
@@ -69,7 +69,7 @@
     public static void setupSecondCluster() throws Exception {
         ElasticsearchIntegrationTest.beforeClass();
         // create another cluster
-        cluster2 = new InternalTestCluster(randomLong(), 2, 2, Strings.randomBase64UUID(getRandom()), 0, false, false, CHILD_JVM_ID, SECOND_CLUSTER_NODE_PREFIX);
+        cluster2 = new InternalTestCluster(randomLong(), 2, 2, Strings.randomBase64UUID(getRandom()), 0, false, CHILD_JVM_ID, SECOND_CLUSTER_NODE_PREFIX);
         cluster2.beforeTest(getRandom(), 0.1);
         cluster2.ensureAtLeastNumDataNodes(2);
     }
