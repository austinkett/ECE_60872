diff --git a/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java b/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java
index 665cdf127aec..c652fcacb5f3 100644
--- a/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java
+++ b/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsEc2ServiceImpl.java
@@ -23,13 +23,17 @@
 import com.amazonaws.AmazonWebServiceRequest;
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.Protocol;
-import com.amazonaws.auth.*;
+import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.auth.AWSCredentialsProviderChain;
+import com.amazonaws.auth.BasicAWSCredentials;
+import com.amazonaws.auth.EnvironmentVariableCredentialsProvider;
+import com.amazonaws.auth.InstanceProfileCredentialsProvider;
+import com.amazonaws.auth.SystemPropertiesCredentialsProvider;
 import com.amazonaws.internal.StaticCredentialsProvider;
 import com.amazonaws.retry.RetryPolicy;
 import com.amazonaws.services.ec2.AmazonEC2;
 import com.amazonaws.services.ec2.AmazonEC2Client;
 import org.elasticsearch.ElasticsearchException;
-import org.elasticsearch.cloud.aws.AwsService.CLOUD;
 import org.elasticsearch.cloud.aws.AwsService.CLOUD_AWS;
 import org.elasticsearch.cloud.aws.network.Ec2NameResolver;
 import org.elasticsearch.cloud.aws.node.Ec2CustomNodeAttributes;
@@ -56,8 +60,6 @@
     public AwsEc2ServiceImpl(Settings settings, SettingsFilter settingsFilter, NetworkService networkService, DiscoveryNodeService discoveryNodeService) {
         super(settings);
         // Filter global settings
-        settingsFilter.addFilter(CLOUD.KEY);
-        settingsFilter.addFilter(CLOUD.ACCOUNT);
         settingsFilter.addFilter(CLOUD_AWS.KEY);
         settingsFilter.addFilter(CLOUD_AWS.SECRET);
         settingsFilter.addFilter(CLOUD_AWS.PROXY_PASSWORD);
@@ -93,8 +95,6 @@ public synchronized AmazonEC2 client() {
         } else {
             throw new IllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");
         }
-        String account = settings.get(CLOUD_AWS.KEY, settings.get(CLOUD.ACCOUNT));
-        String key = settings.get(CLOUD_AWS.SECRET, settings.get(CLOUD.KEY));
 
         String proxyHost = settings.get(CLOUD_AWS.PROXY_HOST, settings.get(CLOUD_AWS.DEPRECATED_PROXY_HOST));
         proxyHost = settings.get(CLOUD_EC2.PROXY_HOST, settings.get(CLOUD_EC2.DEPRECATED_PROXY_HOST, proxyHost));
@@ -147,21 +147,7 @@ public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest,
                 false);
         clientConfiguration.setRetryPolicy(retryPolicy);
 
-        AWSCredentialsProvider credentials;
-
-        if (account == null && key == null) {
-            credentials = new AWSCredentialsProviderChain(
-                    new EnvironmentVariableCredentialsProvider(),
-                    new SystemPropertiesCredentialsProvider(),
-                    new InstanceProfileCredentialsProvider()
-            );
-        } else {
-            credentials = new AWSCredentialsProviderChain(
-                    new StaticCredentialsProvider(new BasicAWSCredentials(account, key))
-            );
-        }
-
-        this.client = new AmazonEC2Client(credentials, clientConfiguration);
+        this.client = new AmazonEC2Client(buildCredentials(settings), clientConfiguration);
 
         if (settings.get(CLOUD_EC2.ENDPOINT) != null) {
             String endpoint = settings.get(CLOUD_EC2.ENDPOINT);
@@ -204,6 +190,22 @@ public long delayBeforeNextRetry(AmazonWebServiceRequest originalRequest,
         return this.client;
     }
 
+    public static AWSCredentialsProvider buildCredentials(Settings settings) {
+        String account = settings.get(CLOUD_EC2.KEY, settings.get(CLOUD_AWS.KEY));
+        String key = settings.get(CLOUD_EC2.SECRET, settings.get(CLOUD_AWS.SECRET));
+        if (account == null && key == null) {
+            return new AWSCredentialsProviderChain(
+                new EnvironmentVariableCredentialsProvider(),
+                new SystemPropertiesCredentialsProvider(),
+                new InstanceProfileCredentialsProvider()
+            );
+        }
+
+        return new AWSCredentialsProviderChain(
+            new StaticCredentialsProvider(new BasicAWSCredentials(account, key))
+        );
+    }
+
     @Override
     protected void doStart() throws ElasticsearchException {
     }
diff --git a/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsService.java b/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsService.java
index 155bb0a3445c..c7ef1ccb1186 100644
--- a/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsService.java
+++ b/plugins/cloud-aws/src/main/java/org/elasticsearch/cloud/aws/AwsService.java
@@ -20,16 +20,6 @@
 package org.elasticsearch.cloud.aws;
 
 public interface AwsService {
-    /**
-     * Should be either moved to Core if this settings makes sense
-     * Or removed. See https://github.com/elastic/elasticsearch/issues/12809
-     */
-    @Deprecated
-    final class CLOUD {
-        public static final String KEY = "cloud.key";
-        public static final String ACCOUNT = "cloud.account";
-    }
-
     final class CLOUD_AWS {
         public static final String KEY = "cloud.aws.access_key";
         public static final String SECRET = "cloud.aws.secret_key";
diff --git a/plugins/cloud-aws/src/test/java/org/elasticsearch/discovery/ec2/Ec2CredentialSettingsTests.java b/plugins/cloud-aws/src/test/java/org/elasticsearch/discovery/ec2/Ec2CredentialSettingsTests.java
new file mode 100644
index 000000000000..a4dd7baa3da4
--- /dev/null
+++ b/plugins/cloud-aws/src/test/java/org/elasticsearch/discovery/ec2/Ec2CredentialSettingsTests.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.discovery.ec2;
+
+import com.amazonaws.auth.AWSCredentialsProvider;
+import com.amazonaws.services.ec2.AmazonEC2;
+import org.elasticsearch.cloud.aws.AwsEc2Service;
+import org.elasticsearch.cloud.aws.AwsEc2ServiceImpl;
+import org.elasticsearch.cloud.aws.AwsModule;
+import org.elasticsearch.cloud.aws.AwsService;
+import org.elasticsearch.cluster.node.DiscoveryNodeService;
+import org.elasticsearch.common.network.NetworkService;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.settings.SettingsFilter;
+import org.elasticsearch.test.ESTestCase;
+
+import static org.hamcrest.Matchers.is;
+
+public class Ec2CredentialSettingsTests extends ESTestCase {
+
+    public void testAwsSettings() {
+        Settings settings = Settings.builder()
+                .put(AwsService.CLOUD_AWS.KEY, "aws_key")
+                .put(AwsService.CLOUD_AWS.SECRET, "aws_secret")
+                .build();
+
+        AWSCredentialsProvider credentials = AwsEc2ServiceImpl.buildCredentials(settings);
+        assertThat(credentials.getCredentials().getAWSAccessKeyId(), is("aws_key"));
+        assertThat(credentials.getCredentials().getAWSSecretKey(), is("aws_secret"));
+    }
+
+    public void testEc2Settings() {
+        Settings settings = Settings.builder()
+            .put(AwsService.CLOUD_AWS.KEY, "aws_key")
+            .put(AwsService.CLOUD_AWS.SECRET, "aws_secret")
+            .put(AwsEc2Service.CLOUD_EC2.KEY, "ec2_key")
+            .put(AwsEc2Service.CLOUD_EC2.SECRET, "ec2_secret")
+            .build();
+
+        AWSCredentialsProvider credentials = AwsEc2ServiceImpl.buildCredentials(settings);
+        assertThat(credentials.getCredentials().getAWSAccessKeyId(), is("ec2_key"));
+        assertThat(credentials.getCredentials().getAWSSecretKey(), is("ec2_secret"));
+    }
+}
