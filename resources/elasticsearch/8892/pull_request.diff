diff --git a/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java
index 7eb4fd68c894..c2e64fd8687a 100644
--- a/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java
+++ b/src/main/java/org/elasticsearch/index/engine/internal/InternalEngine.java
@@ -1432,11 +1432,6 @@ private static boolean isMergedSegment(AtomicReader reader) {
 
     private IndexWriter createWriter() throws IOException {
         try {
-            // release locks when started
-            if (IndexWriter.isLocked(store.directory())) {
-                logger.warn("shard is locked, releasing lock");
-                IndexWriter.unlock(store.directory());
-            }
             boolean create = !Lucene.indexExists(store.directory());
             IndexWriterConfig config = new IndexWriterConfig(Lucene.VERSION, analysisService.defaultIndexAnalyzer());
             config.setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND);
diff --git a/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java b/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java
index f75310d34a6e..d38eb2463217 100644
--- a/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java
+++ b/src/test/java/org/elasticsearch/index/engine/internal/InternalEngineTests.java
@@ -388,6 +388,7 @@ public void run() {
 
     @Test
     public void testSegmentsWithMergeFlag() throws Exception {
+
         ConcurrentMergeSchedulerProvider mergeSchedulerProvider = new ConcurrentMergeSchedulerProvider(shardId, EMPTY_SETTINGS, threadPool, new IndexSettingsService(shardId.index(), EMPTY_SETTINGS));
         final AtomicReference<CountDownLatch> waitTillMerge = new AtomicReference<>();
         final AtomicReference<CountDownLatch> waitForMerge = new AtomicReference<>();
@@ -411,6 +412,7 @@ public void afterMerge(OnGoingMerge merge) {
             }
         });
 
+        final Store store = createStore();
         final Engine engine = createEngine(engineSettingsService, store, createTranslog(), mergeSchedulerProvider);
         engine.start();
         ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, testDocument(), Lucene.STANDARD_ANALYZER, B_1, false);
@@ -481,6 +483,7 @@ public boolean apply(Object o) {
         }
 
         engine.close();
+        store.close();
     }
 
     @Test
@@ -1364,6 +1367,7 @@ public void testEnableGcDeletes() throws Exception {
                 .put(InternalEngineHolder.INDEX_GC_DELETES, "0ms")
                 .build();
 
+        Store store = createStore();
         Engine engine = new InternalEngineHolder(shardId, settings, threadPool,
                 engineSettingsService,
                 new ShardIndexingService(shardId, settings,
@@ -1426,6 +1430,7 @@ public void testEnableGcDeletes() throws Exception {
         getResult = engine.get(new Engine.Get(true, newUid("2")));
         assertThat(getResult.exists(), equalTo(false));
         engine.close();
+        store.close();
     }
 
     protected Term newUid(String id) {
