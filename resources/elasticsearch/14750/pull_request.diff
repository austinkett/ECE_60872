diff --git a/core/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java
index a2b12ea5e508..599c86097ffc 100644
--- a/core/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java
+++ b/core/src/main/java/org/elasticsearch/monitor/jvm/JvmInfo.java
@@ -73,7 +73,16 @@
             // ignore
         }
         info.inputArguments = runtimeMXBean.getInputArguments().toArray(new String[runtimeMXBean.getInputArguments().size()]);
-        info.bootClassPath = runtimeMXBean.getBootClassPath();
+        try {
+            info.bootClassPath = runtimeMXBean.getBootClassPath();
+        } catch (UnsupportedOperationException e) {
+            // oracle java 9
+            info.bootClassPath = System.getProperty("sun.boot.class.path");
+            if (info.bootClassPath == null) {
+                // something else
+                info.bootClassPath = "<unknown>";
+            }
+        }
         info.classPath = runtimeMXBean.getClassPath();
         info.systemProperties = runtimeMXBean.getSystemProperties();
 
diff --git a/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java
index 8dc217923de3..21d4b6b0c72d 100644
--- a/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java
+++ b/core/src/main/java/org/elasticsearch/monitor/os/OsProbe.java
@@ -157,12 +157,10 @@ public OsStats osStats() {
      */
     private static Method getMethod(String methodName) {
         try {
-            Method method = osMxBean.getClass().getMethod(methodName);
-            method.setAccessible(true);
-            return method;
+            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName);
         } catch (Throwable t) {
             // not available
+            return null;
         }
-        return null;
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/monitor/process/ProcessProbe.java b/core/src/main/java/org/elasticsearch/monitor/process/ProcessProbe.java
index 822f4f5e7a5e..eca3327e779b 100644
--- a/core/src/main/java/org/elasticsearch/monitor/process/ProcessProbe.java
+++ b/core/src/main/java/org/elasticsearch/monitor/process/ProcessProbe.java
@@ -38,8 +38,8 @@
     private static final Method getCommittedVirtualMemorySize;
 
     static {
-        getMaxFileDescriptorCountField = getMethod("getMaxFileDescriptorCount");
-        getOpenFileDescriptorCountField = getMethod("getOpenFileDescriptorCount");
+        getMaxFileDescriptorCountField = getUnixMethod("getMaxFileDescriptorCount");
+        getOpenFileDescriptorCountField = getUnixMethod("getOpenFileDescriptorCount");
         getProcessCpuLoad = getMethod("getProcessCpuLoad");
         getProcessCpuTime = getMethod("getProcessCpuTime");
         getCommittedVirtualMemorySize = getMethod("getCommittedVirtualMemorySize");
@@ -163,12 +163,23 @@ public ProcessStats processStats() {
      */
     private static Method getMethod(String methodName) {
         try {
-            Method method = osMxBean.getClass().getDeclaredMethod(methodName);
-            method.setAccessible(true);
-            return method;
+            return Class.forName("com.sun.management.OperatingSystemMXBean").getMethod(methodName);
         } catch (Throwable t) {
             // not available
+            return null;
+        }
+    }
+    
+    /**
+     * Returns a given method of the UnixOperatingSystemMXBean,
+     * or null if the method is not found or unavailable.
+     */
+    private static Method getUnixMethod(String methodName) {
+        try {
+            return Class.forName("com.sun.management.UnixOperatingSystemMXBean").getMethod(methodName);
+        } catch (Throwable t) {
+            // not available
+            return null;
         }
-        return null;
     }
 }
diff --git a/core/src/main/resources/org/elasticsearch/bootstrap/security.policy b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy
index 249f6e1325aa..2e2d9d6bd584 100644
--- a/core/src/main/resources/org/elasticsearch/bootstrap/security.policy
+++ b/core/src/main/resources/org/elasticsearch/bootstrap/security.policy
@@ -79,12 +79,8 @@ grant {
   permission java.lang.RuntimePermission "getProtectionDomain";
 
   // reflection hacks:
-  // needed for mock filesystems in tests (to capture implCloseChannel)
-  permission java.lang.RuntimePermission "accessClassInPackage.sun.nio.ch";
   // needed by groovy engine
   permission java.lang.RuntimePermission "accessClassInPackage.sun.reflect";
-  // needed by aws core sdk (TODO: look into this)
-  permission java.lang.RuntimePermission "accessClassInPackage.sun.security.ssl";
   
   // needed by RandomizedRunner
   permission java.lang.RuntimePermission "accessDeclaredMembers";
diff --git a/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
index 44955f11af98..f516a1a4056a 100644
--- a/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
+++ b/core/src/test/java/org/elasticsearch/bwcompat/OldIndexBackwardsCompatibilityIT.java
@@ -82,7 +82,6 @@
 
 // needs at least 2 nodes since it bumps replicas to 1
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0)
-@LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class OldIndexBackwardsCompatibilityIT extends ESIntegTestCase {
     // TODO: test for proper exception on unsupported indexes (maybe via separate test?)
     // We have a 0.20.6.zip etc for this.
diff --git a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityUponUpgradeIT.java b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityUponUpgradeIT.java
index bff1977545ad..faad8402f724 100644
--- a/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityUponUpgradeIT.java
+++ b/core/src/test/java/org/elasticsearch/cluster/routing/RoutingBackwardCompatibilityUponUpgradeIT.java
@@ -36,7 +36,6 @@
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 
 @ESIntegTestCase.ClusterScope(scope = ESIntegTestCase.Scope.TEST, numDataNodes = 0, minNumDataNodes = 0, maxNumDataNodes = 0)
-@LuceneTestCase.SuppressFileSystems("*") // extra files break the single data cluster expectation when unzipping the static index
 public class RoutingBackwardCompatibilityUponUpgradeIT extends ESIntegTestCase {
 
     public void testDefaultRouting() throws Exception {
diff --git a/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java b/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
index 8fcc53dda57c..829ba2c1ca74 100644
--- a/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
+++ b/core/src/test/java/org/elasticsearch/common/blobstore/BlobStoreTests.java
@@ -39,7 +39,6 @@
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.notNullValue;
 
-@LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class BlobStoreTests extends ESTestCase {
 
     @Test
diff --git a/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java b/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
index 751cb9352253..e05681c50f62 100644
--- a/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/io/FileSystemUtilsTests.java
@@ -42,7 +42,6 @@
 /**
  * Unit tests for {@link org.elasticsearch.common.io.FileSystemUtils}.
  */
-@SuppressFileSystems("WindowsFS") // tries to move away open file handles
 public class FileSystemUtilsTests extends ESTestCase {
 
     private Path src;
diff --git a/core/src/test/java/org/elasticsearch/common/util/MultiDataPathUpgraderTests.java b/core/src/test/java/org/elasticsearch/common/util/MultiDataPathUpgraderTests.java
index 9e414987842c..644b2169eca9 100644
--- a/core/src/test/java/org/elasticsearch/common/util/MultiDataPathUpgraderTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/MultiDataPathUpgraderTests.java
@@ -44,7 +44,6 @@
 
 /**
  */
-@LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class MultiDataPathUpgraderTests extends ESTestCase {
 
     public void testUpgradeRandomPaths() throws IOException {
diff --git a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
index a333fb8d0d1f..a7518a5c33c3 100644
--- a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
@@ -43,7 +43,6 @@
 import static org.elasticsearch.common.settings.Settings.settingsBuilder;
 import static org.hamcrest.CoreMatchers.equalTo;
 
-@LuceneTestCase.SuppressFileSystems("ExtrasFS") // TODO: fix test to allow extras
 public class NodeEnvironmentTests extends ESTestCase {
 
     private final Settings idxSettings = Settings.builder().put(SETTING_NUMBER_OF_SHARDS, 1).build();
diff --git a/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java b/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
index bfc570c7bc4d..74368ef53731 100644
--- a/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
+++ b/core/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
@@ -67,7 +67,6 @@
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.startsWith;
 
-@LuceneTestCase.SuppressFileSystems("ExtrasFS") // TODO: fix test to work with ExtrasFS
 public class MetaDataStateFormatTests extends ESTestCase {
 
 
diff --git a/core/src/test/java/org/elasticsearch/index/codec/postingformat/PostingsFormatTests.java b/core/src/test/java/org/elasticsearch/index/codec/postingformat/PostingsFormatTests.java
index f9884452c627..f91d2ab757a8 100644
--- a/core/src/test/java/org/elasticsearch/index/codec/postingformat/PostingsFormatTests.java
+++ b/core/src/test/java/org/elasticsearch/index/codec/postingformat/PostingsFormatTests.java
@@ -34,6 +34,7 @@
 })
 @TimeoutSuite(millis = TimeUnits.HOUR)
 @LuceneTestCase.SuppressSysoutChecks(bugUrl = "we log a lot on purpose")
+@LuceneTestCase.SuppressFileSystems("*") // incompatible with java 9: https://issues.apache.org/jira/browse/LUCENE-6795
 public class PostingsFormatTests extends BasePostingsFormatTestCase {
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/index/store/StoreTests.java b/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
index abf5828ef104..0ba2978230ff 100644
--- a/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
+++ b/core/src/test/java/org/elasticsearch/index/store/StoreTests.java
@@ -1367,7 +1367,7 @@ public Directory newDirectory() throws IOException {
         } catch (CorruptIndexException e) {
             assertEquals(ex.getMessage(), e.getMessage());
             assertEquals(ex.toString(), e.toString());
-            assertEquals(ExceptionsHelper.stackTrace(ex), ExceptionsHelper.stackTrace(e));
+            assertArrayEquals(ex.getStackTrace(), e.getStackTrace());
         }
 
         store.removeCorruptionMarker();
@@ -1379,7 +1379,7 @@ public Directory newDirectory() throws IOException {
             fail("should be corrupted");
         } catch (CorruptIndexException e) {
             assertEquals("foobar (resource=preexisting_corruption)", e.getMessage());
-            assertEquals(ExceptionsHelper.stackTrace(ioe), ExceptionsHelper.stackTrace(e.getCause()));
+            assertArrayEquals(ioe.getStackTrace(), e.getCause().getStackTrace());
         }
         store.close();
     }
diff --git a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
index 7e0921091420..d428ee2cd820 100644
--- a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
+++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
@@ -68,7 +68,6 @@
 /**
  *
  */
-@LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class TranslogTests extends ESTestCase {
 
     private static final Pattern PARSE_LEGACY_ID_PATTERN = Pattern.compile("^" + Translog.TRANSLOG_FILE_PREFIX + "(\\d+)((\\.recovering))?$");
diff --git a/core/src/test/java/org/elasticsearch/network/DirectBufferNetworkIT.java b/core/src/test/java/org/elasticsearch/network/DirectBufferNetworkIT.java
deleted file mode 100644
index 6d79de93770a..000000000000
--- a/core/src/test/java/org/elasticsearch/network/DirectBufferNetworkIT.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.network;
-
-import org.elasticsearch.action.index.IndexRequestBuilder;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.common.unit.ByteSizeValue;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.node.Node;
-import org.elasticsearch.test.ESIntegTestCase;
-import org.hamcrest.Matchers;
-import org.junit.Test;
-
-import java.io.ByteArrayOutputStream;
-import java.lang.reflect.Field;
-import java.nio.ByteBuffer;
-
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
-
-/**
- */
-public class DirectBufferNetworkIT extends ESIntegTestCase {
-
-    @Override
-    protected Settings nodeSettings(int nodeOrdinal) {
-        return Settings.builder()
-            .put(Node.HTTP_ENABLED, true)
-            .put(super.nodeSettings(nodeOrdinal)).build();
-    }
-
-    /**
-     * This test validates that using large data sets (large docs + large API requests) don't
-     * cause a large direct byte buffer to be allocated internally in the sun.nio buffer cache.
-     * <p/>
-     * See {@link org.elasticsearch.common.netty.NettyUtils#DEFAULT_GATHERING} for more info.
-     */
-    @Test
-    public void verifySaneDirectBufferAllocations() throws Exception {
-        createIndex("test");
-
-        int estimatedBytesSize = scaledRandomIntBetween(ByteSizeValue.parseBytesSizeValue("1.1mb", "estimatedBytesSize").bytesAsInt(),
-                                                        ByteSizeValue.parseBytesSizeValue("1.5mb", "estimatedBytesSize").bytesAsInt());
-        byte[] data = new byte[estimatedBytesSize];
-        getRandom().nextBytes(data);
-
-        ByteArrayOutputStream docOut = new ByteArrayOutputStream();
-        // we use smile to automatically use the binary mapping
-        XContentBuilder doc = XContentFactory.smileBuilder(docOut).startObject().startObject("doc").field("value", data).endObject();
-        doc.close();
-        byte[] docBytes = docOut.toByteArray();
-
-        int numDocs = randomIntBetween(2, 5);
-        logger.info("indexing [{}] docs, each with size [{}]", numDocs, estimatedBytesSize);
-        IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs];
-        for (int i = 0; i < numDocs; ++i) {
-            builders[i] = client().prepareIndex("test", "type").setSource(docBytes);
-        }
-        indexRandom(true, builders);
-        logger.info("done indexing");
-
-        logger.info("executing random client search for all docs");
-        assertHitCount(client().prepareSearch("test").setFrom(0).setSize(numDocs).get(), numDocs);
-        logger.info("executing transport client search for all docs");
-        assertHitCount(internalCluster().transportClient().prepareSearch("test").setFrom(0).setSize(numDocs).get(), numDocs);
-
-        logger.info("executing HTTP search for all docs");
-        // simulate large HTTP call as well
-        httpClient().method("GET").path("/test/_search").addParam("size", Integer.toString(numDocs)).execute();
-
-        logger.info("validating large direct buffer not allocated");
-        validateNoLargeDirectBufferAllocated();
-    }
-    
-    /**
-     * Validates that all the thread local allocated ByteBuffer in sun.nio under the Util$BufferCache
-     * are not greater than 1mb.
-     */
-    private void validateNoLargeDirectBufferAllocated() throws Exception {
-        // Make the fields in the Thread class that store ThreadLocals
-        // accessible
-        Field threadLocalsField = Thread.class.getDeclaredField("threadLocals");
-        threadLocalsField.setAccessible(true);
-        // Make the underlying array of ThreadLoad.ThreadLocalMap.Entry objects
-        // accessible
-        Class<?> tlmClass = Class.forName("java.lang.ThreadLocal$ThreadLocalMap");
-        Field tableField = tlmClass.getDeclaredField("table");
-        tableField.setAccessible(true);
-
-        for (Thread thread : Thread.getAllStackTraces().keySet()) {
-            if (thread == null) {
-                continue;
-            }
-            Object threadLocalMap = threadLocalsField.get(thread);
-            if (threadLocalMap == null) {
-                continue;
-            }
-            Object[] table = (Object[]) tableField.get(threadLocalMap);
-            if (table == null) {
-                continue;
-            }
-            for (Object entry : table) {
-                if (entry == null) {
-                    continue;
-                }
-                Field valueField = entry.getClass().getDeclaredField("value");
-                valueField.setAccessible(true);
-                Object value = valueField.get(entry);
-                if (value == null) {
-                    continue;
-                }
-                if (!value.getClass().getName().equals("sun.nio.ch.Util$BufferCache")) {
-                    continue;
-                }
-                Field buffersField = value.getClass().getDeclaredField("buffers");
-                buffersField.setAccessible(true);
-                Object[] buffers = (Object[]) buffersField.get(value);
-                for (Object buffer : buffers) {
-                    if (buffer == null) {
-                        continue;
-                    }
-                    assertThat(((ByteBuffer) buffer).capacity(), Matchers.lessThan(1 * 1024 * 1024));
-                }
-            }
-        }
-
-    }
-}
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java b/core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java
index 0065eb5b74ac..3fcd1cee4bec 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerIT.java
@@ -85,7 +85,6 @@
 import static org.jboss.netty.handler.codec.http.HttpVersion.HTTP_1_1;
 
 @ClusterScope(scope = Scope.TEST, numDataNodes = 0, transportClientRatio = 0.0)
-@LuceneTestCase.SuppressFileSystems("*") // TODO: clean up this test to allow extra files
 // TODO: jimfs is really broken here (throws wrong exception from detection method).
 // if its in your classpath, then do not use plugins!!!!!!
 public class PluginManagerIT extends ESIntegTestCase {
diff --git a/core/src/test/java/org/elasticsearch/plugins/PluginManagerPermissionTests.java b/core/src/test/java/org/elasticsearch/plugins/PluginManagerPermissionTests.java
index 8c92537fd174..661e9d6bf90e 100644
--- a/core/src/test/java/org/elasticsearch/plugins/PluginManagerPermissionTests.java
+++ b/core/src/test/java/org/elasticsearch/plugins/PluginManagerPermissionTests.java
@@ -48,7 +48,6 @@
 import static org.hamcrest.Matchers.*;
 
 // there are some lucene file systems that seem to cause problems (deleted files, dirs instead of files)
-@LuceneTestCase.SuppressFileSystems("*")
 public class PluginManagerPermissionTests extends ESTestCase {
 
     private String pluginName = "my-plugin";
diff --git a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
index 85992f62b3e3..a3f175dc3c2a 100644
--- a/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESIntegTestCase.java
@@ -225,7 +225,6 @@
  * </ul>
  * </p>
  */
-@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet
 @ReproduceInfoPrinter.Properties({ "es.node.mode", "es.node.local", ESIntegTestCase.TESTS_CLUSTER,
         ESIntegTestCase.TESTS_ENABLE_MOCK_MODULES })
 public abstract class ESIntegTestCase extends ESTestCase {
diff --git a/core/src/test/java/org/elasticsearch/test/ESTestCase.java b/core/src/test/java/org/elasticsearch/test/ESTestCase.java
index 75d9d25fcd79..33500280b731 100644
--- a/core/src/test/java/org/elasticsearch/test/ESTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESTestCase.java
@@ -37,6 +37,7 @@
 import org.apache.lucene.util.TestRuleMarkFailure;
 import org.apache.lucene.util.TestUtil;
 import org.apache.lucene.util.TimeUnits;
+import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.Version;
 import org.elasticsearch.bootstrap.BootstrapForTesting;
 import org.elasticsearch.cache.recycler.MockPageCacheRecycler;
@@ -106,6 +107,7 @@
         "LuceneVarGapFixedInterval", "LuceneVarGapDocFreqInterval", "Lucene50"
 })
 @LuceneTestCase.SuppressReproduceLine
+@LuceneTestCase.SuppressFileSystems("*") // incompatible with java 9: https://issues.apache.org/jira/browse/LUCENE-6795
 @ReproduceInfoPrinter.Properties({ "es.logger.level", "tests.assertion.disabled", "tests.security.manager", "tests.nightly", "tests.jvms",
         "tests.client.ratio", "tests.heap.size" })
 public abstract class ESTestCase extends LuceneTestCase {
@@ -631,4 +633,21 @@ public void assertPathHasBeenCleared(Path path) throws Exception {
     public static TestRuleMarkFailure getSuiteFailureMarker() {
         return suiteFailureMarker;
     }
+
+    /** Compares two stack traces, ignoring module (which is not yet serialized) */
+    public static void assertArrayEquals(StackTraceElement expected[], StackTraceElement actual[]) {
+        assertEquals(expected.length, actual.length);
+        for (int i = 0; i < expected.length; i++) {
+            assertEquals(expected[i], actual[i]);
+        }
+    }
+
+    /** Compares two stack trace elements, ignoring module (which is not yet serialized) */
+    public static void assertEquals(StackTraceElement expected, StackTraceElement actual) {
+        assertEquals(expected.getClassName(), actual.getClassName());
+        assertEquals(expected.getMethodName(), actual.getMethodName());
+        assertEquals(expected.getFileName(), actual.getFileName());
+        assertEquals(expected.getLineNumber(), actual.getLineNumber());
+        assertEquals(expected.isNativeMethod(), actual.isNativeMethod());
+    }
 }
diff --git a/core/src/test/java/org/elasticsearch/test/ESTokenStreamTestCase.java b/core/src/test/java/org/elasticsearch/test/ESTokenStreamTestCase.java
index 29a1a3362d94..a88c203cad39 100644
--- a/core/src/test/java/org/elasticsearch/test/ESTokenStreamTestCase.java
+++ b/core/src/test/java/org/elasticsearch/test/ESTokenStreamTestCase.java
@@ -37,6 +37,7 @@
 @TimeoutSuite(millis = TimeUnits.HOUR)
 @LuceneTestCase.SuppressReproduceLine
 @LuceneTestCase.SuppressSysoutChecks(bugUrl = "we log a lot on purpose")
+@LuceneTestCase.SuppressFileSystems("*") // incompatible with java 9: https://issues.apache.org/jira/browse/LUCENE-6795
 /**
  * Basic test case for token streams. the assertion methods in this class will
  * run basic checks to enforce correct behavior of the token streams.
diff --git a/core/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java b/core/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
index 4d167d761e9c..41c7f49373dd 100644
--- a/core/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
+++ b/core/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
@@ -38,7 +38,6 @@
  * Basic test that ensure that the internal cluster reproduces the same
  * configuration given the same seed / input.
  */
-@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet
 public class InternalTestClusterTests extends ESTestCase {
 
     public void testInitializiationIsConsistent() {
diff --git a/core/src/test/java/org/elasticsearch/tribe/TribeIT.java b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
index 2080129e2cbc..a2b67200fa0d 100644
--- a/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
+++ b/core/src/test/java/org/elasticsearch/tribe/TribeIT.java
@@ -60,7 +60,6 @@
  * Note, when talking to tribe client, no need to set the local flag on master read operations, it
  * does it by default.
  */
-@LuceneTestCase.SuppressFileSystems("ExtrasFS") // doesn't work with potential multi data path from test cluster yet
 public class TribeIT extends ESIntegTestCase {
 
     public static final String SECOND_CLUSTER_NODE_PREFIX = "node_tribe2";
diff --git a/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java b/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
index 14f7eca6832c..93d61c4f5b87 100644
--- a/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
+++ b/core/src/test/java/org/elasticsearch/watcher/FileWatcherTests.java
@@ -34,7 +34,6 @@
 
 import static org.hamcrest.Matchers.*;
 
-@LuceneTestCase.SuppressFileSystems("ExtrasFS")
 public class FileWatcherTests extends ESTestCase {
 
     private class RecordingChangeListener extends FileChangesListener {
diff --git a/plugins/cloud-azure/src/test/java/org/apache/lucene/store/ESBaseDirectoryTestCase.java b/plugins/cloud-azure/src/test/java/org/apache/lucene/store/ESBaseDirectoryTestCase.java
index 4c6c230c5dcb..82a642cf0e4d 100644
--- a/plugins/cloud-azure/src/test/java/org/apache/lucene/store/ESBaseDirectoryTestCase.java
+++ b/plugins/cloud-azure/src/test/java/org/apache/lucene/store/ESBaseDirectoryTestCase.java
@@ -36,6 +36,7 @@
 @TimeoutSuite(millis = TimeUnits.HOUR)
 @LuceneTestCase.SuppressReproduceLine
 @LuceneTestCase.SuppressSysoutChecks(bugUrl = "we log a lot on purpose")
+@LuceneTestCase.SuppressFileSystems("*") // incompatible with java 9: https://issues.apache.org/jira/browse/LUCENE-6795
 public abstract class ESBaseDirectoryTestCase extends BaseDirectoryTestCase {
     static {
         BootstrapForTesting.ensureInitialized();
diff --git a/pom.xml b/pom.xml
index 27f45d5cf186..a67edfd99a87 100644
--- a/pom.xml
+++ b/pom.xml
@@ -836,7 +836,7 @@
                 <plugin>
                     <groupId>de.thetaphi</groupId>
                     <artifactId>forbiddenapis</artifactId>
-                    <version>1.8</version>
+                    <version>2.0</version>
 
                     <executions>
                         <execution>
diff --git a/qa/backwards/2.0.0/pom.xml b/qa/backwards/2.0.0/pom.xml
index f150f3ac503c..d2afcbc9747f 100644
--- a/qa/backwards/2.0.0/pom.xml
+++ b/qa/backwards/2.0.0/pom.xml
@@ -18,4 +18,17 @@
         <tests.bwc.version>2.0.0</tests.bwc.version>
         <skip.integ.tests>${skipTests}</skip.integ.tests>
     </properties>
+
+    <!-- disable backwards tests with 2.0.0 on java 9, because that
+         version will die instantly under jigsaw -->
+    <profiles>
+        <profile>
+            <activation>
+                <jdk>1.9</jdk>
+            </activation>
+            <properties>
+                <skip.integ.tests>true</skip.integ.tests>
+            </properties>
+        </profile>
+    </profiles>
 </project>
diff --git a/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java
index e18ca34afa2a..327bd2c76c63 100644
--- a/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java
+++ b/qa/smoke-test-client/src/test/java/org/elasticsearch/smoketest/ESSmokeClientTestCase.java
@@ -69,7 +69,7 @@
      */
     public static final String TESTS_CLUSTER_DEFAULT = "localhost:9300";
 
-    protected static ESLogger logger = ESLoggerFactory.getLogger(ESSmokeClientTestCase.class.getName());
+    protected static final ESLogger logger = ESLoggerFactory.getLogger(ESSmokeClientTestCase.class.getName());
 
     private static final AtomicInteger counter = new AtomicInteger();
     private static Client client;
