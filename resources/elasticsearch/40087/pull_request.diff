diff --git a/x-pack/plugin/sql/qa/src/main/resources/agg-ordering.sql-spec b/x-pack/plugin/sql/qa/src/main/resources/agg-ordering.sql-spec
index 3edbe94057a9..b96d77399af2 100644
--- a/x-pack/plugin/sql/qa/src/main/resources/agg-ordering.sql-spec
+++ b/x-pack/plugin/sql/qa/src/main/resources/agg-ordering.sql-spec
@@ -85,3 +85,36 @@ SELECT emp_no, MIN(languages) AS min FROM test_emp GROUP BY emp_no ORDER BY MAX(
 
 aggWithMixOfOrdinals
 SELECT gender AS g, MAX(salary) AS m FROM test_emp GROUP BY gender ORDER BY 2 DESC LIMIT 3;
+
+multipleGroupingsAndOrderingByGroups_1
+SELECT gender AS g, first_name, last_name AS l FROM test_emp GROUP BY first_name, g, last_name ORDER BY gender, first_name, last_name;
+
+multipleGroupingsAndOrderingByGroups_2
+SELECT gender AS g, first_name, last_name AS l FROM test_emp GROUP BY first_name, g, last_name ORDER BY gender DESC, first_name DESC, last_name ASC;
+
+multipleGroupingsAndOrderingByGroups_3
+SELECT gender AS g, first_name AS f, last_name AS l FROM test_emp GROUP BY f, g, l ORDER BY l, g, f;
+
+multipleGroupingsAndOrderingByGroups_4
+SELECT gender AS g, first_name, last_name FROM test_emp GROUP BY g, last_name, first_name ORDER BY gender, first_name, last_name;
+
+multipleGroupingsAndOrderingByGroups_5
+SELECT gender AS g, first_name, last_name AS l FROM test_emp GROUP BY first_name, g, last_name ORDER BY gender DESC, first_name, last_name;
+
+multipleGroupingsAndOrderingByGroups_6
+SELECT gender AS g, first_name, last_name AS l FROM test_emp GROUP BY first_name, g, last_name ORDER BY gender, first_name DESC, last_name;
+
+multipleGroupingsAndOrderingByGroups_7
+SELECT gender AS g, first_name AS f, last_name AS l FROM test_emp GROUP BY f, gender, l ORDER BY l, g DESC, f DESC;
+
+multipleGroupingsAndOrderingByGroups_8
+SELECT gender AS g, first_name, last_name FROM test_emp GROUP BY g, last_name, first_name ORDER BY gender ASC, first_name DESC, last_name ASC;
+
+multipleGroupingsAndOrderingByGroupsWithFunctions_1
+SELECT first_name f, last_name l, gender g, CONCAT(UCASE(first_name), LCASE(last_name)) c FROM test_emp GROUP BY gender, l, f, c ORDER BY c DESC, first_name, l ASC, g;
+
+multipleGroupingsAndOrderingByGroupsWithFunctions_2
+SELECT first_name f, last_name l, gender g, CONCAT(first_name, last_name) c FROM test_emp GROUP BY gender, l, f, c ORDER BY gender, c DESC, first_name, last_name ASC;
+
+multipleGroupingsAndOrderingByGroupsWithFunctions_3
+SELECT first_name f, last_name l, LCASE(gender) g, CONCAT(UCASE(first_name), LCASE(last_name)) c FROM test_emp GROUP BY f, LCASE(gender), l, c ORDER BY c DESC, first_name, l ASC, g;
\ No newline at end of file
diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java
index 0e6a88a90703..4b59db680637 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/optimizer/Optimizer.java
@@ -94,6 +94,7 @@
 import java.util.Set;
 import java.util.function.Consumer;
 
+import static org.elasticsearch.xpack.sql.expression.Expressions.equalsAsAttribute;
 import static org.elasticsearch.xpack.sql.expression.Literal.FALSE;
 import static org.elasticsearch.xpack.sql.expression.Literal.TRUE;
 import static org.elasticsearch.xpack.sql.expression.predicate.Predicates.combineAnd;
@@ -884,7 +885,26 @@ protected LogicalPlan rule(OrderBy ob) {
                 for (Order o : nonConstant) {
                     Expression fieldToOrder = o.child();
                     for (Expression group : a.groupings()) {
-                        if (Expressions.equalsAsAttribute(fieldToOrder, group)) {
+                        Holder<Boolean> isMatching = new Holder<>(Boolean.FALSE);
+                        if (equalsAsAttribute(fieldToOrder, group)) {
+                            isMatching.set(Boolean.TRUE);
+                        } else {
+                            a.aggregates().forEach(alias -> {
+                                if (alias instanceof Alias) {
+                                    Expression child = ((Alias) alias).child();
+                                    // Check if the groupings (a, y) match the orderings (b, x) through the aggregates' aliases (x, y)
+                                    // e.g. SELECT a AS x, b AS y ... GROUP BY a, y ORDER BY b, x
+                                    if ((equalsAsAttribute(child, group)
+                                            && (equalsAsAttribute(alias, fieldToOrder) || equalsAsAttribute(child, fieldToOrder))) 
+                                        || (equalsAsAttribute(alias, group)
+                                                && (equalsAsAttribute(alias, fieldToOrder) || equalsAsAttribute(child, fieldToOrder)))) {
+                                        isMatching.set(Boolean.TRUE);
+                                    }
+                                }
+                            });
+                        }
+                        
+                        if (isMatching.get() == true) {
                             // move grouping in front
                             groupings.remove(group);
                             groupings.add(0, group);
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java
index 286524518e96..0d9df66f378e 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/optimizer/OptimizerTests.java
@@ -1259,4 +1259,68 @@ public void testTranslateMaxToLast() {
         assertSame(last, aggregates.get(0));
         assertEquals(max2, aggregates.get(1));
     }
+    
+    public void testSortAggregateOnOrderByWithTwoFields() {
+        FieldAttribute firstField = new FieldAttribute(EMPTY, "first_field", new EsField("first_field", DataType.BYTE, emptyMap(), true));
+        FieldAttribute secondField = new FieldAttribute(EMPTY, "second_field",
+                new EsField("second_field", DataType.BYTE, emptyMap(), true));
+        Alias firstAlias = new Alias(EMPTY, "first_alias", firstField);
+        Alias secondAlias = new Alias(EMPTY, "second_alias", secondField);
+        Order firstOrderBy = new Order(EMPTY, firstField, OrderDirection.ASC, Order.NullsPosition.LAST);
+        Order secondOrderBy = new Order(EMPTY, secondField, OrderDirection.ASC, Order.NullsPosition.LAST);
+        
+        OrderBy orderByPlan = new OrderBy(EMPTY, 
+                new Aggregate(EMPTY, FROM(), Arrays.asList(secondField, firstField), Arrays.asList(secondAlias, firstAlias)),
+                Arrays.asList(firstOrderBy, secondOrderBy));
+        LogicalPlan result = new Optimizer.SortAggregateOnOrderBy().apply(orderByPlan);
+        
+        assertTrue(result instanceof OrderBy);
+        List<Order> order = ((OrderBy) result).order();
+        assertEquals(2, order.size());
+        assertTrue(order.get(0).child() instanceof FieldAttribute);
+        assertTrue(order.get(1).child() instanceof FieldAttribute);
+        assertEquals("first_field", ((FieldAttribute) order.get(0).child()).name());
+        assertEquals("second_field", ((FieldAttribute) order.get(1).child()).name());
+        
+        assertTrue(((OrderBy) result).child() instanceof Aggregate);
+        Aggregate agg = (Aggregate) ((OrderBy) result).child();
+        List<?> groupings = agg.groupings();
+        assertEquals(2, groupings.size());
+        assertTrue(groupings.get(0) instanceof FieldAttribute);
+        assertTrue(groupings.get(1) instanceof FieldAttribute);
+        assertEquals(firstField, ((FieldAttribute) groupings.get(0)));
+        assertEquals(secondField, ((FieldAttribute) groupings.get(1)));
+    }
+    
+    public void testSortAggregateOnOrderByOnlyAliases() {
+        FieldAttribute firstField = new FieldAttribute(EMPTY, "first_field", new EsField("first_field", DataType.BYTE, emptyMap(), true));
+        FieldAttribute secondField = new FieldAttribute(EMPTY, "second_field",
+                new EsField("second_field", DataType.BYTE, emptyMap(), true));
+        Alias firstAlias = new Alias(EMPTY, "first_alias", firstField);
+        Alias secondAlias = new Alias(EMPTY, "second_alias", secondField);
+        Order firstOrderBy = new Order(EMPTY, firstAlias, OrderDirection.ASC, Order.NullsPosition.LAST);
+        Order secondOrderBy = new Order(EMPTY, secondAlias, OrderDirection.ASC, Order.NullsPosition.LAST);
+        
+        OrderBy orderByPlan = new OrderBy(EMPTY, 
+                new Aggregate(EMPTY, FROM(), Arrays.asList(secondAlias, firstAlias), Arrays.asList(secondAlias, firstAlias)),
+                Arrays.asList(firstOrderBy, secondOrderBy));
+        LogicalPlan result = new Optimizer.SortAggregateOnOrderBy().apply(orderByPlan);
+        
+        assertTrue(result instanceof OrderBy);
+        List<Order> order = ((OrderBy) result).order();
+        assertEquals(2, order.size());
+        assertTrue(order.get(0).child() instanceof Alias);
+        assertTrue(order.get(1).child() instanceof Alias);
+        assertEquals("first_alias", ((Alias) order.get(0).child()).name());
+        assertEquals("second_alias", ((Alias) order.get(1).child()).name());
+        
+        assertTrue(((OrderBy) result).child() instanceof Aggregate);
+        Aggregate agg = (Aggregate) ((OrderBy) result).child();
+        List<?> groupings = agg.groupings();
+        assertEquals(2, groupings.size());
+        assertTrue(groupings.get(0) instanceof Alias);
+        assertTrue(groupings.get(1) instanceof Alias);
+        assertEquals(firstAlias, ((Alias) groupings.get(0)));
+        assertEquals(secondAlias, ((Alias) groupings.get(1)));
+    }
 }
