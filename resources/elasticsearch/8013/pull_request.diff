diff --git a/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java b/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java
index 91bd716aa671..3ee0e13249c9 100644
--- a/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java
+++ b/src/main/java/org/elasticsearch/index/merge/policy/ElasticsearchMergePolicy.java
@@ -202,7 +202,10 @@ public MergeSpecification findForcedMerges(SegmentInfos segmentInfos,
       if (upgradeInProgress) {
           MergeSpecification spec = new IndexUpgraderMergeSpecification();
           for (SegmentCommitInfo info : segmentInfos) {
-              if (Version.CURRENT.luceneVersion.minor > info.info.getVersion().minor) {
+              org.apache.lucene.util.Version old = info.info.getVersion();
+              org.apache.lucene.util.Version cur = Version.CURRENT.luceneVersion;
+              if (cur.major > old.major ||
+                  cur.major == old.major && cur.minor > old.minor) {
                   // TODO: Use IndexUpgradeMergePolicy instead.  We should be comparing codecs,
                   // for now we just assume every minor upgrade has a new format.
                   spec.add(new OneMerge(Lists.newArrayList(info)));
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
index 9faeafb9287c..99f54868aa85 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
@@ -122,17 +122,6 @@ public RestResponse buildResponse(OptimizeResponse response, XContentBuilder bui
         }
         return new Tuple<>(total_bytes, to_upgrade_bytes);
     }
-    
-    // this is a silly class which should just be a standalone function, but java doesn't even have a standard Pair that could
-    // be used to return 2 values from a function...
-    static class UpgradeSummary {
-        public long total_bytes;
-        public long to_upgrade_bytes;
-        
-        UpgradeSummary(IndexSegments indexSegments) {
-            
-        }
-    }
 
     static final XContentBuilderString SIZE = new XContentBuilderString("size");
     static final XContentBuilderString SIZE_IN_BYTES = new XContentBuilderString("size_in_bytes");
diff --git a/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeReallyOldIndexTest.java b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeReallyOldIndexTest.java
new file mode 100644
index 000000000000..6169501169cc
--- /dev/null
+++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeReallyOldIndexTest.java
@@ -0,0 +1,108 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.rest.action.admin.indices.upgrade;
+
+import org.apache.http.impl.client.HttpClients;
+import org.apache.lucene.util.TestUtil;
+import org.elasticsearch.action.admin.cluster.node.info.NodeInfo;
+import org.elasticsearch.action.admin.cluster.node.info.NodesInfoResponse;
+import org.elasticsearch.action.admin.indices.get.GetIndexResponse;
+import org.elasticsearch.action.search.SearchResponse;
+import org.elasticsearch.client.Client;
+import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.transport.InetSocketTransportAddress;
+import org.elasticsearch.common.transport.TransportAddress;
+import org.elasticsearch.node.internal.InternalNode;
+import org.elasticsearch.test.ElasticsearchIntegrationTest;
+import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.Arrays;
+
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+
+@ElasticsearchIntegrationTest.ClusterScope(scope = ElasticsearchIntegrationTest.Scope.TEST, numDataNodes = 0, minNumDataNodes = 0, maxNumDataNodes = 0)
+public class UpgradeReallyOldIndexTest extends ElasticsearchIntegrationTest {
+
+    // this can maybe go into  ElasticsearchIntegrationTest
+    public File prepareBackwardsDataDir(File backwardsIndex) throws IOException {
+        File dataDir = new File(newTempDir(), "data");
+        TestUtil.unzip(backwardsIndex, dataDir.getParentFile());
+        assertTrue(dataDir.exists());
+        String[] list = dataDir.list();
+        if (list == null || list.length > 1) {
+            throw new IllegalStateException("Backwards index must contain exactly one cluster");
+        }
+        File src = new File(dataDir, list[0]);
+        File dest = new File(dataDir, internalCluster().getClusterName());
+        assertTrue(src.exists());
+        src.renameTo(dest);
+        assertFalse(src.exists());
+        assertTrue(dest.exists());
+        return dataDir;
+    }
+
+
+    public void testUpgrade_0_20() throws Exception {
+        File dataDir = prepareBackwardsDataDir(new File(getClass().getResource("index-0.20.zip").toURI()));
+        internalCluster().startNode(ImmutableSettings.builder()
+                .put("path.data", dataDir.getPath())
+                .put("node.mode", "network")
+                .put("gateway.type", "local") // this is important we need to recover from gateway
+                .put(InternalNode.HTTP_ENABLED, true)
+                .build());
+       
+        assertIndexSanity();
+        
+        HttpRequestBuilder httpClient = httpClient();
+
+        UpgradeTest.assertNotUpgraded(httpClient, "test");
+        UpgradeTest.runUpgrade(httpClient, "test", "wait_for_completion", "true");
+        UpgradeTest.assertUpgraded(httpClient, "test");
+    }
+    
+    void assertIndexSanity() {
+        GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().get();
+        logger.info("Found indices: {}", Arrays.toString(getIndexResponse.indices()));
+        assertEquals(1, getIndexResponse.indices().length);
+        assertEquals("test", getIndexResponse.indices()[0]);
+        ensureYellow("test");
+        SearchResponse test = client().prepareSearch("test").get();
+        assertThat(test.getHits().getTotalHits(), greaterThanOrEqualTo(1l));
+    }
+
+    static HttpRequestBuilder httpClient() {
+        NodeInfo info = nodeInfo(client());
+        info.getHttp().address().boundAddress();
+        TransportAddress publishAddress = info.getHttp().address().publishAddress();
+        assertEquals(1, publishAddress.uniqueAddressTypeId());
+        InetSocketAddress address = ((InetSocketTransportAddress) publishAddress).address();
+        return new HttpRequestBuilder(HttpClients.createDefault()).host(address.getHostName()).port(address.getPort());
+    }
+
+    static NodeInfo nodeInfo(final Client client) {
+        final NodesInfoResponse nodeInfos = client.admin().cluster().prepareNodesInfo().get();
+        final NodeInfo[] nodes = nodeInfos.getNodes();
+        assertEquals(1, nodes.length);
+        return nodes[0];
+    }
+}
diff --git a/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java
index 727dd5fe9b3c..917f315ee23c 100644
--- a/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java
+++ b/src/test/java/org/elasticsearch/rest/action/admin/indices/upgrade/UpgradeTest.java
@@ -23,9 +23,16 @@
 import org.apache.http.impl.client.HttpClients;
 import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.Version;
+import org.elasticsearch.action.admin.indices.segments.IndexSegments;
+import org.elasticsearch.action.admin.indices.segments.IndexShardSegments;
+import org.elasticsearch.action.admin.indices.segments.IndicesSegmentResponse;
+import org.elasticsearch.action.admin.indices.segments.ShardSegments;
 import org.elasticsearch.action.index.IndexRequestBuilder;
+import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.logging.Loggers;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.index.engine.Segment;
 import org.elasticsearch.node.internal.InternalNode;
 import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;
 import org.elasticsearch.test.rest.client.http.HttpRequestBuilder;
@@ -54,14 +61,11 @@ protected int minExternalNodes() {
     }
 
     public void testUpgrade() throws Exception {
-        if (backwardsCluster().numNewDataNodes() == 0) {
-            backwardsCluster().startNewNode();
-        }
-        
+
         int numIndexes = randomIntBetween(2, 4);
         String[] indexNames = new String[numIndexes];
         for (int i = 0; i < numIndexes; ++i) {
-            String indexName = "test" + i;
+            final String indexName = "test" + i;
             indexNames[i] = indexName;
             
             Settings settings = ImmutableSettings.builder()
@@ -84,59 +88,109 @@ public void testUpgrade() throws Exception {
             }
             indexRandom(true, builder);
             ensureGreen(indexName);
-            flushAndRefresh();
+            if (globalCompatibilityVersion().before(Version.V_1_4_0_Beta1)) {
+                awaitBusy(new Predicate<Object>() {
+                    @Override
+                    public boolean apply(Object o) {
+                        return flush(indexName).getFailedShards() == 0;
+                    }
+                });
+            } else {
+                assertEquals(0, flush(indexName).getFailedShards());
+            }
+            
+            // index more docs that won't be flushed
+            numDocs = scaledRandomIntBetween(100, 1000);
+            builder = new ArrayList<>();
+            for (int j = 0; j < numDocs; ++j) {
+                String id = Integer.toString(j);
+                builder.add(client().prepareIndex(indexName, "type2", id).setSource("text", "someothertext"));
+            }
+            indexRandom(true, builder);
+            ensureGreen(indexName);
+            refresh();
         }
         backwardsCluster().allowOnAllNodes(indexNames);
         backwardsCluster().upgradeAllNodes();
         ensureGreen();
+        
+        final HttpRequestBuilder httpClient = httpClient();
 
-        checkNotUpgraded("/_upgrade");
+        assertNotUpgraded(httpClient, null);
         final String indexToUpgrade = "test" + randomInt(numIndexes - 1);
         
-        runUpgrade("/" + indexToUpgrade + "/_upgrade");
+        runUpgrade(httpClient, indexToUpgrade);
         awaitBusy(new Predicate<Object>() {
             @Override
             public boolean apply(Object o) {
                 try {
-                    return isUpgraded("/" + indexToUpgrade + "/_upgrade");
+                    return isUpgraded(httpClient, indexToUpgrade);
                 } catch (Exception e) {
                     throw ExceptionsHelper.convertToRuntime(e);
                 }
             }
         });
         
-        runUpgrade("/_upgrade", "wait_for_completion", "true");
-        checkUpgraded("/_upgrade");
+        runUpgrade(httpClient, null, "wait_for_completion", "true");
+        assertUpgraded(httpClient, null);
     }
     
-    void checkNotUpgraded(String path) throws Exception {
-        for (UpgradeStatus status : getUpgradeStatus(path)) {
+    static String upgradePath(String index) {
+        String path = "/_upgrade";
+        if (index != null) {
+            path = "/" + index + path;
+        }
+        return path;
+    }
+    
+    static void assertNotUpgraded(HttpRequestBuilder httpClient, String index) throws Exception {
+        for (UpgradeStatus status : getUpgradeStatus(httpClient, upgradePath(index))) {
             assertTrue("index " + status.indexName + " should not be zero sized", status.totalBytes != 0);
-            assertTrue("total bytes must be >= upgrade bytes", status.totalBytes >= status.toUpgradeBytes);
-            assertEquals("index " + status.indexName + " should need upgrading",
-                status.totalBytes, status.toUpgradeBytes);
+            // TODO: it would be better for this to be strictly greater, but sometimes an extra flush
+            // mysteriously happens after the second round of docs are indexed
+            assertTrue("index " + status.indexName + " should have recovered some segments from transaction log",
+                       status.totalBytes >= status.toUpgradeBytes);
+            assertTrue("index " + status.indexName + " should need upgrading", status.toUpgradeBytes != 0);
         }
     }
 
-    void checkUpgraded(String path) throws Exception {
-        for (UpgradeStatus status : getUpgradeStatus(path)) {
+    static void assertUpgraded(HttpRequestBuilder httpClient, String index) throws Exception {
+        for (UpgradeStatus status : getUpgradeStatus(httpClient, upgradePath(index))) {
             assertTrue("index " + status.indexName + " should not be zero sized", status.totalBytes != 0);
-            assertTrue("total bytes must be >= upgrade bytes", status.totalBytes >= status.toUpgradeBytes);
-            assertEquals("index " + status.indexName + " should need upgrading",
+            assertEquals("index " + status.indexName + " should be upgraded",
                 0, status.toUpgradeBytes);
         }
+        
+        // double check using the segments api that all segments are actually upgraded
+        IndicesSegmentResponse segsRsp;
+        if (index == null) {
+            segsRsp = client().admin().indices().prepareSegments().execute().actionGet();
+        } else {
+            segsRsp = client().admin().indices().prepareSegments(index).execute().actionGet();
+        }
+        for (IndexSegments indexSegments : segsRsp.getIndices().values()) {
+            for (IndexShardSegments shard : indexSegments) {
+                for (ShardSegments segs : shard.getShards()) {
+                    for (Segment seg : segs.getSegments()) {
+                        assertEquals("Index " + indexSegments.getIndex() + " has unupgraded segment " + seg.toString(),
+                                     Version.CURRENT.luceneVersion, seg.version);
+                    }
+                }
+            }
+        }
     }
     
-    boolean isUpgraded(String path) throws Exception {
+    static boolean isUpgraded(HttpRequestBuilder httpClient, String index) throws Exception {
+        ESLogger logger = Loggers.getLogger(UpgradeTest.class);
         int toUpgrade = 0;
-        for (UpgradeStatus status : getUpgradeStatus(path)) {
+        for (UpgradeStatus status : getUpgradeStatus(httpClient, upgradePath(index))) {
             logger.info("Index: " + status.indexName + ", total: " + status.totalBytes + ", toUpgrade: " + status.toUpgradeBytes);
             toUpgrade += status.toUpgradeBytes;
         }
         return toUpgrade == 0;
     }
 
-    class UpgradeStatus {
+    static class UpgradeStatus {
         public final String indexName;
         public final int totalBytes;
         public final int toUpgradeBytes;
@@ -148,9 +202,9 @@ public UpgradeStatus(String indexName, int totalBytes, int toUpgradeBytes) {
         }
     }
     
-    void runUpgrade(String path, String... params) throws Exception {
+    static void runUpgrade(HttpRequestBuilder httpClient, String index, String... params) throws Exception {
         assert params.length % 2 == 0;
-        HttpRequestBuilder builder = httpClient().method("POST").path(path);
+        HttpRequestBuilder builder = httpClient.method("POST").path(upgradePath(index));
         for (int i = 0; i < params.length; i += 2) {
             builder.addParam(params[i], params[i + 1]);
         }
@@ -159,8 +213,8 @@ void runUpgrade(String path, String... params) throws Exception {
         assertEquals(200, rsp.getStatusCode());
     }
 
-    List<UpgradeStatus> getUpgradeStatus(String path) throws Exception {
-        HttpResponse rsp = httpClient().method("GET").path(path).execute();
+    static List<UpgradeStatus> getUpgradeStatus(HttpRequestBuilder httpClient, String path) throws Exception {
+        HttpResponse rsp = httpClient.method("GET").path(path).execute();
         Map<String,Object> data = validateAndParse(rsp);
         List<UpgradeStatus> ret = new ArrayList<>();
         for (String index : data.keySet()) {
@@ -176,7 +230,7 @@ void runUpgrade(String path, String... params) throws Exception {
         return ret;
     }
     
-    Map<String, Object> validateAndParse(HttpResponse rsp) throws Exception {
+    static Map<String, Object> validateAndParse(HttpResponse rsp) throws Exception {
         assertNotNull(rsp);
         assertEquals(200, rsp.getStatusCode());
         assertTrue(rsp.hasBody());
diff --git a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
index a5194d40289a..3ab54d190178 100644
--- a/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
+++ b/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
@@ -1160,27 +1160,19 @@ protected final RefreshResponse refresh() {
     /**
      * Flushes and refreshes all indices in the cluster
      */
-    protected final void flushAndRefresh() {
-        flush(true);
+    protected final void flushAndRefresh(String... indices) {
+        flush(indices);
         refresh();
     }
 
     /**
-     * Flushes all indices in the cluster
+     * Flush some or all indices in the cluster.
      */
-    protected final FlushResponse flush() {
-        return flush(true);
-    }
-
-    private FlushResponse flush(boolean ignoreNotAllowed) {
+    protected final FlushResponse flush(String... indices) {
         waitForRelocation();
-        FlushResponse actionGet = client().admin().indices().prepareFlush().setWaitIfOngoing(true).execute().actionGet();
-        if (ignoreNotAllowed) {
-            for (ShardOperationFailedException failure : actionGet.getShardFailures()) {
-                assertThat("unexpected flush failure " + failure.reason(), failure.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE));
-            }
-        } else {
-            assertNoFailures(actionGet);
+        FlushResponse actionGet = client().admin().indices().prepareFlush(indices).setWaitIfOngoing(true).execute().actionGet();
+        for (ShardOperationFailedException failure : actionGet.getShardFailures()) {
+            assertThat("unexpected flush failure " + failure.reason(), failure.status(), equalTo(RestStatus.SERVICE_UNAVAILABLE));
         }
         return actionGet;
     }
diff --git a/src/test/resources/org/elasticsearch/rest/action/admin/indices/upgrade/index-0.20.zip b/src/test/resources/org/elasticsearch/rest/action/admin/indices/upgrade/index-0.20.zip
new file mode 100644
index 000000000000..59cd2470e3f0
Binary files /dev/null and b/src/test/resources/org/elasticsearch/rest/action/admin/indices/upgrade/index-0.20.zip differ
