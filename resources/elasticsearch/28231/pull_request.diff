diff --git a/rest-api-spec/src/main/resources/rest-api-spec/test/indices.update_aliases/40_postpone_aliases_resolution_to_execution.yml b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.update_aliases/40_postpone_aliases_resolution_to_execution.yml
new file mode 100644
index 000000000000..9f948ba568d0
--- /dev/null
+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.update_aliases/40_postpone_aliases_resolution_to_execution.yml
@@ -0,0 +1,41 @@
+---
+"Remove operation should be able to consistently see an alias created in the same request":
+  - skip:
+      version: " - 6.99.99"
+      reason: since 7.0 aliases are resolved against the cluster state we are modifying, and not in advance
+
+  - do:
+      indices.create:
+          index: test_index
+
+  - do:
+      indices.update_aliases:
+          body:
+              actions:
+                  - add:
+                      index: test_index
+                      alias: test_alias
+                  - remove:
+                      index: test_index
+                      alias: test_alias
+
+  - do:
+       indices.exists_alias:
+            name: test_alias
+  - is_false: ''
+
+  - do:
+      indices.update_aliases:
+          body:
+              actions:
+                  - add:
+                      index: test_index
+                      alias: test_alias
+                  - remove:
+                      index: test_index
+                      alias: test_alias
+
+  - do:
+       indices.exists_alias:
+            name: test_alias
+  - is_false: ''
diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java
index 9dcd361ae642..97d3194818e8 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/alias/TransportIndicesAliasesAction.java
@@ -99,12 +99,12 @@ protected void masterOperation(final IndicesAliasesRequest request, final Cluste
             for (String index : concreteIndices) {
                 switch (action.actionType()) {
                 case ADD:
-                    for (String alias : concreteAliases(action, state.metaData(), index)) {
+                    for (String alias : action.aliases()) {
                         finalActions.add(new AliasAction.Add(index, alias, action.filter(), action.indexRouting(), action.searchRouting()));
                     }
                     break;
                 case REMOVE:
-                    for (String alias : concreteAliases(action, state.metaData(), index)) {
+                    for (String alias : action.aliases()) {
                         finalActions.add(new AliasAction.Remove(index, alias));
                     }
                     break;
@@ -116,9 +116,6 @@ protected void masterOperation(final IndicesAliasesRequest request, final Cluste
                 }
             }
         }
-        if (finalActions.isEmpty() && false == actions.isEmpty()) {
-            throw new AliasesNotFoundException(aliases.toArray(new String[aliases.size()]));
-        }
         request.aliasActions().clear();
         IndicesAliasesClusterStateUpdateRequest updateRequest = new IndicesAliasesClusterStateUpdateRequest(unmodifiableList(finalActions))
                 .ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout());
@@ -136,22 +133,4 @@ public void onFailure(Exception t) {
             }
         });
     }
-
-    private static String[] concreteAliases(AliasActions action, MetaData metaData, String concreteIndex) {
-        if (action.expandAliasesWildcards()) {
-            //for DELETE we expand the aliases
-            String[] indexAsArray = {concreteIndex};
-            ImmutableOpenMap<String, List<AliasMetaData>> aliasMetaData = metaData.findAliases(action.aliases(), indexAsArray);
-            List<String> finalAliases = new ArrayList<>();
-            for (ObjectCursor<List<AliasMetaData>> curAliases : aliasMetaData.values()) {
-                for (AliasMetaData aliasMeta: curAliases.value) {
-                    finalAliases.add(aliasMeta.alias());
-                }
-            }
-            return finalAliases.toArray(new String[finalAliases.size()]);
-        } else {
-            //for ADD and REMOVE_INDEX we just return the current aliases
-            return action.aliases();
-        }
-    }
 }
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/AliasAction.java b/server/src/main/java/org/elasticsearch/cluster/metadata/AliasAction.java
index ff49d072815f..03ba58f9fdb3 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/AliasAction.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/AliasAction.java
@@ -22,6 +22,9 @@
 import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.Strings;
+import org.elasticsearch.rest.action.admin.indices.AliasesNotFoundException;
+
+import java.util.List;
 
 /**
  * Individual operation to perform on the cluster state as part of an {@link IndicesAliasesRequest}.
@@ -51,7 +54,7 @@ public String getIndex() {
 
     /**
      * Apply the action.
-     * 
+     *
      * @param aliasValidator call to validate a new alias before adding it to the builder
      * @param metadata metadata builder for the changes made by all actions as part of this request
      * @param index metadata for the index being changed
@@ -59,6 +62,8 @@ public String getIndex() {
      */
     abstract boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index);
 
+    abstract String getAlias();
+
     /**
      * Validate a new alias.
      */
@@ -99,6 +104,7 @@ public Add(String index, String alias, @Nullable String filter, @Nullable String
         /**
          * Alias to add to the index.
          */
+        @Override
         public String getAlias() {
             return alias;
         }
@@ -144,6 +150,7 @@ public Remove(String index, String alias) {
         /**
          * Alias to remove from the index.
          */
+        @Override
         public String getAlias() {
             return alias;
         }
@@ -155,11 +162,19 @@ boolean removeIndex() {
 
         @Override
         boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index) {
-            if (false == index.getAliases().containsKey(alias)) {
-                return false;
+            // As in the remove action an alias may contain wildcards, we first need to expand alias wildcards
+            List<String> concreteAliases = metadata.findAliases(alias, getIndex());
+            if (concreteAliases.isEmpty()) {
+                throw new AliasesNotFoundException(alias);
             }
-            metadata.put(IndexMetaData.builder(index).removeAlias(alias));
-            return true;
+            Boolean changed = false;
+            for (String concreteAlias : concreteAliases){
+                if (index.getAliases().containsKey(concreteAlias)) {
+                    metadata.put(IndexMetaData.builder(index).removeAlias(concreteAlias));
+                    changed = true;
+                }
+            }
+            return changed;
         }
     }
 
@@ -181,5 +196,10 @@ boolean removeIndex() {
         boolean apply(NewAliasValidator aliasValidator, MetaData.Builder metadata, IndexMetaData index) {
             throw new UnsupportedOperationException();
         }
+
+        @Override
+        public String getAlias() {
+            return null;
+        }
     }
-}
\ No newline at end of file
+}
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
index 0e9bcf8f11a8..75c06b6ce3da 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
@@ -1081,6 +1081,36 @@ public MetaData build() {
                                 customs.build(), allIndicesArray, allOpenIndicesArray, allClosedIndicesArray, aliasAndIndexLookup);
         }
 
+        /**
+         * Finds the specific index aliases that match with the specified alias directly or partially via wildcards and
+         * that point to the specified concrete index or match partially with the index via wildcards.
+         *
+         * @param alias         The names of the index alias to find, could be a pattern to resolve
+         * @param concreteIndex The concrete index, the index aliases must point to in order to be returned
+         * @return a list of concrete aliases corresponding to the given alias and concrete index
+         */
+        public List<String> findAliases(final String alias, String concreteIndex) {
+            List<String> concreteAliases = new ArrayList<>();
+            if (alias.length() == 0) {
+                return concreteAliases;
+            }
+            if (!indices.keys().contains(concreteIndex)) {
+                return concreteAliases;
+            }
+            boolean matchAllAliases = (alias.equals(ALL)) ? true : false;
+            IndexMetaData indexMetaData = indices.get(concreteIndex);
+            for (ObjectCursor<AliasMetaData> cursor : indexMetaData.getAliases().values()) {
+               final String concreteAlias = cursor.value.alias();
+                if (matchAllAliases || Regex.simpleMatch(alias, concreteAlias)) {
+                    concreteAliases.add(concreteAlias);
+                }
+            }
+            if (concreteAliases.size() > 1) {
+                Collections.sort(concreteAliases);
+            }
+            return concreteAliases;
+        }
+
         public static String toXContent(MetaData metaData) throws IOException {
             XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
             builder.startObject();
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
index 0949032db166..ae3c852bd414 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
@@ -38,6 +38,7 @@
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.MapperService;
 import org.elasticsearch.indices.IndicesService;
+import org.elasticsearch.rest.action.admin.indices.AliasesNotFoundException;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -98,6 +99,8 @@ ClusterState innerExecute(ClusterState currentState, Iterable<AliasAction> actio
         Map<String, IndexService> indices = new HashMap<>();
         try {
             boolean changed = false;
+            boolean executed = false; // if at least a single action is executed
+            List<String> notFoundAliases = new ArrayList<>();
             // Gather all the indexes that must be removed first so:
             // 1. We don't cause error when attempting to replace an index with a alias of the same name.
             // 2. We don't allow removal of aliases from indexes that we're just going to delete anyway. That'd be silly.
@@ -110,6 +113,7 @@ ClusterState innerExecute(ClusterState currentState, Iterable<AliasAction> actio
                     }
                     indicesToDelete.add(index.getIndex());
                     changed = true;
+                    executed = true;
                 }
             }
             // Remove the indexes if there are any to remove
@@ -154,7 +158,19 @@ ClusterState innerExecute(ClusterState currentState, Iterable<AliasAction> actio
                                 xContentRegistry);
                     }
                 };
-                changed |= action.apply(newAliasValidator, metadata, index);
+                try {
+                    changed |= action.apply(newAliasValidator, metadata, index);
+                    executed = true;
+                } catch (AliasesNotFoundException e) {
+                    notFoundAliases.add(action.getAlias());
+                    executed |= false;
+                }
+            }
+
+            // if no action has been executed,
+            // it means that a user supplied a nonexisting alias
+            if (executed == false) {
+                throw new AliasesNotFoundException(notFoundAliases.toArray(new String[notFoundAliases.size()]));
             }
 
             if (changed) {
