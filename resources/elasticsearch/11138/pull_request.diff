diff --git a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
index 4999d88c2c90..13881c688b60 100644
--- a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
@@ -52,6 +52,9 @@
     PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures,
                              Match[] matches, long count, long tookInMillis, InternalAggregations aggregations) {
         super(totalShards, successfulShards, failedShards, shardFailures);
+        if (tookInMillis < 0) {
+            throw new IllegalArgumentException("tookInMillis must be positive but was: " + tookInMillis);
+        }
         this.tookInMillis = tookInMillis;
         this.matches = matches;
         this.count = count;
@@ -60,6 +63,9 @@
 
     PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, long tookInMillis, Match[] matches) {
         super(totalShards, successfulShards, failedShards, shardFailures);
+        if (tookInMillis < 0) {
+            throw new IllegalArgumentException("tookInMillis must be positive but was: " + tookInMillis);
+        }
         this.tookInMillis = tookInMillis;
         this.matches = matches;
     }
diff --git a/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
index e08cce30d43d..98928c09b7c7 100644
--- a/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
+++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
@@ -143,12 +143,12 @@ public static PercolateResponse reduce(PercolateRequest request, AtomicReference
         }
 
         if (shardResults == null) {
-            long tookInMillis = System.currentTimeMillis() - request.startTime;
+            long tookInMillis = Math.max(1, System.currentTimeMillis() - request.startTime);
             PercolateResponse.Match[] matches = request.onlyCount() ? null : PercolateResponse.EMPTY;
             return new PercolateResponse(shardsResponses.length(), successfulShards, failedShards, shardFailures, tookInMillis, matches);
         } else {
             PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);
-            long tookInMillis = System.currentTimeMillis() - request.startTime;
+            long tookInMillis =  Math.max(1, System.currentTimeMillis() - request.startTime);
             return new PercolateResponse(
                     shardsResponses.length(), successfulShards, failedShards, shardFailures,
                     result.matches(), result.count(), tookInMillis, result.reducedAggregations()
