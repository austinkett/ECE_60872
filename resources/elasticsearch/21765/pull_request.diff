diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EComp.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EComp.java
index e78dd8eb729d..d66f73ec685b 100644
--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EComp.java
+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EComp.java
@@ -148,13 +148,8 @@ private void analyzeEqR(Locals variables) {
                 "[" + left.actual.name + "] and [" + right.actual.name + "]."));
         }
 
-        if (promotedType.sort == Sort.DEF) {
-            left.expected = left.actual;
-            right.expected = right.actual;
-        } else {
-            left.expected = promotedType;
-            right.expected = promotedType;
-        }
+        left.expected = promotedType;
+        right.expected = promotedType;
 
         left = left.cast(variables);
         right = right.cast(variables);
@@ -246,13 +241,8 @@ private void analyzeNER(Locals variables) {
                 "[" + left.actual.name + "] and [" + right.actual.name + "]."));
         }
 
-        if (promotedType.sort == Sort.DEF) {
-            left.expected = left.actual;
-            right.expected = right.actual;
-        } else {
-            left.expected = promotedType;
-            right.expected = promotedType;
-        }
+        left.expected = promotedType;
+        right.expected = promotedType;
 
         left = left.cast(variables);
         right = right.cast(variables);
diff --git a/modules/lang-painless/src/test/java/org/elasticsearch/painless/EqualsTests.java b/modules/lang-painless/src/test/java/org/elasticsearch/painless/EqualsTests.java
index 1df7eb349fb6..4698e2b0dcf5 100644
--- a/modules/lang-painless/src/test/java/org/elasticsearch/painless/EqualsTests.java
+++ b/modules/lang-painless/src/test/java/org/elasticsearch/painless/EqualsTests.java
@@ -129,6 +129,13 @@ public void testBranchEquals() {
         assertEquals(0, exec("def a = 1; Object b = new HashMap(); if (a === (Object)b) return 1; else return 0;"));
     }
 
+    public void testBranchEqualsDefAndPrimitive() {
+        assertEquals(true, exec("def x = 1000; int y = 1000; return x == y;"));
+        assertEquals(false, exec("def x = 1000; int y = 1000; return x === y;"));
+        assertEquals(true, exec("def x = 1000; int y = 1000; return y == x;"));
+        assertEquals(false, exec("def x = 1000; int y = 1000; return y === x;"));
+    }
+
     public void testBranchNotEquals() {
         assertEquals(1, exec("def a = (char)'a'; def b = (char)'b'; if (a != b) return 1; else return 0;"));
         assertEquals(0, exec("def a = (char)'a'; def b = (char)'a'; if (a != b) return 1; else return 0;"));
@@ -139,6 +146,13 @@ public void testBranchNotEquals() {
         assertEquals(1, exec("def a = 1; Object b = new HashMap(); if (a !== (Object)b) return 1; else return 0;"));
     }
 
+    public void testBranchNotEqualsDefAndPrimitive() {
+        assertEquals(false, exec("def x = 1000; int y = 1000; return x != y;"));
+        assertEquals(true, exec("def x = 1000; int y = 1000; return x !== y;"));
+        assertEquals(false, exec("def x = 1000; int y = 1000; return y != x;"));
+        assertEquals(true, exec("def x = 1000; int y = 1000; return y !== x;"));
+    }
+
     public void testRightHandNull() {
         assertEquals(false, exec("HashMap a = new HashMap(); return a == null;"));
         assertEquals(false, exec("HashMap a = new HashMap(); return a === null;"));
