diff --git a/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java
index ca1268230573..0c5c8f6bd629 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/NestedAggregator.java
@@ -31,6 +31,7 @@
 import org.elasticsearch.search.aggregations.*;
 import org.elasticsearch.search.aggregations.bucket.SingleBucketAggregator;
 import org.elasticsearch.search.aggregations.support.AggregationContext;
+import org.elasticsearch.search.internal.SearchContext;
 
 import java.io.IOException;
 
@@ -39,14 +40,16 @@
  */
 public class NestedAggregator extends SingleBucketAggregator implements ReaderContextAware {
 
-    private final Filter parentFilter;
+    private final Aggregator parentAggregator;
+    private Filter parentFilter;
     private final Filter childFilter;
 
     private Bits childDocs;
     private FixedBitSet parentDocs;
 
-    public NestedAggregator(String name, AggregatorFactories factories, String nestedPath, AggregationContext aggregationContext, Aggregator parent) {
-        super(name, factories, aggregationContext, parent);
+    public NestedAggregator(String name, AggregatorFactories factories, String nestedPath, AggregationContext aggregationContext, Aggregator parentAggregator) {
+        super(name, factories, aggregationContext, parentAggregator);
+        this.parentAggregator = parentAggregator;
         MapperService.SmartNameObjectMapper mapper = aggregationContext.searchContext().smartNameObjectMapper(nestedPath);
         if (mapper == null) {
             throw new AggregationExecutionException("facet nested path [" + nestedPath + "] not found");
@@ -58,12 +61,36 @@ public NestedAggregator(String name, AggregatorFactories factories, String neste
         if (!objectMapper.nested().isNested()) {
             throw new AggregationExecutionException("facet nested path [" + nestedPath + "] is not nested");
         }
-        parentFilter = aggregationContext.searchContext().filterCache().cache(NonNestedDocsFilter.INSTANCE);
+
         childFilter = aggregationContext.searchContext().filterCache().cache(objectMapper.nestedTypeFilter());
     }
 
+    private NestedAggregator findClosestNestedAggregator(Aggregator parent) {
+        for (; parent != null; parent = parent.parent()) {
+            if (parent instanceof NestedAggregator) {
+                return (NestedAggregator) parent;
+            }
+        }
+        return null;
+    }
+
     @Override
     public void setNextReader(AtomicReaderContext reader) {
+        if (parentFilter == null) {
+            NestedAggregator closestNestedAggregator = findClosestNestedAggregator(parentAggregator);
+            final Filter parentFilterNotCached;
+            if (closestNestedAggregator == null) {
+                parentFilterNotCached = NonNestedDocsFilter.INSTANCE;
+            } else {
+                // The aggs are instantiated in reverse, first the most inner nested aggs and lastly the top level aggs
+                // So at the time a nested 'nested' aggs is parsed its closest parent nested aggs hasn't been constructed
+                // so we lookup its child filter when we really need it and that time the closest parent nested aggs
+                // has been created and we can use its child filter as the parent filter.
+                parentFilterNotCached = closestNestedAggregator.childFilter;
+            }
+            parentFilter = SearchContext.current().filterCache().cache(parentFilterNotCached);
+        }
+
         try {
             DocIdSet docIdSet = parentFilter.getDocIdSet(reader, null);
             // In ES if parent is deleted, then also the children are deleted. Therefore acceptedDocs can also null here.
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedTests.java
index e75699a9f5b7..f8d95eeaba7e 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/NestedTests.java
@@ -26,9 +26,12 @@
 import org.elasticsearch.search.aggregations.bucket.histogram.Histogram;
 import org.elasticsearch.search.aggregations.bucket.nested.Nested;
 import org.elasticsearch.search.aggregations.bucket.terms.LongTerms;
+import org.elasticsearch.search.aggregations.bucket.terms.StringTerms;
+import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket;
 import org.elasticsearch.search.aggregations.metrics.max.Max;
 import org.elasticsearch.search.aggregations.metrics.stats.Stats;
+import org.elasticsearch.search.aggregations.metrics.sum.Sum;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.elasticsearch.test.cache.recycler.MockBigArrays;
 import org.hamcrest.Matchers;
@@ -103,6 +106,43 @@ public void setupSuiteScopeCluster() throws Exception {
                     .endArray()
                     .endObject()));
         }
+
+        assertAcked(prepareCreate("idx_nested_nested_aggs")
+                .addMapping("type", jsonBuilder().startObject().startObject("type").startObject("properties")
+                        .startObject("nested1")
+                        .field("type", "nested")
+                        .startObject("properties")
+                        .startObject("nested2")
+                        .field("type", "nested")
+                        .endObject()
+                        .endObject()
+                        .endObject()
+                        .endObject().endObject().endObject()));
+
+        builders.add(
+                client().prepareIndex("idx_nested_nested_aggs", "type", "1")
+                        .setSource(jsonBuilder().startObject()
+                                .startArray("nested1")
+                                .startObject()
+                                .field("a", "a")
+                                .startArray("nested2")
+                                .startObject()
+                                .field("b", 2)
+                                .endObject()
+                                .endArray()
+                                .endObject()
+                                .startObject()
+                                .field("a", "b")
+                                .startArray("nested2")
+                                .startObject()
+                                .field("b", 2)
+                                .endObject()
+                                .endArray()
+                                .endObject()
+                                .endArray()
+                                .endObject())
+        );
+
         indexRandom(true, builders);
         ensureSearchable();
     }
@@ -239,6 +279,42 @@ public void nestedAsSubAggregation() throws Exception {
         }
     }
 
+    @Test
+    public void nestNestedAggs() throws Exception {
+        SearchResponse response = client().prepareSearch("idx_nested_nested_aggs")
+                .addAggregation(nested("level1").path("nested1")
+                        .subAggregation(terms("a").field("nested1.a")
+                                .subAggregation(nested("level2").path("nested1.nested2")
+                                        .subAggregation(sum("sum").field("nested1.nested2.b")))))
+                .get();
+        assertSearchResponse(response);
+
+
+        Nested level1 = response.getAggregations().get("level1");
+        assertThat(level1, notNullValue());
+        assertThat(level1.getName(), equalTo("level1"));
+        assertThat(level1.getDocCount(), equalTo(2l));
+
+        StringTerms a = level1.getAggregations().get("a");
+        Terms.Bucket bBucket = a.getBucketByKey("a");
+        assertThat(bBucket.getDocCount(), equalTo(1l));
+
+        Nested level2 = bBucket.getAggregations().get("level2");
+        assertThat(level2.getDocCount(), equalTo(1l));
+        Sum sum = level2.getAggregations().get("sum");
+        assertThat(sum.getValue(), equalTo(2d));
+
+        a = level1.getAggregations().get("a");
+        bBucket = a.getBucketByKey("b");
+        assertThat(bBucket.getDocCount(), equalTo(1l));
+
+        level2 = bBucket.getAggregations().get("level2");
+        assertThat(level2.getDocCount(), equalTo(1l));
+        sum = level2.getAggregations().get("sum");
+        assertThat(sum.getValue(), equalTo(2d));
+    }
+
+
     @Test
     public void emptyAggregation() throws Exception {
         SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx")
