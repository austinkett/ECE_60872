diff --git a/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java
index aee0e9cd02ad..834277b5c728 100644
--- a/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java
+++ b/server/src/main/java/org/elasticsearch/common/unit/Fuzziness.java
@@ -186,7 +186,7 @@ public int asDistance() {
     }
 
     public int asDistance(String text) {
-        if (this.equals(AUTO)) { //AUTO
+        if (this.equals(AUTO) || isAutoWithCustomValues()) { //AUTO
             final int len = termLen(text);
             if (len < lowDistance) {
                 return 0;
diff --git a/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java b/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
index 5259cad23e8f..a374f468a138 100644
--- a/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
+++ b/server/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
@@ -169,4 +169,28 @@ private static Fuzziness doSerializeRoundtrip(Fuzziness in) throws IOException {
         StreamInput streamInput = output.bytes().streamInput();
         return new Fuzziness(streamInput);
     }
+
+    public void testAsDistanceString() {
+        Fuzziness fuzziness = Fuzziness.build("0");
+        assertEquals(0, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));
+        fuzziness = Fuzziness.build("1");
+        assertEquals(1, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));
+        fuzziness = Fuzziness.build("2");
+        assertEquals(2, fuzziness.asDistance(randomAlphaOfLengthBetween(0, 10)));
+
+        fuzziness = Fuzziness.build("AUTO");
+        assertEquals(0, fuzziness.asDistance(""));
+        assertEquals(0, fuzziness.asDistance("ab"));
+        assertEquals(1, fuzziness.asDistance("abc"));
+        assertEquals(1, fuzziness.asDistance("abcde"));
+        assertEquals(2, fuzziness.asDistance("abcdef"));
+
+        fuzziness = Fuzziness.build("AUTO:5,7");
+        assertEquals(0, fuzziness.asDistance(""));
+        assertEquals(0, fuzziness.asDistance("abcd"));
+        assertEquals(1, fuzziness.asDistance("abcde"));
+        assertEquals(1, fuzziness.asDistance("abcdef"));
+        assertEquals(2, fuzziness.asDistance("abcdefg"));
+
+    }
 }
diff --git a/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
index ac0152582352..7007c7650f41 100644
--- a/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
+++ b/server/src/test/java/org/elasticsearch/search/query/SearchQueryIT.java
@@ -664,6 +664,32 @@ public void testMatchQueryNumeric() throws Exception {
         expectThrows(SearchPhaseExecutionException.class, () -> client().prepareSearch().setQuery(matchQuery("double", "2 3 4")).get());
     }
 
+    public void testMatchQueryFuzzy() throws Exception {
+        assertAcked(prepareCreate("test").addMapping("_doc", "text", "type=text"));
+
+        indexRandom(true, client().prepareIndex("test", "_doc", "1").setSource("text", "Unit"),
+                client().prepareIndex("test", "_doc", "2").setSource("text", "Unity"));
+
+        SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("0")).get();
+        assertHitCount(searchResponse, 0L);
+
+        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("1")).get();
+        assertHitCount(searchResponse, 2L);
+        assertSearchHits(searchResponse, "1", "2");
+
+        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("AUTO")).get();
+        assertHitCount(searchResponse, 2L);
+        assertSearchHits(searchResponse, "1", "2");
+
+        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "uniy").fuzziness("AUTO:5,7")).get();
+        assertHitCount(searchResponse, 0L);
+
+        searchResponse = client().prepareSearch().setQuery(matchQuery("text", "unify").fuzziness("AUTO:5,7")).get();
+        assertHitCount(searchResponse, 1L);
+        assertSearchHits(searchResponse, "2");
+    }
+
+
     public void testMultiMatchQuery() throws Exception {
         createIndex("test");
 
