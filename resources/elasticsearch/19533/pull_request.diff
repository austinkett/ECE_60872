diff --git a/core/src/main/java/org/elasticsearch/common/ParseField.java b/core/src/main/java/org/elasticsearch/common/ParseField.java
index c04bcb14dcb5..8465e0a18fee 100644
--- a/core/src/main/java/org/elasticsearch/common/ParseField.java
+++ b/core/src/main/java/org/elasticsearch/common/ParseField.java
@@ -26,19 +26,52 @@
 import java.util.Set;
 
 /**
- * Holds a field that can be found in a request while parsing and its different variants, which may be deprecated.
+ * Holds a field that can be found in a request while parsing and its different
+ * variants, which may be deprecated.
  */
 public class ParseField {
 
     private static final DeprecationLogger DEPRECATION_LOGGER = new DeprecationLogger(Loggers.getLogger(ParseField.class));
 
     private final String name;
+    private final String[] alternativeNames;
     private final String[] deprecatedNames;
     private String allReplacedWith = null;
     private final String[] allNames;
 
+    /**
+     * @param name
+     *            the primary name for this field. This will be returned by
+     *            {@link #getPreferredName()}
+     * @param deprecatedNames
+     *            names for this field which are deprecated and will not be
+     *            accepted when strict matching is used.
+     */
     public ParseField(String name, String... deprecatedNames) {
+        this(name, null, deprecatedNames);
+    }
+
+    /**
+     * @param name
+     *            the primary name for this field. This will be returned by
+     *            {@link #getPreferredName()}
+     * @param alternativeNames
+     *            other names for this field which are not acceptable and not
+     *            deprecated. This names will be accepted regardless of whether
+     *            strict mode is used
+     * @param deprecatedNames
+     *            other names for this field which are deprecated and will not
+     *            be accepted when strict matching is used.
+     */
+    public ParseField(String name, String[] alternativeNames, String... deprecatedNames) {
         this.name = name;
+        if (alternativeNames == null || alternativeNames.length == 0) {
+            this.alternativeNames = Strings.EMPTY_ARRAY;
+        } else {
+            final HashSet<String> set = new HashSet<>();
+            Collections.addAll(set, alternativeNames);
+            this.alternativeNames = set.toArray(new String[set.size()]);
+        }
         if (deprecatedNames == null || deprecatedNames.length == 0) {
             this.deprecatedNames = Strings.EMPTY_ARRAY;
         } else {
@@ -48,24 +81,48 @@ public ParseField(String name, String... deprecatedNames) {
         }
         Set<String> allNames = new HashSet<>();
         allNames.add(name);
+        Collections.addAll(allNames, this.alternativeNames);
         Collections.addAll(allNames, this.deprecatedNames);
         this.allNames = allNames.toArray(new String[allNames.size()]);
     }
 
-    public String getPreferredName(){
+    /**
+     * @return the preferred name used for this field
+     */
+    public String getPreferredName() {
         return name;
     }
 
+    /**
+     * @return and array of the alternative names which are acceptable for this
+     *         field and are not deprecated
+     */
+    public String[] getAlternativeNames() {
+        return alternativeNames;
+    }
+
+    /**
+     * @return All names for this field regardless of whether they are
+     *         deprecated
+     */
     public String[] getAllNamesIncludedDeprecated() {
         return allNames;
     }
 
+    /**
+     * @param deprecatedNames
+     *            deprecated names to include with the returned
+     *            {@link ParseField}
+     * @return a new {@link ParseField} using the preferred name and alternative
+     *         names from this one but with the specified deprecated names
+     */
     public ParseField withDeprecation(String... deprecatedNames) {
-        return new ParseField(this.name, deprecatedNames);
+        return new ParseField(this.name, alternativeNames, deprecatedNames);
     }
 
     /**
-     * Return a new ParseField where all field names are deprecated and replaced with {@code allReplacedWith}.
+     * Return a new ParseField where all field names are deprecated and replaced
+     * with {@code allReplacedWith}.
      */
     public ParseField withAllDeprecated(String allReplacedWith) {
         ParseField parseField = this.withDeprecation(getAllNamesIncludedDeprecated());
@@ -73,16 +130,42 @@ public ParseField withAllDeprecated(String allReplacedWith) {
         return parseField;
     }
 
-    boolean match(String currentFieldName, boolean strict) {
-        if (allReplacedWith == null && currentFieldName.equals(name)) {
-            return true;
+    /**
+     * @param fieldName
+     *            the field name to match against this {@link ParseField}
+     * @param strict
+     *            if true an exception will be thrown if a deprecated field name
+     *            is given. If false the deprecated name will be matched but a
+     *            message will also be logged to the {@link DeprecationLogger}
+     * @return true if <code>fieldName</code> matches any of the acceptable
+     *         names for this {@link ParseField}.
+     */
+    boolean match(String fieldName, boolean strict) {
+        // if this parse field has not been completely deprecated then try to
+        // match either the preferred name or one of the alternative names
+        if (allReplacedWith == null) {
+            if (fieldName.equals(name)) {
+                return true;
+            } else {
+                for (String altName : alternativeNames) {
+                    if (fieldName.equals(altName)) {
+                        return true;
+                    }
+                }
+            }
         }
+        // Now try to match against one of the deprecated names. Note that if
+        // the parse field is entirely deprecated (allReplacedWith != null) all
+        // fields will be in the deprecatedNames array
         String msg;
         for (String depName : deprecatedNames) {
-            if (currentFieldName.equals(depName)) {
-                msg = "Deprecated field [" + currentFieldName + "] used, expected [" + name + "] instead";
+            if (fieldName.equals(depName)) {
+                msg = "Deprecated field [" + fieldName + "] used, expected [" + name + "] instead";
                 if (allReplacedWith != null) {
-                    msg = "Deprecated field [" + currentFieldName + "] used, replaced by [" + allReplacedWith + "]";
+                    // If the field is entirely deprecated then there is no
+                    // preferred name so instead use the `allReplaceWith`
+                    // message to indicate what should be used instead
+                    msg = "Deprecated field [" + fieldName + "] used, replaced by [" + allReplacedWith + "]";
                 }
                 if (strict) {
                     throw new IllegalArgumentException(msg);
@@ -100,10 +183,20 @@ public String toString() {
         return getPreferredName();
     }
 
+    /**
+     * @return the message to use if this {@link ParseField} has been entirely
+     *         deprecated in favor of something else. This method will return
+     *         <code>null</code> if the ParseField has not been completely
+     *         deprecated.
+     */
     public String getAllReplacedWith() {
         return allReplacedWith;
     }
 
+    /**
+     * @return an array of the names for the {@link ParseField} which are
+     *         deprecated.
+     */
     public String[] getDeprecatedNames() {
         return deprecatedNames;
     }
diff --git a/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java
index 1fc66cf45dd7..ff181898356d 100644
--- a/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/builder/SearchSourceBuilder.java
@@ -91,7 +91,7 @@
     public static final ParseField SORT_FIELD = new ParseField("sort");
     public static final ParseField TRACK_SCORES_FIELD = new ParseField("track_scores");
     public static final ParseField INDICES_BOOST_FIELD = new ParseField("indices_boost");
-    public static final ParseField AGGREGATIONS_FIELD = new ParseField("aggregations", "aggs");
+    public static final ParseField AGGREGATIONS_FIELD = new ParseField("aggregations", new String[] { "aggs" }, Strings.EMPTY_ARRAY);
     public static final ParseField HIGHLIGHT_FIELD = new ParseField("highlight");
     public static final ParseField SUGGEST_FIELD = new ParseField("suggest");
     public static final ParseField RESCORE_FIELD = new ParseField("rescore");
@@ -998,7 +998,7 @@ public void parseXContent(QueryParseContext context, AggregatorParsers aggParser
                         scriptFields.add(new ScriptField(context));
                     }
                 } else if (context.getParseFieldMatcher().match(currentFieldName, INDICES_BOOST_FIELD)) {
-                    indexBoost = new ObjectFloatHashMap<String>();
+                    indexBoost = new ObjectFloatHashMap<>();
                     while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
                         if (token == XContentParser.Token.FIELD_NAME) {
                             currentFieldName = parser.currentName();
diff --git a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
index 1f348000ee4c..3c840d0fa6f2 100644
--- a/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
+++ b/core/src/test/java/org/elasticsearch/common/ParseFieldTests.java
@@ -62,6 +62,54 @@ public void testParse() {
         }
     }
 
+    public void testParseWithAlternatives() {
+        String name = "foo_bar";
+        String[] alternatives = new String[] { "bazFoo", "baz_foo", "Foobaz" };
+        ParseField field = new ParseField(name, alternatives, Strings.EMPTY_ARRAY);
+        String[] deprecated = new String[] { "barFoo", "bar_foo", "Foobar" };
+        ParseField withDeprecations = field.withDeprecation(deprecated);
+        assertThat(field, not(sameInstance(withDeprecations)));
+        assertThat(field.match(name, false), is(true));
+        assertThat(field.match("foo bar", false), is(false));
+        for (String alternativeName : alternatives) {
+            assertThat(field.match(alternativeName, false), is(true));
+        }
+        for (String deprecatedName : deprecated) {
+            assertThat(field.match(deprecatedName, false), is(false));
+        }
+
+        assertThat(withDeprecations.match(name, false), is(true));
+        assertThat(withDeprecations.match("foo bar", false), is(false));
+        for (String alternativeName : alternatives) {
+            assertThat(withDeprecations.match(alternativeName, false), is(true));
+        }
+        for (String deprecatedName : deprecated) {
+            assertThat(withDeprecations.match(deprecatedName, false), is(true));
+        }
+
+        // now with strict mode
+        assertThat(field.match(name, true), is(true));
+        assertThat(field.match("foo bar", true), is(false));
+        for (String alternativeName : alternatives) {
+            assertThat(field.match(alternativeName, true), is(true));
+        }
+        for (String deprecatedName : deprecated) {
+            assertThat(field.match(deprecatedName, true), is(false));
+        }
+
+        assertThat(withDeprecations.match(name, true), is(true));
+        assertThat(withDeprecations.match("foo bar", true), is(false));
+        for (String alternativeName : alternatives) {
+            assertThat(field.match(alternativeName, true), is(true));
+        }
+        for (String deprecatedName : deprecated) {
+            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {
+                withDeprecations.match(deprecatedName, true);
+            });
+            assertThat(e.getMessage(), containsString("used, expected [foo_bar] instead"));
+        }
+    }
+
     public void testAllDeprecated() {
         String name = "like_text";
 
@@ -93,11 +141,49 @@ public void testAllDeprecated() {
         assertThat(e.getMessage(), containsString(" used, replaced by [like]"));
     }
 
+    public void testAllDeprecatedWithAlternatives() {
+        String name = "like_text";
+        String[] alternatives = new String[] { "alt_name", "another_name" };
+        boolean withDeprecatedNames = randomBoolean();
+        String[] deprecated = new String[] { "text", "same_as_text" };
+        String[] allValues;
+        if (withDeprecatedNames) {
+            String[] newArray = new String[1 + alternatives.length + deprecated.length];
+            newArray[0] = name;
+            System.arraycopy(alternatives, 0, newArray, 1, alternatives.length);
+            System.arraycopy(deprecated, 0, newArray, 1 + alternatives.length, deprecated.length);
+            allValues = newArray;
+        } else {
+            String[] newArray = new String[1 + alternatives.length];
+            newArray[0] = name;
+            System.arraycopy(alternatives, 0, newArray, 1, alternatives.length);
+            allValues = newArray;
+        }
+
+        ParseField field;
+        if (withDeprecatedNames) {
+            field = new ParseField(name, alternatives, Strings.EMPTY_ARRAY).withDeprecation(deprecated).withAllDeprecated("like");
+        } else {
+            field = new ParseField(name, alternatives, Strings.EMPTY_ARRAY).withAllDeprecated("like");
+        }
+
+        // strict mode off
+        assertThat(field.match(randomFrom(allValues), false), is(true));
+        assertThat(field.match("not a field name", false), is(false));
+
+        // now with strict mode
+        IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> field.match(randomFrom(allValues), true));
+        assertThat(e.getMessage(), containsString(" used, replaced by [like]"));
+    }
+
     public void testGetAllNamesIncludedDeprecated() {
         ParseField parseField = new ParseField("terms", "in");
         assertThat(parseField.getAllNamesIncludedDeprecated(), arrayContainingInAnyOrder("terms", "in"));
 
         parseField = new ParseField("more_like_this", "mlt");
         assertThat(parseField.getAllNamesIncludedDeprecated(), arrayContainingInAnyOrder("more_like_this", "mlt"));
+
+        parseField = new ParseField("foo", new String[] { "bar" }, "baz");
+        assertThat(parseField.getAllNamesIncludedDeprecated(), arrayContainingInAnyOrder("foo", "bar", "baz"));
     }
 }
