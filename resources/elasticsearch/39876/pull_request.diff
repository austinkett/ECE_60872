diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java
index e69d229b6f17..3ebf3a539691 100644
--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java
+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/SpecBaseIntegrationTestCase.java
@@ -107,7 +107,7 @@ protected ResultSet executeJdbcQuery(Connection con, String query) throws SQLExc
     }
 
     protected int fetchSize() {
-        return between(1, 500);
+        return between(1, 150);
     }
 
     // TODO: use UTC for now until deciding on a strategy for handling date extraction
diff --git a/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec
index 8f46788fd089..367b5d0ddfdc 100644
--- a/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec
+++ b/x-pack/plugin/sql/qa/src/main/resources/datetime.csv-spec
@@ -346,6 +346,22 @@ SELECT YEAR(NOW() - INTERVAL 2 YEARS) / 1000 AS result;
 2
 ;
 
+dateAndIntervalPaginated
+SELECT YEAR(birth_date - INTERVAL 2 YEARS) / 1000 AS result FROM test_emp ORDER BY birth_date LIMIT 10;
+
+    result     
+---------------
+1              
+1              
+1              
+1              
+1              
+1              
+1              
+1              
+1              
+1
+;
 
 currentTimestampFilter
 SELECT first_name FROM test_emp WHERE hire_date > NOW() - INTERVAL 100 YEARS ORDER BY first_name ASC LIMIT 10; 
diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java
index 21cb72f2dab5..826cf1816ae6 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessor.java
@@ -5,6 +5,7 @@
  */
 package org.elasticsearch.xpack.sql.expression.gen.processor;
 
+import org.elasticsearch.common.io.stream.NamedWriteable;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 
@@ -16,17 +17,40 @@
     public static String NAME = "c";
 
     private final Object constant;
+    private final boolean namedWriteable;
+    private final Class<?> clazz;
 
     public ConstantProcessor(Object value) {
         this.constant = value;
+        this.namedWriteable = value instanceof NamedWriteable;
+        this.clazz = namedWriteable ? value.getClass() : null;
     }
 
+    @SuppressWarnings("unchecked")
     public ConstantProcessor(StreamInput in) throws IOException {
-        constant = in.readGenericValue();
+        namedWriteable = in.readBoolean();
+        if (namedWriteable) {
+            try {
+                clazz = ConstantProcessor.class.getClassLoader().loadClass(in.readString());
+            } catch (ClassNotFoundException e) {
+                throw new IOException(e);
+            }
+            constant = in.readNamedWriteable((Class<NamedWriteable>) clazz);
+        } else {
+            clazz = null;
+            constant = in.readGenericValue();
+        }
     }
 
+    @Override
     public void writeTo(StreamOutput out) throws IOException {
-        out.writeGenericValue(constant);
+        out.writeBoolean(namedWriteable);
+        if (namedWriteable) {
+            out.writeString(constant.getClass().getName());
+            out.writeNamedWriteable((NamedWriteable) constant);
+        } else {
+            out.writeGenericValue(constant);
+        }
     }
 
     @Override
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessorTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessorTests.java
index 5354dbd9ed11..06daed00a537 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessorTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/gen/processor/ConstantProcessorTests.java
@@ -7,9 +7,12 @@
 
 import org.elasticsearch.common.io.stream.Writeable.Reader;
 import org.elasticsearch.test.AbstractWireSerializingTestCase;
-import org.elasticsearch.xpack.sql.expression.gen.processor.ConstantProcessor;
+import org.elasticsearch.xpack.sql.expression.literal.IntervalDayTime;
+import org.elasticsearch.xpack.sql.type.DataType;
 
 import java.io.IOException;
+import java.time.Duration;
+import java.util.concurrent.TimeUnit;
 
 public class ConstantProcessorTests extends AbstractWireSerializingTestCase<ConstantProcessor> {
     public static ConstantProcessor randomConstantProcessor() {
@@ -28,7 +31,10 @@ protected ConstantProcessor createTestInstance() {
 
     @Override
     protected ConstantProcessor mutateInstance(ConstantProcessor instance) throws IOException {
-        return new ConstantProcessor(randomValueOtherThan(instance.process(null), () -> randomAlphaOfLength(5)));
+        return new ConstantProcessor(randomValueOtherThan(instance.process(null),
+                () -> new IntervalDayTime(Duration.ofSeconds(
+                        randomLongBetween(TimeUnit.SECONDS.convert(3, TimeUnit.HOURS), TimeUnit.SECONDS.convert(23, TimeUnit.HOURS))),
+                        DataType.INTERVAL_DAY_TO_SECOND)));
     }
 
     public void testApply() {
