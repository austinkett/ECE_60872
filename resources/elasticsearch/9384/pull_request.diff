diff --git a/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java
index 534c8e7ef948..0b5001a8e999 100644
--- a/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java
+++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsContext.java
@@ -28,9 +28,11 @@
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.FixedBitSet;
 import org.elasticsearch.ExceptionsHelper;
+import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.lucene.search.AndFilter;
 import org.elasticsearch.common.lucene.search.XFilteredQuery;
 import org.elasticsearch.index.cache.fixedbitset.FixedBitSetFilter;
+import org.elasticsearch.index.fieldvisitor.SingleFieldsVisitor;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.Uid;
 import org.elasticsearch.index.mapper.internal.ParentFieldMapper;
@@ -38,6 +40,7 @@
 import org.elasticsearch.index.mapper.object.ObjectMapper;
 import org.elasticsearch.index.query.ParsedQuery;
 import org.elasticsearch.index.search.nested.NonNestedDocsFilter;
+import org.elasticsearch.search.SearchHitField;
 import org.elasticsearch.search.fetch.FetchSubPhase;
 import org.elasticsearch.search.internal.FilteredSearchContext;
 import org.elasticsearch.search.internal.SearchContext;
@@ -89,7 +92,7 @@ public ParsedQuery parsedQuery() {
             return new ParsedQuery(query, ImmutableMap.<String, Filter>of());
         }
 
-        public abstract TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext);
+        public abstract TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext) throws IOException;
 
         @Override
         public InnerHitsContext innerHits() {
@@ -110,7 +113,7 @@ public NestedInnerHits(SearchContext context, Query query, Map<String, BaseInner
         }
 
         @Override
-        public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext) {
+        public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext) throws IOException {
             TopDocsCollector topDocsCollector;
             int topN = from() + size();
             if (sort() != null) {
@@ -131,12 +134,8 @@ public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContex
             }
             FixedBitSetFilter parentFilter = context.fixedBitSetFilterCache().getFixedBitSetFilter(rawParentFilter);
             Filter childFilter = context.filterCache().cache(childObjectMapper.nestedTypeFilter());
-            try {
-                Query q = new XFilteredQuery(query, new NestedChildrenFilter(parentFilter, childFilter, hitContext));
-                context.searcher().search(q, topDocsCollector);
-            } catch (IOException e) {
-                throw ExceptionsHelper.convertToElastic(e);
-            }
+            Query q = new XFilteredQuery(query, new NestedChildrenFilter(parentFilter, childFilter, hitContext));
+            context.searcher().search(q, topDocsCollector);
             return topDocsCollector.topDocs(from(), size());
         }
 
@@ -245,39 +244,42 @@ public ParentChildInnerHits(SearchContext context, Query query, Map<String, Base
         }
 
         @Override
-        public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext) {
+        public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContext) throws IOException {
             TopDocsCollector topDocsCollector;
             int topN = from() + size();
             if (sort() != null) {
-                try {
-                    topDocsCollector = TopFieldCollector.create(sort(), topN, true, trackScores(), trackScores(), false);
-                } catch (IOException e) {
-                    throw ExceptionsHelper.convertToElastic(e);
-                }
+                topDocsCollector = TopFieldCollector.create(sort(), topN, true, trackScores(), trackScores(), false);
             } else {
                 topDocsCollector = TopScoreDocCollector.create(topN, false);
             }
 
-            String field;
-            ParentFieldMapper hitParentFieldMapper = documentMapper.parentFieldMapper();
-            if (hitParentFieldMapper.active()) {
-                // Hit has a active _parent field and it is a child doc, so we want a parent doc as inner hits.
+            final String term;
+            final String field;
+            if (documentMapper.parentFieldMapper().active()) {
+                // Active _parent field has been selected, so we want a children doc as inner hits.
                 field = ParentFieldMapper.NAME;
+                term = Uid.createUid(hitContext.hit().type(), hitContext.hit().id());
             } else {
-                // Hit has no active _parent field and it is a parent doc, so we want children docs as inner hits.
+                // No active _parent field has been selected, so we want parent docs as inner hits.
                 field = UidFieldMapper.NAME;
+                SearchHitField parentField = hitContext.hit().field(ParentFieldMapper.NAME);
+                if (parentField != null) {
+                    term = parentField.getValue();
+                } else {
+                    SingleFieldsVisitor fieldsVisitor = new SingleFieldsVisitor(ParentFieldMapper.NAME);
+                    hitContext.reader().document(hitContext.docId(), fieldsVisitor);
+                    if (fieldsVisitor.fields().isEmpty()) {
+                        return Lucene.EMPTY_TOP_DOCS;
+                    }
+                    term = (String) fieldsVisitor.fields().get(ParentFieldMapper.NAME).get(0);
+                }
             }
-            String term = Uid.createUid(hitContext.hit().type(), hitContext.hit().id());
             Filter filter = new TermFilter(new Term(field, term)); // Only include docs that have the current hit as parent
             Filter typeFilter = documentMapper.typeFilter(); // Only include docs that have this inner hits type.
-            try {
-                context.searcher().search(
-                        new XFilteredQuery(query, new AndFilter(Arrays.asList(filter, typeFilter))),
-                        topDocsCollector
-                );
-            } catch (IOException e) {
-                throw ExceptionsHelper.convertToElastic(e);
-            }
+            context.searcher().search(
+                    new XFilteredQuery(query, new AndFilter(Arrays.asList(filter, typeFilter))),
+                    topDocsCollector
+            );
             return topDocsCollector.topDocs(from(), size());
         }
     }
diff --git a/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java
index 8f58bdaf52ef..74d0215ccfb8 100644
--- a/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java
+++ b/src/main/java/org/elasticsearch/search/fetch/innerhits/InnerHitsFetchSubPhase.java
@@ -24,6 +24,7 @@
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.search.SearchParseElement;
 import org.elasticsearch.search.fetch.FetchPhase;
@@ -38,6 +39,7 @@
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.search.sort.SortParseElement;
 
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -79,7 +81,12 @@ public void hitExecute(SearchContext context, HitContext hitContext) throws Elas
         Map<String, InternalSearchHits> results = new HashMap<>();
         for (Map.Entry<String, InnerHitsContext.BaseInnerHits> entry : context.innerHits().getInnerHits().entrySet()) {
             InnerHitsContext.BaseInnerHits innerHits = entry.getValue();
-            TopDocs topDocs = innerHits.topDocs(context, hitContext);
+            TopDocs topDocs;
+            try {
+                topDocs = innerHits.topDocs(context, hitContext);
+            } catch (IOException e) {
+                throw ExceptionsHelper.convertToElastic(e);
+            }
             innerHits.queryResult().topDocs(topDocs);
             int[] docIdsToLoad = new int[topDocs.scoreDocs.length];
             for (int i = 0; i < topDocs.scoreDocs.length; i++) {
diff --git a/src/test/java/org/elasticsearch/search/innerhits/InnerHitsTests.java b/src/test/java/org/elasticsearch/search/innerhits/InnerHitsTests.java
index 67b87d5225ae..fd210adb499f 100644
--- a/src/test/java/org/elasticsearch/search/innerhits/InnerHitsTests.java
+++ b/src/test/java/org/elasticsearch/search/innerhits/InnerHitsTests.java
@@ -444,6 +444,45 @@ public void testPathOrTypeMustBeDefined() {
 
     }
 
+    @Test
+    public void testInnerHitsOnHasParent() throws Exception {
+        assertAcked(prepareCreate("stack")
+                        .addMapping("question", "body", "type=string")
+                        .addMapping("answer", "_parent", "type=question", "body", "type=string")
+        );
+        List<IndexRequestBuilder> requests = new ArrayList<>();
+        requests.add(client().prepareIndex("stack", "question", "1").setSource("body", "I'm using HTTPS + Basic authentication to protect a resource. How can I throttle authentication attempts to protect against brute force attacks?"));
+        requests.add(client().prepareIndex("stack", "answer", "1").setParent("1").setSource("body", "install fail2ban and enable rules for apache"));
+        requests.add(client().prepareIndex("stack", "question", "2").setSource("body", "I have firewall rules set up and also denyhosts installed.\\ndo I also need to install fail2ban?"));
+        requests.add(client().prepareIndex("stack", "answer", "2").setParent("2").setSource("body", "Denyhosts protects only ssh; Fail2Ban protects all daemons."));
+        indexRandom(true, requests);
+
+        SearchResponse response = client().prepareSearch("stack")
+                .setTypes("answer")
+                .addSort("_uid", SortOrder.ASC)
+                .setQuery(
+                        boolQuery()
+                                .must(matchQuery("body", "fail2ban"))
+                                .must(hasParentQuery("question", matchAllQuery()).innerHit(new QueryInnerHitBuilder()))
+                ).get();
+        assertNoFailures(response);
+        assertHitCount(response, 2);
+
+        SearchHit searchHit = response.getHits().getAt(0);
+        assertThat(searchHit.getId(), equalTo("1"));
+        assertThat(searchHit.getType(), equalTo("answer"));
+        assertThat(searchHit.getInnerHits().get("question").getTotalHits(), equalTo(1l));
+        assertThat(searchHit.getInnerHits().get("question").getAt(0).getType(), equalTo("question"));
+        assertThat(searchHit.getInnerHits().get("question").getAt(0).id(), equalTo("1"));
+
+        searchHit = response.getHits().getAt(1);
+        assertThat(searchHit.getId(), equalTo("2"));
+        assertThat(searchHit.getType(), equalTo("answer"));
+        assertThat(searchHit.getInnerHits().get("question").getTotalHits(), equalTo(1l));
+        assertThat(searchHit.getInnerHits().get("question").getAt(0).getType(), equalTo("question"));
+        assertThat(searchHit.getInnerHits().get("question").getAt(0).id(), equalTo("2"));
+    }
+
     @Test
     public void testParentChildMultipleLayers() throws Exception {
         assertAcked(prepareCreate("articles")
