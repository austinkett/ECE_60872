diff --git a/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java
index bb766262e507..7afdedf66ebd 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/TextFieldMapper.java
@@ -321,6 +321,9 @@ protected TextFieldMapper(String simpleName, MappedFieldType fieldType, MappedFi
         super(simpleName, fieldType, defaultFieldType, indexSettings, multiFields, copyTo);
         assert fieldType.tokenized();
         assert fieldType.hasDocValues() == false;
+        if (fieldType().indexOptions() == IndexOptions.NONE && fieldType().fielddata()) {
+            throw new IllegalArgumentException("Cannot enable fielddata on a [text] field that is not indexed: [" + name() + "]");
+        }
         this.positionIncrementGap = positionIncrementGap;
     }
 
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/core/TextFieldMapperTests.java b/core/src/test/java/org/elasticsearch/index/mapper/core/TextFieldMapperTests.java
index a0e3fd69f6b4..0f19db13564e 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/core/TextFieldMapperTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/core/TextFieldMapperTests.java
@@ -425,6 +425,17 @@ public void testFielddata() throws IOException {
 
         assertEquals(mapping, enabledMapper.mappingSource().toString());
         enabledMapper.mappers().getMapper("field").fieldType().fielddataBuilder(); // no exception this time
+
+        String illegalMapping = XContentFactory.jsonBuilder().startObject().startObject("type")
+                .startObject("properties").startObject("field")
+                    .field("type", "text")
+                    .field("index", false)
+                    .field("fielddata", true)
+                .endObject().endObject()
+                .endObject().endObject().string();
+        IllegalArgumentException ex = expectThrows(IllegalArgumentException.class,
+                () -> parser.parse("type", new CompressedXContent(illegalMapping)));
+        assertThat(ex.getMessage(), containsString("Cannot enable fielddata on a [text] field that is not indexed"));
     }
 
     public void testFrequencyFilter() throws IOException {
