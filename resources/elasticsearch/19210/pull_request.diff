diff --git a/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
index d2a1108cf884..46c1d9dc030a 100644
--- a/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
+++ b/core/src/main/java/org/elasticsearch/percolator/PercolatorService.java
@@ -197,6 +197,11 @@ public PercolateShardResponse percolate(PercolateShardRequest request) {
         final PercolateContext context = new PercolateContext(
                 request, searchShardTarget, indexShard, percolateIndexService, pageCacheRecycler, bigArrays, scriptService, aliasFilter, parseFieldMatcher
         );
+        // Some queries (function_score query when for decay functions) rely on a SearchContext being set:
+        // We switch types because this context needs to be in the context of the percolate queries in the shard and
+        // not the in memory percolate doc
+        String[] previousTypes = context.types();
+        context.types(new String[]{TYPE_NAME});
         SearchContext.setCurrent(context);
         try {
             ParsedDocument parsedDocument = parseRequest(percolateIndexService, request, context, request.shardId().getIndex());
@@ -253,6 +258,7 @@ public PercolateShardResponse percolate(PercolateShardRequest request) {
             percolatorIndex.prepare(context, parsedDocument);
             return action.doPercolate(request, context, isNested);
         } finally {
+            context.types(previousTypes);
             SearchContext.removeCurrent();
             context.close();
             shardPercolateService.postPercolate(System.nanoTime() - startTime);
@@ -272,11 +278,6 @@ private ParsedDocument parseRequest(IndexService documentIndexService, Percolate
         ParsedDocument doc = null;
         XContentParser parser = null;
 
-        // Some queries (function_score query when for decay functions) rely on a SearchContext being set:
-        // We switch types because this context needs to be in the context of the percolate queries in the shard and
-        // not the in memory percolate doc
-        String[] previousTypes = context.types();
-        context.types(new String[]{TYPE_NAME});
         try {
             parser = XContentFactory.xContent(source).createParser(source);
             String currentFieldName = null;
@@ -378,7 +379,6 @@ private ParsedDocument parseRequest(IndexService documentIndexService, Percolate
         } catch (Throwable e) {
             throw new ElasticsearchParseException("failed to parse request", e);
         } finally {
-            context.types(previousTypes);
             if (parser != null) {
                 parser.close();
             }
diff --git a/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java b/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
index 07834b37dc48..64ff62436d3f 100644
--- a/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
+++ b/core/src/test/java/org/elasticsearch/percolator/PercolatorIT.java
@@ -2081,5 +2081,20 @@ public void testWithEmptyFilter() throws Exception {
         assertNoFailures(response1);
     }
 
+    @Test
+    public void testWithFilterOnIdField() throws Exception {
+        createIndex("test");
+        client().prepareIndex("test", PercolatorService.TYPE_NAME, "1")
+                .setSource(jsonBuilder().startObject().field("query", matchAllQuery()))
+                .setRefresh(true)
+                .get();
+        PercolateResponse response1 = client().preparePercolate()
+                .setIndices("test").setDocumentType("type")
+                .setPercolateQuery(termQuery("_id", "1"))
+                .setPercolateDoc(new PercolateSourceBuilder.DocBuilder().setDoc("{}"))
+                .get();
+        assertMatchCount(response1, 1L);
+    }
+
 }
 
