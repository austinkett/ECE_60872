diff --git a/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
index 3ef9b73708ff..5ce0b159c2f3 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/ParentFieldMapper.java
@@ -295,9 +295,10 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
 
     @Override
     protected void doMerge(Mapper mergeWith, boolean updateAllTypes) {
+        ParentFieldType currentFieldType = (ParentFieldType) fieldType.clone();
         super.doMerge(mergeWith, updateAllTypes);
         ParentFieldMapper fieldMergeWith = (ParentFieldMapper) mergeWith;
-        if (Objects.equals(parentType, fieldMergeWith.parentType) == false) {
+        if (fieldMergeWith.parentType != null && Objects.equals(parentType, fieldMergeWith.parentType) == false) {
             throw new IllegalArgumentException("The _parent field's type option can't be changed: [" + parentType + "]->[" + fieldMergeWith.parentType + "]");
         }
 
@@ -308,7 +309,7 @@ protected void doMerge(Mapper mergeWith, boolean updateAllTypes) {
         }
 
         if (active()) {
-            fieldType = fieldMergeWith.fieldType.clone();
+            fieldType = currentFieldType;
         }
     }
 
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/DocumentMapperMergeTests.java b/core/src/test/java/org/elasticsearch/index/mapper/DocumentMapperMergeTests.java
index e2fbbe7ebfe7..198992b41a06 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/DocumentMapperMergeTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/DocumentMapperMergeTests.java
@@ -168,9 +168,9 @@ public void run() {
                     barrier.await();
                     for (int i = 0; i < 200 && stopped.get() == false; i++) {
                         final String fieldName = Integer.toString(i);
-                        ParsedDocument doc = documentMapper.parse(SourceToParse.source("test", 
-                                "test", 
-                                fieldName, 
+                        ParsedDocument doc = documentMapper.parse(SourceToParse.source("test",
+                                "test",
+                                fieldName,
                                 new BytesArray("{ \"" + fieldName + "\" : \"test\" }"),
                                 XContentType.JSON));
                         Mapping update = doc.dynamicMappingsUpdate();
@@ -191,10 +191,10 @@ public void run() {
             while(stopped.get() == false) {
                 final String fieldName = lastIntroducedFieldName.get();
                 final BytesReference source = new BytesArray("{ \"" + fieldName + "\" : \"test\" }");
-                ParsedDocument parsedDoc = documentMapper.parse(SourceToParse.source("test", 
-                        "test", 
-                        "random", 
-                        source, 
+                ParsedDocument parsedDoc = documentMapper.parse(SourceToParse.source("test",
+                        "test",
+                        "random",
+                        source,
                         XContentType.JSON));
                 if (parsedDoc.dynamicMappingsUpdate() != null) {
                     // not in the mapping yet, try again
@@ -235,4 +235,65 @@ public void testDoNotRepeatOriginalMapping() throws IOException {
         assertNotNull(mapper.mappers().getMapper("foo"));
         assertFalse(mapper.sourceMapper().enabled());
     }
+
+    public void testMergeChildType() throws IOException {
+        DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
+
+        String initMapping = XContentFactory.jsonBuilder().startObject().startObject("child")
+            .startObject("_parent").field("type", "parent").endObject()
+            .endObject().endObject().string();
+        DocumentMapper initMapper = parser.parse("child", new CompressedXContent(initMapping));
+
+        assertThat(initMapper.mappers().getMapper("_parent#parent"), notNullValue());
+
+        String updatedMapping1 = XContentFactory.jsonBuilder().startObject().startObject("child")
+            .startObject("properties")
+            .startObject("name").field("type", "text").endObject()
+            .endObject().endObject().endObject().string();
+        DocumentMapper updatedMapper1 = parser.parse("child", new CompressedXContent(updatedMapping1));
+        DocumentMapper mergedMapper1 = initMapper.merge(updatedMapper1.mapping(), false);
+
+        assertThat(mergedMapper1.mappers().getMapper("_parent#parent"), notNullValue());
+        assertThat(mergedMapper1.mappers().getMapper("name"), notNullValue());
+
+        String updatedMapping2 = XContentFactory.jsonBuilder().startObject().startObject("child")
+            .startObject("_parent").field("type", "parent").endObject()
+            .startObject("properties")
+            .startObject("age").field("type", "byte").endObject()
+            .endObject().endObject().endObject().string();
+        DocumentMapper updatedMapper2 = parser.parse("child", new CompressedXContent(updatedMapping2));
+        DocumentMapper mergedMapper2 = mergedMapper1.merge(updatedMapper2.mapping(), false);
+
+        assertThat(mergedMapper2.mappers().getMapper("_parent#parent"), notNullValue());
+        assertThat(mergedMapper2.mappers().getMapper("name"), notNullValue());
+        assertThat(mergedMapper2.mappers().getMapper("age"), notNullValue());
+
+        String modParentMapping = XContentFactory.jsonBuilder().startObject().startObject("child")
+            .startObject("_parent").field("type", "new_parent").endObject()
+            .endObject().endObject().string();
+        DocumentMapper modParentMapper = parser.parse("child", new CompressedXContent(modParentMapping));
+        Exception e = expectThrows(IllegalArgumentException.class, () -> initMapper.merge(modParentMapper.mapping(), false));
+        assertThat(e.getMessage(), containsString("The _parent field's type option can't be changed: [parent]->[new_parent]"));
+    }
+
+    public void testMergeAddingParent() throws IOException {
+        DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
+
+        String initMapping = XContentFactory.jsonBuilder().startObject().startObject("cowboy")
+            .startObject("properties")
+            .startObject("name").field("type", "text").endObject()
+            .endObject().endObject().endObject().string();
+        DocumentMapper initMapper = parser.parse("cowboy", new CompressedXContent(initMapping));
+
+        assertThat(initMapper.mappers().getMapper("name"), notNullValue());
+
+        String updatedMapping = XContentFactory.jsonBuilder().startObject().startObject("cowboy")
+            .startObject("_parent").field("type", "parent").endObject()
+            .startObject("properties")
+            .startObject("age").field("type", "byte").endObject()
+            .endObject().endObject().endObject().string();
+        DocumentMapper updatedMapper = parser.parse("cowboy", new CompressedXContent(updatedMapping));
+        Exception e = expectThrows(IllegalArgumentException.class, () -> initMapper.merge(updatedMapper.mapping(), false));
+        assertThat(e.getMessage(), containsString("The _parent field's type option can't be changed: [null]->[parent]"));
+    }
 }
