diff --git a/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java
index e89259ad8ce6..9cb038b36231 100644
--- a/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java
+++ b/src/main/java/org/elasticsearch/action/admin/cluster/stats/TransportClusterStatsAction.java
@@ -117,12 +117,11 @@ protected ClusterStatsNodeResponse nodeOperation(ClusterStatsNodeRequest nodeReq
         List<ShardStats> shardsStats = new ArrayList<>();
         for (IndexService indexService : indicesService.indices().values()) {
             for (IndexShard indexShard : indexService) {
-                if (indexShard.routingEntry().active()) {
+                if (indexShard.routingEntry() != null && indexShard.routingEntry().active()) {
                     // only report on fully started shards
-                    shardsStats.add(new ShardStats(indexShard, SHARD_STATS_FLAGS));
+                    shardsStats.add(new ShardStats(indexShard, indexShard.routingEntry(), SHARD_STATS_FLAGS));
                 }
             }
-
         }
 
         ClusterHealthStatus clusterStatus = null;
diff --git a/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java b/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
index 04494c1929f2..73618125bc45 100644
--- a/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
+++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/ShardStats.java
@@ -43,9 +43,9 @@
     ShardStats() {
     }
 
-    public ShardStats(IndexShard indexShard, CommonStatsFlags flags) {
-        super(indexShard.routingEntry().shardId());
-        this.shardRouting = indexShard.routingEntry();
+    public ShardStats(IndexShard indexShard, ShardRouting shardRouting, CommonStatsFlags flags) {
+        super(indexShard.shardId());
+        this.shardRouting = shardRouting;
         this.stats = new CommonStats(indexShard, flags);
     }
 
diff --git a/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java b/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
index eacc122281e7..eb6dd735df18 100644
--- a/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
+++ b/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
@@ -37,6 +37,7 @@
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.index.IndexShardMissingException;
 import org.elasticsearch.index.service.InternalIndexService;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.index.shard.service.InternalIndexShard;
@@ -135,6 +136,10 @@ protected ShardStats newShardResponse() {
     protected ShardStats shardOperation(IndexShardStatsRequest request) throws ElasticsearchException {
         InternalIndexService indexService = (InternalIndexService) indicesService.indexServiceSafe(request.shardId().getIndex());
         InternalIndexShard indexShard = (InternalIndexShard) indexService.shardSafe(request.shardId().id());
+        // if we don't have the routing entry yet, we need it stats wise, we treat it as if the shard is not ready yet
+        if (indexShard.routingEntry() == null) {
+            throw new IndexShardMissingException(indexShard.shardId());
+        }
 
         CommonStatsFlags flags = new CommonStatsFlags().clear();
 
@@ -197,7 +202,7 @@ protected ShardStats shardOperation(IndexShardStatsRequest request) throws Elast
             flags.set(CommonStatsFlags.Flag.QueryCache);
         }
 
-        return new ShardStats(indexShard, flags);
+        return new ShardStats(indexShard, indexShard.routingEntry(), flags);
     }
 
     static class IndexShardStatsRequest extends BroadcastShardOperationRequest {
diff --git a/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java b/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java
index a0d35430ee29..ccea34022cf0 100644
--- a/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java
+++ b/src/main/java/org/elasticsearch/index/shard/service/IndexShard.java
@@ -82,6 +82,11 @@
 
     ShardFieldData fieldData();
 
+    /**
+     * Returns the latest cluster routing entry received with this shard. Might be null if the
+     * shard was just created.
+     */
+    @Nullable
     ShardRouting routingEntry();
 
     DocsStats docStats();
diff --git a/src/main/java/org/elasticsearch/indices/InternalIndicesService.java b/src/main/java/org/elasticsearch/indices/InternalIndicesService.java
index dd7f765dce8f..45b78cfabadc 100644
--- a/src/main/java/org/elasticsearch/indices/InternalIndicesService.java
+++ b/src/main/java/org/elasticsearch/indices/InternalIndicesService.java
@@ -206,7 +206,10 @@ public NodeIndicesStats stats(boolean includePrevious, CommonStatsFlags flags) {
         for (IndexService indexService : indices.values()) {
             for (IndexShard indexShard : indexService) {
                 try {
-                    IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard, flags) });
+                    if (indexShard.routingEntry() == null) {
+                        continue;
+                    }
+                    IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard, indexShard.routingEntry(), flags) });
                     if (!statsByShard.containsKey(indexService.index())) {
                         statsByShard.put(indexService.index(), Lists.<IndexShardStats>newArrayList(indexShardStats));
                     } else {
