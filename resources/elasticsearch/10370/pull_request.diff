diff --git a/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
index d6e097b4a732..dc74fa33a98b 100644
--- a/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
@@ -82,6 +82,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.TreeMap;
 
 /**
  *
@@ -750,10 +751,13 @@ protected void doXContentBody(XContentBuilder builder, boolean includeDefaults,
             builder.field("similarity", SimilarityLookupService.DEFAULT_SIMILARITY);
         }
 
+        TreeMap<String, Object> orderedFielddataSettings = new TreeMap<>();
         if (customFieldDataSettings != null) {
-            builder.field("fielddata", (Map) customFieldDataSettings.getAsMap());
+            orderedFielddataSettings.putAll(customFieldDataSettings.getAsMap());
+            builder.field("fielddata", orderedFielddataSettings);
         } else if (includeDefaults) {
-            builder.field("fielddata", (Map) fieldDataType.getSettings().getAsMap());
+            orderedFielddataSettings.putAll(fieldDataType.getSettings().getAsMap());
+            builder.field("fielddata", orderedFielddataSettings);
         }
         multiFields.toXContent(builder, params);
 
diff --git a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
index 97c8b3895623..c1891c74b3f2 100644
--- a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
+++ b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
@@ -38,7 +38,9 @@
 import org.junit.Test;
 
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Map;
+import java.util.TreeMap;
 
 import static org.elasticsearch.common.io.Streams.copyToBytesFromClasspath;
 import static org.elasticsearch.common.io.Streams.copyToStringFromClasspath;
@@ -446,4 +448,37 @@ public void testMultiFieldsInConsistentOrder() throws Exception {
             assertThat(field, equalTo(multiFieldNames[i++]));
         }
     }
+    
+    @Test
+    // The fielddata settings need to be the same after deserializing/re-serialsing, else unneccesary mapping sync's can be triggered
+    public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception {
+        final String MY_MULTI_FIELD = "multi_field";
+        
+        // Possible fielddata settings
+        Map<String, Object> possibleSettings = new TreeMap<String, Object>();
+        possibleSettings.put("filter.frequency.min", 1);
+        possibleSettings.put("filter.frequency.max", 2);
+        possibleSettings.put("filter.regex.pattern", ".*");
+        possibleSettings.put("format", "fst");
+        possibleSettings.put("loading", "eager");
+        possibleSettings.put("foo", "bar");
+        possibleSettings.put("zetting", "zValue");
+        possibleSettings.put("aSetting", "aValue");
+        
+        // Generate a mapping with the a random subset of possible fielddata settings
+        XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties")
+            .startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD)
+            .field("type", "string").startObject("fielddata");
+        String[] keys = possibleSettings.keySet().toArray(new String[]{});
+        Collections.shuffle(Arrays.asList(keys));
+        for(int i = randomIntBetween(0, possibleSettings.size()-1); i >= 0; --i)
+            builder.field(keys[i], possibleSettings.get(keys[i]));
+        builder.endObject().endObject().endObject().endObject().endObject().endObject().endObject();
+        
+        // Check the mapping remains identical when deserialed/re-serialsed 
+        final DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser();
+        DocumentMapper docMapper = parser.parse(builder.string());
+        DocumentMapper docMapper2 = parser.parse(docMapper.mappingSource().string());
+        assertThat(docMapper.mappingSource(), equalTo(docMapper2.mappingSource()));
+    }
 }
