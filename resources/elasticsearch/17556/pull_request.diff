diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java
index 96a7dacb0f30..bbc2130f09a7 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/pipeline/movavg/MovAvgParser.java
@@ -163,7 +163,7 @@ public MovAvgPipelineAggregatorBuilder parse(String pipelineAggregatorName, XCon
 
             MovAvgModel movAvgModel;
             try {
-                movAvgModel = modelParser.parse(settings, pipelineAggregatorName, window, context.parseFieldMatcher());
+                movAvgModel = modelParser.parse(settings, pipelineAggregatorName, factory.window(), context.parseFieldMatcher());
             } catch (ParseException exception) {
                 throw new ParsingException(parser.getTokenLocation(), "Could not parse settings for model [" + model + "].", exception);
             }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java b/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java
index 16bba36ed77e..d63d61ab4edc 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/BasePipelineAggregationTestCase.java
@@ -102,9 +102,9 @@
 
     private static NamedWriteableRegistry namedWriteableRegistry;
 
-    private static AggregatorParsers aggParsers;
-    private static ParseFieldMatcher parseFieldMatcher;
-    private static IndicesQueriesRegistry queriesRegistry;
+    protected static AggregatorParsers aggParsers;
+    protected static ParseFieldMatcher parseFieldMatcher;
+    protected static IndicesQueriesRegistry queriesRegistry;
 
     protected abstract AF createTestAggregatorFactory();
 
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java
index 87290bf0d795..fdd8f02ff784 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/pipeline/moving/avg/MovAvgTests.java
@@ -19,7 +19,11 @@
 
 package org.elasticsearch.search.aggregations.pipeline.moving.avg;
 
+import org.elasticsearch.common.xcontent.XContentFactory;
+import org.elasticsearch.common.xcontent.XContentParser;
+import org.elasticsearch.index.query.QueryParseContext;
 import org.elasticsearch.search.aggregations.BasePipelineAggregationTestCase;
+import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;
 import org.elasticsearch.search.aggregations.pipeline.BucketHelpers.GapPolicy;
 import org.elasticsearch.search.aggregations.pipeline.movavg.MovAvgPipelineAggregatorBuilder;
 import org.elasticsearch.search.aggregations.pipeline.movavg.models.EwmaModel;
@@ -92,4 +96,35 @@ protected MovAvgPipelineAggregatorBuilder createTestAggregatorFactory() {
         return factory;
     }
 
+    public void testDefaultParsing() throws Exception {
+        MovAvgPipelineAggregatorBuilder expected = new MovAvgPipelineAggregatorBuilder("commits_moving_avg", "commits");
+        String json = "{" +
+            "    \"commits_moving_avg\": {" +
+            "        \"moving_avg\": {" +
+                "            \"buckets_path\": \"commits\"" +
+            "        }" +
+            "    }" +
+            "}";
+        XContentParser parser = XContentFactory.xContent(json).createParser(json);
+        QueryParseContext parseContext = new QueryParseContext(queriesRegistry);
+        parseContext.reset(parser);
+        parseContext.parseFieldMatcher(parseFieldMatcher);
+        assertSame(XContentParser.Token.START_OBJECT, parser.nextToken());
+        assertSame(XContentParser.Token.FIELD_NAME, parser.nextToken());
+        assertEquals(expected.name(), parser.currentName());
+        assertSame(XContentParser.Token.START_OBJECT, parser.nextToken());
+        assertSame(XContentParser.Token.FIELD_NAME, parser.nextToken());
+        assertEquals(expected.type(), parser.currentName());
+        assertSame(XContentParser.Token.START_OBJECT, parser.nextToken());
+        PipelineAggregatorBuilder<?> newAgg = aggParsers.pipelineAggregator(expected.getWriteableName()).parse(expected.name(), parser,
+                parseContext);
+        assertSame(XContentParser.Token.END_OBJECT, parser.currentToken());
+        assertSame(XContentParser.Token.END_OBJECT, parser.nextToken());
+        assertSame(XContentParser.Token.END_OBJECT, parser.nextToken());
+        assertNull(parser.nextToken());
+        assertNotNull(newAgg);
+        assertNotSame(newAgg, expected);
+        assertEquals(expected, newAgg);
+        assertEquals(expected.hashCode(), newAgg.hashCode());
+    }
 }
