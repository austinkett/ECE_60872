diff --git a/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java
index c66f534bd813..7fc80aa0a179 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java
@@ -39,7 +39,7 @@
 import org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.metadata.MetaDataCreateIndexService;
-import org.elasticsearch.cluster.metadata.MetaDataIndexAliasesService;
+import org.elasticsearch.cluster.metadata.MetaDataIndexRolloverService;
 import org.elasticsearch.cluster.service.ClusterService;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.Settings;
@@ -63,20 +63,17 @@
 public class TransportRolloverAction extends TransportMasterNodeAction<RolloverRequest, RolloverResponse> {
 
     private static final Pattern INDEX_NAME_PATTERN = Pattern.compile("^.*-\\d+$");
-    private final MetaDataCreateIndexService createIndexService;
-    private final MetaDataIndexAliasesService indexAliasesService;
+    private final MetaDataIndexRolloverService indexRolloverService;
     private final ActiveShardsObserver activeShardsObserver;
     private final Client client;
 
     @Inject
     public TransportRolloverAction(Settings settings, TransportService transportService, ClusterService clusterService,
-                                   ThreadPool threadPool, MetaDataCreateIndexService createIndexService,
-                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver,
-                                   MetaDataIndexAliasesService indexAliasesService, Client client) {
+                                   ThreadPool threadPool, MetaDataIndexRolloverService indexRolloverService,
+                                   ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver, Client client) {
         super(settings, RolloverAction.NAME, transportService, clusterService, threadPool, actionFilters, indexNameExpressionResolver,
             RolloverRequest::new);
-        this.createIndexService = createIndexService;
-        this.indexAliasesService = indexAliasesService;
+        this.indexRolloverService = indexRolloverService;
         this.client = client;
         this.activeShardsObserver = new ActiveShardsObserver(settings, clusterService, threadPool);
     }
@@ -128,26 +125,22 @@ public void onResponse(IndicesStatsResponse statsResponse) {
                         return;
                     }
                     if (conditionResults.size() == 0 || conditionResults.stream().anyMatch(result -> result.matched)) {
-                        CreateIndexClusterStateUpdateRequest updateRequest = prepareCreateIndexRequest(unresolvedName, rolloverIndexName,
-                            rolloverRequest);
-                        createIndexService.createIndex(updateRequest, ActionListener.wrap(createIndexClusterStateUpdateResponse -> {
-                            // switch the alias to point to the newly created index
-                            indexAliasesService.indicesAliases(
-                                prepareRolloverAliasesUpdateRequest(sourceIndexName, rolloverIndexName,
-                                    rolloverRequest),
-                                ActionListener.wrap(aliasClusterStateUpdateResponse -> {
-                                    if (aliasClusterStateUpdateResponse.isAcknowledged()) {
-                                        activeShardsObserver.waitForActiveShards(new String[]{rolloverIndexName},
-                                            rolloverRequest.getCreateIndexRequest().waitForActiveShards(),
-                                            rolloverRequest.masterNodeTimeout(),
-                                            isShardsAcked -> listener.onResponse(new RolloverResponse(sourceIndexName, rolloverIndexName,
-                                                                                    conditionResults, false, true, true, isShardsAcked)),
-                                            listener::onFailure);
-                                    } else {
-                                        listener.onResponse(new RolloverResponse(sourceIndexName, rolloverIndexName, conditionResults,
-                                                                                    false, true, false, false));
-                                    }
-                                }, listener::onFailure));
+                        CreateIndexClusterStateUpdateRequest createIndexRequest = prepareCreateIndexRequest(unresolvedName,
+                            rolloverIndexName, rolloverRequest);
+                        IndicesAliasesClusterStateUpdateRequest updateAliasRequest = prepareRolloverAliasesUpdateRequest(sourceIndexName,
+                            rolloverIndexName, rolloverRequest);
+                        indexRolloverService.rollover(createIndexRequest, updateAliasRequest, ActionListener.wrap(clusterStateResponse -> {
+                            if (clusterStateResponse.isAcknowledged()) {
+                                activeShardsObserver.waitForActiveShards(new String[]{rolloverIndexName},
+                                    rolloverRequest.getCreateIndexRequest().waitForActiveShards(),
+                                    rolloverRequest.masterNodeTimeout(),
+                                    isShardsAcked -> listener.onResponse(new RolloverResponse(sourceIndexName, rolloverIndexName,
+                                        conditionResults, false, true, true, isShardsAcked)),
+                                    listener::onFailure);
+                            } else {
+                                listener.onResponse(new RolloverResponse(sourceIndexName, rolloverIndexName, conditionResults,
+                                    false, true, false, false));
+                            }
                         }, listener::onFailure));
                     } else {
                         // conditions not met
diff --git a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
index 01783060c0b8..e30f811df119 100644
--- a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
@@ -219,20 +219,45 @@ public void createIndex(final CreateIndexClusterStateUpdateRequest request,
 
     private void onlyCreateIndex(final CreateIndexClusterStateUpdateRequest request,
                                  final ActionListener<ClusterStateUpdateResponse> listener) {
-        Settings.Builder updatedSettingsBuilder = Settings.builder();
-        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();
-        indexScopedSettings.validate(build, true); // we do validate here - index setting must be consistent
-        request.settings(build);
+        final IndexCreationTask indexCreationTask = indexCreationTask(request);
         clusterService.submitStateUpdateTask("create-index [" + request.index() + "], cause [" + request.cause() + "]",
-            new IndexCreationTask(logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, settings,
-                this::validate));
+            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) {
+                @Override
+                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {
+                    return new ClusterStateUpdateResponse(acknowledged);
+                }
+
+                @Override
+                public ClusterState execute(ClusterState currentState) throws Exception {
+                    return indexCreationTask.execute(currentState);
+                }
+
+                @Override
+                public void onFailure(String source, Exception e) {
+                    if (e instanceof ResourceAlreadyExistsException) {
+                        logger.trace((Supplier<?>) () -> new ParameterizedMessage("[{}] failed to create", request.index()), e);
+                    } else {
+                        logger.debug((Supplier<?>) () -> new ParameterizedMessage("[{}] failed to create", request.index()), e);
+                    }
+                    super.onFailure(source, e);
+                }
+            });
     }
 
     interface IndexValidator {
         void validate(CreateIndexClusterStateUpdateRequest request, ClusterState state);
     }
 
-    static class IndexCreationTask extends AckedClusterStateUpdateTask<ClusterStateUpdateResponse> {
+    IndexCreationTask indexCreationTask(final CreateIndexClusterStateUpdateRequest request) {
+        Settings.Builder updatedSettingsBuilder = Settings.builder();
+        Settings build = updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();
+        indexScopedSettings.validate(build, true); // we do validate here - index setting must be consistent
+        request.settings(build);
+        return new IndexCreationTask(logger, allocationService, request, indicesService, aliasValidator, xContentRegistry,
+            settings, this::validate);
+    }
+
+    static class IndexCreationTask {
 
         private final IndicesService indicesService;
         private final AliasValidator aliasValidator;
@@ -244,10 +269,8 @@ private void onlyCreateIndex(final CreateIndexClusterStateUpdateRequest request,
         private final IndexValidator validator;
 
         IndexCreationTask(Logger logger, AllocationService allocationService, CreateIndexClusterStateUpdateRequest request,
-                          ActionListener<ClusterStateUpdateResponse> listener, IndicesService indicesService,
-                          AliasValidator aliasValidator, NamedXContentRegistry xContentRegistry,
+                          IndicesService indicesService, AliasValidator aliasValidator, NamedXContentRegistry xContentRegistry,
                           Settings settings, IndexValidator validator) {
-            super(Priority.URGENT, request, listener);
             this.request = request;
             this.logger = logger;
             this.allocationService = allocationService;
@@ -258,13 +281,7 @@ private void onlyCreateIndex(final CreateIndexClusterStateUpdateRequest request,
             this.validator = validator;
         }
 
-        @Override
-        protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {
-            return new ClusterStateUpdateResponse(acknowledged);
-        }
-
-        @Override
-        public ClusterState execute(ClusterState currentState) throws Exception {
+        ClusterState execute(ClusterState currentState) throws Exception {
             Index createdIndex = null;
             String removalExtraInfo = null;
             IndexRemovalReason removalReason = IndexRemovalReason.FAILURE;
@@ -555,16 +572,6 @@ public ClusterState execute(ClusterState currentState) throws Exception {
             }
         }
 
-        @Override
-        public void onFailure(String source, Exception e) {
-            if (e instanceof ResourceAlreadyExistsException) {
-                logger.trace((Supplier<?>) () -> new ParameterizedMessage("[{}] failed to create", request.index()), e);
-            } else {
-                logger.debug((Supplier<?>) () -> new ParameterizedMessage("[{}] failed to create", request.index()), e);
-            }
-            super.onFailure(source, e);
-        }
-
         private List<IndexTemplateMetaData> findTemplates(CreateIndexClusterStateUpdateRequest request, ClusterState state) throws IOException {
             List<IndexTemplateMetaData> templateMetadata = new ArrayList<>();
             for (ObjectCursor<IndexTemplateMetaData> cursor : state.metaData().templates().values()) {
diff --git a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
index 0949032db166..d16a5f2c8c58 100644
--- a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
@@ -88,12 +88,12 @@ protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {
 
                 @Override
                 public ClusterState execute(ClusterState currentState) {
-                    return innerExecute(currentState, request.actions());
+                    return executeAliasActions(currentState, request.actions());
                 }
             });
     }
 
-    ClusterState innerExecute(ClusterState currentState, Iterable<AliasAction> actions) {
+    ClusterState executeAliasActions(ClusterState currentState, Iterable<AliasAction> actions) {
         List<Index> indicesToClose = new ArrayList<>();
         Map<String, IndexService> indices = new HashMap<>();
         try {
diff --git a/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexRolloverService.java b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexRolloverService.java
new file mode 100644
index 000000000000..3655949ecdce
--- /dev/null
+++ b/core/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexRolloverService.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.cluster.metadata;
+
+import org.elasticsearch.action.ActionListener;
+import org.elasticsearch.action.admin.indices.alias.IndicesAliasesClusterStateUpdateRequest;
+import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;
+import org.elasticsearch.cluster.AckedClusterStateUpdateTask;
+import org.elasticsearch.cluster.ClusterState;
+import org.elasticsearch.cluster.ack.ClusterStateUpdateResponse;
+import org.elasticsearch.cluster.service.ClusterService;
+import org.elasticsearch.common.Priority;
+import org.elasticsearch.common.inject.Inject;
+
+/**
+ * A service is responsible for rollover index including creating a new index and updating index aliases.
+ */
+public class MetaDataIndexRolloverService {
+    private final MetaDataCreateIndexService createIndexService;
+    private final MetaDataIndexAliasesService aliasesService;
+    private final ClusterService clusterService;
+
+    @Inject
+    public MetaDataIndexRolloverService(MetaDataCreateIndexService createIndexService, MetaDataIndexAliasesService aliasesService,
+                                        ClusterService clusterService) {
+        this.createIndexService = createIndexService;
+        this.aliasesService = aliasesService;
+        this.clusterService = clusterService;
+    }
+
+    /**
+     * Executes a create index request and an update index alias in a single cluster task action.
+     */
+    public void rollover(final CreateIndexClusterStateUpdateRequest createIndexRequest,
+                         final IndicesAliasesClusterStateUpdateRequest updateAliasRequest,
+                         final ActionListener<ClusterStateUpdateResponse> listener) {
+        final MetaDataCreateIndexService.IndexCreationTask indexCreationTask = createIndexService.indexCreationTask(createIndexRequest);
+        clusterService.submitStateUpdateTask("rollover",
+            new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, updateAliasRequest, listener) {
+                @Override
+                protected ClusterStateUpdateResponse newResponse(boolean acknowledged) {
+                    return new ClusterStateUpdateResponse(acknowledged);
+                }
+
+                @Override
+                public ClusterState execute(ClusterState currentState) throws Exception {
+                    final ClusterState newClusterState = indexCreationTask.execute(currentState);
+                    return aliasesService.executeAliasActions(newClusterState, updateAliasRequest.actions());
+                }
+            });
+    }
+}
diff --git a/core/src/test/java/org/elasticsearch/action/admin/indices/rollover/RolloverIT.java b/core/src/test/java/org/elasticsearch/action/admin/indices/rollover/RolloverIT.java
index c047611f7193..e2c929b45004 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/indices/rollover/RolloverIT.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/indices/rollover/RolloverIT.java
@@ -22,6 +22,7 @@
 import org.elasticsearch.ResourceAlreadyExistsException;
 import org.elasticsearch.action.admin.indices.alias.Alias;
 import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
+import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.settings.Settings;
@@ -29,6 +30,7 @@
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.plugins.Plugin;
+import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.InternalSettingsPlugin;
 import org.joda.time.DateTime;
@@ -39,6 +41,7 @@
 import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.stream.Collectors;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
@@ -277,4 +280,35 @@ public void testRolloverMaxSize() throws Exception {
             assertThat("No rollover with an empty index", response.isRolledOver(), equalTo(false));
         }
     }
+
+    public void testIndexingAndRolloverConcurrently() throws Exception {
+        client().admin().indices().preparePutTemplate("logs")
+            .setPatterns(Collections.singletonList("logs-*"))
+            .addAlias(new Alias("logs-write"))
+            .get();
+        assertAcked(client().admin().indices().prepareCreate("logs-000001").get());
+        ensureYellow("logs-write");
+
+        final AtomicBoolean done = new AtomicBoolean();
+        final Thread rolloverThread = new Thread(() -> {
+            while (done.get() == false) {
+                client().admin().indices()
+                    .prepareRolloverIndex("logs-write")
+                    .addMaxIndexSizeCondition(new ByteSizeValue(1))
+                    .get();
+            }
+        });
+        rolloverThread.start();
+        try {
+            int numDocs = between(20, 500);
+            for (int i = 0; i < numDocs; i++) {
+                logger.info("--> add doc [{}]", i);
+                IndexResponse resp = index("logs-write", "doc", Integer.toString(i), "{}");
+                assertThat(resp.status(), equalTo(RestStatus.CREATED));
+            }
+        } finally {
+            done.set(true);
+            rolloverThread.join();
+        }
+    }
 }
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java
index f44d0b7c4036..60dee4c0ec68 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/IndexCreationTaskTests.java
@@ -21,7 +21,6 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.lucene.search.Sort;
 import org.elasticsearch.Version;
-import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.admin.indices.alias.Alias;
 import org.elasticsearch.action.admin.indices.create.CreateIndexClusterStateUpdateRequest;
 import org.elasticsearch.action.admin.indices.shrink.ResizeType;
@@ -87,7 +86,6 @@
     private final Logger logger = mock(Logger.class);
     private final AllocationService allocationService = mock(AllocationService.class);
     private final MetaDataCreateIndexService.IndexValidator validator = mock(MetaDataCreateIndexService.IndexValidator.class);
-    private final ActionListener listener = mock(ActionListener.class);
     private final ClusterState state = mock(ClusterState.class);
     private final Settings.Builder clusterStateSettings = Settings.builder();
     private final MapperService mapper = mock(MapperService.class);
@@ -387,7 +385,7 @@ private ClusterState executeTask() throws Exception {
         setupState();
         setupRequest();
         final MetaDataCreateIndexService.IndexCreationTask task = new MetaDataCreateIndexService.IndexCreationTask(
-            logger, allocationService, request, listener, indicesService, aliasValidator, xContentRegistry, clusterStateSettings.build(),
+            logger, allocationService, request, indicesService, aliasValidator, xContentRegistry, clusterStateSettings.build(),
             validator
         );
         return task.execute(state);
diff --git a/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesServiceTests.java b/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesServiceTests.java
index e5b52d8cf52b..26c6040c344a 100644
--- a/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesServiceTests.java
@@ -64,7 +64,7 @@ public void testAddAndRemove() {
         ClusterState before = createIndex(ClusterState.builder(ClusterName.DEFAULT).build(), index);
 
         // Add an alias to it
-        ClusterState after = service.innerExecute(before, singletonList(new AliasAction.Add(index, "test", null, null, null)));
+        ClusterState after = service.executeAliasActions(before, singletonList(new AliasAction.Add(index, "test", null, null, null)));
         AliasOrIndex alias = after.metaData().getAliasAndIndexLookup().get("test");
         assertNotNull(alias);
         assertTrue(alias.isAlias());
@@ -72,7 +72,7 @@ public void testAddAndRemove() {
 
         // Remove the alias from it while adding another one
         before = after;
-        after = service.innerExecute(before, Arrays.asList(
+        after = service.executeAliasActions(before, Arrays.asList(
                 new AliasAction.Remove(index, "test"),
                 new AliasAction.Add(index, "test_2", null, null, null)));
         assertNull(after.metaData().getAliasAndIndexLookup().get("test"));
@@ -83,7 +83,7 @@ public void testAddAndRemove() {
 
         // Now just remove on its own
         before = after;
-        after = service.innerExecute(before, singletonList(new AliasAction.Remove(index, "test_2")));
+        after = service.executeAliasActions(before, singletonList(new AliasAction.Remove(index, "test_2")));
         assertNull(after.metaData().getAliasAndIndexLookup().get("test"));
         assertNull(after.metaData().getAliasAndIndexLookup().get("test_2"));
     }
@@ -94,7 +94,7 @@ public void testSwapIndexWithAlias() {
         before = createIndex(before, "test_2");
 
         // Now remove "test" and add an alias to "test" to "test_2" in one go
-        ClusterState after = service.innerExecute(before, Arrays.asList(
+        ClusterState after = service.executeAliasActions(before, Arrays.asList(
                 new AliasAction.Add("test_2", "test", null, null, null),
                 new AliasAction.RemoveIndex("test")));
         AliasOrIndex alias = after.metaData().getAliasAndIndexLookup().get("test");
@@ -108,7 +108,7 @@ public void testAddAliasToRemovedIndex() {
         ClusterState before = createIndex(ClusterState.builder(ClusterName.DEFAULT).build(), "test");
 
         // Attempt to add an alias to "test" at the same time as we remove it
-        IndexNotFoundException e = expectThrows(IndexNotFoundException.class, () -> service.innerExecute(before, Arrays.asList(
+        IndexNotFoundException e = expectThrows(IndexNotFoundException.class, () -> service.executeAliasActions(before, Arrays.asList(
                 new AliasAction.Add("test", "alias", null, null, null),
                 new AliasAction.RemoveIndex("test"))));
         assertEquals("test", e.getIndex().getName());
@@ -119,7 +119,7 @@ public void testRemoveIndexTwice() {
         ClusterState before = createIndex(ClusterState.builder(ClusterName.DEFAULT).build(), "test");
 
         // Try to remove an index twice. This should just remove the index once....
-        ClusterState after = service.innerExecute(before, Arrays.asList(
+        ClusterState after = service.executeAliasActions(before, Arrays.asList(
                 new AliasAction.RemoveIndex("test"),
                 new AliasAction.RemoveIndex("test")));
         assertNull(after.metaData().getAliasAndIndexLookup().get("test"));
