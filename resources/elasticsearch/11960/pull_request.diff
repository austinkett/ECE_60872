diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java
index 30b24dde9fe9..3172ea0bee55 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/RoutingService.java
@@ -83,6 +83,10 @@ protected void doClose() {
         clusterService.remove(this);
     }
 
+    public AllocationService getAllocationService() {
+        return this.allocationService;
+    }
+
     /**
      * Initiates a reroute.
      */
diff --git a/core/src/main/java/org/elasticsearch/discovery/Discovery.java b/core/src/main/java/org/elasticsearch/discovery/Discovery.java
index 36b8e5da6f5f..0d431f5e5cd0 100644
--- a/core/src/main/java/org/elasticsearch/discovery/Discovery.java
+++ b/core/src/main/java/org/elasticsearch/discovery/Discovery.java
@@ -22,6 +22,7 @@
 import org.elasticsearch.cluster.ClusterChangedEvent;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.node.DiscoveryNode;
+import org.elasticsearch.cluster.routing.RoutingService;
 import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.component.LifecycleComponent;
@@ -51,7 +52,7 @@
      * Another hack to solve dep injection problem..., note, this will be called before
      * any start is called.
      */
-    void setAllocationService(AllocationService allocationService);
+    void setRoutingService(RoutingService routingService);
 
     /**
      * Publish all the changes to the cluster from the master (can be called just by the master). The publish
diff --git a/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java
index a03aeb0dddc4..482ce1966728 100644
--- a/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java
+++ b/core/src/main/java/org/elasticsearch/discovery/local/LocalDiscovery.java
@@ -26,6 +26,7 @@
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodeService;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
+import org.elasticsearch.cluster.routing.RoutingService;
 import org.elasticsearch.cluster.routing.allocation.AllocationService;
 import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;
 import org.elasticsearch.common.component.AbstractLifecycleComponent;
@@ -60,7 +61,7 @@
     private final TransportService transportService;
     private final ClusterService clusterService;
     private final DiscoveryNodeService discoveryNodeService;
-    private AllocationService allocationService;
+    private RoutingService routingService;
     private final ClusterName clusterName;
     private final Version version;
 
@@ -96,8 +97,8 @@ public void setNodeService(@Nullable NodeService nodeService) {
     }
 
     @Override
-    public void setAllocationService(AllocationService allocationService) {
-        this.allocationService = allocationService;
+    public void setRoutingService(RoutingService routingService) {
+        this.routingService = routingService;
     }
 
     @Override
@@ -176,9 +177,7 @@ public ClusterState execute(ClusterState currentState) {
                             nodesBuilder.put(discovery.localNode);
                         }
                         nodesBuilder.localNodeId(master.localNode().id()).masterNodeId(master.localNode().id());
-                        ClusterState updatedState = ClusterState.builder(currentState).nodes(nodesBuilder).build();
-                        RoutingAllocation.Result routingResult = master.allocationService.reroute(ClusterState.builder(updatedState).build());
-                        return ClusterState.builder(updatedState).routingResult(routingResult).build();
+                        return ClusterState.builder(currentState).nodes(nodesBuilder).build();
                     }
 
                     @Override
@@ -189,6 +188,10 @@ public void onFailure(String source, Throwable t) {
                     @Override
                     public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {
                         sendInitialStateEventIfNeeded();
+                        // we reroute not in the same cluster state update since in certain areas we rely on
+                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also
+                        // shard transitions need to better be handled in such cases
+                        master.routingService.reroute("post_node_add");
                     }
                 });
             }
@@ -240,7 +243,7 @@ public ClusterState execute(ClusterState currentState) {
                         }
                         // reroute here, so we eagerly remove dead nodes from the routing
                         ClusterState updatedState = ClusterState.builder(currentState).nodes(newNodes).build();
-                        RoutingAllocation.Result routingResult = master.allocationService.reroute(ClusterState.builder(updatedState).build());
+                        RoutingAllocation.Result routingResult = master.routingService.getAllocationService().reroute(ClusterState.builder(updatedState).build());
                         return ClusterState.builder(updatedState).routingResult(routingResult).build();
                     }
 
diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
index 3c41b533dc4a..7abda98d7801 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
@@ -29,7 +29,7 @@
 import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.cluster.node.DiscoveryNodes;
-import org.elasticsearch.cluster.routing.allocation.AllocationService;
+import org.elasticsearch.cluster.routing.RoutingService;
 import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;
 import org.elasticsearch.cluster.service.InternalClusterService;
 import org.elasticsearch.cluster.settings.ClusterDynamicSettings;
@@ -97,7 +97,7 @@
 
     private final TransportService transportService;
     private final ClusterService clusterService;
-    private AllocationService allocationService;
+    private RoutingService routingService;
     private final ClusterName clusterName;
     private final DiscoverySettings discoverySettings;
     private final ZenPingService pingService;
@@ -219,8 +219,8 @@ public void setNodeService(@Nullable NodeService nodeService) {
     }
 
     @Override
-    public void setAllocationService(AllocationService allocationService) {
-        this.allocationService = allocationService;
+    public void setRoutingService(RoutingService routingService) {
+        this.routingService = routingService;
     }
 
     @Override
@@ -379,7 +379,7 @@ public ClusterState execute(ClusterState currentState) {
                     currentState = ClusterState.builder(currentState).nodes(builder).blocks(clusterBlocks).build();
 
                     // eagerly run reroute to remove dead nodes from routing table
-                    RoutingAllocation.Result result = allocationService.reroute(currentState);
+                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);
                     return ClusterState.builder(currentState).routingResult(result).build();
                 }
 
@@ -510,7 +510,7 @@ public ClusterState execute(ClusterState currentState) {
                         return rejoin(currentState, "not enough master nodes");
                     }
                     // eagerly run reroute to remove dead nodes from routing table
-                    RoutingAllocation.Result routingResult = allocationService.reroute(ClusterState.builder(currentState).build());
+                    RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());
                     return ClusterState.builder(currentState).routingResult(routingResult).build();
                 }
 
@@ -553,7 +553,7 @@ public ClusterState execute(ClusterState currentState) {
                     return rejoin(currentState, "not enough master nodes");
                 }
                 // eagerly run reroute to remove dead nodes from routing table
-                RoutingAllocation.Result routingResult = allocationService.reroute(ClusterState.builder(currentState).build());
+                RoutingAllocation.Result routingResult = routingService.getAllocationService().reroute(ClusterState.builder(currentState).build());
                 return ClusterState.builder(currentState).routingResult(routingResult).build();
             }
 
@@ -902,6 +902,7 @@ private void handleJoinRequest(final DiscoveryNode node, final MembershipAction.
             clusterService.submitStateUpdateTask("zen-disco-receive(join from node[" + node + "])", Priority.URGENT, new ProcessedClusterStateUpdateTask() {
 
                 private final List<Tuple<DiscoveryNode, MembershipAction.JoinCallback>> drainedJoinRequests = new ArrayList<>();
+                private boolean nodeAdded = false;
 
                 @Override
                 public ClusterState execute(ClusterState currentState) {
@@ -910,14 +911,13 @@ public ClusterState execute(ClusterState currentState) {
                         return currentState;
                     }
 
-                    boolean modified = false;
                     DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(currentState.nodes());
                     for (Tuple<DiscoveryNode, MembershipAction.JoinCallback> task : drainedJoinRequests) {
                         DiscoveryNode node = task.v1();
                         if (currentState.nodes().nodeExists(node.id())) {
                             logger.debug("received a join request for an existing node [{}]", node);
                         } else {
-                            modified = true;
+                            nodeAdded = true;
                             nodesBuilder.put(node);
                             for (DiscoveryNode existingNode : currentState.nodes()) {
                                 if (node.address().equals(existingNode.address())) {
@@ -929,12 +929,12 @@ public ClusterState execute(ClusterState currentState) {
                     }
 
                     ClusterState.Builder stateBuilder = ClusterState.builder(currentState);
-                    if (modified) {
+                    if (nodeAdded) {
                         stateBuilder.nodes(nodesBuilder);
                     }
                     currentState = stateBuilder.build();
                     // eagerly run reroute to apply the node addition
-                    RoutingAllocation.Result result = allocationService.reroute(currentState);
+                    RoutingAllocation.Result result = routingService.getAllocationService().reroute(currentState);
                     return ClusterState.builder(currentState).routingResult(result).build();
                 }
 
@@ -964,6 +964,12 @@ public void onFailure(String source, Throwable t) {
 
                 @Override
                 public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {
+                    if (nodeAdded) {
+                        // we reroute not in the same cluster state update since in certain areas we rely on
+                        // the node to be in the cluster state (sampled from ClusterService#state) to be there, also
+                        // shard transitions need to better be handled in such cases
+                        routingService.reroute("post_node_add");
+                    }
                     for (Tuple<DiscoveryNode, MembershipAction.JoinCallback> drainedTask : drainedJoinRequests) {
                         try {
                             drainedTask.v2().onSuccess();
diff --git a/core/src/main/java/org/elasticsearch/node/Node.java b/core/src/main/java/org/elasticsearch/node/Node.java
index 83db83c19b0b..0c4f4d4e7b4e 100644
--- a/core/src/main/java/org/elasticsearch/node/Node.java
+++ b/core/src/main/java/org/elasticsearch/node/Node.java
@@ -234,7 +234,7 @@ public Node start() {
         logger.info("starting ...");
 
         // hack around dependency injection problem (for now...)
-        injector.getInstance(Discovery.class).setAllocationService(injector.getInstance(AllocationService.class));
+        injector.getInstance(Discovery.class).setRoutingService(injector.getInstance(RoutingService.class));
 
         for (Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
             injector.getInstance(plugin).start();
