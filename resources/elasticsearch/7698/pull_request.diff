diff --git a/src/main/java/org/elasticsearch/cluster/routing/GroupShardsIterator.java b/src/main/java/org/elasticsearch/cluster/routing/GroupShardsIterator.java
index 384f96bfed83..f391bf3d667b 100644
--- a/src/main/java/org/elasticsearch/cluster/routing/GroupShardsIterator.java
+++ b/src/main/java/org/elasticsearch/cluster/routing/GroupShardsIterator.java
@@ -19,19 +19,25 @@
 
 package org.elasticsearch.cluster.routing;
 
-import java.util.Collection;
-import java.util.Iterator;
+import org.apache.lucene.util.CollectionUtil;
+
+import java.util.*;
 
 /**
  * This class implements a compilation of {@link ShardIterator}s. Each {@link ShardIterator}
  * iterated by this {@link Iterable} represents a group of shards.
- *  
+ * ShardsIterators are always returned in ascending order independently of their order at construction
+ * time. The incoming iterators are sorted to ensure consistent iteration behavior across Nodes / JVMs.
 */
 public class GroupShardsIterator implements Iterable<ShardIterator> {
 
-    private final Collection<ShardIterator> iterators;
+    private final List<ShardIterator> iterators;
 
-    public GroupShardsIterator(Collection<ShardIterator> iterators) {
+    /**
+     * Constructs a enw GroupShardsIterator from the given list.
+     */
+    public GroupShardsIterator(List<ShardIterator> iterators) {
+        CollectionUtil.timSort(iterators);
         this.iterators = iterators;
     }
 
@@ -72,14 +78,6 @@ public int size() {
         return iterators.size();
     }
 
-    /**
-     * Return all group iterators
-     * @return
-     */
-    public Collection<ShardIterator> iterators() {
-        return iterators;
-    }
-
     @Override
     public Iterator<ShardIterator> iterator() {
         return iterators.iterator();
diff --git a/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java b/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java
index 4d5434fe7fa3..5950bd35d37f 100644
--- a/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java
+++ b/src/main/java/org/elasticsearch/cluster/routing/PlainShardIterator.java
@@ -60,4 +60,9 @@ public boolean equals(Object o) {
     public int hashCode() {
         return shardId.hashCode();
     }
+
+    @Override
+    public int compareTo(ShardIterator o) {
+        return shardId.compareTo(o.shardId());
+    }
 }
diff --git a/src/main/java/org/elasticsearch/cluster/routing/ShardIterator.java b/src/main/java/org/elasticsearch/cluster/routing/ShardIterator.java
index ceeb651f3ab0..1302f89e449d 100644
--- a/src/main/java/org/elasticsearch/cluster/routing/ShardIterator.java
+++ b/src/main/java/org/elasticsearch/cluster/routing/ShardIterator.java
@@ -24,7 +24,7 @@
 /**
  * Allows to iterate over a set of shard instances (routing) within a shard id group.
  */
-public interface ShardIterator extends ShardsIterator {
+public interface ShardIterator extends ShardsIterator, Comparable<ShardIterator>  {
 
     /**
      * The shard id this group relates to.
diff --git a/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java
index 3c81c240eadd..4376def984d6 100644
--- a/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java
+++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/PlainOperationRouting.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.cluster.routing.operation.plain;
 
+import com.google.common.collect.Lists;
+import org.apache.lucene.util.CollectionUtil;
 import org.elasticsearch.ElasticsearchIllegalArgumentException;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
@@ -41,10 +43,7 @@
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.indices.IndexMissingException;
 
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /**
  *
@@ -107,7 +106,7 @@ public GroupShardsIterator deleteByQueryShards(ClusterState clusterState, String
             }
             set.add(indexShard.shardsRandomIt());
         }
-        return new GroupShardsIterator(set);
+        return new GroupShardsIterator(Lists.newArrayList(set));
     }
 
     @Override
@@ -126,7 +125,7 @@ public GroupShardsIterator searchShards(ClusterState clusterState, String[] indi
                 set.add(iterator);
             }
         }
-        return new GroupShardsIterator(set);
+        return new GroupShardsIterator(Lists.newArrayList(set));
     }
 
     private static final Map<String, Set<String>> EMPTY_ROUTING = Collections.emptyMap();
diff --git a/src/main/java/org/elasticsearch/index/shard/ShardId.java b/src/main/java/org/elasticsearch/index/shard/ShardId.java
index b7fe363e0d64..bba823569cc0 100644
--- a/src/main/java/org/elasticsearch/index/shard/ShardId.java
+++ b/src/main/java/org/elasticsearch/index/shard/ShardId.java
@@ -30,7 +30,7 @@
 /**
  * Allows for shard level components to be injected with the shard id.
  */
-public class ShardId implements Serializable, Streamable {
+public class ShardId implements Serializable, Streamable, Comparable<ShardId> {
 
     private Index index;
 
@@ -110,4 +110,12 @@ public void writeTo(StreamOutput out) throws IOException {
         index.writeTo(out);
         out.writeVInt(shardId);
     }
+
+    @Override
+    public int compareTo(ShardId o) {
+        if (o.getId() == shardId) {
+            return index.name().compareTo(o.getIndex());
+        }
+        return Integer.compare(shardId, o.getId());
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
index fdc4ebcd5fd5..e26bf78548d4 100644
--- a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
+++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
@@ -18,6 +18,7 @@
  */
 package org.elasticsearch.index.store;
 
+import com.carrotsearch.ant.tasks.junit4.dependencies.com.google.common.collect.Lists;
 import com.carrotsearch.randomizedtesting.LifecycleScope;
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 import com.google.common.base.Charsets;
@@ -264,7 +265,7 @@ public boolean apply(Object input) {
         assertThat(response.getStatus(), is(ClusterHealthStatus.RED));
         ClusterState state = client().admin().cluster().prepareState().get().getState();
         GroupShardsIterator shardIterators = state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[] {"test"}, false);
-        for (ShardIterator iterator : shardIterators.iterators()) {
+        for (ShardIterator iterator : shardIterators) {
             ShardRouting routing;
             while ((routing = iterator.nextOrNull()) != null) {
                 if (routing.getId() == shardRouting.getId()) {
@@ -449,7 +450,8 @@ private ShardRouting corruptRandomFile() throws IOException {
     private ShardRouting corruptRandomFile(final boolean includePerCommitFiles) throws IOException {
         ClusterState state = client().admin().cluster().prepareState().get().getState();
         GroupShardsIterator shardIterators = state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[]{"test"}, false);
-        ShardIterator shardIterator = RandomPicks.randomFrom(getRandom(), shardIterators.iterators());
+        List<ShardIterator>  iterators = Lists.newArrayList(shardIterators);
+        ShardIterator shardIterator = RandomPicks.randomFrom(getRandom(), iterators);
         ShardRouting shardRouting = shardIterator.nextOrNull();
         assertNotNull(shardRouting);
         assertTrue(shardRouting.primary());
diff --git a/src/test/java/org/elasticsearch/index/store/CorruptedTranslogTests.java b/src/test/java/org/elasticsearch/index/store/CorruptedTranslogTests.java
index c5491902a54a..adbc0684889a 100644
--- a/src/test/java/org/elasticsearch/index/store/CorruptedTranslogTests.java
+++ b/src/test/java/org/elasticsearch/index/store/CorruptedTranslogTests.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.index.store;
 
+import com.carrotsearch.ant.tasks.junit4.dependencies.com.google.common.collect.Lists;
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 import org.elasticsearch.action.admin.cluster.node.stats.NodesStatsResponse;
 import org.elasticsearch.action.index.IndexRequestBuilder;
@@ -40,6 +41,7 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 
@@ -105,7 +107,8 @@ public void testCorruptTranslogFiles() throws Exception {
     private void corruptRandomTranslogFiles() throws IOException {
         ClusterState state = client().admin().cluster().prepareState().get().getState();
         GroupShardsIterator shardIterators = state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[]{"test"}, false);
-        ShardIterator shardIterator = RandomPicks.randomFrom(getRandom(), shardIterators.iterators());
+        List<ShardIterator> iterators = Lists.newArrayList(shardIterators);
+        ShardIterator shardIterator = RandomPicks.randomFrom(getRandom(), iterators);
         ShardRouting shardRouting = shardIterator.nextOrNull();
         assertNotNull(shardRouting);
         assertTrue(shardRouting.primary());
