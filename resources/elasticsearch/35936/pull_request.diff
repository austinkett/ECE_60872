diff --git a/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java b/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java
index 8598ab3e4be0..66a3be20c455 100644
--- a/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java
+++ b/server/src/main/java/org/elasticsearch/action/support/ActiveShardCount.java
@@ -156,6 +156,12 @@ public boolean enoughShardsActive(final ClusterState clusterState, final String.
                 continue;
             }
             final IndexRoutingTable indexRoutingTable = clusterState.routingTable().index(indexName);
+            if (indexRoutingTable == null && indexMetaData.getState() == IndexMetaData.State.CLOSE) {
+                // its possible the index was closed while waiting for active shard copies,
+                // in this case, we'll just consider it that we have enough active shard copies
+                // and we can stop waiting
+                continue;
+            }
             assert indexRoutingTable != null;
             if (indexRoutingTable.allPrimaryShardsActive() == false) {
                 // all primary shards aren't active yet
diff --git a/server/src/test/java/org/elasticsearch/action/support/ActiveShardCountTests.java b/server/src/test/java/org/elasticsearch/action/support/ActiveShardCountTests.java
index 4fb03bf393b3..69f28557d9c6 100644
--- a/server/src/test/java/org/elasticsearch/action/support/ActiveShardCountTests.java
+++ b/server/src/test/java/org/elasticsearch/action/support/ActiveShardCountTests.java
@@ -36,6 +36,7 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.util.Arrays;
 
 /**
  * Tests for the {@link ActiveShardCount} class
@@ -165,6 +166,17 @@ public void testEnoughShardsActiveValueBased() {
         assertEquals("activeShardCount cannot be negative", e.getMessage());
     }
 
+    public void testEnoughShardsActiveWithClosedIndex() {
+        final String indexName = "test-idx";
+        final int numberOfShards = randomIntBetween(1, 5);
+        final int numberOfReplicas = randomIntBetween(4, 7);
+
+        final ClusterState clusterState = initializeWithClosedIndex(indexName, numberOfShards, numberOfReplicas);
+        for (ActiveShardCount waitForActiveShards : Arrays.asList(ActiveShardCount.DEFAULT, ActiveShardCount.ALL, ActiveShardCount.ONE)) {
+            assertTrue(waitForActiveShards.enoughShardsActive(clusterState, indexName));
+        }
+    }
+
     private void runTestForOneActiveShard(final ActiveShardCount activeShardCount) {
         final String indexName = "test-idx";
         final int numberOfShards = randomIntBetween(1, 5);
@@ -192,6 +204,18 @@ private ClusterState initializeWithNewIndex(final String indexName, final int nu
         return ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).routingTable(routingTable).build();
     }
 
+    private ClusterState initializeWithClosedIndex(final String indexName, final int numShards, final int numReplicas) {
+        final IndexMetaData indexMetaData = IndexMetaData.builder(indexName)
+            .settings(settings(Version.CURRENT)
+                .put(IndexMetaData.SETTING_INDEX_UUID, UUIDs.randomBase64UUID()))
+            .numberOfShards(numShards)
+            .numberOfReplicas(numReplicas)
+            .state(IndexMetaData.State.CLOSE)
+            .build();
+        final MetaData metaData = MetaData.builder().put(indexMetaData, true).build();
+        return ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).build();
+    }
+
     private ClusterState startPrimaries(final ClusterState clusterState, final String indexName) {
         RoutingTable routingTable = clusterState.routingTable();
         IndexRoutingTable indexRoutingTable = routingTable.index(indexName);
