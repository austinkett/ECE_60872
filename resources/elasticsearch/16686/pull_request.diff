diff --git a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
index c9d76fd3e6b1..abbb44569c83 100755
--- a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
@@ -362,7 +362,7 @@ private void checkFieldUniqueness(String type, Collection<ObjectMapper> objectMa
             // Before 3.0 some metadata mappers are also registered under the root object mapper
             // So we avoid false positives by deduplicating mappers
             // given that we check exact equality, this would still catch the case that a mapper
-            // is defined under the root object 
+            // is defined under the root object
             Collection<FieldMapper> uniqueFieldMappers = Collections.newSetFromMap(new IdentityHashMap<FieldMapper, Boolean>());
             uniqueFieldMappers.addAll(fieldMappers);
             fieldMappers = uniqueFieldMappers;
diff --git a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
index 9ae0703282f2..3fce7783b719 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
@@ -25,6 +25,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.*;
 import org.apache.lucene.util.BytesRef;
+import org.elasticsearch.index.mapper.MappedFieldType;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -37,11 +38,15 @@
 public class SimpleQueryParser extends org.apache.lucene.queryparser.simple.SimpleQueryParser {
 
     private final Settings settings;
+    private final Map<String, MappedFieldType> fieldToType;
 
     /** Creates a new parser with custom flags used to enable/disable certain features. */
-    public SimpleQueryParser(Analyzer analyzer, Map<String, Float> weights, int flags, Settings settings) {
+    public SimpleQueryParser(Analyzer analyzer, Map<String, Float> weights,
+                             Map<String, MappedFieldType> fieldToType, int flags,
+                             Settings settings) {
         super(analyzer, weights, flags);
         this.settings = settings;
+        this.fieldToType = fieldToType;
     }
 
     /**
@@ -60,7 +65,15 @@ public Query newDefaultQuery(String text) {
         bq.setDisableCoord(true);
         for (Map.Entry<String,Float> entry : weights.entrySet()) {
             try {
-                Query q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());
+                Query q = null;
+                MappedFieldType mpt = fieldToType.get(entry.getKey());
+                if (mpt != null && mpt.isNumeric()) {
+                    // If the field is numeric, it needs to use a different query type instead of
+                    // trying to analyze a 'string' as a 'long
+                    q = mpt.termQuery(text, null);
+                } else {
+                    q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());
+                }
                 if (q != null) {
                     q.setBoost(entry.getValue());
                     bq.add(q, BooleanClause.Occur.SHOULD);
diff --git a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java
index fa65e51d177e..0687e8f1401c 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringParser.java
@@ -30,6 +30,7 @@
 import org.elasticsearch.common.util.LocaleUtils;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.mapper.MappedFieldType;
+import org.elasticsearch.index.mapper.MapperService;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -88,7 +89,7 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
 
         String currentFieldName = null;
         String queryBody = null;
-        float boost = 1.0f; 
+        float boost = 1.0f;
         String queryName = null;
         String minimumShouldMatch = null;
         Map<String, Float> fieldsAndWeights = null;
@@ -203,7 +204,18 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
         if (fieldsAndWeights == null) {
             fieldsAndWeights = Collections.singletonMap(parseContext.defaultField(), 1.0F);
         }
-        SimpleQueryParser sqp = new SimpleQueryParser(analyzer, fieldsAndWeights, flags, sqsSettings);
+
+        // Fetch each mapped type for the fields specified
+        Map<String, MappedFieldType> fieldToType = new HashMap<>();
+        MapperService ms = parseContext.mapperService();
+        for (String fieldName : fieldsAndWeights.keySet()) {
+            MappedFieldType mapping = ms.fullName(fieldName);
+            if (mapping != null) {
+                fieldToType.put(fieldName, mapping);
+            }
+        }
+
+        SimpleQueryParser sqp = new SimpleQueryParser(analyzer, fieldsAndWeights, fieldToType, flags, sqsSettings);
 
         if (defaultOperator != null) {
             sqp.setDefaultOperator(defaultOperator);
diff --git a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
index e41c451b981a..950167591ddc 100644
--- a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
+++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
@@ -167,6 +167,19 @@ public void testSimpleQueryStringLowercasing() {
         assertHitCount(searchResponse, 0l);
     }
 
+    // See: https://github.com/elastic/elasticsearch/issues/16577
+    public void testSimpleQueryStringUsesFieldAnalyzer() throws Exception {
+        client().prepareIndex("test", "type1", "1").setSource("foo", 123, "bar", "abc").get();
+        client().prepareIndex("test", "type1", "2").setSource("foo", 234, "bar", "bcd").get();
+
+        refresh();
+
+        SearchResponse searchResponse = client().prepareSearch().setQuery(
+                simpleQueryStringQuery("123").field("foo").field("bar")).get();
+        assertHitCount(searchResponse, 1L);
+        assertSearchHits(searchResponse, "1");
+    }
+
     @Test
     public void testQueryStringLocale() {
         createIndex("test");
