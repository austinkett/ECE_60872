diff --git a/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java b/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java
index 92b4fa664193..5e1047684840 100644
--- a/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java
+++ b/server/src/main/java/org/elasticsearch/index/query/IntervalBuilder.java
@@ -96,7 +96,7 @@ protected IntervalsSource analyzeText(CachingTokenFilter stream, int maxGaps, bo
         // formulate a single term, boolean, or phrase.
 
         if (numTokens == 0) {
-            return null;
+            return NO_INTERVALS;
         } else if (numTokens == 1) {
             // single term
             return analyzeTerm(stream);
@@ -231,7 +231,7 @@ else if (synonyms.size() > 1) {
         return clauses;
     }
 
-    private static final IntervalsSource NO_INTERVALS = new IntervalsSource() {
+    static final IntervalsSource NO_INTERVALS = new IntervalsSource() {
 
         @Override
         public IntervalIterator intervals(String field, LeafReaderContext ctx) {
diff --git a/server/src/test/java/org/elasticsearch/index/query/IntervalBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/IntervalBuilderTests.java
index 15ec8af0af2c..69464edb5133 100644
--- a/server/src/test/java/org/elasticsearch/index/query/IntervalBuilderTests.java
+++ b/server/src/test/java/org/elasticsearch/index/query/IntervalBuilderTests.java
@@ -110,6 +110,12 @@ public void testPhraseWithStopword() throws IOException {
 
     }
 
+    public void testEmptyTokenStream() throws IOException {
+        CannedTokenStream ts = new CannedTokenStream();
+        IntervalsSource source = BUILDER.analyzeText(new CachingTokenFilter(ts), 0, true);
+        assertSame(IntervalBuilder.NO_INTERVALS, source);
+    }
+
     public void testSimpleSynonyms() throws IOException {
 
         CannedTokenStream ts = new CannedTokenStream(
