diff --git a/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java b/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java
index c67b96c7af58..fe5a9f286c19 100644
--- a/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java
+++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhase.java
@@ -36,9 +36,6 @@ public void hitExecute(SearchContext context, HitContext hitContext) {
             return;
         }
         SourceLookup source = context.lookup().source();
-        if (source.internalSourceRef() == null) {
-            return; // source disabled in the mapping
-        }
         FetchSourceContext fetchSourceContext = context.fetchSourceContext();
         assert fetchSourceContext.fetchSource();
         if (fetchSourceContext.includes().length == 0 && fetchSourceContext.excludes().length == 0) {
@@ -46,6 +43,11 @@ public void hitExecute(SearchContext context, HitContext hitContext) {
             return;
         }
 
+        if (source.internalSourceRef() == null) {
+            throw new IllegalArgumentException("unable to fetch fields from _source field: _source is disabled in the mappings " +
+                    "for index [" + context.indexShard().shardId().getIndexName() + "]");
+        }
+
         Object value = source.filter(fetchSourceContext.includes(), fetchSourceContext.excludes());
         try {
             final int initialCapacity = Math.min(1024, source.internalSourceRef().length());
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhaseTests.java b/core/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhaseTests.java
index 43461929bd9e..d20fb4e0c066 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhaseTests.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/FetchSourceSubPhaseTests.java
@@ -23,6 +23,8 @@
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
+import org.elasticsearch.index.shard.IndexShard;
+import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.search.fetch.FetchSubPhase;
 import org.elasticsearch.search.internal.InternalSearchHit;
 import org.elasticsearch.search.internal.SearchContext;
@@ -33,36 +35,10 @@
 import java.io.IOException;
 import java.util.Collections;
 
-public class FetchSourceSubPhaseTests extends ESTestCase {
-
-    static class FetchSourceSubPhaseTestSearchContext extends TestSearchContext {
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 
-        FetchSourceContext context;
-        BytesReference source;
-
-        FetchSourceSubPhaseTestSearchContext(FetchSourceContext context, BytesReference source) {
-            super(null);
-            this.context = context;
-            this.source = source;
-        }
-
-        @Override
-        public boolean sourceRequested() {
-            return context != null && context.fetchSource();
-        }
-
-        @Override
-        public FetchSourceContext fetchSourceContext() {
-            return context;
-        }
-
-        @Override
-        public SearchLookup lookup() {
-            SearchLookup lookup = super.lookup();
-            lookup.source().setSource(source);
-            return lookup;
-        }
-    }
+public class FetchSourceSubPhaseTests extends ESTestCase {
 
     public void testFetchSource() throws IOException {
         XContentBuilder source = XContentFactory.jsonBuilder().startObject()
@@ -109,11 +85,14 @@ public void testSourceDisabled() throws IOException {
         hitContext = hitExecute(null, false, null, null);
         assertNull(hitContext.hit().sourceAsMap());
 
-        hitContext = hitExecute(null, true, "field1", null);
-        assertNull(hitContext.hit().sourceAsMap());
+        IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () -> hitExecute(null, true, "field1", null));
+        assertEquals("unable to fetch fields from _source field: _source is disabled in the mappings " +
+                "for index [index]", exception.getMessage());
 
-        hitContext = hitExecuteMultiple(null, true, new String[]{"*"}, new String[]{"field2"});
-        assertNull(hitContext.hit().sourceAsMap());
+        exception = expectThrows(IllegalArgumentException.class,
+                () -> hitExecuteMultiple(null, true, new String[]{"*"}, new String[]{"field2"}));
+        assertEquals("unable to fetch fields from _source field: _source is disabled in the mappings " +
+                "for index [index]", exception.getMessage());
     }
 
     private FetchSubPhase.HitContext hitExecute(XContentBuilder source, boolean fetchSource, String include, String exclude) {
@@ -131,4 +110,40 @@ public void testSourceDisabled() throws IOException {
         phase.hitExecute(searchContext, hitContext);
         return hitContext;
     }
+
+    private static class FetchSourceSubPhaseTestSearchContext extends TestSearchContext {
+        final FetchSourceContext context;
+        final BytesReference source;
+        final IndexShard indexShard;
+
+        FetchSourceSubPhaseTestSearchContext(FetchSourceContext context, BytesReference source) {
+            super(null);
+            this.context = context;
+            this.source = source;
+            this.indexShard = mock(IndexShard.class);
+            when(indexShard.shardId()).thenReturn(new ShardId("index", "index", 1));
+        }
+
+        @Override
+        public boolean sourceRequested() {
+            return context != null && context.fetchSource();
+        }
+
+        @Override
+        public FetchSourceContext fetchSourceContext() {
+            return context;
+        }
+
+        @Override
+        public SearchLookup lookup() {
+            SearchLookup lookup = super.lookup();
+            lookup.source().setSource(source);
+            return lookup;
+        }
+
+        @Override
+        public IndexShard indexShard() {
+            return indexShard;
+        }
+    }
 }
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java b/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java
index 843ab09b2fe2..7c72b533ec8d 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/highlight/HighlighterSearchIT.java
@@ -19,7 +19,6 @@
 package org.elasticsearch.search.fetch.subphase.highlight;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.lucene.search.join.ScoreMode;
 import org.elasticsearch.Version;
 import org.elasticsearch.action.index.IndexRequestBuilder;
@@ -50,8 +49,8 @@
 import org.hamcrest.Matchers;
 
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -96,7 +95,7 @@
 
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
-        return Arrays.asList(InternalSettingsPlugin.class);
+        return Collections.singletonList(InternalSettingsPlugin.class);
     }
 
     public void testHighlightingWithWildcardName() throws IOException {
diff --git a/core/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java b/core/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
index b091149fa011..e66eeb48766c 100644
--- a/core/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
@@ -80,7 +80,7 @@
 
     @Override
     protected Collection<Class<? extends Plugin>> nodePlugins() {
-        return Arrays.asList(CustomScriptPlugin.class);
+        return Collections.singletonList(CustomScriptPlugin.class);
     }
 
     public static class CustomScriptPlugin extends MockScriptPlugin {
