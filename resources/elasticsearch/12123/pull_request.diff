diff --git a/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
index c02c7f34bc9c..b5e070398f49 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
@@ -124,6 +124,7 @@ public DateFieldMapper build(BuilderContext context) {
             return fieldMapper;
         }
 
+        @Override
         protected void setupFieldType(BuilderContext context) {
             if (Version.indexCreated(context.indexSettings()).before(Version.V_2_0_0) &&
                 !fieldType().dateTimeFormatter().format().contains("epoch_")) {
@@ -195,7 +196,7 @@ protected int maxPrecisionStep() {
 
     public static class DateFieldType extends NumberFieldType {
 
-        final class LateParsingQuery extends Query {
+        public final class LateParsingQuery extends Query {
 
             final Object lowerTerm;
             final Object upperTerm;
@@ -277,6 +278,7 @@ protected DateFieldType(DateFieldType ref) {
             this.dateMathParser = ref.dateMathParser;
         }
 
+        @Override
         public DateFieldType clone() {
             return new DateFieldType(this);
         }
diff --git a/core/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryParser.java b/core/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryParser.java
index a44580a51766..26d644bffe73 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryParser.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SpanMultiTermQueryParser.java
@@ -25,6 +25,7 @@
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentParser.Token;
+import org.elasticsearch.index.mapper.core.DateFieldMapper;
 
 import java.io.IOException;
 
@@ -60,6 +61,9 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
         }
 
         Query subQuery = parseContext.parseInnerQuery();
+        if (subQuery instanceof DateFieldMapper.DateFieldType.LateParsingQuery) {
+            subQuery = ((DateFieldMapper.DateFieldType.LateParsingQuery) subQuery).rewrite(null);
+        }
         if (!(subQuery instanceof MultiTermQuery)) {
             throw new QueryParsingException(parseContext, "spanMultiTerm [" + MATCH_NAME + "] must be of type multi term query");
         }
diff --git a/core/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java b/core/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java
index 21b2c83af767..3c68539e038f 100644
--- a/core/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java
+++ b/core/src/test/java/org/elasticsearch/search/query/SearchQueryTests.java
@@ -1588,13 +1588,15 @@ public void testSimpleSpan() throws IOException, ExecutionException, Interrupted
 
     @Test
     public void testSpanMultiTermQuery() throws IOException {
-        createIndex("test");
+        assertAcked(prepareCreate("test")
+                .addMapping("test", "date", "type=date"));
         ensureGreen();
 
         client().prepareIndex("test", "test", "1").setSource("description", "foo other anything bar", "count", 1).get();
         client().prepareIndex("test", "test", "2").setSource("description", "foo other anything", "count", 2).get();
         client().prepareIndex("test", "test", "3").setSource("description", "foo other", "count", 3).get();
         client().prepareIndex("test", "test", "4").setSource("description", "fop", "count", 4).get();
+        client().prepareIndex("test", "test", "5").setSource("date", "2010-02-02").get();
         refresh();
 
         SearchResponse response = client().prepareSearch("test")
@@ -1614,6 +1616,11 @@ public void testSpanMultiTermQuery() throws IOException {
                 .execute().actionGet();
         assertHitCount(response, 3);
 
+        response = client().prepareSearch("test")
+                .setQuery(spanOrQuery().clause(spanMultiTermQueryBuilder(QueryBuilders.rangeQuery("date").from("2010-01-01").to("2011-01-01"))))
+                .execute().actionGet();
+        assertHitCount(response, 1);
+
         response = client().prepareSearch("test")
                 .setQuery(spanOrQuery().clause(spanMultiTermQueryBuilder(regexpQuery("description", "fo{2}")))).get();
         assertHitCount(response, 3);
