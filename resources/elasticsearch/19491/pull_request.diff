diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
index 34a86d554ed2..561fb2c6c784 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java
@@ -237,10 +237,9 @@ public boolean allocatedPostIndexCreate(IndexMetaData indexMetaData) {
             return true;
         }
 
-        // unassigned info is only cleared when a shard moves to started, so
-        // for unassigned and initializing (we checked for active() before),
-        // we can safely assume it is there
-        if (unassignedInfo.getReason() == UnassignedInfo.Reason.INDEX_CREATED) {
+        // initializing replica might not have unassignedInfo
+        assert unassignedInfo != null || (primary == false && state == ShardRoutingState.INITIALIZING);
+        if (unassignedInfo != null && unassignedInfo.getReason() == UnassignedInfo.Reason.INDEX_CREATED) {
             return false;
         }
 
diff --git a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java
index 286b378debc9..f2ab421ee5ea 100644
--- a/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java
+++ b/core/src/main/java/org/elasticsearch/cluster/routing/allocation/decider/ThrottlingAllocationDecider.java
@@ -21,6 +21,7 @@
 
 import org.elasticsearch.cluster.routing.RoutingNode;
 import org.elasticsearch.cluster.routing.ShardRouting;
+import org.elasticsearch.cluster.routing.UnassignedInfo;
 import org.elasticsearch.cluster.routing.allocation.RoutingAllocation;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.ClusterSettings;
@@ -177,7 +178,12 @@ private ShardRouting initializingShard(ShardRouting shardRouting, String current
         if (shardRouting.unassigned()) {
             initializingShard = shardRouting.initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);
         } else if (shardRouting.initializing()) {
-            initializingShard = shardRouting.moveToUnassigned(shardRouting.unassignedInfo())
+            UnassignedInfo unassignedInfo = shardRouting.unassignedInfo();
+            if (unassignedInfo == null) {
+                // unassigned shards must have unassignedInfo (initializing shards might not)
+                unassignedInfo = new UnassignedInfo(UnassignedInfo.Reason.ALLOCATION_FAILED, "fake");
+            }
+            initializingShard = shardRouting.moveToUnassigned(unassignedInfo)
                 .initialize(currentNodeId, null, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);
         } else if (shardRouting.relocating()) {
             initializingShard = shardRouting.cancelRelocation()
