diff --git a/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java b/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java
index bc673644a068..53ce4299c546 100644
--- a/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java
+++ b/core/src/main/java/org/elasticsearch/action/search/ExpandSearchPhase.java
@@ -88,10 +88,9 @@ public void run() throws IOException {
                 }
                 for (InnerHitBuilder innerHitBuilder : innerHitBuilders) {
                     SearchSourceBuilder sourceBuilder = buildExpandSearchSourceBuilder(innerHitBuilder)
-                        .query(groupQuery);
-                    SearchRequest groupRequest = new SearchRequest(searchRequest.indices())
-                        .types(searchRequest.types())
-                        .source(sourceBuilder);
+                        .query(groupQuery)
+                        .postFilter(searchRequest.source().postFilter());
+                    SearchRequest groupRequest = buildExpandSearchRequest(searchRequest, sourceBuilder);
                     multiRequest.add(groupRequest);
                 }
             }
@@ -120,6 +119,21 @@ public void run() throws IOException {
         }
     }
 
+    private SearchRequest buildExpandSearchRequest(SearchRequest orig, SearchSourceBuilder sourceBuilder) {
+        SearchRequest groupRequest = new SearchRequest(orig.indices())
+            .types(orig.types())
+            .source(sourceBuilder)
+            .indicesOptions(orig.indicesOptions())
+            .requestCache(orig.requestCache())
+            .preference(orig.preference())
+            .routing(orig.routing())
+            .searchType(orig.searchType());
+        if (orig.isMaxConcurrentShardRequestsSet()) {
+            groupRequest.setMaxConcurrentShardRequests(orig.getMaxConcurrentShardRequests());
+        }
+        return groupRequest;
+    }
+
     private SearchSourceBuilder buildExpandSearchSourceBuilder(InnerHitBuilder options) {
         SearchSourceBuilder groupSource = new SearchSourceBuilder();
         groupSource.from(options.getFrom());
diff --git a/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java b/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java
index 81a6359997d7..b84dafb4f6d5 100644
--- a/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java
+++ b/core/src/test/java/org/elasticsearch/action/search/ExpandSearchPhaseTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.action.search;
 
 import org.elasticsearch.action.ActionListener;
+import org.elasticsearch.action.support.IndicesOptions;
 import org.elasticsearch.common.document.DocumentField;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.text.Text;
@@ -242,4 +243,43 @@ public void run() throws IOException {
         assertNotNull(reference.get());
         assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());
     }
+
+    public void testExpandRequestOptions() throws IOException {
+        MockSearchPhaseContext mockSearchPhaseContext = new MockSearchPhaseContext(1);
+        mockSearchPhaseContext.searchTransport = new SearchTransportService(
+            Settings.builder().put("search.remote.connect", false).build(), null, null) {
+
+            @Override
+            void sendExecuteMultiSearch(MultiSearchRequest request, SearchTask task, ActionListener<MultiSearchResponse> listener) {
+                final QueryBuilder postFilter = QueryBuilders.existsQuery("foo");
+                assertTrue(request.requests().stream().allMatch((r) -> "foo".equals(r.preference())));
+                assertTrue(request.requests().stream().allMatch((r) -> "baz".equals(r.routing())));
+                assertTrue(request.requests().stream().allMatch((r) -> postFilter.equals(r.source().postFilter())));
+            }
+        };
+        mockSearchPhaseContext.getRequest().source(new SearchSourceBuilder()
+            .collapse(
+                new CollapseBuilder("someField")
+                    .setInnerHits(new InnerHitBuilder().setName("foobarbaz"))
+            )
+            .postFilter(QueryBuilders.existsQuery("foo")))
+            .preference("foobar")
+            .routing("baz");
+
+        SearchHits hits = new SearchHits(new SearchHit[0], 1, 1.0f);
+        InternalSearchResponse internalSearchResponse = new InternalSearchResponse(hits, null, null, null, false, null, 1);
+        AtomicReference<SearchResponse> reference = new AtomicReference<>();
+        ExpandSearchPhase phase = new ExpandSearchPhase(mockSearchPhaseContext, internalSearchResponse, r ->
+            new SearchPhase("test") {
+                @Override
+                public void run() throws IOException {
+                    reference.set(mockSearchPhaseContext.buildSearchResponse(r, null));
+                }
+            }
+        );
+        phase.run();
+        mockSearchPhaseContext.assertNoFailure();
+        assertNotNull(reference.get());
+        assertEquals(1, mockSearchPhaseContext.phasesExecuted.get());
+    }
 }
