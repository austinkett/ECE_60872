diff --git a/core/src/main/java/org/elasticsearch/index/search/stats/ShardSearchStats.java b/core/src/main/java/org/elasticsearch/index/search/stats/ShardSearchStats.java
index 716667dbb4da..37c7b13ec79c 100644
--- a/core/src/main/java/org/elasticsearch/index/search/stats/ShardSearchStats.java
+++ b/core/src/main/java/org/elasticsearch/index/search/stats/ShardSearchStats.java
@@ -80,8 +80,10 @@ public void onFailedQueryPhase(SearchContext searchContext) {
         computeStats(searchContext, statsHolder -> {
             if (searchContext.hasOnlySuggest()) {
                 statsHolder.suggestCurrent.dec();
+                assert statsHolder.suggestCurrent.count() >= 0;
             } else {
                 statsHolder.queryCurrent.dec();
+                assert statsHolder.queryCurrent.count() >= 0;
             }
         });
     }
@@ -92,9 +94,11 @@ public void onQueryPhase(SearchContext searchContext, long tookInNanos) {
             if (searchContext.hasOnlySuggest()) {
                 statsHolder.suggestMetric.inc(tookInNanos);
                 statsHolder.suggestCurrent.dec();
+                assert statsHolder.suggestCurrent.count() >= 0;
             } else {
                 statsHolder.queryMetric.inc(tookInNanos);
                 statsHolder.queryCurrent.dec();
+                assert statsHolder.queryCurrent.count() >= 0;
             }
         });
     }
@@ -114,6 +118,7 @@ public void onFetchPhase(SearchContext searchContext, long tookInNanos) {
         computeStats(searchContext, statsHolder -> {
             statsHolder.fetchMetric.inc(tookInNanos);
             statsHolder.fetchCurrent.dec();
+            assert statsHolder.fetchCurrent.count() >= 0;
         });
     }
 
@@ -174,6 +179,7 @@ public void onNewScrollContext(SearchContext context) {
     @Override
     public void onFreeScrollContext(SearchContext context) {
         totalStats.scrollCurrent.dec();
+        assert totalStats.scrollCurrent.count() >= 0;
         totalStats.scrollMetric.inc(System.nanoTime() - context.getOriginNanoTime());
     }
 
diff --git a/core/src/main/java/org/elasticsearch/search/SearchService.java b/core/src/main/java/org/elasticsearch/search/SearchService.java
index 06eb435e60ae..fef20f44f523 100644
--- a/core/src/main/java/org/elasticsearch/search/SearchService.java
+++ b/core/src/main/java/org/elasticsearch/search/SearchService.java
@@ -251,6 +251,7 @@ public SearchPhaseResult executeQueryPhase(ShardSearchRequest request, SearchTas
         final SearchContext context = createAndPutContext(request);
         final SearchOperationListener operationListener = context.indexShard().getSearchOperationListener();
         context.incRef();
+        boolean queryPhaseSuccess = false;
         try {
             context.setTask(task);
             operationListener.onPreQueryPhase(context);
@@ -265,6 +266,7 @@ public SearchPhaseResult executeQueryPhase(ShardSearchRequest request, SearchTas
                 contextProcessedSuccessfully(context);
             }
             final long afterQueryTime = System.nanoTime();
+            queryPhaseSuccess = true;
             operationListener.onQueryPhase(context, afterQueryTime - time);
             if (request.numberOfShards() == 1) {
                 return executeFetchPhase(context, operationListener, afterQueryTime);
@@ -276,7 +278,9 @@ public SearchPhaseResult executeQueryPhase(ShardSearchRequest request, SearchTas
                 e = (e.getCause() == null || e.getCause() instanceof Exception) ?
                     (Exception) e.getCause() : new ElasticsearchException(e.getCause());
             }
-            operationListener.onFailedQueryPhase(context);
+            if (!queryPhaseSuccess) {
+                operationListener.onFailedQueryPhase(context);
+            }
             logger.trace("Query phase failed", e);
             processFailure(context, e);
             throw ExceptionsHelper.convertToRuntime(e);
