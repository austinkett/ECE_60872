diff --git a/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
index 5b196a175ea6..9c24de375b81 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.mapper.core;
 
 import com.carrotsearch.hppc.ObjectArrayList;
+
 import org.apache.lucene.document.Field;
 import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.store.ByteArrayDataOutput;
@@ -32,6 +33,7 @@
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.compress.CompressorFactory;
+import org.elasticsearch.common.compress.NotXContentException;;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.CollectionUtils;
 import org.elasticsearch.common.xcontent.XContentParser;
@@ -174,7 +176,12 @@ public BytesReference value(Object value) {
             }
             try {
                 if (tryUncompressing) { // backcompat behavior
-                    return CompressorFactory.uncompressIfNeeded(bytes);
+                    try {
+                        return CompressorFactory.uncompressIfNeeded(bytes);
+                    } catch (NotXContentException e) {
+                        // OK: we are an arbitrary binary field, not xcontent
+                        return bytes;
+                    }
                 } else {
                     return bytes;
                 }
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/binary/BinaryMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/binary/BinaryMappingTests.java
index 5270e62b52d8..c287d3259105 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/binary/BinaryMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/binary/BinaryMappingTests.java
@@ -123,6 +123,15 @@ public void testCompressedBackCompat() throws Exception {
         FieldMapper fieldMapper = mapper.mappers().smartNameFieldMapper("field");
         Object originalValue = fieldMapper.fieldType().valueForSearch(indexedValue);
         assertEquals(new BytesArray(original), originalValue);
+
+        // also test the use case where, after upgrading to beyond to this change and indexing a new binary field on a bwc (pre-2.0) index,
+        // that we can still pull its (uncompressed) search-time value:
+        doc = mapper.parse("test", "type", "id", XContentFactory.jsonBuilder().startObject().field("field", original).endObject().bytes());
+        indexedValue = doc.rootDoc().getBinaryValue("field");
+        assertEquals(new BytesRef(original), indexedValue);
+        fieldMapper = mapper.mappers().smartNameFieldMapper("field");
+        originalValue = fieldMapper.fieldType().valueForSearch(indexedValue);
+        assertEquals(new BytesArray(original), originalValue);
     }
 
 }
