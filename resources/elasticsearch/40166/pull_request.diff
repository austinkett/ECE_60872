diff --git a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
index 87f1dd08c4af..3d77b6bb7839 100644
--- a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
+++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
@@ -19,8 +19,11 @@
 import org.elasticsearch.xpack.core.deprecation.DeprecationIssue;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
@@ -255,6 +258,15 @@ static DeprecationIssue tooManyFieldsCheck(IndexMetaData indexMetaData) {
         return null;
     }
 
+
+    private static final Set<String> TYPES_THAT_DONT_COUNT;
+    static {
+        HashSet<String> typesThatDontCount = new HashSet<>();
+        typesThatDontCount.add("binary");
+        typesThatDontCount.add("geo_point");
+        typesThatDontCount.add("geo_shape");
+        TYPES_THAT_DONT_COUNT = Collections.unmodifiableSet(typesThatDontCount);
+    }
     /* Counts the number of fields in a mapping, designed to count the as closely as possible to
      * org.elasticsearch.index.search.QueryParserHelper#checkForTooManyFields
      */
@@ -268,7 +280,8 @@ static int countFieldsRecursively(String type, Map<String, Object> parentMap) {
         for (Map.Entry<?, ?> entry : properties.entrySet()) {
             Map<String, Object> valueMap = (Map<String, Object>) entry.getValue();
             if (valueMap.containsKey("type")
-                && (valueMap.get("type").equals("object") && valueMap.containsKey("properties") == false) == false) {
+                && (valueMap.get("type").equals("object") && valueMap.containsKey("properties") == false) == false
+                && (TYPES_THAT_DONT_COUNT.contains(valueMap.get("type")) == false)) {
                 fields++;
             }
 
@@ -276,7 +289,8 @@ static int countFieldsRecursively(String type, Map<String, Object> parentMap) {
             if (values != null) {
                 for (Map.Entry<?, ?> multifieldEntry : values.entrySet()) {
                     Map<String, Object> multifieldValueMap = (Map<String, Object>) multifieldEntry.getValue();
-                    if (multifieldValueMap.containsKey("type")) {
+                    if (multifieldValueMap.containsKey("type")
+                        && (TYPES_THAT_DONT_COUNT.contains(valueMap.get("type")) == false)) {
                         fields++;
                     }
                     if (multifieldValueMap.containsKey("properties")) {
diff --git a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
index 300e20a2a055..97e1f9e831d0 100644
--- a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
+++ b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
@@ -446,7 +446,7 @@ private static void addRandomField(List<String> existingFieldNames, final int fi
                 }
                 mappingBuilder.endObject();
             } else {
-                mappingBuilder.field("type", randomFrom("array", "binary", "range", "boolean", "date", "ip", "keyword", "text"));
+                mappingBuilder.field("type", randomFrom("array", "range", "boolean", "date", "ip", "keyword", "text"));
                 fieldCount.incrementAndGet();
             }
         }
