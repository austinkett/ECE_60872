diff --git a/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilterCache.java b/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilterCache.java
index 176008d43141..357b01576d3e 100644
--- a/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilterCache.java
+++ b/src/main/java/org/elasticsearch/index/cache/fixedbitset/FixedBitSetFilterCache.java
@@ -94,6 +94,10 @@ public FixedBitSetFilterCache(Index index, @IndexSettings Settings indexSettings
     @Inject(optional = true)
     public void setIndicesWarmer(IndicesWarmer indicesWarmer) {
         this.indicesWarmer = indicesWarmer;
+    }
+
+    public void setIndexService(InternalIndexService indexService) {
+        this.indexService = indexService;
         indicesWarmer.addListener(warmer);
     }
 
@@ -164,10 +168,6 @@ public Value call() throws Exception {
         }).fixedBitSet;
     }
 
-    public void setIndexService(InternalIndexService indexService) {
-        this.indexService = indexService;
-    }
-
     @Override
     public void onRemoval(RemovalNotification<Object, Cache<Filter, Value>> notification) {
         Object key = notification.getKey();
@@ -283,10 +283,10 @@ public void run() {
                                 final long start = System.nanoTime();
                                 getAndLoadIfNotPresent(filterToWarm, ctx);
                                 if (indexShard.warmerService().logger().isTraceEnabled()) {
-                                    indexShard.warmerService().logger().trace("warmed random access for [{}], took [{}]", filterToWarm, TimeValue.timeValueNanos(System.nanoTime() - start));
+                                    indexShard.warmerService().logger().trace("warmed fixed bitset for [{}], took [{}]", filterToWarm, TimeValue.timeValueNanos(System.nanoTime() - start));
                                 }
                             } catch (Throwable t) {
-                                indexShard.warmerService().logger().warn("failed to load random access for [{}]", t, filterToWarm);
+                                indexShard.warmerService().logger().warn("failed to load fixed bitset for [{}]", t, filterToWarm);
                             } finally {
                                 latch.countDown();
                             }
