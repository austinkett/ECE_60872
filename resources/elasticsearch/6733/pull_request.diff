diff --git a/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java b/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java
index b0dabad00dce..2c980165f4d0 100644
--- a/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java
+++ b/src/main/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCache.java
@@ -63,7 +63,12 @@ public ResidentQueryParserCache(Index index, @IndexSettings Settings indexSettin
 
     @Override
     public Query get(QueryParserSettings queryString) {
-        return cache.getIfPresent(queryString);
+        Query value =  cache.getIfPresent(queryString);
+        if (value != null) {
+            return value.clone();
+        } else {
+            return null;
+        }
     }
 
     @Override
diff --git a/src/test/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCacheTest.java b/src/test/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCacheTest.java
new file mode 100644
index 000000000000..3813571b2ff1
--- /dev/null
+++ b/src/test/java/org/elasticsearch/index/cache/query/parser/resident/ResidentQueryParserCacheTest.java
@@ -0,0 +1,35 @@
+package org.elasticsearch.index.cache.query.parser.resident;
+
+import org.apache.lucene.index.Term;
+import org.apache.lucene.queryparser.classic.QueryParserSettings;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.TermQuery;
+import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.index.Index;
+import org.elasticsearch.test.ElasticsearchTestCase;
+import org.junit.Test;
+
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.sameInstance;
+
+/**
+ */
+public class ResidentQueryParserCacheTest extends ElasticsearchTestCase {
+
+    @Test
+    public void testCaching() throws Exception {
+        ResidentQueryParserCache cache = new ResidentQueryParserCache(new Index("test"), ImmutableSettings.EMPTY);
+        QueryParserSettings key = new QueryParserSettings();
+        key.queryString("abc");
+        key.defaultField("a");
+        key.boost(2.0f);
+
+        Query query = new TermQuery(new Term("a", "abc"));
+        cache.put(key, query);
+
+        assertThat(cache.get(key), not(sameInstance(query)));
+        assertThat(cache.get(key), equalTo(query));
+    }
+
+}
diff --git a/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java
index 8641d34fbd7b..8cf587c4c3aa 100644
--- a/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java
+++ b/src/test/java/org/elasticsearch/search/query/SimpleQueryTests.java
@@ -47,10 +47,7 @@
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Random;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.cluster.metadata.IndexMetaData.SETTING_NUMBER_OF_REPLICAS;
@@ -2457,4 +2454,31 @@ public void testFilteredQuery() throws Exception {
         }
     }
 
+    @Test
+    public void testQueryStringParserCache() throws Exception {
+        createIndex("test");
+        indexRandom(true, Arrays.asList(
+                client().prepareIndex("test", "type", "1").setSource("nameTokens", "xyz")
+        ));
+
+        SearchResponse response = client().prepareSearch("test")
+                .setQuery(QueryBuilders.queryString("xyz").boost(100))
+                .get();
+
+        assertThat(response.getHits().totalHits(), equalTo(1l));
+        assertThat(response.getHits().getAt(0).id(), equalTo("1"));
+
+        float score = response.getHits().getAt(0).getScore();
+
+        for (int i = 0; i < 100; i++) {
+            response = client().prepareSearch("test")
+                    .setQuery(QueryBuilders.queryString("xyz").boost(100))
+                    .get();
+
+            assertThat(response.getHits().totalHits(), equalTo(1l));
+            assertThat(response.getHits().getAt(0).id(), equalTo("1"));
+            assertThat(Float.compare(score, response.getHits().getAt(0).getScore()), equalTo(0));
+        }
+    }
+
 }
