diff --git a/rest-api-spec/src/main/resources/rest-api-spec/test/cluster.state/20_filtering.yml b/rest-api-spec/src/main/resources/rest-api-spec/test/cluster.state/20_filtering.yml
index 880efaff19aa..861e1200991b 100644
--- a/rest-api-spec/src/main/resources/rest-api-spec/test/cluster.state/20_filtering.yml
+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/cluster.state/20_filtering.yml
@@ -163,12 +163,24 @@ setup:
       version:  " - 6.3.99"
       reason:   "cluster state including cluster_uuid at the top level is new in v6.4.0 and higher"
 
+  # Get the current cluster_uuid
+  - do:
+      cluster.state: {}
+  - set: { metadata.cluster_uuid : cluster_uuid }
+
   - do:
       cluster.state:
-        metric: [ master_node, version, metadata ]
+        metric: [ master_node, version ]
 
-  - is_true: cluster_uuid
+  - match: { cluster_uuid: $cluster_uuid }
   - is_true: master_node
   - is_true: version
   - is_true: state_uuid
-  - is_true: metadata
+
+  - do:
+      cluster.state:
+        metric: [ routing_table ]
+        index: testidx
+
+  - match: { cluster_uuid: $cluster_uuid }
+  - is_true: routing_table
diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
index 58d6a299bb93..22e71e0a85f4 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
@@ -98,14 +98,11 @@ protected void masterOperation(final ClusterStateRequest request, final ClusterS
         if (request.blocks()) {
             builder.blocks(currentState.blocks());
         }
-        if (request.metaData()) {
-            MetaData.Builder mdBuilder;
-            if (request.indices().length == 0) {
-                mdBuilder = MetaData.builder(currentState.metaData());
-            } else {
-                mdBuilder = MetaData.builder();
-            }
 
+        MetaData.Builder mdBuilder = MetaData.builder();
+        mdBuilder.clusterUUID(currentState.metaData().clusterUUID());
+
+        if (request.metaData()) {
             if (request.indices().length > 0) {
                 String[] indices = indexNameExpressionResolver.concreteIndexNames(currentState, request);
                 for (String filteredIndex : indices) {
@@ -114,17 +111,19 @@ protected void masterOperation(final ClusterStateRequest request, final ClusterS
                         mdBuilder.put(indexMetaData, false);
                     }
                 }
+            } else {
+                mdBuilder = MetaData.builder(currentState.metaData());
             }
 
             // Filter our metadata that shouldn't be returned by API
-            for(ObjectObjectCursor<String, Custom> custom :  currentState.metaData().customs()) {
+            for(ObjectObjectCursor<String, Custom> custom : currentState.metaData().customs()) {
                 if(!custom.value.context().contains(MetaData.XContentContext.API)) {
                     mdBuilder.removeCustom(custom.key);
                 }
             }
-
-            builder.metaData(mdBuilder);
         }
+        builder.metaData(mdBuilder);
+
         if (request.customs()) {
             for (ObjectObjectCursor<String, ClusterState.Custom> custom : currentState.customs()) {
                 if (custom.value.isPrivate() == false) {
