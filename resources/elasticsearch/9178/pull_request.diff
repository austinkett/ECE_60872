diff --git a/rest-api-spec/test/indices.get_alias/20_empty.yaml b/rest-api-spec/test/indices.get_alias/20_empty.yaml
new file mode 100644
index 000000000000..7405d99441b3
--- /dev/null
+++ b/rest-api-spec/test/indices.get_alias/20_empty.yaml
@@ -0,0 +1,19 @@
+---
+setup:
+
+  - do:
+      indices.create:
+        index: test_index
+
+  - do:
+      indices.create:
+        index: test_index_2
+
+---
+"Check empty aliases when getting all aliases via /_alias":
+
+  - do:
+      indices.get_alias: {}
+
+  - match: {test_index.aliases: {}}
+  - match: {test_index_2.aliases: {}}
diff --git a/rest-api-spec/test/indices.get_mapping/60_empty.yaml b/rest-api-spec/test/indices.get_mapping/60_empty.yaml
new file mode 100644
index 000000000000..dfba78578bbf
--- /dev/null
+++ b/rest-api-spec/test/indices.get_mapping/60_empty.yaml
@@ -0,0 +1,19 @@
+---
+setup:
+
+  - do:
+      indices.create:
+        index: test_1
+
+  - do:
+      indices.create:
+        index: test_2
+
+---
+"Check empty mapping when getting all mappings via /_mapping":
+
+ - do:
+    indices.get_mapping: {}
+
+ - match: { test_1.mappings: {}}
+ - match: { test_2.mappings: {}}
diff --git a/rest-api-spec/test/indices.get_warmer/20_empty.yaml b/rest-api-spec/test/indices.get_warmer/20_empty.yaml
new file mode 100644
index 000000000000..702b0cd01d1e
--- /dev/null
+++ b/rest-api-spec/test/indices.get_warmer/20_empty.yaml
@@ -0,0 +1,19 @@
+---
+setup:
+
+  - do:
+      indices.create:
+        index: test_1
+
+  - do:
+      indices.create:
+        index: test_2
+
+---
+"Check empty warmers when getting all warmers via /_warmer":
+
+ - do:
+    indices.get_warmer: {}
+
+ - match: { test_1.warmers: {}}
+ - match: { test_2.warmers: {}}
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/get/RestGetIndicesAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/get/RestGetIndicesAction.java
index be5220cf1a4b..dc800f370620 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/get/RestGetIndicesAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/get/RestGetIndicesAction.java
@@ -117,24 +117,24 @@ public RestResponse buildResponse(GetIndexResponse response, XContentBuilder bui
             }
 
             private void writeAliases(ImmutableList<AliasMetaData> aliases, XContentBuilder builder, Params params) throws IOException {
+                builder.startObject(Fields.ALIASES);
                 if (aliases != null) {
-                    builder.startObject(Fields.ALIASES);
                     for (AliasMetaData alias : aliases) {
                         AliasMetaData.Builder.toXContent(alias, builder, params);
                     }
-                    builder.endObject();
                 }
+                builder.endObject();
             }
 
             private void writeMappings(ImmutableOpenMap<String, MappingMetaData> mappings, XContentBuilder builder, Params params) throws IOException {
+                builder.startObject(Fields.MAPPINGS);
                 if (mappings != null) {
-                    builder.startObject(Fields.MAPPINGS);
                     for (ObjectObjectCursor<String, MappingMetaData> typeEntry : mappings) {
                         builder.field(typeEntry.key);
                         builder.map(typeEntry.value.sourceAsMap());
                     }
-                    builder.endObject();
                 }
+                builder.endObject();
             }
 
             private void writeSettings(Settings settings, XContentBuilder builder, Params params) throws IOException {
@@ -144,13 +144,13 @@ private void writeSettings(Settings settings, XContentBuilder builder, Params pa
             }
 
             private void writeWarmers(ImmutableList<IndexWarmersMetaData.Entry> warmers, XContentBuilder builder, Params params) throws IOException {
+                builder.startObject(Fields.WARMERS);
                 if (warmers != null) {
-                    builder.startObject(Fields.WARMERS);
                     for (IndexWarmersMetaData.Entry warmer : warmers) {
                         IndexWarmersMetaData.FACTORY.toXContent(warmer, builder, params);
                     }
-                    builder.endObject();
                 }
+                builder.endObject();
             }
         });
     }
