diff --git a/server/src/main/java/org/elasticsearch/cluster/routing/DelayedAllocationService.java b/server/src/main/java/org/elasticsearch/cluster/routing/DelayedAllocationService.java
index 82d459f7f3cc..a70fe3588a57 100644
--- a/server/src/main/java/org/elasticsearch/cluster/routing/DelayedAllocationService.java
+++ b/server/src/main/java/org/elasticsearch/cluster/routing/DelayedAllocationService.java
@@ -135,20 +135,20 @@ public DelayedAllocationService(ThreadPool threadPool, ClusterService clusterSer
         this.threadPool = threadPool;
         this.clusterService = clusterService;
         this.allocationService = allocationService;
-        clusterService.addListener(this);
     }
 
     @Override
     protected void doStart() {
+        clusterService.addListener(this);
     }
 
     @Override
     protected void doStop() {
+        clusterService.removeListener(this);
     }
 
     @Override
     protected void doClose() {
-        clusterService.removeListener(this);
         removeTaskAndCancel();
     }
 
diff --git a/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java b/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java
index 7d59d01e72d4..be913416bf03 100644
--- a/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java
+++ b/server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java
@@ -114,19 +114,17 @@
 
     private final SnapshotStateExecutor snapshotStateExecutor = new SnapshotStateExecutor();
     private final UpdateSnapshotStatusAction updateSnapshotStatusHandler;
+    private final Settings settings;
 
     public SnapshotShardsService(Settings settings, ClusterService clusterService, SnapshotsService snapshotsService,
                                  ThreadPool threadPool, TransportService transportService, IndicesService indicesService,
                                  ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {
+        this.settings = settings;
         this.indicesService = indicesService;
         this.snapshotsService = snapshotsService;
         this.transportService = transportService;
         this.clusterService = clusterService;
         this.threadPool = threadPool;
-        if (DiscoveryNode.isDataNode(settings)) {
-            // this is only useful on the nodes that can hold data
-            clusterService.addListener(this);
-        }
 
         // The constructor of UpdateSnapshotStatusAction will register itself to the TransportService.
         this.updateSnapshotStatusHandler =
@@ -137,15 +135,19 @@ public SnapshotShardsService(Settings settings, ClusterService clusterService, S
     protected void doStart() {
         assert this.updateSnapshotStatusHandler != null;
         assert transportService.getRequestHandler(UPDATE_SNAPSHOT_STATUS_ACTION_NAME) != null;
+        if (DiscoveryNode.isDataNode(settings)) {
+            // this is only useful on the nodes that can hold data
+            clusterService.addListener(this);
+        }
     }
 
     @Override
     protected void doStop() {
+        clusterService.removeListener(this);
     }
 
     @Override
     protected void doClose() {
-        clusterService.removeListener(this);
     }
 
     @Override
diff --git a/server/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationServiceTests.java b/server/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationServiceTests.java
index 4ebd5eb59ad4..81ba799bbec9 100644
--- a/server/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationServiceTests.java
+++ b/server/src/test/java/org/elasticsearch/cluster/routing/DelayedAllocationServiceTests.java
@@ -69,11 +69,13 @@ public void createDelayedAllocationService() {
         clusterService = mock(ClusterService.class);
         allocationService = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator());
         delayedAllocationService = new TestDelayAllocationService(threadPool, clusterService, allocationService);
+        delayedAllocationService.doStart();
         verify(clusterService).addListener(delayedAllocationService);
     }
 
     @After
     public void shutdownThreadPool() throws Exception {
+        delayedAllocationService.doStop();
         terminate(threadPool);
     }
 
