diff --git a/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java
index f344688fa6c7..e4db9bf9dfdc 100644
--- a/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java
+++ b/src/main/java/org/elasticsearch/transport/netty/NettyTransport.java
@@ -220,59 +220,64 @@ ThreadPool threadPool() {
 
     @Override
     protected void doStart() throws ElasticsearchException {
-        clientBootstrap = createClientBootstrap();
-
-        if (!settings.getAsBoolean("network.server", true)) {
-            return;
-        }
+        boolean success = false;
+        try {
+            clientBootstrap = createClientBootstrap();
+            if (settings.getAsBoolean("network.server", true)) {
+                final OpenChannelsHandler openChannels = new OpenChannelsHandler(logger);
+                this.serverOpenChannels = openChannels;
+
+                // extract default profile first and create standard bootstrap
+                Map<String, Settings> profiles = settings.getGroups("transport.profiles", true);
+                if (!profiles.containsKey(DEFAULT_PROFILE)) {
+                    profiles = Maps.newHashMap(profiles);
+                    profiles.put(DEFAULT_PROFILE, ImmutableSettings.EMPTY);
+                }
 
-        final OpenChannelsHandler openChannels = new OpenChannelsHandler(logger);
-        this.serverOpenChannels = openChannels;
+                Settings fallbackSettings = createFallbackSettings();
+                Settings defaultSettings = profiles.get(DEFAULT_PROFILE);
 
-        // extract default profile first and create standard bootstrap
-        Map<String, Settings> profiles = settings.getGroups("transport.profiles", true);
-        if (!profiles.containsKey(DEFAULT_PROFILE)) {
-            profiles = Maps.newHashMap(profiles);
-            profiles.put(DEFAULT_PROFILE, ImmutableSettings.EMPTY);
-        }
+                // loop through all profiles and strart them app, special handling for default one
+                for (Map.Entry<String, Settings> entry : profiles.entrySet()) {
+                    Settings profileSettings = entry.getValue();
+                    String name = entry.getKey();
 
-        Settings fallbackSettings = createFallbackSettings();
-        Settings defaultSettings = profiles.get(DEFAULT_PROFILE);
+                    if (DEFAULT_PROFILE.equals(name)) {
+                        profileSettings = settingsBuilder()
+                                .put(profileSettings)
+                                .put("port", profileSettings.get("port", componentSettings.get("port", this.settings.get("transport.tcp.port", DEFAULT_PORT_RANGE))))
+                                .build();
+                    } else {
+                        // if profile does not have a port, skip it
+                        if (profileSettings.get("port") == null) {
+                            logger.info("No port configured for profile [{}], not binding", name);
+                            continue;
+                        }
+                    }
 
-        // loop through all profiles and strart them app, special handling for default one
-        for (Map.Entry<String, Settings> entry : profiles.entrySet()) {
-            Settings profileSettings = entry.getValue();
-            String name = entry.getKey();
+                    // merge fallback settings with default settings with profile settings so we have complete settings with default values
+                    Settings mergedSettings = settingsBuilder()
+                            .put(fallbackSettings)
+                            .put(defaultSettings)
+                            .put(profileSettings)
+                            .build();
 
-            if (DEFAULT_PROFILE.equals(name)) {
-                profileSettings = settingsBuilder()
-                        .put(profileSettings)
-                        .put("port", profileSettings.get("port", componentSettings.get("port", this.settings.get("transport.tcp.port", DEFAULT_PORT_RANGE))))
-                        .build();
-            } else {
-                // if profile does not have a port, skip it
-                if (profileSettings.get("port") == null) {
-                    logger.info("No port configured for profile [{}], not binding", name);
-                    continue;
+                    createServerBootstrap(name, mergedSettings);
+                    bindServerBootstrap(name, mergedSettings);
                 }
-            }
-
-            // merge fallback settings with default settings with profile settings so we have complete settings with default values
-            Settings mergedSettings = settingsBuilder()
-                    .put(fallbackSettings)
-                    .put(defaultSettings)
-                    .put(profileSettings)
-                    .build();
 
-            createServerBootstrap(name, mergedSettings);
-            bindServerBootstrap(name, mergedSettings);
+                InetSocketAddress boundAddress = (InetSocketAddress) serverChannels.get(DEFAULT_PROFILE).getLocalAddress();
+                int publishPort = componentSettings.getAsInt("publish_port", settings.getAsInt("transport.publish_port", boundAddress.getPort()));
+                String publishHost = componentSettings.get("publish_host", settings.get("transport.publish_host", settings.get("transport.host")));
+                InetSocketAddress publishAddress = createPublishAddress(publishHost, publishPort);
+                this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));
+            }
+            success = true;
+        } finally {
+            if (success == false) {
+                doStop();
+            }
         }
-
-        InetSocketAddress boundAddress = (InetSocketAddress) serverChannels.get(DEFAULT_PROFILE).getLocalAddress();
-        int publishPort = componentSettings.getAsInt("publish_port", settings.getAsInt("transport.publish_port", boundAddress.getPort()));
-        String publishHost = componentSettings.get("publish_host", settings.get("transport.publish_host", settings.get("transport.host")));
-        InetSocketAddress publishAddress = createPublishAddress(publishHost, publishPort);
-        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));
     }
 
     @Override
