diff --git a/core/src/main/java/org/elasticsearch/common/Priority.java b/core/src/main/java/org/elasticsearch/common/Priority.java
index 5ccc1b8afb6c..e7faaba2b668 100644
--- a/core/src/main/java/org/elasticsearch/common/Priority.java
+++ b/core/src/main/java/org/elasticsearch/common/Priority.java
@@ -23,9 +23,8 @@
 
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
-import java.util.Locale;
 
 /**
  *
@@ -60,7 +59,8 @@ public static Priority fromByte(byte b) {
     public static final Priority NORMAL = new Priority((byte) 2);
     public static final Priority LOW = new Priority((byte) 3);
     public static final Priority LANGUID = new Priority((byte) 4);
-    private static final List<Priority> values = Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID);
+    private static final List<Priority> VALUES =
+            Collections.unmodifiableList(Arrays.asList(IMMEDIATE, URGENT, HIGH, NORMAL, LOW, LANGUID));
 
     private final byte value;
 
@@ -69,10 +69,13 @@ private Priority(byte value) {
     }
 
     /**
-     * @return a list of all available priorities, sorted from the highest to the lowest.
+     * All priorities, sorted from highest priority to lowest priority. The returned list is
+     * unmodifiable.
+     *
+     * @return an unmodifiable list of priorities, sorted from highest priority to lowest priority.
      */
     public static List<Priority> values() {
-        return values;
+        return VALUES;
     }
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
index 26f7cd02b34b..ae9fd990364f 100644
--- a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
@@ -50,7 +50,7 @@
 
     public void testPriorityQueue() throws Exception {
         PriorityBlockingQueue<Priority> queue = new PriorityBlockingQueue<>();
-        List<Priority> priorities = Priority.values();
+        List<Priority> priorities = new ArrayList<>(Priority.values());
         Collections.shuffle(priorities, random());
 
         for (Priority priority : priorities) {
