diff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java
index 5b0785fc0c65..85c6e46eaa93 100644
--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java
+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/remote/RemoteScrollableHitSource.java
@@ -118,10 +118,23 @@ public void onSuccess(org.elasticsearch.client.Response response) {
             }
 
             @Override
-            public void onFailure(Exception t) {
-                logger.warn((Supplier<?>) () -> new ParameterizedMessage("Failed to clear scroll [{}]", scrollId), t);
+            public void onFailure(Exception e) {
+                logFailure(e);
                 onCompletion.run();
             }
+
+            private void logFailure(Exception e) {
+                if (e instanceof ResponseException) {
+                    ResponseException re = (ResponseException) e;
+                    if (remoteVersion.before(Version.V_2_0_0) && re.getResponse().getStatusLine().getStatusCode() == 404) {
+                        logger.debug((Supplier<?>) () -> new ParameterizedMessage(
+                                "Failed to clear scroll [{}] from pre-2.0 Elasticsearch. This is normal if the request terminated "
+                                        + "normally as the scroll has already been cleared automatically.", scrollId), e);
+                        return;
+                    }
+                }
+                logger.warn((Supplier<?>) () -> new ParameterizedMessage("Failed to clear scroll [{}]", scrollId), e);
+            }
         });
     }
 
@@ -132,7 +145,7 @@ protected void cleanup() {
         threadPool.generic().submit(() -> {
             try {
                 client.close();
-                logger.info("Shut down remote connection");
+                logger.debug("Shut down remote connection");
             } catch (IOException e) {
                 logger.error("Failed to shutdown the remote connection", e);
             }
