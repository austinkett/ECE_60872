diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java
index eb070759ed9c..035d1fd26fb7 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/IngestClient.java
@@ -29,6 +29,7 @@
 import org.elasticsearch.action.support.master.AcknowledgedResponse;
 
 import java.io.IOException;
+import java.util.Collections;
 
 import static java.util.Collections.emptySet;
 
@@ -83,7 +84,7 @@ public void putPipelineAsync(PutPipelineRequest request, RequestOptions options,
      */
     public GetPipelineResponse getPipeline(GetPipelineRequest request, RequestOptions options) throws IOException {
         return restHighLevelClient.performRequestAndParseEntity( request, IngestRequestConverters::getPipeline, options,
-            GetPipelineResponse::fromXContent, emptySet());
+            GetPipelineResponse::fromXContent, Collections.singleton(404));
     }
 
     /**
@@ -96,7 +97,7 @@ public GetPipelineResponse getPipeline(GetPipelineRequest request, RequestOption
      */
     public void getPipelineAsync(GetPipelineRequest request, RequestOptions options, ActionListener<GetPipelineResponse> listener) {
         restHighLevelClient.performRequestAsyncAndParseEntity( request, IngestRequestConverters::getPipeline, options,
-            GetPipelineResponse::fromXContent, listener, emptySet());
+            GetPipelineResponse::fromXContent, listener, Collections.singleton(404));
     }
 
     /**
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java
index 706852961923..84bf43ab019d 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/IngestClientIT.java
@@ -78,6 +78,16 @@ public void testGetPipeline() throws IOException {
         assertEquals(expectedConfig.getConfigAsMap(), response.pipelines().get(0).getConfigAsMap());
     }
 
+    public void testGetNonexistentPipeline() throws IOException {
+        String id = "nonexistent_pipeline_id";
+
+        GetPipelineRequest request = new GetPipelineRequest(id);
+
+        GetPipelineResponse response =
+            execute(request, highLevelClient().ingest()::getPipeline, highLevelClient().ingest()::getPipelineAsync);
+        assertFalse(response.isFound());
+    }
+
     public void testDeletePipeline() throws IOException {
         String id = "some_pipeline_id";
         {
