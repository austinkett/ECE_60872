diff --git a/src/main/java/org/elasticsearch/ElasticsearchException.java b/src/main/java/org/elasticsearch/ElasticsearchException.java
index eed4040793c1..a622b0f7e81f 100644
--- a/src/main/java/org/elasticsearch/ElasticsearchException.java
+++ b/src/main/java/org/elasticsearch/ElasticsearchException.java
@@ -194,7 +194,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         if (this instanceof ElasticsearchWrapperException) {
             toXContent(builder, params, this);
         } else {
-            builder.field("type", getExceptionName(this));
+            builder.field("type", getExceptionName());
             builder.field("reason", getMessage());
             innerToXContent(builder, params);
         }
@@ -261,7 +261,16 @@ public static void toXContent(XContentBuilder builder, Params params, Throwable
         if (ex instanceof ElasticsearchException) {
             return ((ElasticsearchException) ex).guessRootCauses();
         }
-        return new ElasticsearchException[0];
+        return new ElasticsearchException[] {new ElasticsearchException(t.getMessage(), t) {
+            @Override
+            protected String getExceptionName() {
+                return getExceptionName(getCause());
+            }
+        }};
+    }
+
+    protected String getExceptionName() {
+        return getExceptionName(this);
     }
 
     /**
diff --git a/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java b/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java
index 74ea5f6e4608..1c631eb00f5c 100644
--- a/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java
+++ b/src/test/java/org/elasticsearch/ElasticsearchExceptionTests.java
@@ -104,6 +104,15 @@ public void testGuessRootCause() {
 
         }
 
+        {
+            final ElasticsearchException[] foobars = ElasticsearchException.guessRootCauses(new IllegalArgumentException("foobar"));
+            assertEquals(foobars.length, 1);
+            assertTrue(foobars[0] instanceof ElasticsearchException);
+            assertEquals(foobars[0].getMessage(), "foobar");
+            assertEquals(foobars[0].getCause().getClass(), IllegalArgumentException.class);
+            assertEquals(foobars[0].getExceptionName(), "illegal_argument_exception");
+        }
+
     }
 
     public void testDeduplicate() throws IOException {
diff --git a/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java b/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
index 8c0203e58def..e110e6ca70d9 100644
--- a/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
+++ b/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
@@ -112,11 +112,18 @@ public void testErrorTrace() throws Exception {
     public void testGuessRootCause() throws IOException {
         RestRequest request = new FakeRestRequest();
         RestChannel channel = new DetailedExceptionRestChannel(request);
-
-        Throwable t = new ElasticsearchException("an error occurred reading data", new FileNotFoundException("/foo/bar"));
-        BytesRestResponse response = new BytesRestResponse(channel, t);
-        String text = response.content().toUtf8();
-        assertThat(text, containsString("{\"root_cause\":[{\"type\":\"exception\",\"reason\":\"an error occurred reading data\"}]"));
+        {
+            Throwable t = new ElasticsearchException("an error occurred reading data", new FileNotFoundException("/foo/bar"));
+            BytesRestResponse response = new BytesRestResponse(channel, t);
+            String text = response.content().toUtf8();
+            assertThat(text, containsString("{\"root_cause\":[{\"type\":\"exception\",\"reason\":\"an error occurred reading data\"}]"));
+        }
+        {
+            Throwable t = new FileNotFoundException("/foo/bar");
+            BytesRestResponse response = new BytesRestResponse(channel, t);
+            String text = response.content().toUtf8();
+            assertThat(text, containsString("{\"root_cause\":[{\"type\":\"file_not_found_exception\",\"reason\":\"/foo/bar\"}]"));
+        }
     }
 
     @Test
