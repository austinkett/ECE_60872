diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
index cc563948160d..f38a6c53d1e0 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/IndicesStatsResponse.java
@@ -21,6 +21,12 @@
 
 import org.elasticsearch.action.support.DefaultShardOperationFailedException;
 import org.elasticsearch.action.support.broadcast.BroadcastResponse;
+import org.elasticsearch.cluster.ClusterState;
+import org.elasticsearch.cluster.health.ClusterIndexHealth;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
+import org.elasticsearch.cluster.metadata.MetaData;
+import org.elasticsearch.cluster.routing.IndexRoutingTable;
+import org.elasticsearch.cluster.routing.RoutingTable;
 import org.elasticsearch.cluster.routing.ShardRouting;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.io.stream.StreamInput;
@@ -34,6 +40,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 
 import static java.util.Collections.unmodifiableMap;
@@ -44,6 +51,9 @@
 
     private Map<ShardRouting, ShardStats> shardStatsMap;
 
+    private MetaData metaData;
+    private RoutingTable routingTable;
+
     IndicesStatsResponse() {
 
     }
@@ -54,6 +64,14 @@
         this.shards = shards;
     }
 
+    IndicesStatsResponse(ShardStats[] shards, int totalShards, int successfulShards, int failedShards,
+                         List<DefaultShardOperationFailedException> shardFailures, ClusterState clusterState) {
+        super(totalShards, successfulShards, failedShards, shardFailures);
+        this.shards = shards;
+        this.metaData = clusterState.metaData();
+        this.routingTable = clusterState.routingTable();
+    }
+
     public Map<ShardRouting, ShardStats> asMap() {
         if (this.shardStatsMap == null) {
             Map<ShardRouting, ShardStats> shardStatsMap = new HashMap<>();
@@ -171,31 +189,69 @@ protected void addCustomXContentFields(XContentBuilder builder, Params params) t
 
         if ("indices".equalsIgnoreCase(level) || "shards".equalsIgnoreCase(level)) {
             builder.startObject(Fields.INDICES);
-            for (IndexStats indexStats : getIndices().values()) {
-                builder.startObject(indexStats.getIndex());
-                builder.field("uuid", indexStats.getUuid());
-                builder.startObject("primaries");
-                indexStats.getPrimaries().toXContent(builder, params);
-                builder.endObject();
-
-                builder.startObject("total");
-                indexStats.getTotal().toXContent(builder, params);
-                builder.endObject();
-
-                if ("shards".equalsIgnoreCase(level)) {
-                    builder.startObject(Fields.SHARDS);
-                    for (IndexShardStats indexShardStats : indexStats) {
-                        builder.startArray(Integer.toString(indexShardStats.getShardId().id()));
-                        for (ShardStats shardStats : indexShardStats) {
-                            builder.startObject();
-                            shardStats.toXContent(builder, params);
-                            builder.endObject();
+            if (getIndices().values().isEmpty() == false) {
+                for (IndexStats indexStats : getIndices().values()) {
+                    builder.startObject(indexStats.getIndex());
+                    builder.field("uuid", indexStats.getUuid());
+                    builder.startObject("primaries");
+                    indexStats.getPrimaries().toXContent(builder, params);
+                    builder.endObject();
+
+                    builder.startObject("total");
+                    indexStats.getTotal().toXContent(builder, params);
+                    builder.endObject();
+
+                    if ("shards".equalsIgnoreCase(level)) {
+                        builder.startObject(Fields.SHARDS);
+                        for (IndexShardStats indexShardStats : indexStats) {
+                            builder.startArray(Integer.toString(indexShardStats.getShardId().id()));
+                            for (ShardStats shardStats : indexShardStats) {
+                                builder.startObject();
+                                shardStats.toXContent(builder, params);
+                                builder.endObject();
+                            }
+                            builder.endArray();
                         }
-                        builder.endArray();
+                        builder.endObject();
                     }
                     builder.endObject();
                 }
-                builder.endObject();
+            } else if (metaData != null && routingTable != null) {
+                for (IndexRoutingTable indexRoutingTable : routingTable) {
+                    final Index index = indexRoutingTable.getIndex();
+                    if (params.param("index") == null || Objects.equals(params.param("index"), index.getName())) {
+                        final IndexMetaData indexMetaData = metaData.index(index);
+                        final ClusterIndexHealth health = new ClusterIndexHealth(indexMetaData, indexRoutingTable);
+
+                        final int totalNumberOfShards = indexMetaData.getTotalNumberOfShards();
+                        final int numberOfShards = metaData.getNumberOfShards();
+
+                        builder.startObject(index.getName());
+                        builder.field("uuid", index.getUUID());
+                        builder.field("primaries", numberOfShards);
+                        builder.field("total", totalNumberOfShards);
+
+                        if ("shards".equalsIgnoreCase(level)) {
+                            final int activeTotal = health.getActiveShards();
+                            final int activePrimaries = health.getActivePrimaryShards();
+                            final int unassignedTotal = health.getUnassignedShards() + health.getInitializingShards();
+                            final int unassignedPrimaries = numberOfShards - health.getActivePrimaryShards();
+
+                            builder.startObject("shards");
+                            builder.field("replicas", metaData.index(index).getNumberOfReplicas());
+                            builder.field("active_total", activeTotal);
+                            builder.field("active_primaries", activePrimaries);
+                            builder.field("active_replicas", activeTotal - activePrimaries);
+                            builder.field("unassigned_total", unassignedTotal);
+                            builder.field("unassigned_primaries", unassignedPrimaries);
+                            builder.field("unassigned_replicas", unassignedTotal - unassignedPrimaries);
+                            builder.field("initializing", health.getInitializingShards());
+                            builder.field("relocating", health.getRelocatingShards());
+                            builder.endObject();
+                        }
+                        builder.endObject();
+                    }
+                }
             }
             builder.endObject();
         }
diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
index d339184c5f81..b8a6595274db 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/stats/TransportIndicesStatsAction.java
@@ -84,7 +84,7 @@ protected IndicesStatsResponse newResponse(IndicesStatsRequest request, int tota
                                                List<ShardStats> responses, List<DefaultShardOperationFailedException> shardFailures,
                                                ClusterState clusterState) {
         return new IndicesStatsResponse(responses.toArray(new ShardStats[responses.size()]), totalShards, successfulShards, failedShards,
-            shardFailures);
+            shardFailures, clusterState);
     }
 
     @Override
