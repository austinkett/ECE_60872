diff --git a/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java
index 9d6f61ed580e..07d7b2fa3d0c 100644
--- a/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java
+++ b/core/src/main/java/org/elasticsearch/action/search/SearchRequestBuilder.java
@@ -28,7 +28,6 @@
 import org.elasticsearch.script.Script;
 import org.elasticsearch.script.Template;
 import org.elasticsearch.search.Scroll;
-import org.elasticsearch.search.searchafter.SearchAfterBuilder;
 import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;
 import org.elasticsearch.search.builder.SearchSourceBuilder;
 import org.elasticsearch.search.fetch.innerhits.InnerHitsBuilder;
diff --git a/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java
index 7cfcee4de593..13fae70174d4 100644
--- a/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/searchafter/SearchAfterBuilder.java
@@ -82,7 +82,11 @@ public static FieldDoc buildFieldDoc(Sort sort, Object[] values) {
         Object[] fieldValues = new Object[sortFields.length];
         for (int i = 0; i < sortFields.length; i++) {
             SortField sortField = sortFields[i];
-            fieldValues[i] = convertValueFromSortField(values[i], sortField);
+            if (values[i] != null) {
+                fieldValues[i] = convertValueFromSortField(values[i], sortField);
+            } else {
+                fieldValues[i] = null;
+            }
         }
         // We set the doc id to Integer.MAX_VALUE in order to make sure that the search starts "after" the first document that is equal to the field values.
         return new FieldDoc(Integer.MAX_VALUE, 0, fieldValues);
@@ -191,8 +195,10 @@ public SearchAfterBuilder fromXContent(XContentParser parser, ParseFieldMatcher
                     values.add(parser.text());
                 } else if (token == XContentParser.Token.VALUE_BOOLEAN) {
                     values.add(parser.booleanValue());
+                } else if (token == XContentParser.Token.VALUE_NULL) {
+                    values.add(null);
                 } else {
-                    throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.VALUE_STRING + "] or [" + XContentParser.Token.VALUE_NUMBER + "] or [" + XContentParser.Token.VALUE_BOOLEAN + "] but found [" + token + "] inside search_after.", parser.getTokenLocation());
+                    throw new ParsingException(parser.getTokenLocation(), "Expected [" + XContentParser.Token.VALUE_STRING + "] or [" + XContentParser.Token.VALUE_NUMBER + "] or [" + XContentParser.Token.VALUE_BOOLEAN + "] or [" + XContentParser.Token.VALUE_NULL + "] but found [" + token + "] inside search_after.", parser.getTokenLocation());
                 }
             }
         } else {
@@ -207,38 +213,39 @@ public void writeTo(StreamOutput out) throws IOException {
         out.writeVInt(sortValues.length);
         for (Object fieldValue : sortValues) {
             if (fieldValue == null) {
-                throw new IOException("Can't handle " + SEARCH_AFTER.getPreferredName() + " field value of type [null]");
-            }
-            Class type = fieldValue.getClass();
-            if (type == String.class) {
-                out.writeByte((byte) 1);
-                out.writeString((String) fieldValue);
-            } else if (type == Integer.class) {
-                out.writeByte((byte) 2);
-                out.writeInt((Integer) fieldValue);
-            } else if (type == Long.class) {
-                out.writeByte((byte) 3);
-                out.writeLong((Long) fieldValue);
-            } else if (type == Float.class) {
-                out.writeByte((byte) 4);
-                out.writeFloat((Float) fieldValue);
-            } else if (type == Double.class) {
-                out.writeByte((byte) 5);
-                out.writeDouble((Double) fieldValue);
-            } else if (type == Byte.class) {
-                out.writeByte((byte) 6);
-                out.writeByte((Byte) fieldValue);
-            } else if (type == Short.class) {
-                out.writeByte((byte) 7);
-                out.writeShort((Short) fieldValue);
-            } else if (type == Boolean.class) {
-                out.writeByte((byte) 8);
-                out.writeBoolean((Boolean) fieldValue);
-            } else if (fieldValue instanceof Text) {
-                out.writeByte((byte) 9);
-                out.writeText((Text) fieldValue);
+                out.writeByte((byte) 0);
             } else {
-                throw new IOException("Can't handle " + SEARCH_AFTER.getPreferredName() + " field value of type [" + type + "]");
+                Class<?> type = fieldValue.getClass();
+                if (type == String.class) {
+                    out.writeByte((byte) 1);
+                    out.writeString((String) fieldValue);
+                } else if (type == Integer.class) {
+                    out.writeByte((byte) 2);
+                    out.writeInt((Integer) fieldValue);
+                } else if (type == Long.class) {
+                    out.writeByte((byte) 3);
+                    out.writeLong((Long) fieldValue);
+                } else if (type == Float.class) {
+                    out.writeByte((byte) 4);
+                    out.writeFloat((Float) fieldValue);
+                } else if (type == Double.class) {
+                    out.writeByte((byte) 5);
+                    out.writeDouble((Double) fieldValue);
+                } else if (type == Byte.class) {
+                    out.writeByte((byte) 6);
+                    out.writeByte((Byte) fieldValue);
+                } else if (type == Short.class) {
+                    out.writeByte((byte) 7);
+                    out.writeShort((Short) fieldValue);
+                } else if (type == Boolean.class) {
+                    out.writeByte((byte) 8);
+                    out.writeBoolean((Boolean) fieldValue);
+                } else if (fieldValue instanceof Text) {
+                    out.writeByte((byte) 9);
+                    out.writeText((Text) fieldValue);
+                } else {
+                    throw new IOException("Can't handle " + SEARCH_AFTER.getPreferredName() + " field value of type [" + type + "]");
+                }
             }
         }
     }
@@ -250,7 +257,9 @@ public SearchAfterBuilder readFrom(StreamInput in) throws IOException {
         Object[] values = new Object[size];
         for (int i = 0; i < size; i++) {
             byte type = in.readByte();
-            if (type == 1) {
+            if (type == 0) {
+                values[i] = null;
+            } else if (type == 1) {
                 values[i] = in.readString();
             } else if (type == 2) {
                 values[i] = in.readInt();
diff --git a/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java b/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java
index b85c0ff5c368..7de0c1500167 100644
--- a/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterBuilderTests.java
@@ -70,7 +70,7 @@ private final SearchAfterBuilder randomSearchFromBuilder() throws IOException {
         SearchAfterBuilder searchAfterBuilder = new SearchAfterBuilder();
         Object[] values = new Object[numSearchFrom];
         for (int i = 0; i < numSearchFrom; i++) {
-            int branch = randomInt(8);
+            int branch = randomInt(9);
             switch (branch) {
                 case 0:
                     values[i] = randomInt();
@@ -99,6 +99,9 @@ private final SearchAfterBuilder randomSearchFromBuilder() throws IOException {
                 case 8:
                     values[i] = new Text(randomAsciiOfLengthBetween(5, 20));
                     break;
+                case 9:
+                    values[i] = null;
+                    break;
             }
         }
         searchAfterBuilder.setSortValues(values);
@@ -115,7 +118,7 @@ private final SearchAfterBuilder randomJsonSearchFromBuilder() throws IOExceptio
         jsonBuilder.startObject();
         jsonBuilder.startArray("search_after");
         for (int i = 0; i < numSearchAfter; i++) {
-            int branch = randomInt(8);
+            int branch = randomInt(9);
             switch (branch) {
                 case 0:
                     jsonBuilder.value(randomInt());
@@ -144,6 +147,9 @@ private final SearchAfterBuilder randomJsonSearchFromBuilder() throws IOExceptio
                 case 8:
                     jsonBuilder.value(new Text(randomAsciiOfLengthBetween(5, 20)));
                     break;
+                case 9:
+                    jsonBuilder.nullValue();
+                    break;
             }
         }
         jsonBuilder.endArray();
@@ -223,18 +229,7 @@ public void testFromXContent() throws Exception {
             assertEquals(searchAfterBuilder.hashCode(), secondSearchAfterBuilder.hashCode());
         }
     }
-
-    public void testWithNullValue() throws Exception {
-        SearchAfterBuilder builder = new SearchAfterBuilder();
-        builder.setSortValues(new Object[] {1, "1", null});
-        try {
-            serializedCopy(builder);
-            fail("Should fail on null values");
-        } catch (IOException e) {
-            assertThat(e.getMessage(), Matchers.equalTo("Can't handle search_after field value of type [null]"));
-        }
-    }
-
+    
     public void testWithNullArray() throws Exception {
         SearchAfterBuilder builder = new SearchAfterBuilder();
         try {
diff --git a/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterIT.java b/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterIT.java
index 57ad7ce1620e..e4ac3b728ea1 100644
--- a/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterIT.java
+++ b/core/src/test/java/org/elasticsearch/search/searchafter/SearchAfterIT.java
@@ -34,12 +34,12 @@
 import org.elasticsearch.transport.RemoteTransportException;
 import org.hamcrest.Matchers;
 
-import java.io.IOException;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Collections;
 import java.util.Arrays;
+import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
@@ -52,15 +52,15 @@
 
     public void testsShouldFail() throws Exception {
         createIndex("test");
+        ensureGreen();
         indexRandom(true, client().prepareIndex("test", "type1", "0").setSource("field1", 0, "field2", "toto"));
-
         try {
             client().prepareSearch("test")
                     .addSort("field1", SortOrder.ASC)
                     .setQuery(matchAllQuery())
                     .searchAfter(new Object[]{0})
                     .setScroll("1m")
-                    .execute().actionGet();
+                    .get();
 
             fail("Should fail on search_after cannot be used with scroll.");
         } catch (SearchPhaseExecutionException e) {
@@ -74,7 +74,7 @@ public void testsShouldFail() throws Exception {
                 .setQuery(matchAllQuery())
                 .searchAfter(new Object[]{0})
                 .setFrom(10)
-                .execute().actionGet();
+                .get();
 
             fail("Should fail on search_after cannot be used with from > 0.");
         } catch (SearchPhaseExecutionException e) {
@@ -87,7 +87,7 @@ public void testsShouldFail() throws Exception {
             client().prepareSearch("test")
                     .setQuery(matchAllQuery())
                     .searchAfter(new Object[]{0.75f})
-                    .execute().actionGet();
+                    .get();
 
             fail("Should fail on search_after on score only is disabled");
         } catch (SearchPhaseExecutionException e) {
@@ -115,7 +115,7 @@ public void testsShouldFail() throws Exception {
                     .setQuery(matchAllQuery())
                     .addSort("field1", SortOrder.ASC)
                     .searchAfter(new Object[]{1, 2})
-                    .execute().actionGet();
+                    .get();
             fail("Should fail on search_after size differs from sort field size");
         } catch (SearchPhaseExecutionException e) {
             assertThat(e.getCause().getClass(), Matchers.equalTo(RemoteTransportException.class));
@@ -128,7 +128,7 @@ public void testsShouldFail() throws Exception {
                     .setQuery(matchAllQuery())
                     .addSort("field1", SortOrder.ASC)
                     .searchAfter(new Object[]{"toto"})
-                    .execute().actionGet();
+                    .get();
 
             fail("Should fail on search_after on score only is disabled");
         } catch (SearchPhaseExecutionException e) {
@@ -138,13 +138,31 @@ public void testsShouldFail() throws Exception {
         }
     }
 
+    public void testWithNullStrings() throws ExecutionException, InterruptedException {
+        createIndex("test");
+        ensureGreen();
+        indexRandom(true,
+                client().prepareIndex("test", "type1", "0").setSource("field1", 0),
+                client().prepareIndex("test", "type1", "1").setSource("field1", 100, "field2", "toto"));
+        SearchResponse searchResponse = client().prepareSearch("test")
+                .addSort("field1", SortOrder.ASC)
+                .addSort("field2", SortOrder.ASC)
+                .setQuery(matchAllQuery())
+                .searchAfter(new Object[]{0, null})
+                .get();
+        assertThat(searchResponse.getHits().getTotalHits(), Matchers.equalTo(2L));
+        assertThat(searchResponse.getHits().getHits().length, Matchers.equalTo(1));
+        assertThat(searchResponse.getHits().getHits()[0].sourceAsMap().get("field1"), Matchers.equalTo(100));
+        assertThat(searchResponse.getHits().getHits()[0].sourceAsMap().get("field2"), Matchers.equalTo("toto"));
+    }
+
     public void testWithSimpleTypes() throws Exception {
         int numFields = randomInt(20) + 1;
         int[] types = new int[numFields-1];
         for (int i = 0; i < numFields-1; i++) {
             types[i] = randomInt(6);
         }
-        List<List> documents = new ArrayList<> ();
+        List<List> documents = new ArrayList<>();
         for (int i = 0; i < NUM_DOCS; i++) {
             List values = new ArrayList<>();
             for (int type : types) {
@@ -239,7 +257,7 @@ private void assertSearchFromWithSortValues(String indexName, String typeName, L
             if (sortValues != null) {
                 req.searchAfter(sortValues);
             }
-            SearchResponse searchResponse = req.execute().actionGet();
+            SearchResponse searchResponse = req.get();
             for (SearchHit hit : searchResponse.getHits()) {
                 List toCompare = convertSortValues(documents.get(offset++));
                 assertThat(LST_COMPARATOR.compare(toCompare, Arrays.asList(hit.sortValues())), equalTo(0));
@@ -282,7 +300,8 @@ private void createIndexMappingsFromObjectType(String indexName, String typeName
                 fail("Can't match type [" + type + "]");
             }
         }
-        indexRequestBuilder.addMapping(typeName, mappings.toArray()).execute().actionGet();
+        indexRequestBuilder.addMapping(typeName, mappings.toArray()).get();
+        ensureGreen();
     }
 
     // Convert Integer, Short, Byte and Boolean to Long in order to match the conversion done
diff --git a/rest-api-spec/src/main/resources/rest-api-spec/api/search.json b/rest-api-spec/src/main/resources/rest-api-spec/api/search.json
index d1c19f3ef219..d2b9b8cf9b4a 100644
--- a/rest-api-spec/src/main/resources/rest-api-spec/api/search.json
+++ b/rest-api-spec/src/main/resources/rest-api-spec/api/search.json
@@ -154,10 +154,6 @@
         "request_cache": {
           "type" : "boolean",
           "description" : "Specify if request cache should be used for this request or not, defaults to index level setting"
-        },
-        "search_after": {
-          "type" : "list",
-          "description" : "An array of sort values that indicates where the sort of the top hits should start"
         }
       }
     },
