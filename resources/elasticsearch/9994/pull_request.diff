diff --git a/src/main/java/org/elasticsearch/transport/TransportService.java b/src/main/java/org/elasticsearch/transport/TransportService.java
index a61bed06701a..01606b90c19a 100644
--- a/src/main/java/org/elasticsearch/transport/TransportService.java
+++ b/src/main/java/org/elasticsearch/transport/TransportService.java
@@ -390,8 +390,8 @@ public void onResponseReceived(long requestId) {
                     // lets see if its in the timeout holder
                     TimeoutInfoHolder timeoutInfoHolder = timeoutInfoHandlers.get(requestId);
                     if (timeoutInfoHolder != null) {
-                        action = holder.action();
-                        sourceNode = holder.node();
+                        action = timeoutInfoHolder.action();
+                        sourceNode = timeoutInfoHolder.node();
                     }
                 }
                 if (action == null) {
diff --git a/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java b/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java
index 3ae3e86edf57..9ee57194148d 100644
--- a/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java
+++ b/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTests.java
@@ -614,7 +614,11 @@ public StringMessageRequest newInstance() {
 
             @Override
             public void messageReceived(StringMessageRequest request, TransportChannel channel) throws Exception {
+                if (request.timeout() > 0) {
+                    Thread.sleep(request.timeout);
+                }
                 channel.sendResponse(new RuntimeException(""));
+
             }
 
             @Override
@@ -657,7 +661,9 @@ public String executor() {
         serviceB.addTracer(tracer);
 
         tracer.reset(4);
-        serviceA.sendRequest(nodeB, "test", new StringMessageRequest(""), noopResponseHandler);
+        boolean timeout = randomBoolean();
+        TransportRequestOptions options = timeout ? new TransportRequestOptions().withTimeout(1) : TransportRequestOptions.EMPTY;
+        serviceA.sendRequest(nodeB, "test", new StringMessageRequest("", 10), options, noopResponseHandler);
         requestCompleted.acquire();
         tracer.expectedEvents.get().await();
         assertThat("didn't see request sent", tracer.sawRequestSent, equalTo(true));
@@ -771,24 +777,36 @@ public void reset(int expectedCount) {
     static class StringMessageRequest extends TransportRequest {
 
         private String message;
+        private long timeout;
 
-        StringMessageRequest(String message) {
+        StringMessageRequest(String message, long timeout) {
             this.message = message;
+            this.timeout = timeout;
         }
 
         StringMessageRequest() {
         }
 
+        public StringMessageRequest(String message) {
+            this(message, -1);
+        }
+
+        public long timeout() {
+            return timeout;
+        }
+
         @Override
         public void readFrom(StreamInput in) throws IOException {
             super.readFrom(in);
             message = in.readString();
+            timeout = in.readLong();
         }
 
         @Override
         public void writeTo(StreamOutput out) throws IOException {
             super.writeTo(out);
             out.writeString(message);
+            out.writeLong(timeout);
         }
     }
 
