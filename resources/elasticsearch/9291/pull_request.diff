diff --git a/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java
index ffb84532c794..1e9c0945cf0e 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/children/ParentToChildrenAggregator.java
@@ -180,6 +180,10 @@ protected void doPostCollection() throws IOException {
                 }
             }
         }
+        // Need to invoke post collection on all aggs that the children agg is wrapping,
+        // otherwise any post work that is required, because we started to collect buckets
+        // in the method will not be performed.
+        collectableSubAggregators.postCollection();
     }
 
     @Override
diff --git a/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java
index c5a2340f0a9f..d6df606fbf3a 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/GlobalOrdinalsStringTermsAggregator.java
@@ -188,18 +188,20 @@ public InternalAggregation buildAggregation(long owningBucketOrdinal) {
         }
         //replay any deferred collections
         runDeferredCollections(survivingBucketOrds);
-        
+
         //Now build the aggs
         for (int i = 0; i < list.length; i++) {
-          Bucket bucket = list[i];
-          bucket.aggregations = bucket.docCount == 0 ? bucketEmptyAggregations() : bucketAggregations(bucket.bucketOrd);
-          bucket.docCountError = 0;
+            Bucket bucket = list[i];
+            bucket.aggregations = bucket.docCount == 0 ? bucketEmptyAggregations() : bucketAggregations(bucket.bucketOrd);
+            bucket.docCountError = 0;
         }
 
         return new StringTerms(name, order, bucketCountThresholds.getRequiredSize(), bucketCountThresholds.getShardSize(), bucketCountThresholds.getMinDocCount(), Arrays.asList(list), showTermDocCountError, 0, otherDocCount);
     }
-    
-    /** This is used internally only, just for compare using global ordinal instead of term bytes in the PQ */
+
+    /**
+     * This is used internally only, just for compare using global ordinal instead of term bytes in the PQ
+     */
     static class OrdBucket extends InternalTerms.Bucket {
         long globalOrd;
 
@@ -210,7 +212,7 @@ public InternalAggregation buildAggregation(long owningBucketOrdinal) {
 
         @Override
         int compareTerm(Terms.Bucket other) {
-            return Long.compare(globalOrd, ((OrdBucket)other).globalOrd);
+            return Long.compare(globalOrd, ((OrdBucket) other).globalOrd);
         }
 
         @Override
@@ -282,17 +284,17 @@ public void collect(int doc) throws IOException {
                     public void collect(int doc) throws IOException {
                         ords.setDocument(doc);
                         final int numOrds = ords.cardinality();
-            for (int i = 0; i < numOrds; i++) {
+                        for (int i = 0; i < numOrds; i++) {
                             final long globalOrd = ords.ordAt(i);
-                long bucketOrd = bucketOrds.add(globalOrd);
-                if (bucketOrd < 0) {
-                    bucketOrd = -1 - bucketOrd;
-                    collectExistingBucket(doc, bucketOrd);
-                } else {
-                    collectBucket(doc, bucketOrd);
-                }
-            }
-        }
+                            long bucketOrd = bucketOrds.add(globalOrd);
+                            if (bucketOrd < 0) {
+                                bucketOrd = -1 - bucketOrd;
+                                collectExistingBucket(doc, bucketOrd);
+                            } else {
+                                collectBucket(doc, bucketOrd);
+                            }
+                        }
+                    }
                 };
             }
         }
@@ -332,7 +334,7 @@ protected Collector newCollector(final RandomAccessOrds ords) {
             final SortedDocValues singleValues = DocValues.unwrapSingleton(segmentOrds);
             if (singleValues != null) {
                 return new Collector() {
-        @Override
+                    @Override
                     public void collect(int doc) throws IOException {
                         final int ord = singleValues.getOrd(doc);
                         segmentDocCounts.increment(ord + 1, 1);
@@ -343,7 +345,7 @@ public void collect(int doc) throws IOException {
                     public void collect(int doc) throws IOException {
                         segmentOrds.setDocument(doc);
                         final int numOrds = segmentOrds.cardinality();
-            for (int i = 0; i < numOrds; i++) {
+                        for (int i = 0; i < numOrds; i++) {
                             final long segmentOrd = segmentOrds.ordAt(i);
                             segmentDocCounts.increment(segmentOrd + 1, 1);
                         }
@@ -361,7 +363,7 @@ public void setNextReader(AtomicReaderContext reader) {
             globalOrds = valuesSource.globalOrdinalsValues();
             segmentOrds = valuesSource.ordinalsValues();
             collector = newCollector(segmentOrds);
-            }
+        }
 
         @Override
         protected void doPostCollection() {
@@ -387,6 +389,8 @@ private void mapSegmentCountsToGlobalCounts() {
                 mapping = null;
             }
             for (long i = 1; i < segmentDocCounts.size(); i++) {
+                // We use set(...) here, because we need to reset the slow to 0.
+                // segmentDocCounts get reused over the segments and otherwise counts would be too high.
                 final int inc = segmentDocCounts.set(i, 0);
                 if (inc == 0) {
                     continue;
@@ -437,8 +441,8 @@ public void doSetDocument(int docId) {
                 if (accepted.get(ord)) {
                     ords[cardinality++] = ord;
                 }
-                }
             }
+        }
 
         @Override
         public int cardinality() {
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenTests.java
index bda208cb3557..dcc523620f28 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/ChildrenTests.java
@@ -32,11 +32,11 @@
 
 import java.util.*;
 
+import static org.elasticsearch.index.query.QueryBuilders.hasChildQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
+import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertNoFailures;
-import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.*;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
@@ -258,6 +258,66 @@ public void testWithDeletes() throws Exception {
         }
     }
 
+    @Test
+    public void testPostCollection() throws Exception {
+        String indexName = "prodcatalog";
+        String masterType = "masterprod";
+        String childType = "variantsku";
+        assertAcked(
+                prepareCreate(indexName)
+                        .addMapping(masterType, "brand", "type=string", "name", "type=string", "material", "type=string")
+                        .addMapping(childType, "_parent", "type=masterprod", "color", "type=string", "size", "type=string")
+        );
+
+        List<IndexRequestBuilder> requests = new ArrayList<>();
+        requests.add(client().prepareIndex(indexName, masterType, "1").setSource("brand", "Levis", "name", "Style 501", "material", "Denim"));
+        requests.add(client().prepareIndex(indexName, childType, "0").setParent("1").setSource("color", "blue", "size", "32"));
+        requests.add(client().prepareIndex(indexName, childType, "1").setParent("1").setSource("color", "blue", "size", "34"));
+        requests.add(client().prepareIndex(indexName, childType, "2").setParent("1").setSource("color", "blue", "size", "36"));
+        requests.add(client().prepareIndex(indexName, childType, "3").setParent("1").setSource("color", "black", "size", "38"));
+        requests.add(client().prepareIndex(indexName, childType, "4").setParent("1").setSource("color", "black", "size", "40"));
+        requests.add(client().prepareIndex(indexName, childType, "5").setParent("1").setSource("color", "gray", "size", "36"));
+
+        requests.add(client().prepareIndex(indexName, masterType, "2").setSource("brand", "Wrangler", "name", "Regular Cut", "material", "Leather"));
+        requests.add(client().prepareIndex(indexName, childType, "6").setParent("2").setSource("color", "blue", "size", "32"));
+        requests.add(client().prepareIndex(indexName, childType, "7").setParent("2").setSource("color", "blue", "size", "34"));
+        requests.add(client().prepareIndex(indexName, childType, "8").setParent("2").setSource("color", "black", "size", "36"));
+        requests.add(client().prepareIndex(indexName, childType, "9").setParent("2").setSource("color", "black", "size", "38"));
+        requests.add(client().prepareIndex(indexName, childType, "10").setParent("2").setSource("color", "black", "size", "40"));
+        requests.add(client().prepareIndex(indexName, childType, "11").setParent("2").setSource("color", "orange", "size", "36"));
+        requests.add(client().prepareIndex(indexName, childType, "12").setParent("2").setSource("color", "green", "size", "44"));
+        indexRandom(true, requests);
+
+        SearchResponse response = client().prepareSearch(indexName).setTypes(masterType)
+                .setQuery(hasChildQuery(childType, termQuery("color", "orange")))
+                .addAggregation(children("my-refinements")
+                                .childType(childType)
+                                .subAggregation(terms("my-colors").field(childType + ".color"))
+                                .subAggregation(terms("my-sizes").field(childType + ".size"))
+                ).get();
+        assertNoFailures(response);
+        assertHitCount(response, 1);
+
+        Children childrenAgg = response.getAggregations().get("my-refinements");
+        assertThat(childrenAgg.getDocCount(), equalTo(7l));
+
+        Terms termsAgg = childrenAgg.getAggregations().get("my-colors");
+        assertThat(termsAgg.getBuckets().size(), equalTo(4));
+        assertThat(termsAgg.getBucketByKey("black").getDocCount(), equalTo(3l));
+        assertThat(termsAgg.getBucketByKey("blue").getDocCount(), equalTo(2l));
+        assertThat(termsAgg.getBucketByKey("green").getDocCount(), equalTo(1l));
+        assertThat(termsAgg.getBucketByKey("orange").getDocCount(), equalTo(1l));
+
+        termsAgg = childrenAgg.getAggregations().get("my-sizes");
+        assertThat(termsAgg.getBuckets().size(), equalTo(6));
+        assertThat(termsAgg.getBucketByKey("36").getDocCount(), equalTo(2l));
+        assertThat(termsAgg.getBucketByKey("32").getDocCount(), equalTo(1l));
+        assertThat(termsAgg.getBucketByKey("34").getDocCount(), equalTo(1l));
+        assertThat(termsAgg.getBucketByKey("38").getDocCount(), equalTo(1l));
+        assertThat(termsAgg.getBucketByKey("40").getDocCount(), equalTo(1l));
+        assertThat(termsAgg.getBucketByKey("44").getDocCount(), equalTo(1l));
+    }
+
     private static final class Control {
 
         final String category;
