diff --git a/core/src/main/java/org/elasticsearch/transport/TransportService.java b/core/src/main/java/org/elasticsearch/transport/TransportService.java
index 2d804bfc7863..cb0443587a4e 100644
--- a/core/src/main/java/org/elasticsearch/transport/TransportService.java
+++ b/core/src/main/java/org/elasticsearch/transport/TransportService.java
@@ -191,9 +191,18 @@ protected void doStop() {
                 if (holderToNotify != null) {
                     // callback that an exception happened, but on a different thread since we don't
                     // want handlers to worry about stack overflows
-                    threadPool.generic().execute(new Runnable() {
+                    threadPool.generic().execute(new AbstractRunnable() {
                         @Override
-                        public void run() {
+                        public void onRejection(Throwable t) {
+                            // if we get rejected during node shutdown we don't wanna bubble it up
+                            logger.debug("failed to notify response handler on rejection, action: {}", t, holderToNotify.action());
+                        }
+                        @Override
+                        public void onFailure(Throwable t) {
+                            logger.warn("failed to notify response handler on exception, action: {}", t, holderToNotify.action());
+                        }
+                        @Override
+                        public void doRun() {
                             holderToNotify.handler().handleException(new TransportException("transport stopped, action: " + holderToNotify.action()));
                         }
                     });
@@ -333,11 +342,11 @@ public void removeConnectionListener(TransportConnectionListener listener) {
                     @Override
                     public void onRejection(Throwable t) {
                         // if we get rejected during node shutdown we don't wanna bubble it up
-                        logger.debug("failed to notify response handler on rejection", t);
+                        logger.debug("failed to notify response handler on rejection, action: {}", t, holderToNotify.action());
                     }
                     @Override
                     public void onFailure(Throwable t) {
-                        logger.warn("failed to notify response handler on exception", t);
+                        logger.warn("failed to notify response handler on exception, action: {}", t, holderToNotify.action());
                     }
                     @Override
                     protected void doRun() throws Exception {
