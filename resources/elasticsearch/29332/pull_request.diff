diff --git a/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
index 0612853cd502..398f2240a5c4 100644
--- a/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
+++ b/server/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
@@ -66,6 +66,7 @@
 import static org.elasticsearch.common.lucene.search.Queries.newLenientFieldQuery;
 import static org.elasticsearch.common.lucene.search.Queries.newUnmappedFieldQuery;
 import static org.elasticsearch.index.search.QueryParserHelper.resolveMappingField;
+import static org.elasticsearch.index.search.QueryParserHelper.resolveMappingFields;
 
 /**
  * A {@link XQueryParser} that uses the {@link MapperService} in order to build smarter
@@ -264,6 +265,8 @@ private Query applyBoost(Query q, Float boost) {
             // Filters unsupported fields if a pattern is requested
             // Filters metadata fields if all fields are requested
             return resolveMappingField(context, field, 1.0f, !allFields, !multiFields, quoted ? quoteFieldSuffix : null);
+        } else if (quoted && quoteFieldSuffix != null) {
+            return resolveMappingFields(context, fieldsAndWeights, quoteFieldSuffix);
         } else {
             return fieldsAndWeights;
         }
diff --git a/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
index 939f1add0094..aba7836a5a32 100644
--- a/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
+++ b/server/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
@@ -1040,6 +1040,37 @@ public void testQuoteAnalyzer() throws Exception {
         assertEquals(expectedQuery, query);
     }
 
+    public void testQuoteFieldSuffix() throws IOException {
+        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
+        QueryShardContext context = createShardContext();
+        assertEquals(new TermQuery(new Term(STRING_FIELD_NAME, "bar")),
+            new QueryStringQueryBuilder("bar")
+                .quoteFieldSuffix("_2")
+                .field(STRING_FIELD_NAME)
+                .doToQuery(context)
+        );
+        assertEquals(new TermQuery(new Term(STRING_FIELD_NAME_2, "bar")),
+            new QueryStringQueryBuilder("\"bar\"")
+                .quoteFieldSuffix("_2")
+                .field(STRING_FIELD_NAME)
+                .doToQuery(context)
+        );
+
+        // Now check what happens if the quote field does not exist
+        assertEquals(new TermQuery(new Term(STRING_FIELD_NAME, "bar")),
+            new QueryStringQueryBuilder("bar")
+                .quoteFieldSuffix(".quote")
+                .field(STRING_FIELD_NAME)
+                .doToQuery(context)
+        );
+        assertEquals(new TermQuery(new Term(STRING_FIELD_NAME, "bar")),
+            new QueryStringQueryBuilder("\"bar\"")
+                .quoteFieldSuffix(".quote")
+                .field(STRING_FIELD_NAME)
+                .doToQuery(context)
+        );
+    }
+
     public void testToFuzzyQuery() throws Exception {
         assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
 
