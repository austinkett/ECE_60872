diff --git a/plugins/examples/custom-suggester/src/main/java/org/elasticsearch/example/customsuggester/CustomSuggester.java b/plugins/examples/custom-suggester/src/main/java/org/elasticsearch/example/customsuggester/CustomSuggester.java
index b6a5b5e8f842..9220206903eb 100644
--- a/plugins/examples/custom-suggester/src/main/java/org/elasticsearch/example/customsuggester/CustomSuggester.java
+++ b/plugins/examples/custom-suggester/src/main/java/org/elasticsearch/example/customsuggester/CustomSuggester.java
@@ -25,6 +25,7 @@
 import org.elasticsearch.search.suggest.Suggest;
 import org.elasticsearch.search.suggest.Suggester;
 
+import java.io.IOException;
 import java.util.Locale;
 
 public class CustomSuggester extends Suggester<CustomSuggestionContext> {
@@ -35,15 +36,12 @@
         String name,
         CustomSuggestionContext suggestion,
         IndexSearcher searcher,
-        CharsRefBuilder spare) {
-
-        // Get the suggestion context
-        String text = suggestion.getText().utf8ToString();
+        CharsRefBuilder spare) throws IOException {
 
         // create two suggestions with 12 and 123 appended
-        CustomSuggestion response = new CustomSuggestion(name, suggestion.getSize(), "suggestion-dummy-value");
-
-        CustomSuggestion.Entry entry = new CustomSuggestion.Entry(new Text(text), 0, text.length(), "entry-dummy-value");
+        CustomSuggestion response = emptySuggestion(name, suggestion, spare);
+        CustomSuggestion.Entry entry = response.getEntries().get(0);
+        String text = entry.getText().string();
 
         String firstOption =
             String.format(Locale.ROOT, "%s-%s-%s-%s", text, suggestion.getField(), suggestion.options.get("suffix"), "12");
@@ -55,8 +53,16 @@
         CustomSuggestion.Entry.Option option123 = new CustomSuggestion.Entry.Option(new Text(secondOption), 0.8f, "option-dummy-value-2");
         entry.addOption(option123);
 
-        response.addTerm(entry);
+        return response;
+    }
 
+    @Override
+    protected CustomSuggestion emptySuggestion(String name, CustomSuggestionContext suggestion,
+            CharsRefBuilder spare) throws IOException {
+        String text = suggestion.getText().utf8ToString();
+        CustomSuggestion response = new CustomSuggestion(name, suggestion.getSize(), "suggestion-dummy-value");
+        CustomSuggestion.Entry entry = new CustomSuggestion.Entry(new Text(text), 0, text.length(), "entry-dummy-value");
+        response.addTerm(entry);
         return response;
     }
 }
diff --git a/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java
index 0125084c3709..ca6cba2f43f9 100644
--- a/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java
+++ b/server/src/main/java/org/elasticsearch/action/search/SearchPhaseController.java
@@ -21,6 +21,7 @@
 
 import com.carrotsearch.hppc.IntArrayList;
 import com.carrotsearch.hppc.ObjectObjectHashMap;
+
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.CollectionStatistics;
 import org.apache.lucene.search.FieldDoc;
diff --git a/server/src/main/java/org/elasticsearch/search/suggest/Suggester.java b/server/src/main/java/org/elasticsearch/search/suggest/Suggester.java
index 6c007bf4cb2b..3146d7a0ffad 100644
--- a/server/src/main/java/org/elasticsearch/search/suggest/Suggester.java
+++ b/server/src/main/java/org/elasticsearch/search/suggest/Suggester.java
@@ -29,12 +29,15 @@
     protected abstract Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>
         innerExecute(String name, T suggestion, IndexSearcher searcher, CharsRefBuilder spare) throws IOException;
 
+    protected abstract Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>
+        emptySuggestion(String name, T suggestion, CharsRefBuilder spare) throws IOException;
+
     public Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>>
                 execute(String name, T suggestion, IndexSearcher searcher, CharsRefBuilder spare) throws IOException {
-        // #3469 We want to ignore empty shards
 
+        // we only want to output an empty suggestion on empty shards
         if (searcher.getIndexReader().numDocs() == 0) {
-            return null;
+            return emptySuggestion(name, suggestion, spare);
         }
         return innerExecute(name, suggestion, searcher, spare);
     }
diff --git a/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java
index 60ad277deb2f..3763fd49629b 100644
--- a/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java
+++ b/server/src/main/java/org/elasticsearch/search/suggest/completion/CompletionSuggester.java
@@ -49,12 +49,7 @@ private CompletionSuggester() {}
             final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException {
         if (suggestionContext.getFieldType() != null) {
             final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType();
-            CompletionSuggestion completionSuggestion =
-                new CompletionSuggestion(name, suggestionContext.getSize(), suggestionContext.isSkipDuplicates());
-            spare.copyUTF8Bytes(suggestionContext.getText());
-            CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(
-                new Text(spare.toString()), 0, spare.length());
-            completionSuggestion.addTerm(completionSuggestEntry);
+            CompletionSuggestion completionSuggestion = emptySuggestion(name, suggestionContext, spare);
             int shardSize = suggestionContext.getShardSize() != null ? suggestionContext.getShardSize() : suggestionContext.getSize();
             TopSuggestGroupDocsCollector collector = new TopSuggestGroupDocsCollector(shardSize, suggestionContext.isSkipDuplicates());
             suggest(searcher, suggestionContext.toQuery(), collector);
@@ -71,7 +66,7 @@ private CompletionSuggester() {}
                 if (numResult++ < suggestionContext.getSize()) {
                     CompletionSuggestion.Entry.Option option = new CompletionSuggestion.Entry.Option(suggestDoc.doc,
                         new Text(suggestDoc.key.toString()), suggestDoc.score, contexts);
-                    completionSuggestEntry.addOption(option);
+                    completionSuggestion.getEntries().get(0).addOption(option);
                 } else {
                     break;
                 }
@@ -96,4 +91,14 @@ private static void suggest(IndexSearcher searcher, CompletionQuery query, TopSu
             }
         }
     }
+
+    @Override
+    protected CompletionSuggestion emptySuggestion(String name, CompletionSuggestionContext suggestion, CharsRefBuilder spare)
+            throws IOException {
+        CompletionSuggestion completionSuggestion = new CompletionSuggestion(name, suggestion.getSize(), suggestion.isSkipDuplicates());
+        spare.copyUTF8Bytes(suggestion.getText());
+        CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(new Text(spare.toString()), 0, spare.length());
+        completionSuggestion.addTerm(completionSuggestEntry);
+        return completionSuggestion;
+    }
 }
diff --git a/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java b/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java
index d80fd68dacbf..10b9333ae78e 100644
--- a/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java
+++ b/server/src/main/java/org/elasticsearch/search/suggest/phrase/PhraseSuggester.java
@@ -156,4 +156,13 @@ private static TokenStream tokenStream(Analyzer analyzer, BytesRef query, CharsR
         spare.copyUTF8Bytes(suggestion.getText());
         return new PhraseSuggestion.Entry(new Text(spare.toString()), 0, spare.length(), cutoffScore);
     }
+
+    @Override
+    protected Suggestion<? extends Entry<? extends Option>> emptySuggestion(String name, PhraseSuggestionContext suggestion,
+            CharsRefBuilder spare) throws IOException {
+        PhraseSuggestion phraseSuggestion = new PhraseSuggestion(name, suggestion.getSize());
+        spare.copyUTF8Bytes(suggestion.getText());
+        phraseSuggestion.addTerm(new PhraseSuggestion.Entry(new Text(spare.toString()), 0, spare.length()));
+        return phraseSuggestion;
+    }
 }
diff --git a/server/src/main/java/org/elasticsearch/search/suggest/term/TermSuggester.java b/server/src/main/java/org/elasticsearch/search/suggest/term/TermSuggester.java
index d6edf352d191..34ce79af87cb 100644
--- a/server/src/main/java/org/elasticsearch/search/suggest/term/TermSuggester.java
+++ b/server/src/main/java/org/elasticsearch/search/suggest/term/TermSuggester.java
@@ -94,4 +94,16 @@ private Token(Term term, int startOffset, int endOffset) {
         }
 
     }
+
+    @Override
+    protected TermSuggestion emptySuggestion(String name, TermSuggestionContext suggestion, CharsRefBuilder spare) throws IOException {
+        TermSuggestion termSuggestion = new TermSuggestion(name, suggestion.getSize(), suggestion.getDirectSpellCheckerSettings().sort());
+        List<Token> tokens = queryTerms(suggestion, spare);
+        for (Token token : tokens) {
+            Text key = new Text(new BytesArray(token.term.bytes()));
+            TermSuggestion.Entry resultEntry = new TermSuggestion.Entry(key, token.startOffset, token.endOffset - token.startOffset);
+            termSuggestion.addTerm(resultEntry);
+        }
+        return termSuggestion;
+    }
 }
diff --git a/server/src/test/java/org/elasticsearch/search/SearchModuleTests.java b/server/src/test/java/org/elasticsearch/search/SearchModuleTests.java
index 84601713a33d..5117a1c68a18 100644
--- a/server/src/test/java/org/elasticsearch/search/SearchModuleTests.java
+++ b/server/src/test/java/org/elasticsearch/search/SearchModuleTests.java
@@ -64,9 +64,12 @@
 import org.elasticsearch.search.rescore.RescoreContext;
 import org.elasticsearch.search.rescore.RescorerBuilder;
 import org.elasticsearch.search.suggest.Suggest.Suggestion;
+import org.elasticsearch.search.suggest.Suggest.Suggestion.Entry;
+import org.elasticsearch.search.suggest.Suggest.Suggestion.Entry.Option;
 import org.elasticsearch.search.suggest.Suggester;
 import org.elasticsearch.search.suggest.SuggestionBuilder;
 import org.elasticsearch.search.suggest.SuggestionSearchContext;
+import org.elasticsearch.search.suggest.SuggestionSearchContext.SuggestionContext;
 import org.elasticsearch.search.suggest.term.TermSuggestion;
 import org.elasticsearch.search.suggest.term.TermSuggestionBuilder;
 import org.elasticsearch.test.ESTestCase;
@@ -163,6 +166,7 @@ public void testDoubleRegister() {
         expectThrows(IllegalArgumentException.class, registryForPlugin(registersDupePipelineAggregation));
 
         SearchPlugin registersDupeRescorer = new SearchPlugin() {
+            @Override
             public List<RescorerSpec<?>> getRescorers() {
                 return singletonList(
                         new RescorerSpec<>(QueryRescorerBuilder.NAME, QueryRescorerBuilder::new, QueryRescorerBuilder::fromXContent));
@@ -515,6 +519,7 @@ public RescoreContext innerBuildContext(int windowSize, QueryShardContext contex
     }
 
     private static class TestSuggester extends Suggester<SuggestionSearchContext.SuggestionContext> {
+
         @Override
         protected Suggestion<? extends Suggestion.Entry<? extends Suggestion.Entry.Option>> innerExecute(
                 String name,
@@ -523,6 +528,12 @@ public RescoreContext innerBuildContext(int windowSize, QueryShardContext contex
                 CharsRefBuilder spare) throws IOException {
             return null;
         }
+
+        @Override
+        protected Suggestion<? extends Entry<? extends Option>> emptySuggestion(String name, SuggestionContext suggestion,
+                CharsRefBuilder spare) throws IOException {
+            return null;
+        }
     }
 
     private static class TestSuggestionBuilder extends SuggestionBuilder<TestSuggestionBuilder> {
diff --git a/server/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java b/server/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
index f12ce3e3b4fa..d4596f0885f5 100644
--- a/server/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
+++ b/server/src/test/java/org/elasticsearch/search/suggest/CompletionSuggestSearchIT.java
@@ -358,6 +358,26 @@ public void testSuggestDocumentSourceFiltering() throws Exception {
         }
     }
 
+    /**
+     * Suggestions run on an empty index should return a suggest element as part of the response. See #42473 for details.
+     */
+    public void testSuggestEmptyIndex() throws IOException, InterruptedException {
+        final CompletionMappingBuilder mapping = new CompletionMappingBuilder();
+        createIndexAndMapping(mapping);
+
+        CompletionSuggestionBuilder prefix = SuggestBuilders.completionSuggestion(FIELD).prefix("v");
+        SearchResponse searchResponse = client().prepareSearch(INDEX).suggest(new SuggestBuilder().addSuggestion("foo", prefix))
+                .setFetchSource("a", "b").get();
+        Suggest suggest = searchResponse.getSuggest();
+        assertNotNull(suggest);
+        CompletionSuggestion completionSuggestion = suggest.getSuggestion("foo");
+        CompletionSuggestion.Entry options = completionSuggestion.getEntries().get(0);
+        assertEquals("v", options.getText().string());
+        assertEquals(1, options.getLength());
+        assertEquals(0, options.getOffset());
+        assertEquals(0, options.options.size());
+    }
+
     public void testThatWeightsAreWorking() throws Exception {
         createIndexAndMapping(completionMappingBuilder);
 
diff --git a/server/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java b/server/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
index 1813f17141b6..22c19765fed3 100644
--- a/server/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
+++ b/server/src/test/java/org/elasticsearch/search/suggest/SuggestSearchIT.java
@@ -345,6 +345,34 @@ public void testEmpty() throws Exception {
         assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
     }
 
+    public void testEmptyIndex() throws Exception {
+        assertAcked(prepareCreate("test").addMapping("type1", "text", "type=text"));
+        ensureGreen();
+
+        // use SuggestMode.ALWAYS, otherwise the results can vary between requests.
+        TermSuggestionBuilder termSuggest = termSuggestion("text")
+                .suggestMode(SuggestMode.ALWAYS)
+                .text("abcd");
+        Suggest suggest = searchSuggest("test", termSuggest);
+        assertSuggestionSize(suggest, 0, 0, "test");
+        assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
+
+        suggest = searchSuggest("test", termSuggest);
+        assertSuggestionSize(suggest, 0, 0, "test");
+        assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
+
+        index("test", "type1", "1", "text", "bar");
+        refresh();
+
+        suggest = searchSuggest("test", termSuggest);
+        assertSuggestionSize(suggest, 0, 0, "test");
+        assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
+
+        suggest = searchSuggest("test", termSuggest);
+        assertSuggestionSize(suggest, 0, 0, "test");
+        assertThat(suggest.getSuggestion("test").getEntries().get(0).getText().string(), equalTo("abcd"));
+    }
+
     public void testWithMultipleCommands() throws Exception {
         assertAcked(prepareCreate("test").addMapping("typ1", "field1", "type=text", "field2", "type=text"));
         ensureGreen();
@@ -755,13 +783,43 @@ public void testEmptyShards() throws IOException, InterruptedException {
                 .put("index.analysis.filter.shingler.output_unigrams", true)).addMapping("type1", mappingBuilder));
         ensureGreen();
 
+        // test phrase suggestion on completely empty index
+        SearchResponse searchResponse = client().prepareSearch()
+                .setSize(0)
+                .suggest(
+                        new SuggestBuilder().setGlobalText("tetsting sugestion").addSuggestion("did_you_mean",
+                                phraseSuggestion("name").maxErrors(5.0f)))
+                .get();
+
+        assertNoFailures(searchResponse);
+        Suggest suggest = searchResponse.getSuggest();
+        assertSuggestionSize(suggest, 0, 0, "did_you_mean");
+        assertThat(suggest.getSuggestion("did_you_mean").getEntries().get(0).getText().string(), equalTo("tetsting sugestion"));
+
+
         index("test", "type1", "11", "foo", "bar");
         index("test", "type1", "12", "foo", "bar");
-        index("test", "type1", "1", "name", "Just testing the suggestions api");
         index("test", "type1", "2", "name", "An other title about equal length");
         refresh();
 
-        SearchResponse searchResponse = client().prepareSearch()
+        // test phrase suggestion but nothing matches
+        searchResponse = client().prepareSearch()
+                .setSize(0)
+                .suggest(
+                        new SuggestBuilder().setGlobalText("tetsting sugestion").addSuggestion("did_you_mean",
+                                phraseSuggestion("name").maxErrors(5.0f)))
+                .get();
+
+        assertNoFailures(searchResponse);
+        suggest = searchResponse.getSuggest();
+        assertSuggestionSize(suggest, 0, 0, "did_you_mean");
+        assertThat(suggest.getSuggestion("did_you_mean").getEntries().get(0).getText().string(), equalTo("tetsting sugestion"));
+
+        // finally indexing a document that will produce some meaningful suggestion
+        index("test", "type1", "1", "name", "Just testing the suggestions api");
+        refresh();
+
+        searchResponse = client().prepareSearch()
                 .setSize(0)
                 .suggest(
                         new SuggestBuilder().setGlobalText("tetsting sugestion").addSuggestion("did_you_mean",
@@ -769,7 +827,9 @@ public void testEmptyShards() throws IOException, InterruptedException {
                 .get();
 
         assertNoFailures(searchResponse);
-        assertSuggestion(searchResponse.getSuggest(), 0, 0, "did_you_mean", "testing suggestions");
+        suggest = searchResponse.getSuggest();
+        assertSuggestionSize(suggest, 0, 3, "did_you_mean");
+        assertSuggestion(suggest, 0, 0, "did_you_mean", "testing suggestions");
     }
 
     /**
