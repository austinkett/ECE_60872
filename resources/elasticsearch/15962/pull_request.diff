diff --git a/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java b/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java
index 27170e8d6c71..e88a05b99cb2 100644
--- a/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java
+++ b/src/main/java/org/elasticsearch/search/fetch/matchedqueries/MatchedQueriesFetchSubPhase.java
@@ -104,7 +104,7 @@ private void addMatchedQueries(HitContext hitContext, ImmutableMap<String, Filte
                     if (filterIterator != null && docAndNestedDocsIterator != null) {
                         int matchedDocId = -1;
                         for (int docId = docAndNestedDocsIterator.nextDoc(); docId < DocIdSetIterator.NO_MORE_DOCS; docId = docAndNestedDocsIterator.nextDoc()) {
-                            if (docId != matchedDocId) {
+                            if (docId > matchedDocId) {
                                 matchedDocId = filterIterator.advance(docId);
                             }
                             if (matchedDocId == docId) {
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
index 338669ec1450..5e391b59798e 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
@@ -43,6 +43,7 @@
 import org.junit.Test;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 
@@ -791,7 +792,7 @@ public void testNestedFetchFeatures() {
         assertThat(version, equalTo(1l));
 
         // Can't use named queries for the same reason explain doesn't work:
-        assertThat(searchHit.matchedQueries(), emptyArray());
+        assertThat(Arrays.asList(searchHit.matchedQueries()), equalTo(Arrays.asList("test")));
 
         SearchHitField field = searchHit.field("comments.user");
         assertThat(field.getValue().toString(), equalTo("a"));
diff --git a/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesTests.java b/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesTests.java
index 91d78b519c29..8712a8f736d5 100644
--- a/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesTests.java
+++ b/src/test/java/org/elasticsearch/search/matchedqueries/MatchedQueriesTests.java
@@ -24,8 +24,13 @@
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.search.SearchHit;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
+import org.elasticsearch.test.hamcrest.ElasticsearchAssertions;
 import org.junit.Test;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
 import static org.elasticsearch.index.query.FilterBuilders.*;
 import static org.elasticsearch.index.query.QueryBuilders.*;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
@@ -376,4 +381,24 @@ public void testMatchedWithWrapperQuery() throws Exception {
             assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("abc"));
         }
     }
+
+    public void test15949() {
+        client().admin().indices().prepareCreate("test")
+            .setSettings("index.number_of_shards", 1)
+            .addMapping("test", "children", "type=nested")
+            .get();
+        client().prepareIndex("test", "test", "1").setSource("foo", "bar", "children", Arrays.asList(Collections.singletonMap("a", "b"))).get();
+        client().prepareIndex("test", "test", "2").setSource().get();
+        client().prepareIndex("test", "test", "2").setSource().get();
+        refresh();
+        SearchResponse searchResponse = client().prepareSearch()
+                .setQuery(QueryBuilders.boolQuery()
+                        .should(QueryBuilders.matchAllQuery())
+                        .should(QueryBuilders.boolQuery()
+                                .queryName("abc")
+                                .should(QueryBuilders.matchQuery("foo", "bar"))
+                                .should(QueryBuilders.matchQuery("foo", "bar"))))
+                .get();
+        ElasticsearchAssertions.assertNoFailures(searchResponse);
+    }
 }
