diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
index c4fc4f15f406..072a6e14c4a3 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
@@ -189,7 +189,7 @@ public ZenDiscovery(Settings settings, ThreadPool threadPool,
         this.masterFD = new MasterFaultDetection(settings, threadPool, transportService, clusterService);
         this.masterFD.addListener(new MasterNodeFailureListener());
 
-        this.nodesFD = new NodesFaultDetection(settings, threadPool, transportService, clusterService.getClusterName());
+        this.nodesFD = new NodesFaultDetection(settings, threadPool, transportService, clusterService.getClusterName(), clusterService);
         this.nodesFD.addListener(new NodeFaultDetectionListener());
 
         this.publishClusterState =
@@ -216,7 +216,6 @@ public void setAllocationService(AllocationService allocationService) {
 
     @Override
     protected void doStart() {
-        nodesFD.setLocalNode(clusterService.localNode());
         joinThreadControl.start();
         pingService.start();
         this.nodeJoinController = new NodeJoinController(clusterService, allocationService, electMaster, discoverySettings, settings);
diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/fd/FaultDetection.java b/core/src/main/java/org/elasticsearch/discovery/zen/fd/FaultDetection.java
index 1cfd46634a52..958feb81d129 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/fd/FaultDetection.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/FaultDetection.java
@@ -20,6 +20,7 @@
 
 import org.elasticsearch.cluster.ClusterName;
 import org.elasticsearch.cluster.node.DiscoveryNode;
+import org.elasticsearch.cluster.service.ClusterService;
 import org.elasticsearch.common.component.AbstractComponent;
 import org.elasticsearch.common.settings.Setting;
 import org.elasticsearch.common.settings.Setting.Property;
@@ -51,6 +52,7 @@
     protected final ThreadPool threadPool;
     protected final ClusterName clusterName;
     protected final TransportService transportService;
+    protected final ClusterService clusterService;
 
     // used mainly for testing, should always be true
     protected final boolean registerConnectionListener;
@@ -61,11 +63,13 @@
     protected final TimeValue pingRetryTimeout;
     protected final int pingRetryCount;
 
-    public FaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterName clusterName) {
+    public FaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterName clusterName,
+                          ClusterService clusterService) {
         super(settings);
         this.threadPool = threadPool;
         this.transportService = transportService;
         this.clusterName = clusterName;
+        this.clusterService = clusterService;
 
         this.connectOnNetworkDisconnect = CONNECT_ON_NETWORK_DISCONNECT_SETTING.get(settings);
         this.pingInterval = PING_INTERVAL_SETTING.get(settings);
diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
index 6dc89998046c..50e76edba1a5 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
@@ -64,7 +64,6 @@
 
     }
 
-    private final ClusterService clusterService;
     private final CopyOnWriteArrayList<Listener> listeners = new CopyOnWriteArrayList<>();
 
     private volatile MasterPinger masterPinger;
@@ -79,8 +78,7 @@
 
     public MasterFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService,
                                 ClusterService clusterService) {
-        super(settings, threadPool, transportService, clusterService.getClusterName());
-        this.clusterService = clusterService;
+        super(settings, threadPool, transportService, clusterService.getClusterName(), clusterService);
 
         logger.debug("[master] uses ping_interval [{}], ping_timeout [{}], ping_retries [{}]", pingInterval, pingRetryTimeout,
             pingRetryCount);
diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java b/core/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java
index 40eb36cec1f1..a3029b7abc71 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/fd/NodesFaultDetection.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.cluster.ClusterName;
 import org.elasticsearch.cluster.ClusterState;
 import org.elasticsearch.cluster.node.DiscoveryNode;
+import org.elasticsearch.cluster.service.ClusterService;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.Settings;
@@ -67,10 +68,9 @@ public void onPingReceived(PingRequest pingRequest) {}
 
     private volatile long clusterStateVersion = ClusterState.UNKNOWN_VERSION;
 
-    private volatile DiscoveryNode localNode;
-
-    public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterName clusterName) {
-        super(settings, threadPool, transportService, clusterName);
+    public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportService transportService, ClusterName clusterName,
+                               ClusterService clusterService) {
+        super(settings, threadPool, transportService, clusterName, clusterService);
 
         logger.debug("[node  ] uses ping_interval [{}], ping_timeout [{}], ping_retries [{}]", pingInterval, pingRetryTimeout,
             pingRetryCount);
@@ -79,10 +79,6 @@ public NodesFaultDetection(Settings settings, ThreadPool threadPool, TransportSe
             PING_ACTION_NAME, PingRequest::new, ThreadPool.Names.SAME, false, false, new PingRequestHandler());
     }
 
-    public void setLocalNode(DiscoveryNode localNode) {
-        this.localNode = localNode;
-    }
-
     public void addListener(Listener listener) {
         listeners.add(listener);
     }
@@ -102,8 +98,9 @@ public void updateNodesAndPing(ClusterState clusterState) {
                 nodesFD.remove(monitoredNode);
             }
         }
-        // add any missing nodes
 
+        // add any missing nodes
+        final DiscoveryNode localNode = clusterService.localNode();
         for (DiscoveryNode node : clusterState.nodes()) {
             if (node.equals(localNode)) {
                 // no need to monitor the local node
@@ -209,7 +206,7 @@ public void run() {
             if (!running()) {
                 return;
             }
-            final PingRequest pingRequest = new PingRequest(node, clusterName, localNode, clusterStateVersion);
+            final PingRequest pingRequest = new PingRequest(node, clusterName, clusterService.localNode(), clusterStateVersion);
             final TransportRequestOptions options = TransportRequestOptions.builder().withType(TransportRequestOptions.Type.PING)
                 .withTimeout(pingRetryTimeout).build();
             transportService.sendRequest(node, PING_ACTION_NAME, pingRequest, options, new TransportResponseHandler<PingResponse>() {
@@ -273,6 +270,7 @@ public String executor() {
         public void messageReceived(PingRequest request, TransportChannel channel) throws Exception {
             // if we are not the node we are supposed to be pinged, send an exception
             // this can happen when a kill -9 is sent, and another node is started using the same port
+            final DiscoveryNode localNode = clusterService.localNode();
             if (!localNode.equals(request.targetNode())) {
                 throw new IllegalStateException("Got pinged as node " + request.targetNode() + "], but I am node " + localNode );
             }
@@ -284,6 +282,16 @@ public void messageReceived(PingRequest request, TransportChannel channel) throw
                     + clusterName + "]");
             }
 
+            final DiscoveryNode currentMasterNode = clusterService.state().nodes().getMasterNode();
+            if (currentMasterNode != null
+                    && request.masterNode != null
+                    && currentMasterNode.equals(request.masterNode) == false) {
+                // this node has a different node as master than the one that sent this ping message, so notify
+                // the sending node that this node does not believe it to be the master
+                throw new IllegalStateException("Got pinged by node [" + request.masterNode + "] but I believe master to be ["
+                                                    + currentMasterNode + "]");
+            }
+
             notifyPingReceived(request);
 
             channel.sendResponse(new PingResponse());
diff --git a/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java b/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
index b1b7749d88c2..1398c86151e9 100644
--- a/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
+++ b/core/src/test/java/org/elasticsearch/discovery/ZenFaultDetectionTests.java
@@ -61,6 +61,7 @@
 import static java.util.Collections.singleton;
 import static org.elasticsearch.test.ClusterServiceUtils.createClusterService;
 import static org.elasticsearch.test.ClusterServiceUtils.setState;
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 
@@ -172,16 +173,10 @@ private DiscoveryNodes buildNodesForB(boolean master) {
     }
 
     public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException {
-        Settings.Builder settings = Settings.builder();
-        boolean shouldRetry = randomBoolean();
-        // make sure we don't ping again after the initial ping
-        settings.put(FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING.getKey(), shouldRetry)
-                .put(FaultDetection.PING_INTERVAL_SETTING.getKey(), "5m");
-        ClusterState clusterState = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build();
-        NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName());
-        nodesFDA.setLocalNode(nodeA);
-        NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName());
-        nodesFDB.setLocalNode(nodeB);
+        final boolean shouldRetry = randomBoolean();
+        final Tuple<NodesFaultDetection, NodesFaultDetection> nodesFDs = setupNodesFaultDetections(shouldRetry, false);
+        final NodesFaultDetection nodesFDA = nodesFDs.v1();
+        final NodesFaultDetection nodesFDB = nodesFDs.v2();
         final CountDownLatch pingSent = new CountDownLatch(1);
         nodesFDB.addListener(new NodesFaultDetection.Listener() {
             @Override
@@ -189,7 +184,7 @@ public void onPingReceived(NodesFaultDetection.PingRequest pingRequest) {
                 pingSent.countDown();
             }
         });
-        nodesFDA.updateNodesAndPing(clusterState);
+        nodesFDA.updateNodesAndPing(clusterServiceA.state());
 
         // wait for the first ping to go out, so we will really respond to a disconnect event rather then
         // the ping failing
@@ -222,6 +217,34 @@ public void onNodeFailure(DiscoveryNode node, String reason) {
         assertThat(failureReason[0], matcher);
     }
 
+    public void testNodesFaultDetectionPingFromStaleMaster() throws InterruptedException {
+        // passing true for isBAlsoMaster because two nodes think they are master in this scenario
+        final Tuple<NodesFaultDetection, NodesFaultDetection> nodesFDs = setupNodesFaultDetections(randomBoolean(), true);
+        final NodesFaultDetection nodesFDA = nodesFDs.v1();
+
+        final String[] failureReason = new String[1];
+        final DiscoveryNode[] failureNode = new DiscoveryNode[1];
+        final CountDownLatch notified = new CountDownLatch(1);
+        nodesFDA.addListener(new NodesFaultDetection.Listener() {
+            @Override
+            public void onNodeFailure(DiscoveryNode node, String reason) {
+                failureNode[0] = node;
+                failureReason[0] = reason;
+                notified.countDown();
+            }
+        });
+        nodesFDA.updateNodesAndPing(clusterServiceA.state());
+
+        // wait till the response arrives to node A
+        notified.await(30, TimeUnit.SECONDS);
+
+        CircuitBreaker inFlightRequestsBreaker = circuitBreakerService.getBreaker(CircuitBreaker.IN_FLIGHT_REQUESTS);
+        assertThat(inFlightRequestsBreaker.getTrippedCount(), equalTo(0L));
+
+        assertEquals(nodeB, failureNode[0]);
+        assertThat(failureReason[0], containsString("failed to ping"));
+    }
+
     public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException {
         Settings.Builder settings = Settings.builder();
         boolean shouldRetry = randomBoolean();
@@ -301,6 +324,22 @@ public void testMasterFaultDetectionNotSizeLimited() throws InterruptedException
         assertThat(pingProbeB.completedPings(), greaterThanOrEqualTo(minExpectedPings));
     }
 
+    private Tuple<NodesFaultDetection, NodesFaultDetection> setupNodesFaultDetections(boolean shouldRetry, boolean isBAlsoMaster) {
+        Settings.Builder settings = Settings.builder();
+        // make sure we don't ping again after the initial ping
+        settings.put(FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING.getKey(), shouldRetry)
+            .put(FaultDetection.PING_INTERVAL_SETTING.getKey(), "5m");
+        ClusterState clusterStateA = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build();
+        ClusterState clusterStateB = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForB(isBAlsoMaster)).build();
+        setState(clusterServiceA, clusterStateA);
+        setState(clusterServiceB, clusterStateB);
+        NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterStateA.getClusterName(),
+                                                                  clusterServiceA);
+        NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterStateB.getClusterName(),
+                                                                  clusterServiceB);
+        return Tuple.tuple(nodesFDA, nodesFDB);
+    }
+
     private static class PingProbe extends MockTransportService.Tracer {
         private final Set<Tuple<DiscoveryNode, Long>> inflightPings = Collections.newSetFromMap(new ConcurrentHashMap<>());
         private final Set<Tuple<DiscoveryNode, Long>> completedPings = Collections.newSetFromMap(new ConcurrentHashMap<>());
