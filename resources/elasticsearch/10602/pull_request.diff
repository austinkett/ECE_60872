diff --git a/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java
index 88a730b3ab6d..b8710bd3ad04 100644
--- a/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java
+++ b/src/main/java/org/elasticsearch/search/suggest/context/GeolocationContextMapping.java
@@ -601,7 +601,9 @@ public GeolocationContextMapping build() {
             if(precisions.isEmpty()) {
                 precisions.add(GeoHashUtils.PRECISION);
             }
-            return new GeolocationContextMapping(name, precisions.toArray(), neighbors, defaultLocations, fieldName);
+            int[] precisionArray = precisions.toArray();
+            Arrays.sort(precisionArray);
+            return new GeolocationContextMapping(name, precisionArray, neighbors, defaultLocations, fieldName);
         }
 
     }
diff --git a/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java b/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java
index c3d33e55dae2..cec797108041 100644
--- a/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java
+++ b/src/test/java/org/elasticsearch/search/suggest/ContextSuggestSearchTests.java
@@ -24,8 +24,10 @@
 import org.elasticsearch.action.suggest.SuggestRequest;
 import org.elasticsearch.action.suggest.SuggestRequestBuilder;
 import org.elasticsearch.action.suggest.SuggestResponse;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.geo.GeoHashUtils;
 import org.elasticsearch.common.geo.GeoPoint;
+import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.unit.Fuzziness;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.mapper.MapperParsingException;
@@ -153,7 +155,43 @@ public void testMultiLevelGeo() throws Exception {
             assertEquals("Hotel Amsterdam in Berlin", suggestResponse.getSuggest().getSuggestion(suggestionName).iterator().next()
                     .getOptions().iterator().next().getText().string()); 
         }
-    }    
+    }
+
+    @Test
+    public void testMappingIdempotency() throws Exception {
+        List<Integer> precisions = new ArrayList<>();
+        for (int i = 0; i < randomIntBetween(4, 12); i++) {
+            precisions.add(i+1);
+        }
+        Collections.shuffle(precisions, getRandom());
+        XContentBuilder mapping = jsonBuilder().startObject().startObject(TYPE)
+                .startObject("properties").startObject("completion")
+                .field("type", "completion")
+                .startObject("context")
+                .startObject("location")
+                .field("type", "geo")
+                .array("precision", precisions.toArray(new Integer[precisions.size()]))
+                .endObject()
+                .endObject().endObject()
+                .endObject().endObject();
+
+        assertAcked(prepareCreate(INDEX).addMapping(TYPE, mapping.string()));
+        ensureYellow();
+
+        Collections.shuffle(precisions, getRandom());
+        mapping = jsonBuilder().startObject().startObject(TYPE)
+                .startObject("properties").startObject("completion")
+                .field("type", "completion")
+                .startObject("context")
+                .startObject("location")
+                .field("type", "geo")
+                .array("precision", precisions.toArray(new Integer[precisions.size()]))
+                .endObject()
+                .endObject().endObject()
+                .endObject().endObject();
+        assertAcked(client().admin().indices().preparePutMapping(INDEX).setType(TYPE).setSource(mapping.string()).get());
+    }
+
 
     @Test
     public void testGeoField() throws Exception {
