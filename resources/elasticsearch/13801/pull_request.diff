diff --git a/core/src/main/java/org/elasticsearch/index/flush/FlushStats.java b/core/src/main/java/org/elasticsearch/index/flush/FlushStats.java
index 0566442c1897..a1d18c13506b 100644
--- a/core/src/main/java/org/elasticsearch/index/flush/FlushStats.java
+++ b/core/src/main/java/org/elasticsearch/index/flush/FlushStats.java
@@ -50,6 +50,10 @@ public void add(long total, long totalTimeInMillis) {
     }
 
     public void add(FlushStats flushStats) {
+        addTotals(flushStats);
+    }
+
+    public void addTotals(FlushStats flushStats) {
         if (flushStats == null) {
             return;
         }
diff --git a/core/src/main/java/org/elasticsearch/index/get/GetStats.java b/core/src/main/java/org/elasticsearch/index/get/GetStats.java
index fa7730c21d73..876c9ac565a5 100644
--- a/core/src/main/java/org/elasticsearch/index/get/GetStats.java
+++ b/core/src/main/java/org/elasticsearch/index/get/GetStats.java
@@ -51,6 +51,14 @@ public GetStats(long existsCount, long existsTimeInMillis, long missingCount, lo
     }
 
     public void add(GetStats stats) {
+        if (stats == null) {
+            return;
+        }
+        current += stats.current;
+        addTotals(stats);
+    }
+
+    public void addTotals(GetStats stats) {
         if (stats == null) {
             return;
         }
diff --git a/core/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java b/core/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java
index af4add913299..3df62994f961 100644
--- a/core/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java
+++ b/core/src/main/java/org/elasticsearch/index/indexing/IndexingStats.java
@@ -232,7 +232,7 @@ public void add(IndexingStats indexingStats, boolean includeTypes) {
         if (indexingStats == null) {
             return;
         }
-        totalStats.add(indexingStats.totalStats);
+        addTotals(indexingStats);
         if (includeTypes && indexingStats.typeStats != null && !indexingStats.typeStats.isEmpty()) {
             if (typeStats == null) {
                 typeStats = new HashMap<>(indexingStats.typeStats.size());
@@ -248,6 +248,13 @@ public void add(IndexingStats indexingStats, boolean includeTypes) {
         }
     }
 
+    public void addTotals(IndexingStats indexingStats) {
+        if (indexingStats == null) {
+            return;
+        }
+        totalStats.add(indexingStats.totalStats);
+    }
+
     public Stats getTotal() {
         return this.totalStats;
     }
diff --git a/core/src/main/java/org/elasticsearch/index/merge/MergeStats.java b/core/src/main/java/org/elasticsearch/index/merge/MergeStats.java
index 055558cc5631..bcacb3516da5 100644
--- a/core/src/main/java/org/elasticsearch/index/merge/MergeStats.java
+++ b/core/src/main/java/org/elasticsearch/index/merge/MergeStats.java
@@ -76,6 +76,17 @@ public void add(long totalMerges, long totalMergeTime, long totalNumDocs, long t
     }
 
     public void add(MergeStats mergeStats) {
+        if (mergeStats == null) {
+            return;
+        }
+        this.current += mergeStats.current;
+        this.currentNumDocs += mergeStats.currentNumDocs;
+        this.currentSizeInBytes += mergeStats.currentSizeInBytes;
+
+        addTotals(mergeStats);
+    }
+
+    public void addTotals(MergeStats mergeStats) {
         if (mergeStats == null) {
             return;
         }
@@ -83,9 +94,6 @@ public void add(MergeStats mergeStats) {
         this.totalTimeInMillis += mergeStats.totalTimeInMillis;
         this.totalNumDocs += mergeStats.totalNumDocs;
         this.totalSizeInBytes += mergeStats.totalSizeInBytes;
-        this.current += mergeStats.current;
-        this.currentNumDocs += mergeStats.currentNumDocs;
-        this.currentSizeInBytes += mergeStats.currentSizeInBytes;
         this.totalStoppedTimeInMillis += mergeStats.totalStoppedTimeInMillis;
         this.totalThrottledTimeInMillis += mergeStats.totalThrottledTimeInMillis;
         if (this.totalBytesPerSecAutoThrottle == Long.MAX_VALUE || mergeStats.totalBytesPerSecAutoThrottle == Long.MAX_VALUE) {
diff --git a/core/src/main/java/org/elasticsearch/index/recovery/RecoveryStats.java b/core/src/main/java/org/elasticsearch/index/recovery/RecoveryStats.java
index 38ea3402b5da..3f512b3e123d 100644
--- a/core/src/main/java/org/elasticsearch/index/recovery/RecoveryStats.java
+++ b/core/src/main/java/org/elasticsearch/index/recovery/RecoveryStats.java
@@ -47,15 +47,11 @@ public void add(RecoveryStats recoveryStats) {
         if (recoveryStats != null) {
             this.currentAsSource.addAndGet(recoveryStats.currentAsSource());
             this.currentAsTarget.addAndGet(recoveryStats.currentAsTarget());
-            this.throttleTimeInNanos.addAndGet(recoveryStats.throttleTime().nanos());
         }
+        addTotals(recoveryStats);
     }
 
-    /**
-     * add statistics that should be accumulated about old shards after they have been
-     * deleted or relocated
-     */
-    public void addAsOld(RecoveryStats recoveryStats) {
+    public void addTotals(RecoveryStats recoveryStats) {
         if (recoveryStats != null) {
             this.throttleTimeInNanos.addAndGet(recoveryStats.throttleTime().nanos());
         }
diff --git a/core/src/main/java/org/elasticsearch/index/refresh/RefreshStats.java b/core/src/main/java/org/elasticsearch/index/refresh/RefreshStats.java
index e98a0290ea68..4ef6e9dbb315 100644
--- a/core/src/main/java/org/elasticsearch/index/refresh/RefreshStats.java
+++ b/core/src/main/java/org/elasticsearch/index/refresh/RefreshStats.java
@@ -50,6 +50,10 @@ public void add(long total, long totalTimeInMillis) {
     }
 
     public void add(RefreshStats refreshStats) {
+        addTotals(refreshStats);
+    }
+
+    public void addTotals(RefreshStats refreshStats) {
         if (refreshStats == null) {
             return;
         }
diff --git a/core/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java b/core/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java
index 2d3ee81d0ce4..c35a4cdbadb9 100644
--- a/core/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java
+++ b/core/src/main/java/org/elasticsearch/index/search/stats/SearchStats.java
@@ -221,7 +221,7 @@ public void add(SearchStats searchStats, boolean includeTypes) {
         if (searchStats == null) {
             return;
         }
-        totalStats.add(searchStats.totalStats);
+        addTotals(searchStats);
         openContexts += searchStats.openContexts;
         if (includeTypes && searchStats.groupStats != null && !searchStats.groupStats.isEmpty()) {
             if (groupStats == null) {
@@ -238,6 +238,13 @@ public void add(SearchStats searchStats, boolean includeTypes) {
         }
     }
 
+    public void addTotals(SearchStats searchStats) {
+        if (searchStats == null) {
+            return;
+        }
+        totalStats.add(searchStats.totalStats);
+    }
+
     public Stats getTotal() {
         return this.totalStats;
     }
diff --git a/core/src/main/java/org/elasticsearch/indices/IndicesService.java b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
index 9cb8ec816340..7df98be3cdcd 100644
--- a/core/src/main/java/org/elasticsearch/indices/IndicesService.java
+++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
@@ -446,13 +446,13 @@ private void removeIndex(String index, String reason, boolean delete) {
         public synchronized void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard,
                                                         @IndexSettings Settings indexSettings) {
             if (indexShard != null) {
-                getStats.add(indexShard.getStats());
-                indexingStats.add(indexShard.indexingStats(), false);
-                searchStats.add(indexShard.searchStats(), false);
-                mergeStats.add(indexShard.mergeStats());
-                refreshStats.add(indexShard.refreshStats());
-                flushStats.add(indexShard.flushStats());
-                recoveryStats.addAsOld(indexShard.recoveryStats());
+                getStats.addTotals(indexShard.getStats());
+                indexingStats.addTotals(indexShard.indexingStats());
+                searchStats.addTotals(indexShard.searchStats());
+                mergeStats.addTotals(indexShard.mergeStats());
+                refreshStats.addTotals(indexShard.refreshStats());
+                flushStats.addTotals(indexShard.flushStats());
+                recoveryStats.addTotals(indexShard.recoveryStats());
             }
         }
     }
