diff --git a/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java
index 3991a37a8bf2..403a1290546d 100644
--- a/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java
+++ b/core/src/main/java/org/elasticsearch/index/fielddata/ScriptDocValues.java
@@ -291,4 +291,38 @@ public double geohashDistanceWithDefault(String geohash, double defaultValue) {
             return geohashDistance(geohash);
         }
     }
+
+    final class Booleans extends AbstractList<Boolean> implements ScriptDocValues<Boolean> {
+
+        private final SortedNumericDocValues values;
+
+        public Booleans(SortedNumericDocValues values) {
+            this.values = values;
+        }
+
+        @Override
+        public void setNextDocId(int docId) {
+            values.setDocument(docId);
+        }
+
+        @Override
+        public List<Boolean> getValues() {
+            return this;
+        }
+
+        public boolean getValue() {
+            return values.count() != 0 && values.valueAt(0) == 1;
+        }
+
+        @Override
+        public Boolean get(int index) {
+            return values.valueAt(index) == 1;
+        }
+
+        @Override
+        public int size() {
+            return values.count();
+        }
+
+    }
 }
diff --git a/core/src/main/java/org/elasticsearch/index/fielddata/plain/AtomicLongFieldData.java b/core/src/main/java/org/elasticsearch/index/fielddata/plain/AtomicLongFieldData.java
index b3b0604e9e21..c52ccb90bed8 100644
--- a/core/src/main/java/org/elasticsearch/index/fielddata/plain/AtomicLongFieldData.java
+++ b/core/src/main/java/org/elasticsearch/index/fielddata/plain/AtomicLongFieldData.java
@@ -19,28 +19,24 @@
 
 package org.elasticsearch.index.fielddata.plain;
 
-import org.apache.lucene.index.DocValues;
-import org.apache.lucene.index.SortedNumericDocValues;
-import org.apache.lucene.util.Accountable;
 import org.elasticsearch.index.fielddata.AtomicNumericFieldData;
 import org.elasticsearch.index.fielddata.FieldData;
 import org.elasticsearch.index.fielddata.ScriptDocValues;
 import org.elasticsearch.index.fielddata.SortedBinaryDocValues;
 import org.elasticsearch.index.fielddata.SortedNumericDoubleValues;
 
-import java.util.Collection;
-import java.util.Collections;
-
-
 /**
  * Specialization of {@link AtomicNumericFieldData} for integers.
  */
 abstract class AtomicLongFieldData implements AtomicNumericFieldData {
 
     private final long ramBytesUsed;
+    /** True if this numeric data is for a boolean field, and so only has values 0 and 1. */
+    private final boolean isBoolean;
 
-    AtomicLongFieldData(long ramBytesUsed) {
+    AtomicLongFieldData(long ramBytesUsed, boolean isBoolean) {
         this.ramBytesUsed = ramBytesUsed;
+        this.isBoolean = isBoolean;
     }
 
     @Override
@@ -50,7 +46,11 @@ public long ramBytesUsed() {
 
     @Override
     public final ScriptDocValues getScriptValues() {
-        return new ScriptDocValues.Longs(getLongValues());
+        if (isBoolean) {
+            return new ScriptDocValues.Booleans(getLongValues());
+        } else {
+            return new ScriptDocValues.Longs(getLongValues());
+        }
     }
 
     @Override
@@ -63,24 +63,6 @@ public final SortedNumericDoubleValues getDoubleValues() {
         return FieldData.castToDouble(getLongValues());
     }
 
-    public static AtomicNumericFieldData empty(final int maxDoc) {
-        return new AtomicLongFieldData(0) {
-
-            @Override
-            public SortedNumericDocValues getLongValues() {
-                return DocValues.emptySortedNumeric(maxDoc);
-            }
-
-            @Override
-            public Collection<Accountable> getChildResources() {
-                return Collections.emptyList();
-            }
-
-        };
-    }
-
     @Override
-    public void close() {
-    }
-
+    public void close() {}
 }
diff --git a/core/src/main/java/org/elasticsearch/index/fielddata/plain/SortedNumericDVIndexFieldData.java b/core/src/main/java/org/elasticsearch/index/fielddata/plain/SortedNumericDVIndexFieldData.java
index be877b9c68af..cf1fccabee0f 100644
--- a/core/src/main/java/org/elasticsearch/index/fielddata/plain/SortedNumericDVIndexFieldData.java
+++ b/core/src/main/java/org/elasticsearch/index/fielddata/plain/SortedNumericDVIndexFieldData.java
@@ -96,7 +96,7 @@ public AtomicNumericFieldData load(LeafReaderContext context) {
             case DOUBLE:
                 return new SortedNumericDoubleFieldData(reader, field);
             default:
-                return new SortedNumericLongFieldData(reader, field);
+                return new SortedNumericLongFieldData(reader, field, numericType == NumericType.BOOLEAN);
         }
     }
 
@@ -117,8 +117,8 @@ public AtomicNumericFieldData load(LeafReaderContext context) {
         final LeafReader reader;
         final String field;
 
-        SortedNumericLongFieldData(LeafReader reader, String field) {
-            super(0L);
+        SortedNumericLongFieldData(LeafReader reader, String field, boolean isBoolean) {
+            super(0L, isBoolean);
             this.reader = reader;
             this.field = field;
         }
diff --git a/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.txt b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.txt
index 3757e4fb76c6..19af8204f280 100644
--- a/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.txt
+++ b/modules/lang-painless/src/main/resources/org/elasticsearch/painless/org.elasticsearch.txt
@@ -101,6 +101,12 @@ class org.elasticsearch.index.fielddata.ScriptDocValues.GeoPoints -> org.elastic
   double geohashDistanceWithDefault(String,double)
 }
 
+class org.elasticsearch.index.fielddata.ScriptDocValues.Booleans -> org.elasticsearch.index.fielddata.ScriptDocValues$Booleans extends List,Collection,Iterable,Object {
+  Boolean get(int)
+  boolean getValue()
+  List getValues()
+}
+
 # for testing.
 # currently FeatureTest exposes overloaded constructor, field load store, and overloaded static methods
 class org.elasticsearch.painless.FeatureTest -> org.elasticsearch.painless.FeatureTest extends Object {
diff --git a/modules/lang-painless/src/test/resources/rest-api-spec/test/plan_a/30_search.yaml b/modules/lang-painless/src/test/resources/rest-api-spec/test/plan_a/30_search.yaml
index f1051ba71066..d92c0e41e6c9 100644
--- a/modules/lang-painless/src/test/resources/rest-api-spec/test/plan_a/30_search.yaml
+++ b/modules/lang-painless/src/test/resources/rest-api-spec/test/plan_a/30_search.yaml
@@ -6,19 +6,19 @@
             index: test
             type: test
             id: 1
-            body: { "test": "value beck", "num1": 1.0 }
+            body: { "test": "value beck", "num1": 1.0, "bool": true }
     - do:
         index:
             index: test
             type: test
             id: 2
-            body: { "test": "value beck", "num1": 2.0 }
+            body: { "test": "value beck", "num1": 2.0, "bool": false }
     - do:
         index:
             index: test
             type: test
             id: 3
-            body: { "test": "value beck", "num1": 3.0 }
+            body: { "test": "value beck", "num1": 3.0, "bool": true }
     - do:
         indices.refresh: {}
 
@@ -95,6 +95,19 @@
     - match: { hits.hits.1.fields.sNum1.0: 2.0 }
     - match: { hits.hits.2.fields.sNum1.0: 3.0 }
 
+    - do:
+        index: test
+        search:
+            body:
+                query:
+                    script:
+                        script:
+                            inline: "doc['bool'].value == false"
+                            lang: painless
+
+    - match: { hits.total: 1 }
+    - match: { hits.hits.0._id: "2" }
+
 ---
 
 "Custom Script Boost":
