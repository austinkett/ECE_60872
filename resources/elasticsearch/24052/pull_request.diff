diff --git a/core/src/main/java/org/elasticsearch/bootstrap/Security.java b/core/src/main/java/org/elasticsearch/bootstrap/Security.java
index de16bbe76aa4..c8ab627ab095 100644
--- a/core/src/main/java/org/elasticsearch/bootstrap/Security.java
+++ b/core/src/main/java/org/elasticsearch/bootstrap/Security.java
@@ -269,6 +269,9 @@ static void addFilePermissions(Permissions policy, Environment environment) {
         for (Path path : environment.dataFiles()) {
             addPath(policy, Environment.PATH_DATA_SETTING.getKey(), path, "read,readlink,write,delete");
         }
+        if (environment.defaultPathData() != null) {
+            addPath(policy, Environment.DEFAULT_PATH_DATA_SETTING.getKey(), environment.defaultPathData(), "read,readlink,write,delete");
+        }
         for (Path path : environment.repoFiles()) {
             addPath(policy, Environment.PATH_REPO_SETTING.getKey(), path, "read,readlink,write,delete");
         }
diff --git a/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java
index 8478a7906892..0e549dfc5db7 100644
--- a/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java
+++ b/core/src/main/java/org/elasticsearch/common/settings/ClusterSettings.java
@@ -311,6 +311,7 @@ public void apply(Settings value, Settings current, Settings previous) {
                     HunspellService.HUNSPELL_IGNORE_CASE,
                     HunspellService.HUNSPELL_DICTIONARY_OPTIONS,
                     IndicesStore.INDICES_STORE_DELETE_SHARD_TIMEOUT,
+                    Environment.DEFAULT_PATH_DATA_SETTING,
                     Environment.PATH_CONF_SETTING,
                     Environment.PATH_DATA_SETTING,
                     Environment.PATH_HOME_SETTING,
diff --git a/core/src/main/java/org/elasticsearch/env/Environment.java b/core/src/main/java/org/elasticsearch/env/Environment.java
index 4b544aa38820..ae64194a9599 100644
--- a/core/src/main/java/org/elasticsearch/env/Environment.java
+++ b/core/src/main/java/org/elasticsearch/env/Environment.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.env;
 
 import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.SuppressForbidden;
 import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.settings.Setting;
@@ -34,10 +35,14 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Objects;
+import java.util.Set;
 import java.util.function.Function;
+import java.util.stream.Collectors;
 
 import static org.elasticsearch.common.Strings.cleanPath;
 
@@ -53,6 +58,7 @@
     public static final Setting<String> PATH_SCRIPTS_SETTING = Setting.simpleString("path.scripts", Property.NodeScope);
     public static final Setting<List<String>> PATH_DATA_SETTING =
         Setting.listSetting("path.data", Collections.emptyList(), Function.identity(), Property.NodeScope);
+    public static final Setting<String> DEFAULT_PATH_DATA_SETTING = Setting.simpleString("default.path.data", Property.NodeScope);
     public static final Setting<String> PATH_LOGS_SETTING = Setting.simpleString("path.logs", Property.NodeScope);
     public static final Setting<List<String>> PATH_REPO_SETTING =
         Setting.listSetting("path.repo", Collections.emptyList(), Function.identity(), Property.NodeScope);
@@ -63,6 +69,9 @@
 
     private final Path[] dataFiles;
 
+    @Nullable
+    private final Path defaultPathData;
+
     private final Path[] dataWithClusterFiles;
 
     private final Path[] repoFiles;
@@ -138,9 +147,32 @@ public Environment(Settings settings) {
                 dataFiles[i] = PathUtils.get(dataPaths.get(i));
                 dataWithClusterFiles[i] = dataFiles[i].resolve(clusterName.value());
             }
+            if (DEFAULT_PATH_DATA_SETTING.exists(settings)) {
+                final String defaultPathDataValue = DEFAULT_PATH_DATA_SETTING.get(settings);
+                final Set<Path> dataFilesSet = Arrays.stream(dataFiles).collect(Collectors.toSet());
+                final Path defaultPathData = PathUtils.get(defaultPathDataValue);
+                if (dataFilesSet.size() == 1 && dataFilesSet.contains(defaultPathData)) {
+                    // default path data was used to set path data
+                    this.defaultPathData = null;
+                } else if (dataFilesSet.contains(defaultPathData)) {
+                    final String message = String.format(
+                            Locale.ROOT,
+                            "do not include default.path.data [%s] in path.data %s",
+                            defaultPathData,
+                            Arrays.toString(dataFiles));
+                    throw new IllegalStateException(message);
+                } else {
+                    this.defaultPathData = defaultPathData;
+                }
+            } else {
+                this.defaultPathData = null;
+            }
         } else {
             dataFiles = new Path[]{homeFile.resolve("data")};
             dataWithClusterFiles = new Path[]{homeFile.resolve("data").resolve(clusterName.value())};
+            assert !DEFAULT_PATH_DATA_SETTING.exists(settings)
+                    : "expected default.path.data to be unset but was [" + DEFAULT_PATH_DATA_SETTING.get(settings) + "]";
+            this.defaultPathData = null;
         }
         if (PATH_SHARED_DATA_SETTING.exists(settings)) {
             sharedDataFile = PathUtils.get(cleanPath(PATH_SHARED_DATA_SETTING.get(settings)));
@@ -194,6 +226,16 @@ public Settings settings() {
         return dataFiles;
     }
 
+    /**
+     * The default data path which is set only if default.path.data did not overwrite path.data.
+     *
+     * @return the default data path
+     */
+    @Nullable
+    public Path defaultPathData() {
+        return defaultPathData;
+    }
+
     /**
      * The shared data location
      */
diff --git a/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
index ab969b17d499..b138ef597143 100644
--- a/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
+++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
@@ -142,6 +142,7 @@ public String toString() {
     }
 
     private final NodePath[] nodePaths;
+    private final NodePath defaultNodePath;
     private final Path sharedDataPath;
     private final Lock[] locks;
 
@@ -179,6 +180,7 @@ public NodeEnvironment(Settings settings, Environment environment) throws IOExce
 
         if (!DiscoveryNode.nodeRequiresLocalStorage(settings)) {
             nodePaths = null;
+            defaultNodePath = null;
             sharedDataPath = null;
             locks = null;
             nodeLockId = -1;
@@ -187,7 +189,10 @@ public NodeEnvironment(Settings settings, Environment environment) throws IOExce
             return;
         }
         final NodePath[] nodePaths = new NodePath[environment.dataWithClusterFiles().length];
-        final Lock[] locks = new Lock[nodePaths.length];
+        NodePath defaultNodePath = null;
+        final int extra = environment.defaultPathData() == null ? 0 : 1;
+        final Lock[] locks = new Lock[nodePaths.length + extra];
+
         boolean success = false;
 
         // trace logger to debug issues before the default node name is derived from the node id
@@ -199,17 +204,27 @@ public NodeEnvironment(Settings settings, Environment environment) throws IOExce
             IOException lastException = null;
             int maxLocalStorageNodes = MAX_LOCAL_STORAGE_NODES_SETTING.get(settings);
             for (int possibleLockId = 0; possibleLockId < maxLocalStorageNodes; possibleLockId++) {
-                for (int dirIndex = 0; dirIndex < environment.dataFiles().length; dirIndex++) {
-                    Path dataDirWithClusterName = environment.dataWithClusterFiles()[dirIndex];
-                    Path dataDir = environment.dataFiles()[dirIndex];
+                for (int dirIndex = 0; dirIndex < environment.dataFiles().length + extra; dirIndex++) {
+                    final Path dataDir;
+                    if (dirIndex < environment.dataFiles().length) {
+                        dataDir = environment.dataFiles()[dirIndex];
+                    } else {
+                        dataDir = environment.defaultPathData();
+                    }
                     Path dir = dataDir.resolve(NODES_FOLDER).resolve(Integer.toString(possibleLockId));
                     Files.createDirectories(dir);
 
                     try (Directory luceneDir = FSDirectory.open(dir, NativeFSLockFactory.INSTANCE)) {
                         startupTraceLogger.trace("obtaining node lock on {} ...", dir.toAbsolutePath());
                         try {
-                            locks[dirIndex] = luceneDir.obtainLock(NODE_LOCK_FILENAME);
-                            nodePaths[dirIndex] = new NodePath(dir);
+                            if (dirIndex < environment.dataFiles().length) {
+                                locks[dirIndex] = luceneDir.obtainLock(NODE_LOCK_FILENAME);
+                                nodePaths[dirIndex] = new NodePath(dir);
+                            } else {
+                                assert dirIndex == environment.dataFiles().length;
+                                locks[dirIndex] = luceneDir.obtainLock(NODE_LOCK_FILENAME);
+                                defaultNodePath = new NodePath(dir);
+                            }
                             nodeLockId = possibleLockId;
                         } catch (LockObtainFailedException ex) {
                             startupTraceLogger.trace("failed to obtain node lock on {}", dir.toAbsolutePath());
@@ -244,15 +259,19 @@ public NodeEnvironment(Settings settings, Environment environment) throws IOExce
                     maxLocalStorageNodes);
                 throw new IllegalStateException(message, lastException);
             }
+
             this.nodeMetaData = loadOrCreateNodeMetaData(settings, startupTraceLogger, nodePaths);
             this.logger = Loggers.getLogger(getClass(), Node.addNodeNameIfNeeded(settings, this.nodeMetaData.nodeId()));
 
             this.nodeLockId = nodeLockId;
             this.locks = locks;
             this.nodePaths = nodePaths;
-
-            if (logger.isDebugEnabled()) {
-                logger.debug("using node location [{}], local_lock_id [{}]", nodePaths, nodeLockId);
+            if (environment.defaultPathData() == null) {
+                assert defaultNodePath == null;
+                this.defaultNodePath = null;
+            } else {
+                assert defaultNodePath != null;
+                this.defaultNodePath = defaultNodePath;
             }
 
             maybeLogPathDetails();
@@ -724,6 +743,14 @@ public String nodeId() {
         return nodePaths;
     }
 
+    public NodePath defaultNodePath() {
+        assertEnvIsLocked();
+        if (nodePaths == null || locks == null) {
+            throw new IllegalStateException("node is not configured to store local location");
+        }
+        return defaultNodePath;
+    }
+
     /**
      * Returns all index paths.
      */
@@ -764,19 +791,36 @@ public String nodeId() {
         assertEnvIsLocked();
         Set<String> indexFolders = new HashSet<>();
         for (NodePath nodePath : nodePaths) {
-            Path indicesLocation = nodePath.indicesPath;
-            if (Files.isDirectory(indicesLocation)) {
-                try (DirectoryStream<Path> stream = Files.newDirectoryStream(indicesLocation)) {
-                    for (Path index : stream) {
-                        if (Files.isDirectory(index)) {
-                            indexFolders.add(index.getFileName().toString());
-                        }
+            indexFolders.addAll(availableIndexFoldersForPath(nodePath));
+        }
+        return indexFolders;
+
+    }
+
+    /**
+     * Return all directory names in the nodes/{node.id}/indices directory for the given node path.
+     *
+     * @param nodePath the node path
+     * @return all directories that could be indices for the given node path.
+     * @throws IOException if an I/O exception occurs traversing the filesystem
+     */
+    public Set<String> availableIndexFoldersForPath(final NodePath nodePath) throws IOException {
+        if (nodePaths == null || locks == null) {
+            throw new IllegalStateException("node is not configured to store local location");
+        }
+        assertEnvIsLocked();
+        final Set<String> indexFolders = new HashSet<>();
+        Path indicesLocation = nodePath.indicesPath;
+        if (Files.isDirectory(indicesLocation)) {
+            try (DirectoryStream<Path> stream = Files.newDirectoryStream(indicesLocation)) {
+                for (Path index : stream) {
+                    if (Files.isDirectory(index)) {
+                        indexFolders.add(index.getFileName().toString());
                     }
                 }
             }
         }
         return indexFolders;
-
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java b/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java
index c61ffff7311a..994da9c63300 100644
--- a/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java
+++ b/core/src/main/java/org/elasticsearch/node/InternalSettingsPreparer.java
@@ -19,6 +19,14 @@
 
 package org.elasticsearch.node;
 
+import org.elasticsearch.cli.Terminal;
+import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.collect.Tuple;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.settings.SettingsException;
+import org.elasticsearch.env.Environment;
+
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -32,14 +40,6 @@
 import java.util.function.Predicate;
 import java.util.function.UnaryOperator;
 
-import org.elasticsearch.cli.Terminal;
-import org.elasticsearch.cluster.ClusterName;
-import org.elasticsearch.common.Strings;
-import org.elasticsearch.common.collect.Tuple;
-import org.elasticsearch.common.settings.Settings;
-import org.elasticsearch.common.settings.SettingsException;
-import org.elasticsearch.env.Environment;
-
 import static org.elasticsearch.common.Strings.cleanPath;
 
 public class InternalSettingsPreparer {
@@ -128,11 +128,22 @@ public static Environment prepareEnvironment(Settings input, Terminal terminal,
      * Initializes the builder with the given input settings, and loads system properties settings if allowed.
      * If loadDefaults is true, system property default settings are loaded.
      */
-    private static void initializeSettings(Settings.Builder output, Settings input, Map<String, String> esSettings) {
+    static void initializeSettings(Settings.Builder output, Settings input, Map<String, String> esSettings) {
         output.put(input);
         output.putProperties(esSettings,
-            PROPERTY_DEFAULTS_PREDICATE.and(key -> output.get(STRIP_PROPERTY_DEFAULTS_PREFIX.apply(key)) == null),
+                PROPERTY_DEFAULTS_PREDICATE
+                        .and(key -> output.get(STRIP_PROPERTY_DEFAULTS_PREFIX.apply(key)) == null)
+                        .and(key -> output.get(STRIP_PROPERTY_DEFAULTS_PREFIX.apply(key) + ".0") == null),
             STRIP_PROPERTY_DEFAULTS_PREFIX);
+        /*
+         * We have to treat default.path.data separately due to a bug in Elasticsearch 5.3.0 where if multiple path.data were specified as
+         * an array and default.path.data was configured then the settings were not properly merged. We need to preserve default.path.data
+         * so that we can detect this situation.
+         */
+        final String key = Environment.DEFAULT_PATH_DATA_SETTING.getKey();
+        if (esSettings.containsKey(key)) {
+            output.put(Environment.DEFAULT_PATH_DATA_SETTING.getKey(), esSettings.get(key));
+        }
         output.putProperties(esSettings, PROPERTY_DEFAULTS_PREDICATE.negate(), Function.identity());
         output.replacePropertyPlaceholders();
     }
diff --git a/core/src/main/java/org/elasticsearch/node/Node.java b/core/src/main/java/org/elasticsearch/node/Node.java
index bf65f5b94419..55c4f61e9adc 100644
--- a/core/src/main/java/org/elasticsearch/node/Node.java
+++ b/core/src/main/java/org/elasticsearch/node/Node.java
@@ -146,7 +146,9 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Consumer;
@@ -262,6 +264,9 @@ protected Node(final Environment environment, Collection<Class<? extends Plugin>
             Logger logger = Loggers.getLogger(Node.class, tmpSettings);
             final String nodeId = nodeEnvironment.nodeId();
             tmpSettings = addNodeNameIfNeeded(tmpSettings, nodeId);
+            if (DiscoveryNode.nodeRequiresLocalStorage(tmpSettings)) {
+                checkForIndexDataInDefaultPathData(nodeEnvironment, logger);
+            }
             // this must be captured after the node name is possibly added to the settings
             final String nodeName = NODE_NAME_SETTING.get(tmpSettings);
             if (hadPredefinedNodeName == false) {
@@ -500,6 +505,31 @@ protected Node(final Environment environment, Collection<Class<? extends Plugin>
         }
     }
 
+    static void checkForIndexDataInDefaultPathData(final NodeEnvironment nodeEnv, final Logger logger) throws IOException {
+        if (nodeEnv.defaultNodePath() == null) {
+            return;
+        }
+
+        final Set<String> availableIndexFolders = nodeEnv.availableIndexFoldersForPath(nodeEnv.defaultNodePath());
+        if (availableIndexFolders.isEmpty()) {
+            return;
+        }
+
+        final String message = String.format(
+                Locale.ROOT,
+                "detected index data in default.path.data [%s] where there should not be any",
+                nodeEnv.defaultNodePath().indicesPath);
+        logger.error(message);
+        for (final String availableIndexFolder : availableIndexFolders) {
+            logger.info(
+                    "index folder [{}] in default.path.data [{}] must be moved to any of {}",
+                    availableIndexFolder,
+                    nodeEnv.defaultNodePath().indicesPath,
+                    Arrays.stream(nodeEnv.nodePaths()).map(np -> np.indicesPath).collect(Collectors.toList()));
+        }
+        throw new IllegalStateException(message);
+    }
+
     // visible for testing
     static void warnIfPreRelease(final Version version, final boolean isSnapshot, final Logger logger) {
         if (!version.isRelease() || isSnapshot) {
diff --git a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
index 855ce83343b6..bb36e3045612 100644
--- a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
@@ -18,15 +18,24 @@
  */
 package org.elasticsearch.env;
 
+import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.test.ESTestCase;
 
 import java.io.IOException;
 import java.net.URL;
+import java.nio.file.Path;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.endsWith;
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.Matchers.hasToString;
 
 /**
  * Simple unit-tests for Environment.java
@@ -71,4 +80,53 @@ public void testRepositoryResolution() throws IOException {
         assertThat(environment.resolveRepoURL(new URL("jar:http://localhost/test/../repo1?blah!/repo/")), nullValue());
     }
 
+    public void testDefaultPathDataSet() {
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", "/mnt/zero")
+                .put("path.data.1", "/mnt/one")
+                .put("default.path.data", "/mnt/default")
+                .build();
+        final Environment environment = new Environment(settings);
+        final Set<Path> dataFiles = new HashSet<>(Arrays.asList(environment.dataFiles()));
+        assertThat(dataFiles, equalTo(new HashSet<>(Arrays.asList(PathUtils.get("/mnt/zero"), PathUtils.get("/mnt/one")))));
+        assertThat(environment.defaultPathData(), equalTo(PathUtils.get("/mnt/default")));
+    }
+
+    public void testDefaultPathDataDoesNotSet() {
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", "/mnt/zero")
+                .put("path.data.1", "/mnt/one")
+                .build();
+        final Environment environment = new Environment(settings);
+        final Set<Path> actual = new HashSet<>(Arrays.asList(environment.dataFiles()));
+        final HashSet<Path> expected = new HashSet<>(Arrays.asList(PathUtils.get("/mnt/zero"), PathUtils.get("/mnt/one")));
+        assertThat(actual, equalTo(expected));
+        assertNull(environment.defaultPathData());
+    }
+
+    public void testPathDataNotSet() {
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .build();
+        final Environment environment = new Environment(settings);
+        final Set<Path> actual = new HashSet<>(Arrays.asList(environment.dataFiles()));
+        final HashSet<Path> expected = new HashSet<>(Collections.singletonList(PathUtils.get("/home/data")));
+        assertThat(actual, equalTo(expected));
+        assertNull(environment.defaultPathData());
+    }
+
+    public void testPathDataContainsDefaultPathData() {
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", "/mnt/zero")
+                .put("path.data.1", "/mnt/one")
+                .put("path.data.2", "/mnt/default")
+                .put("default.path.data", "/mnt/default")
+                .build();
+        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> new Environment(settings));
+        assertThat(e, hasToString(containsString("do not include default.path.data [/mnt/default] in path.data")));
+    }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
index f067212caafe..ad147617d98d 100644
--- a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
@@ -37,6 +37,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -45,6 +46,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.Collectors;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.Matchers.arrayWithSize;
@@ -425,6 +427,41 @@ public void testPersistentNodeId() throws IOException {
         return locations;
     }
 
+    public void testDefaultPathData() throws IOException {
+        final Path zero = createTempDir().toAbsolutePath();
+        final Path one = createTempDir().toAbsolutePath();
+
+        final Settings.Builder builder = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", zero)
+                .put("path.data.1", one);
+        final boolean defaultPathDataSet = randomBoolean();
+        final Path defaultPathData;
+        if (defaultPathDataSet) {
+            defaultPathData = createTempDir().toAbsolutePath();
+            builder.put("default.path.data", defaultPathData);
+        } else {
+            defaultPathData = null;
+        }
+        try (NodeEnvironment nodeEnv = newNodeEnvironment(builder.build())) {
+            final Set<Path> actual = Arrays.stream(nodeEnv.nodePaths()).map(np -> np.path).collect(Collectors.toSet());
+            final Set<Path> expected = new HashSet<>(Arrays.asList(zero.resolve("nodes/0"), one.resolve("nodes/0")));
+            assertThat(actual, equalTo(expected));
+
+            if (defaultPathDataSet) {
+                assertThat(nodeEnv.defaultNodePath().path, equalTo(defaultPathData.resolve("nodes/0")));
+            }
+
+            for (final NodeEnvironment.NodePath nodePath : nodeEnv.nodePaths()) {
+                assertTrue(Files.exists(nodePath.path.resolve(NodeEnvironment.NODE_LOCK_FILENAME)));
+            }
+
+            if (defaultPathDataSet) {
+                assertTrue(Files.exists(nodeEnv.defaultNodePath().path.resolve(NodeEnvironment.NODE_LOCK_FILENAME)));
+            }
+        }
+    }
+
     @Override
     public String[] tmpPaths() {
         final int numPaths = randomIntBetween(1, 3);
diff --git a/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java b/core/src/test/java/org/elasticsearch/node/InternalSettingsPreparerTests.java
similarity index 87%
rename from core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java
rename to core/src/test/java/org/elasticsearch/node/InternalSettingsPreparerTests.java
index daaeab801436..2d67f20c33b2 100644
--- a/core/src/test/java/org/elasticsearch/node/internal/InternalSettingsPreparerTests.java
+++ b/core/src/test/java/org/elasticsearch/node/InternalSettingsPreparerTests.java
@@ -17,7 +17,7 @@
  * under the License.
  */
 
-package org.elasticsearch.node.internal;
+package org.elasticsearch.node;
 
 import org.elasticsearch.cli.MockTerminal;
 import org.elasticsearch.cluster.ClusterName;
@@ -28,7 +28,6 @@
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsException;
 import org.elasticsearch.env.Environment;
-import org.elasticsearch.node.InternalSettingsPreparer;
 import org.elasticsearch.test.ESTestCase;
 import org.junit.After;
 import org.junit.Before;
@@ -38,7 +37,6 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
 
@@ -196,4 +194,26 @@ public void testDefaultPropertiesOverride() throws Exception {
         Environment env = InternalSettingsPreparer.prepareEnvironment(baseEnvSettings, null, props);
         assertEquals("bar", env.settings().get("setting"));
     }
+
+    public void testDefaultWithArray() {
+        final Settings.Builder output = Settings.builder().put("foobar.0", "bar").put("foobar.1", "baz");
+        final Map<String, String> esSettings = Collections.singletonMap("default.foobar", "foo");
+        InternalSettingsPreparer.initializeSettings(output, Settings.EMPTY, esSettings);
+        final Settings settings = output.build();
+        assertThat(settings.get("foobar.0"), equalTo("bar"));
+        assertThat(settings.get("foobar.1"), equalTo("baz"));
+        assertNull(settings.get("foobar"));
+    }
+
+    public void testDefaultPathDataWithArray() {
+        final Settings.Builder output = Settings.builder().put("path.data.0", "/mnt/zero").put("path.data.1", "/mnt/one");
+        final Map<String, String> esSettings = Collections.singletonMap("default.path.data", "/mnt/default");
+        InternalSettingsPreparer.initializeSettings(output, Settings.EMPTY, esSettings);
+        final Settings settings = output.build();
+        assertThat(settings.get("path.data.0"), equalTo("/mnt/zero"));
+        assertThat(settings.get("path.data.1"), equalTo("/mnt/one"));
+        assertThat(settings.get("default.path.data"), equalTo("/mnt/default"));
+        assertNull(settings.get("path.data"));
+    }
+
 }
diff --git a/test/framework/src/main/java/org/elasticsearch/node/NodeTests.java b/test/framework/src/main/java/org/elasticsearch/node/NodeTests.java
index ae4aff917a97..24b8026b8a9e 100644
--- a/test/framework/src/main/java/org/elasticsearch/node/NodeTests.java
+++ b/test/framework/src/main/java/org/elasticsearch/node/NodeTests.java
@@ -22,23 +22,32 @@
 import org.elasticsearch.Version;
 import org.elasticsearch.bootstrap.BootstrapCheck;
 import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.common.UUIDs;
 import org.elasticsearch.common.network.NetworkModule;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.BoundTransportAddress;
 import org.elasticsearch.env.Environment;
+import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.transport.MockTcpTransportPlugin;
 
 import java.io.IOException;
+import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.hasToString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
@@ -165,6 +174,103 @@ public void testNodeAttributes() throws IOException {
         }
     }
 
+    public void testNodeConstructionWithDefaultPathDataSet() throws IOException {
+        final Path home = createTempDir().toAbsolutePath();
+        final Path zero = createTempDir().toAbsolutePath();
+        final Path one = createTempDir().toAbsolutePath();
+        final Path defaultPathData = createTempDir().toAbsolutePath();
+        final Settings settings = Settings.builder()
+                .put("path.home", home)
+                .put("path.data.0", zero)
+                .put("path.data.1", one)
+                .put("default.path.data", defaultPathData)
+                .put("http.enabled", false)
+                .put("transport.type", "mock-socket-network")
+                .build();
+        Files.createDirectories(defaultPathData.resolve("nodes/0"));
+        final boolean indexExists = randomBoolean();
+        if (indexExists) {
+            for (int i = 0; i < randomIntBetween(1, 3); i++) {
+                Files.createDirectories(defaultPathData.resolve("nodes/0/indices").resolve(UUIDs.randomBase64UUID()));
+            }
+        }
+        final Supplier<MockNode> constructor = () -> new MockNode(settings, Collections.singletonList(MockTcpTransportPlugin.class));
+        if (indexExists) {
+            final IllegalStateException e = expectThrows(IllegalStateException.class, constructor::get);
+            final String message = String.format(
+                    Locale.ROOT,
+                    "detected index data in default.path.data [%s] where there should not be any",
+                    defaultPathData.resolve("nodes/0/indices"));
+            assertThat(e, hasToString(containsString(message)));
+        } else {
+            try (Node ignored = constructor.get()) {
+                // node construction should be okay
+            }
+        }
+    }
+
+    public void testDefaultPathDataSet() throws IOException {
+        final Path zero = createTempDir().toAbsolutePath();
+        final Path one = createTempDir().toAbsolutePath();
+        final Path defaultPathData = createTempDir().toAbsolutePath();
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", zero)
+                .put("path.data.1", one)
+                .put("default.path.data", defaultPathData)
+                .build();
+        try (NodeEnvironment nodeEnv = new NodeEnvironment(settings, new Environment(settings))) {
+            final boolean indexExists = randomBoolean();
+            final List<String> indices;
+            if (indexExists) {
+                indices = IntStream.range(0, randomIntBetween(1, 3)).mapToObj(i -> UUIDs.randomBase64UUID()).collect(Collectors.toList());
+                for (final String index : indices) {
+                    Files.createDirectories(nodeEnv.defaultNodePath().indicesPath.resolve(index));
+                }
+            } else {
+                indices = Collections.emptyList();
+            }
+            final Logger mock = mock(Logger.class);
+            if (indexExists) {
+                final IllegalStateException e = expectThrows(
+                        IllegalStateException.class,
+                        () -> Node.checkForIndexDataInDefaultPathData(nodeEnv, mock));
+                final String message = String.format(
+                        Locale.ROOT,
+                        "detected index data in default.path.data [%s] where there should not be any",
+                        defaultPathData.resolve("nodes/0/indices"));
+                assertThat(e, hasToString(containsString(message)));
+                verify(mock).error(message);
+                for (final String index : indices) {
+                    verify(mock).info(
+                            "index folder [{}] in default.path.data [{}] must be moved to any of {}",
+                            index,
+                            nodeEnv.defaultNodePath().indicesPath,
+                            Arrays.stream(nodeEnv.nodePaths()).map(np -> np.indicesPath).collect(Collectors.toList()));
+                }
+                verifyNoMoreInteractions(mock);
+            } else {
+                Node.checkForIndexDataInDefaultPathData(nodeEnv, mock);
+                verifyNoMoreInteractions(mock);
+            }
+        }
+    }
+
+    public void testDefaultPathDataNotSet() throws IOException {
+        final Path zero = createTempDir().toAbsolutePath();
+        final Path one = createTempDir().toAbsolutePath();
+        final Settings settings = Settings.builder()
+                .put("path.home", "/home")
+                .put("path.data.0", zero)
+                .put("path.data.1", one)
+                .build();
+        try (NodeEnvironment nodeEnv = new NodeEnvironment(settings, new Environment(settings))) {
+            final Logger mock = mock(Logger.class);
+            Node.checkForIndexDataInDefaultPathData(nodeEnv, mock);
+            verifyNoMoreInteractions(mock);
+        }
+    }
+
     private static Settings.Builder baseSettings() {
         final Path tempDir = createTempDir();
         return Settings.builder()
