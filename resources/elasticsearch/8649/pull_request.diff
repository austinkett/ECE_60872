diff --git a/src/main/java/org/elasticsearch/index/query/QueryParserUtils.java b/src/main/java/org/elasticsearch/index/query/QueryParserUtils.java
index 7481c044cc04..558722f1daf3 100644
--- a/src/main/java/org/elasticsearch/index/query/QueryParserUtils.java
+++ b/src/main/java/org/elasticsearch/index/query/QueryParserUtils.java
@@ -35,7 +35,9 @@ private QueryParserUtils() {
     public static void ensureNotDeleteByQuery(String name, QueryParseContext parseContext) {
         SearchContext context = SearchContext.current();
         if (context == null) {
-            throw new QueryParsingException(parseContext.index(), "[" + name + "] query and filter requires a search context");
+            // We can't do the api check, because there is no search context.
+            // Because the delete by query shard transport action sets the search context this isn't an issue.
+            return;
         }
 
         if (TransportShardDeleteByQueryAction.DELETE_BY_QUERY_API.equals(context.source())) {
diff --git a/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java b/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java
index bb1347a6b8d4..49cd9130f248 100644
--- a/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java
+++ b/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java
@@ -57,6 +57,7 @@
 import static org.elasticsearch.client.Requests.indexRequest;
 import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;
 import static org.elasticsearch.index.query.FilterBuilders.*;
+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.rangeQuery;
 import static org.elasticsearch.test.hamcrest.CollectionAssertions.hasKey;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
@@ -883,12 +884,12 @@ public void testCreateIndexWithAliases() throws Exception {
     @Test
     public void testCreateIndexWithAliasesInSource() throws Exception {
         assertAcked(prepareCreate("test").setSource("{\n" +
-                        "    \"aliases\" : {\n" +
-                        "        \"alias1\" : {},\n" +
-                        "        \"alias2\" : {\"filter\" : {\"match_all\": {}}},\n" +
-                        "        \"alias3\" : { \"index_routing\" : \"index\", \"search_routing\" : \"search\"}\n" +
-                        "    }\n" +
-                        "}"));
+                "    \"aliases\" : {\n" +
+                "        \"alias1\" : {},\n" +
+                "        \"alias2\" : {\"filter\" : {\"match_all\": {}}},\n" +
+                "        \"alias3\" : { \"index_routing\" : \"index\", \"search_routing\" : \"search\"}\n" +
+                "    }\n" +
+                "}"));
 
         checkAliases();
     }
@@ -975,7 +976,17 @@ public void testAliasFilterWithNowInRangeFilterAndQuery() throws Exception {
             }
         }
     }
-    
+
+    @Test
+    public void testAliasesFilterWithHasChildQuery() throws Exception {
+        assertAcked(prepareCreate("my-index")
+                .addMapping("parent")
+                .addMapping("child", "_parent", "type=parent")
+        );
+        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter1", hasChildFilter("child", matchAllQuery())));
+        assertAcked(admin().indices().prepareAliases().addAlias("my-index", "filter2", hasParentFilter("child", matchAllQuery())));
+    }
+
     private void checkAliases() {
         GetAliasesResponse getAliasesResponse = admin().indices().prepareGetAliases("alias1").get();
         assertThat(getAliasesResponse.getAliases().get("test").size(), equalTo(1));
