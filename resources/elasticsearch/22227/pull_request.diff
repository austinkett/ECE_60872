diff --git a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
index d848ce15331c..1e3f96fbe2ce 100755
--- a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
@@ -153,7 +153,7 @@ public boolean hasNested() {
     }
 
     /**
-     * Returns true if the "_all" field is enabled for the type
+     * Returns true if the "_all" field is enabled on any type.
      */
     public boolean allEnabled() {
         return this.allEnabled;
@@ -377,7 +377,9 @@ private synchronized DocumentMapper merge(DocumentMapper mapper, MergeReason rea
         this.hasNested = hasNested;
         this.fullPathObjectMappers = fullPathObjectMappers;
         this.parentTypes = parentTypes;
-        this.allEnabled = mapper.allFieldMapper().enabled();
+        // this is only correct because types cannot be removed and we do not
+        // allow to disable an existing _all field
+        this.allEnabled |= mapper.allFieldMapper().enabled();
 
         assert assertSerialization(newMapper);
         assert assertMappersShareSameFieldType();
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
index 87afdedf89db..b32339b2357f 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/MapperServiceTests.java
@@ -215,4 +215,31 @@ public void testOtherDocumentMappersOnlyUpdatedWhenChangingFieldType() throws IO
         indexService.mapperService().merge("type3", normsDisabledMapping, MergeReason.MAPPING_UPDATE, true);
         assertNotSame(indexService.mapperService().documentMapper("type1"), documentMapper);
     }
+
+    public void testAllEnabled() throws Exception {
+        IndexService indexService = createIndex("test");
+        assertFalse(indexService.mapperService().allEnabled());
+
+        CompressedXContent enabledAll = new CompressedXContent(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", true)
+                .endObject().endObject().bytes());
+
+        CompressedXContent disabledAll = new CompressedXContent(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", false)
+                .endObject().endObject().bytes());
+
+        indexService.mapperService().merge(MapperService.DEFAULT_MAPPING, enabledAll,
+                MergeReason.MAPPING_UPDATE, random().nextBoolean());
+        assertFalse(indexService.mapperService().allEnabled()); // _default_ does not count
+
+        indexService.mapperService().merge("some_type", enabledAll,
+                MergeReason.MAPPING_UPDATE, random().nextBoolean());
+        assertTrue(indexService.mapperService().allEnabled());
+
+        indexService.mapperService().merge("other_type", disabledAll,
+                MergeReason.MAPPING_UPDATE, random().nextBoolean());
+        assertTrue(indexService.mapperService().allEnabled()); // this returns true if any of the types has _all enabled
+    }
 }
