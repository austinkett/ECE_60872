diff --git a/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java
index 5061206eb1db..bd8e90317716 100644
--- a/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/DisMaxQueryBuilder.java
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 
 /**
@@ -206,4 +207,11 @@ protected boolean doEquals(DisMaxQueryBuilder other) {
     public String getWriteableName() {
         return NAME;
     }
+
+    @Override
+    protected void extractInnerHitBuilders(Map<String, InnerHitBuilder> innerHits) {
+        for (QueryBuilder query : queries) {
+            InnerHitBuilder.extractInnerHits(query, innerHits);
+        }
+    }
 }
diff --git a/core/src/test/java/org/elasticsearch/index/query/InnerHitBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/InnerHitBuilderTests.java
index 9774af189dae..b46f3f3aa191 100644
--- a/core/src/test/java/org/elasticsearch/index/query/InnerHitBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/InnerHitBuilderTests.java
@@ -183,6 +183,25 @@ public void testInlineLeafInnerHitsNestedQueryViaBoolQuery() {
         assertThat(innerHitBuilders.get(leafInnerHits.getName()), notNullValue());
     }
 
+    public void testInlineLeafInnerHitsNestedQueryViaDisMaxQuery() {
+        InnerHitBuilder leafInnerHits1 = randomInnerHits();
+        NestedQueryBuilder nestedQueryBuilder = new NestedQueryBuilder("path", new MatchAllQueryBuilder(), ScoreMode.None)
+                .innerHit(leafInnerHits1, false);
+
+        InnerHitBuilder leafInnerHits2 = randomInnerHits();
+        HasChildQueryBuilder hasChildQueryBuilder = new HasChildQueryBuilder("type", new MatchAllQueryBuilder(), ScoreMode.None)
+                .innerHit(leafInnerHits2, false);
+
+        DisMaxQueryBuilder disMaxQueryBuilder = new DisMaxQueryBuilder();
+        disMaxQueryBuilder.add(nestedQueryBuilder);
+        disMaxQueryBuilder.add(hasChildQueryBuilder);
+        Map<String, InnerHitBuilder> innerHitBuilders = new HashMap<>();
+        disMaxQueryBuilder.extractInnerHitBuilders(innerHitBuilders);
+        assertThat(innerHitBuilders.size(), equalTo(2));
+        assertThat(innerHitBuilders.get(leafInnerHits1.getName()), notNullValue());
+        assertThat(innerHitBuilders.get(leafInnerHits2.getName()), notNullValue());
+    }
+
     public void testInlineLeafInnerHitsNestedQueryViaConstantScoreQuery() {
         InnerHitBuilder leafInnerHits = randomInnerHits();
         NestedQueryBuilder nestedQueryBuilder = new NestedQueryBuilder("path", new MatchAllQueryBuilder(), ScoreMode.None)
