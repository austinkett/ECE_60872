diff --git a/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java
index 030bf27af4b9..ff84f3edbb55 100644
--- a/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java
+++ b/core/src/main/java/org/elasticsearch/action/bulk/TransportShardBulkAction.java
@@ -21,6 +21,7 @@
 
 import org.apache.logging.log4j.message.ParameterizedMessage;
 import org.apache.logging.log4j.util.Supplier;
+import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.action.DocWriteRequest;
 import org.elasticsearch.action.DocWriteResponse;
 import org.elasticsearch.action.delete.DeleteRequest;
@@ -64,9 +65,6 @@
 import java.io.IOException;
 import java.util.Map;
 
-import static org.elasticsearch.action.support.replication.ReplicationOperation.ignoreReplicaException;
-import static org.elasticsearch.action.support.replication.ReplicationOperation.isConflictException;
-
 /** Performs shard-level bulk (index, delete or update) operations */
 public class TransportShardBulkAction extends TransportWriteAction<BulkShardRequest, BulkShardRequest, BulkShardResponse> {
 
@@ -143,10 +141,18 @@ protected boolean resolveIndex() {
                 case INDEX:
                     final IndexRequest indexRequest = (IndexRequest) itemRequest;
                     Engine.IndexResult indexResult = executeIndexRequestOnPrimary(indexRequest, primary, mappingUpdatedAction);
+                    if (indexResult.hasFailure()) {
+                        response = null;
+                    } else {
+                        // update the version on request so it will happen on the replicas
+                        final long version = indexResult.getVersion();
+                        indexRequest.version(version);
+                        indexRequest.versionType(indexRequest.versionType().versionTypeForReplicationAndRecovery());
+                        assert indexRequest.versionType().validateVersionForWrites(indexRequest.version());
+                        response = new IndexResponse(primary.shardId(), indexRequest.type(), indexRequest.id(),
+                                indexResult.getVersion(), indexResult.isCreated());
+                    }
                     operationResult = indexResult;
-                    response = indexResult.hasFailure() ? null
-                            : new IndexResponse(primary.shardId(), indexRequest.type(), indexRequest.id(),
-                            indexResult.getVersion(), indexResult.isCreated());
                     replicaRequest = request.items()[requestIndex];
                     break;
                 case UPDATE:
@@ -159,10 +165,17 @@ protected boolean resolveIndex() {
                 case DELETE:
                     final DeleteRequest deleteRequest = (DeleteRequest) itemRequest;
                     Engine.DeleteResult deleteResult = executeDeleteRequestOnPrimary(deleteRequest, primary);
+                    if (deleteResult.hasFailure()) {
+                        response = null;
+                    } else {
+                        // update the request with the version so it will go to the replicas
+                        deleteRequest.versionType(deleteRequest.versionType().versionTypeForReplicationAndRecovery());
+                        deleteRequest.version(deleteResult.getVersion());
+                        assert deleteRequest.versionType().validateVersionForWrites(deleteRequest.version());
+                        response = new DeleteResponse(request.shardId(), deleteRequest.type(), deleteRequest.id(),
+                                deleteResult.getVersion(), deleteResult.isFound());
+                    }
                     operationResult = deleteResult;
-                    response = deleteResult.hasFailure() ? null :
-                            new DeleteResponse(request.shardId(), deleteRequest.type(), deleteRequest.id(),
-                                    deleteResult.getVersion(), deleteResult.isFound());
                     replicaRequest = request.items()[requestIndex];
                     break;
                 default:
@@ -218,6 +231,10 @@ protected boolean resolveIndex() {
         return location;
     }
 
+    private static boolean isConflictException(final Exception e) {
+        return ExceptionsHelper.unwrapCause(e) instanceof VersionConflictEngineException;
+    }
+
     private static class UpdateResultHolder {
         final BulkItemRequest replicaRequest;
         final Engine.Result operationResult;
@@ -264,9 +281,23 @@ private UpdateResultHolder executeUpdateRequest(UpdateRequest updateRequest, Ind
                     MappingMetaData mappingMd = metaData.mappingOrDefault(indexRequest.type());
                     indexRequest.process(mappingMd, allowIdGeneration, request.index());
                     updateOperationResult = executeIndexRequestOnPrimary(indexRequest, primary, mappingUpdatedAction);
+                    if (updateOperationResult.hasFailure() == false) {
+                        // update the version on request so it will happen on the replicas
+                        final long version = updateOperationResult.getVersion();
+                        indexRequest.version(version);
+                        indexRequest.versionType(indexRequest.versionType().versionTypeForReplicationAndRecovery());
+                        assert indexRequest.versionType().validateVersionForWrites(indexRequest.version());
+                    }
                     break;
                 case DELETED:
-                    updateOperationResult = executeDeleteRequestOnPrimary(translate.action(), primary);
+                    DeleteRequest deleteRequest = translate.action();
+                    updateOperationResult = executeDeleteRequestOnPrimary(deleteRequest, primary);
+                    if (updateOperationResult.hasFailure() == false) {
+                        // update the request with the version so it will go to the replicas
+                        deleteRequest.versionType(deleteRequest.versionType().versionTypeForReplicationAndRecovery());
+                        deleteRequest.version(updateOperationResult.getVersion());
+                        assert deleteRequest.versionType().validateVersionForWrites(deleteRequest.version());
+                    }
                     break;
                 case NOOP:
                     primary.noopUpdate(updateRequest.type());
@@ -363,7 +394,7 @@ private UpdateResultHolder executeUpdateRequest(UpdateRequest updateRequest, Ind
                 } catch (Exception e) {
                     // if its not an ignore replica failure, we need to make sure to bubble up the failure
                     // so we will fail the shard
-                    if (!ignoreReplicaException(e)) {
+                    if (!TransportActions.isShardNotAvailableException(e)) {
                         throw e;
                     }
                 }
@@ -372,6 +403,17 @@ private UpdateResultHolder executeUpdateRequest(UpdateRequest updateRequest, Ind
         return new WriteReplicaResult<>(request, location, null, replica, logger);
     }
 
+    private Translog.Location locationToSync(Translog.Location current, Translog.Location next) {
+        /* here we are moving forward in the translog with each operation. Under the hood
+         * this might cross translog files which is ok since from the user perspective
+         * the translog is like a tape where only the highest location needs to be fsynced
+         * in order to sync all previous locations even though they are not in the same file.
+         * When the translog rolls over files the previous file is fsynced on after closing if needed.*/
+        assert next != null : "next operation can't be null";
+        assert current == null || current.compareTo(next) < 0 : "translog locations are not increasing";
+        return next;
+    }
+
     /**
      * Execute the given {@link IndexRequest} on a replica shard, throwing a
      * {@link RetryOnReplicaException} if the operation needs to be re-tried.
@@ -436,15 +478,7 @@ private UpdateResultHolder executeUpdateRequest(UpdateRequest updateRequest, Ind
                         "Dynamic mappings are not available on the node that holds the primary yet");
             }
         }
-        Engine.IndexResult result = primary.index(operation);
-        if (result.hasFailure() == false) {
-            // update the version on request so it will happen on the replicas
-            final long version = result.getVersion();
-            request.version(version);
-            request.versionType(request.versionType().versionTypeForReplicationAndRecovery());
-            assert request.versionType().validateVersionForWrites(request.version());
-        }
-        return result;
+        return primary.index(operation);
     }
 
     public static Engine.DeleteResult executeDeleteRequestOnPrimary(DeleteRequest request, IndexShard primary) throws IOException {
@@ -457,15 +491,4 @@ private UpdateResultHolder executeUpdateRequest(UpdateRequest updateRequest, Ind
                 request.version(), request.versionType());
         return replica.delete(delete);
     }
-
-    private Translog.Location locationToSync(Translog.Location current, Translog.Location next) {
-        /* here we are moving forward in the translog with each operation. Under the hood
-         * this might cross translog files which is ok since from the user perspective
-         * the translog is like a tape where only the highest location needs to be fsynced
-         * in order to sync all previous locations even though they are not in the same file.
-         * When the translog rolls over files the previous file is fsynced on after closing if needed.*/
-        assert next != null : "next operation can't be null";
-        assert current == null || current.compareTo(next) < 0 : "translog locations are not increasing";
-        return next;
-    }
 }
diff --git a/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java
index c049336bafcc..f0b9998fcc86 100644
--- a/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java
+++ b/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationOperation.java
@@ -35,7 +35,6 @@
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.util.set.Sets;
-import org.elasticsearch.index.engine.VersionConflictEngineException;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.transport.TransportResponse;
@@ -201,7 +200,7 @@ public void onFailure(Exception replicaException) {
                         shard,
                         replicaRequest),
                     replicaException);
-                if (ignoreReplicaException(replicaException)) {
+                if (TransportActions.isShardNotAvailableException(replicaException)) {
                     decPendingAndFinishIfNeeded();
                 } else {
                     RestStatus restStatus = ExceptionsHelper.status(replicaException);
@@ -313,30 +312,6 @@ private void finishAsFailed(Exception exception) {
         }
     }
 
-
-    /**
-     * Should an exception be ignored when the operation is performed on the replica.
-     */
-    public static boolean ignoreReplicaException(Exception e) {
-        if (TransportActions.isShardNotAvailableException(e)) {
-            return true;
-        }
-        // on version conflict or document missing, it means
-        // that a new change has crept into the replica, and it's fine
-        if (isConflictException(e)) {
-            return true;
-        }
-        return false;
-    }
-
-    public static boolean isConflictException(Throwable t) {
-        final Throwable cause = ExceptionsHelper.unwrapCause(t);
-        // on version conflict or document missing, it means
-        // that a new change has crept into the replica, and it's fine
-        return cause instanceof VersionConflictEngineException;
-    }
-
-
     public interface Primary<
                 Request extends ReplicationRequest<Request>,
                 ReplicaRequest extends ReplicationRequest<ReplicaRequest>,
