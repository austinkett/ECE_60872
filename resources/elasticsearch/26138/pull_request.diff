diff --git a/core/src/main/java/org/elasticsearch/index/query/IndicesQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/IndicesQueryBuilder.java
index ef64b015949a..f5ad44194698 100644
--- a/core/src/main/java/org/elasticsearch/index/query/IndicesQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/IndicesQueryBuilder.java
@@ -33,6 +33,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 
@@ -232,6 +233,12 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         return noMatchQuery.toQuery(context);
     }
 
+    @Override
+    protected void extractInnerHitBuilders(Map<String, InnerHitContextBuilder> innerHits) {
+        InnerHitContextBuilder.extractInnerHits(innerQuery, innerHits);
+        InnerHitContextBuilder.extractInnerHits(noMatchQuery, innerHits);
+    }
+
     @Override
     public int doHashCode() {
         return Objects.hash(innerQuery, noMatchQuery, Arrays.hashCode(indices));
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
index 5dfb30eb6e35..e7c3eaa11aa7 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
@@ -54,6 +54,7 @@
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.common.xcontent.support.XContentMapValues.extractValue;
 import static org.elasticsearch.index.query.QueryBuilders.boolQuery;
+import static org.elasticsearch.index.query.QueryBuilders.indicesQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.index.query.QueryBuilders.nestedQuery;
@@ -641,4 +642,28 @@ public void testInnerHitsWithIgnoreUnmapped() throws Exception {
         assertHitCount(response, 2);
         assertSearchHits(response, "1", "3");
     }
+
+    public void testInnerHitsInsideIndicesQuery() throws Exception {
+        assertAcked(prepareCreate("index1").addMapping("message", "comments", "type=nested"));
+        client().prepareIndex("index1", "message", "1").setSource(jsonBuilder().startObject()
+            .field("message", "quick brown fox")
+            .startArray("comments")
+            .startObject().field("message", "fox eat quick").endObject()
+            .startObject().field("message", "fox ate rabbit x y z").endObject()
+            .startObject().field("message", "rabbit got away").endObject()
+            .endArray()
+            .endObject()).get();
+        refresh();
+
+        SearchResponse response = client().prepareSearch()
+            .setQuery(indicesQuery(nestedQuery("comments", matchQuery("comments.message", "fox"), ScoreMode.None)
+                .innerHit(new InnerHitBuilder()), "index1"))
+            .get();
+        assertNoFailures(response);
+        assertHitCount(response, 1);
+
+        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getTotalHits(), equalTo(2L));
+        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(response.getHits().getAt(0).getInnerHits().get("comments").getAt(1).getNestedIdentity().getOffset(), equalTo(1));
+    }
 }
