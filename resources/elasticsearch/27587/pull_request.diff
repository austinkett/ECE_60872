diff --git a/core/src/main/java/org/elasticsearch/env/Environment.java b/core/src/main/java/org/elasticsearch/env/Environment.java
index 721cdcf9ba6d..2433ccf6e8ed 100644
--- a/core/src/main/java/org/elasticsearch/env/Environment.java
+++ b/core/src/main/java/org/elasticsearch/env/Environment.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.env;
 
 import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.cluster.node.DiscoveryNode;
 import org.elasticsearch.common.SuppressForbidden;
 import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.settings.Setting;
@@ -45,6 +46,9 @@
 // TODO: move PathUtils to be package-private here instead of
 // public+forbidden api!
 public class Environment {
+
+    private static final Path[] EMPTY_PATH_ARRAY = new Path[0];
+
     public static final Setting<String> PATH_HOME_SETTING = Setting.simpleString("path.home", Property.NodeScope);
     public static final Setting<List<String>> PATH_DATA_SETTING =
             Setting.listSetting("path.data", Collections.emptyList(), Function.identity(), Property.NodeScope);
@@ -103,16 +107,25 @@ public Environment(final Settings settings, final Path configPath) {
 
         List<String> dataPaths = PATH_DATA_SETTING.get(settings);
         final ClusterName clusterName = ClusterName.CLUSTER_NAME_SETTING.get(settings);
-        if (dataPaths.isEmpty() == false) {
-            dataFiles = new Path[dataPaths.size()];
-            dataWithClusterFiles = new Path[dataPaths.size()];
-            for (int i = 0; i < dataPaths.size(); i++) {
-                dataFiles[i] = PathUtils.get(dataPaths.get(i));
-                dataWithClusterFiles[i] = dataFiles[i].resolve(clusterName.value());
+        if (DiscoveryNode.nodeRequiresLocalStorage(settings)) {
+            if (dataPaths.isEmpty() == false) {
+                dataFiles = new Path[dataPaths.size()];
+                dataWithClusterFiles = new Path[dataPaths.size()];
+                for (int i = 0; i < dataPaths.size(); i++) {
+                    dataFiles[i] = PathUtils.get(dataPaths.get(i));
+                    dataWithClusterFiles[i] = dataFiles[i].resolve(clusterName.value());
+                }
+            } else {
+                dataFiles = new Path[]{homeFile.resolve("data")};
+                dataWithClusterFiles = new Path[]{homeFile.resolve("data").resolve(clusterName.value())};
             }
         } else {
-            dataFiles = new Path[]{homeFile.resolve("data")};
-            dataWithClusterFiles = new Path[]{homeFile.resolve("data").resolve(clusterName.value())};
+            if (dataPaths.isEmpty()) {
+                dataFiles = dataWithClusterFiles = EMPTY_PATH_ARRAY;
+            } else {
+                final String paths = String.join(",", dataPaths);
+                throw new IllegalStateException("node does not require local storage yet path.data is set to [" + paths + "]");
+            }
         }
         if (PATH_SHARED_DATA_SETTING.exists(settings)) {
             sharedDataFile = PathUtils.get(PATH_SHARED_DATA_SETTING.get(settings)).normalize();
@@ -120,13 +133,13 @@ public Environment(final Settings settings, final Path configPath) {
             sharedDataFile = null;
         }
         List<String> repoPaths = PATH_REPO_SETTING.get(settings);
-        if (repoPaths.isEmpty() == false) {
+        if (repoPaths.isEmpty()) {
+            repoFiles = EMPTY_PATH_ARRAY;
+        } else {
             repoFiles = new Path[repoPaths.size()];
             for (int i = 0; i < repoPaths.size(); i++) {
                 repoFiles[i] = PathUtils.get(repoPaths.get(i));
             }
-        } else {
-            repoFiles = new Path[0];
         }
 
         // this is trappy, Setting#get(Settings) will get a fallback setting yet return false for Settings#exists(Settings)
diff --git a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
index 6ddf6b3ba73b..5ca3f4dc6a59 100644
--- a/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/EnvironmentTests.java
@@ -28,7 +28,10 @@
 import static org.hamcrest.CoreMatchers.endsWith;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.CoreMatchers.nullValue;
+import static org.hamcrest.Matchers.arrayWithSize;
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.hasToString;
 
 /**
  * Simple unit-tests for Environment.java
@@ -115,4 +118,32 @@ public void testConfigPathWhenNotSet() {
         assertThat(environment.configFile(), equalTo(pathHome.resolve("config")));
     }
 
+    public void testNodeDoesNotRequireLocalStorage() {
+        final Path pathHome = createTempDir().toAbsolutePath();
+        final Settings settings =
+                Settings.builder()
+                        .put("path.home", pathHome)
+                        .put("node.local_storage", false)
+                        .put("node.master", false)
+                        .put("node.data", false)
+                        .build();
+        final Environment environment = new Environment(settings, null);
+        assertThat(environment.dataFiles(), arrayWithSize(0));
+    }
+
+    public void testNodeDoesNotRequireLocalStorageButHasPathData() {
+        final Path pathHome = createTempDir().toAbsolutePath();
+        final Path pathData = pathHome.resolve("data");
+        final Settings settings =
+                Settings.builder()
+                        .put("path.home", pathHome)
+                        .put("path.data", pathData)
+                        .put("node.local_storage", false)
+                        .put("node.master", false)
+                        .put("node.data", false)
+                        .build();
+        final IllegalStateException e = expectThrows(IllegalStateException.class, () -> new Environment(settings, null));
+        assertThat(e, hasToString(containsString("node does not require local storage yet path.data is set to [" + pathData + "]")));
+    }
+
 }
diff --git a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
index 90161e5faaf9..40193ebc363e 100644
--- a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
@@ -397,14 +397,14 @@ public void testCustomDataPaths() throws Exception {
     }
 
     public void testPersistentNodeId() throws IOException {
-        String[] paths = tmpPaths();
-        NodeEnvironment env = newNodeEnvironment(paths, Settings.builder()
+        NodeEnvironment env = newNodeEnvironment(new String[0], Settings.builder()
             .put("node.local_storage", false)
             .put("node.master", false)
             .put("node.data", false)
             .build());
         String nodeID = env.nodeId();
         env.close();
+        final String[] paths = tmpPaths();
         env = newNodeEnvironment(paths, Settings.EMPTY);
         assertThat("previous node didn't have local storage enabled, id should change", env.nodeId(), not(equalTo(nodeID)));
         nodeID = env.nodeId();
