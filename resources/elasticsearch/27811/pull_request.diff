diff --git a/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
index 9c5833511740..7a5d2f31d5bf 100644
--- a/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
+++ b/core/src/main/java/org/elasticsearch/env/NodeEnvironment.java
@@ -249,7 +249,9 @@ public NodeEnvironment(Settings settings, Environment environment) throws IOExce
             this.nodeLockId = nodeLockId;
             this.locks = locks;
             this.nodePaths = nodePaths;
-
+            if(!DiscoveryNode.isDataNode(settings)  && !availableIndexFolders().isEmpty()) {
+                throw new IllegalStateException("Non Data node cannot have dangling indices");
+            }
             if (logger.isDebugEnabled()) {
                 logger.debug("using node location [{}], local_lock_id [{}]", nodePaths, nodeLockId);
             }
diff --git a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
index 90161e5faaf9..d4689457568d 100644
--- a/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
+++ b/core/src/test/java/org/elasticsearch/env/NodeEnvironmentTests.java
@@ -30,6 +30,7 @@
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.IndexSettings;
 import org.elasticsearch.index.shard.ShardId;
+import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.IndexSettingsModule;
 
@@ -450,6 +451,32 @@ public void testExistingTempFiles() throws IOException {
         }
     }
 
+    public void testIfNodeEnvironmentInitiationFails() throws IOException {
+        // simulate some previous left over temp files
+        Settings settings = buildEnvSettings(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(), false).build());
+
+           List<String> dataPaths = Environment.PATH_DATA_SETTING.get(settings);
+
+
+            final Path nodePath = NodeEnvironment.resolveNodePath(PathUtils.get(dataPaths.get(0)), 0);
+            final Path indicesPath = nodePath.resolve(NodeEnvironment.INDICES_FOLDER);
+
+            Files.createDirectories(indicesPath.resolve("index-uuid"));
+        try {
+
+            NodeEnvironment env = new NodeEnvironment(settings, TestEnvironment.newEnvironment(settings));
+            Path  nodepatt = env.nodePaths()[0].indicesPath;
+            env.close();
+            fail("Node environment instantiation should have failed for non data node" + nodepatt +  " " +  indicesPath +
+                env.availableIndexFolders());
+        } catch (IllegalStateException e) {
+            // that's OK :)
+        }
+
+        for (String path: dataPaths) {
+            Files.deleteIfExists(indicesPath.resolve("index-uuid"));
+        }
+    }
     /** Converts an array of Strings to an array of Paths, adding an additional child if specified */
     private Path[] stringsToPaths(String[] strings, String additional) {
         Path[] locations = new Path[strings.length];
