diff --git a/docs/CHANGELOG.asciidoc b/docs/CHANGELOG.asciidoc
index 98be1db1b6d5..0a9312ce9f33 100644
--- a/docs/CHANGELOG.asciidoc
+++ b/docs/CHANGELOG.asciidoc
@@ -39,6 +39,8 @@ written to by an older Elasticsearch after writing to it with a newer Elasticsea
 
 === Bug Fixes
 
+Do not ignore request analysis/similarity settings on index resize operations when the source index already contains such settings ({pull}30216[#30216])
+
 === Regressions
 
 === Known Issues
diff --git a/docs/reference/indices/shrink-index.asciidoc b/docs/reference/indices/shrink-index.asciidoc
index 027cf8b924d3..2dfc2b4f617f 100644
--- a/docs/reference/indices/shrink-index.asciidoc
+++ b/docs/reference/indices/shrink-index.asciidoc
@@ -119,9 +119,10 @@ POST my_source_index/_shrink/my_target_index
     segment.
 
 
-NOTE: Mappings may not be specified in the `_shrink` request, and all
-`index.analysis.*` and `index.similarity.*` settings will be overwritten with
-the settings from the source index.
+NOTE: Mappings may not be specified in the `_shrink` request.
+
+NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source
+index are not copied during a shrink operation.
 
 [float]
 === Monitoring the shrink process
diff --git a/docs/reference/indices/split-index.asciidoc b/docs/reference/indices/split-index.asciidoc
index 4a6fc16103bb..8285fa4fa448 100644
--- a/docs/reference/indices/split-index.asciidoc
+++ b/docs/reference/indices/split-index.asciidoc
@@ -175,9 +175,10 @@ POST my_source_index/_split/my_target_index
     number of shards in the source index.
 
 
-NOTE: Mappings may not be specified in the `_split` request, and all
-`index.analysis.*` and `index.similarity.*` settings will be overwritten with
-the settings from the source index.
+NOTE: Mappings may not be specified in the `_split` request.
+
+NOTE: By default, with the exception of `index.analysis`, `index.similarity`, and `index.sort` settings, index settings on the source
+index are not copied during a shrink operation.
 
 [float]
 === Monitoring the split process
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
index 690cd1fbe5a3..37c27fb9b7bd 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
@@ -56,6 +56,7 @@
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.io.PathUtils;
 import org.elasticsearch.common.settings.IndexScopedSettings;
+import org.elasticsearch.common.settings.Setting;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.NamedXContentRegistry;
 import org.elasticsearch.common.xcontent.XContentHelper;
@@ -694,8 +695,9 @@ static void prepareResizeIndexSettings(ClusterState currentState, Set<String> ma
             throw new IllegalStateException("unknown resize type is " + type);
         }
 
-        final Predicate<String> sourceSettingsPredicate = (s) -> s.startsWith("index.similarity.")
-            || s.startsWith("index.analysis.") || s.startsWith("index.sort.");
+        final Predicate<String> sourceSettingsPredicate =
+                (s) -> (s.startsWith("index.similarity.") || s.startsWith("index.analysis.") || s.startsWith("index.sort."))
+                        && indexSettingsBuilder.keys().contains(s) == false;
         indexSettingsBuilder
             // now copy all similarity / analysis / sort settings - this overrides all settings from the user unless they
             // wanna add extra settings
diff --git a/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java
index 6074102cde31..28fbfaefe6d0 100644
--- a/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java
+++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexServiceTests.java
@@ -51,6 +51,7 @@
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.min;
 import static org.hamcrest.Matchers.endsWith;
+import static org.hamcrest.Matchers.equalTo;
 
 public class MetaDataCreateIndexServiceTests extends ESTestCase {
 
@@ -243,7 +244,7 @@ public void testResizeIndexSettings() {
                 .put("index.version.created", version)
                 .put("index.version.upgraded", upgraded)
                 .put("index.version.minimum_compatible", minCompat.luceneVersion.toString())
-                .put("index.analysis.analyzer.my_analyzer.tokenizer", "keyword")
+                .put("index.analysis.analyzer.default.tokenizer", "keyword")
                 .build())).nodes(DiscoveryNodes.builder().add(newNode("node1")))
             .build();
         AllocationService service = new AllocationService(Settings.builder().build(), new AllocationDeciders(Settings.EMPTY,
@@ -257,17 +258,60 @@ public void testResizeIndexSettings() {
             routingTable.index(indexName).shardsWithState(ShardRoutingState.INITIALIZING)).routingTable();
         clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
 
-        Settings.Builder builder = Settings.builder();
-        builder.put("index.number_of_shards", 1);
-        MetaDataCreateIndexService.prepareResizeIndexSettings(clusterState, Collections.emptySet(), builder,
-            clusterState.metaData().index(indexName).getIndex(), "target", ResizeType.SHRINK);
-        assertEquals("similarity settings must be copied", "BM25", builder.build().get("index.similarity.default.type"));
-        assertEquals("analysis settings must be copied",
-            "keyword", builder.build().get("index.analysis.analyzer.my_analyzer.tokenizer"));
-        assertEquals("node1", builder.build().get("index.routing.allocation.initial_recovery._id"));
-        assertEquals("1", builder.build().get("index.allocation.max_retries"));
-        assertEquals(version, builder.build().getAsVersion("index.version.created", null));
-        assertEquals(upgraded, builder.build().getAsVersion("index.version.upgraded", null));
+        {
+            final Settings.Builder builder = Settings.builder();
+            builder.put("index.number_of_shards", 1);
+            MetaDataCreateIndexService.prepareResizeIndexSettings(
+                    clusterState,
+                    Collections.emptySet(),
+                    builder,
+                    clusterState.metaData().index(indexName).getIndex(),
+                    "target",
+                    ResizeType.SHRINK);
+            final Settings settings = builder.build();
+            assertThat("similarity settings must be copied", settings.get("index.similarity.default.type"), equalTo("BM25"));
+            assertThat(
+                    "analysis settings must be copied", settings.get("index.analysis.analyzer.default.tokenizer"), equalTo("keyword"));
+            assertThat(settings.get("index.routing.allocation.initial_recovery._id"), equalTo("node1"));
+            assertThat(settings.get("index.allocation.max_retries"), equalTo("1"));
+            assertThat(settings.getAsVersion("index.version.created", null), equalTo(version));
+            assertThat(settings.getAsVersion("index.version.upgraded", null), equalTo(upgraded));
+        }
+
+        // analysis settings from the request are not overwritten
+        {
+            final Settings.Builder builder = Settings.builder();
+            builder.put("index.number_of_shards", 1);
+            builder.put("index.analysis.analyzer.default.tokenizer", "whitespace");
+            MetaDataCreateIndexService.prepareResizeIndexSettings(
+                    clusterState,
+                    Collections.emptySet(),
+                    builder,
+                    clusterState.metaData().index(indexName).getIndex(),
+                    "target",
+                    ResizeType.SHRINK);
+            final Settings settings = builder.build();
+            assertThat(
+                    "analysis settings are not overwritten",
+                    settings.get("index.analysis.analyzer.default.tokenizer"),
+                    equalTo("whitespace"));
+        }
+
+        // similarity settings from the request are not overwritten
+        {
+            final Settings.Builder builder = Settings.builder();
+            builder.put("index.number_of_shards", 1);
+            builder.put("index.similarity.default.type", "DFR");
+            MetaDataCreateIndexService.prepareResizeIndexSettings(
+                    clusterState,
+                    Collections.emptySet(),
+                    builder,
+                    clusterState.metaData().index(indexName).getIndex(),
+                    "target",
+                    ResizeType.SHRINK);
+            final Settings settings = builder.build();
+            assertThat("similarity settings are not overwritten", settings.get("index.similarity.default.type"), equalTo("DFR"));
+        }
     }
 
     private DiscoveryNode newNode(String nodeId) {
