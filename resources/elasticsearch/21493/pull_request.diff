diff --git a/core/src/main/java/org/elasticsearch/index/mapper/TTLFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/TTLFieldMapper.java
index ea11dc04ee40..57b91d7d0978 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/TTLFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/TTLFieldMapper.java
@@ -28,8 +28,6 @@
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.AlreadyExpiredException;
-import org.elasticsearch.search.internal.SearchContext;
-
 import java.io.IOException;
 import java.util.Date;
 import java.util.Iterator;
@@ -140,13 +138,7 @@ public TTLFieldType clone() {
         // Overrides valueForSearch to display live value of remaining ttl
         @Override
         public Object valueForSearch(Object value) {
-            long now;
-            SearchContext searchContext = SearchContext.current();
-            if (searchContext != null) {
-                now = searchContext.getQueryShardContext().nowInMillis();
-            } else {
-                now = System.currentTimeMillis();
-            }
+            long now = System.currentTimeMillis();
             Long val = (Long) super.valueForSearch(value);
             return val - now;
         }
diff --git a/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java b/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
index 5716e57c96fb..be35548fc86f 100644
--- a/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
+++ b/core/src/test/java/org/elasticsearch/ttl/SimpleTTLIT.java
@@ -26,6 +26,7 @@
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexResponse;
+import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.update.UpdateRequestBuilder;
 import org.elasticsearch.action.update.UpdateResponse;
 import org.elasticsearch.cluster.metadata.IndexMetaData;
@@ -48,6 +49,7 @@
 import static org.elasticsearch.action.support.WriteRequest.RefreshPolicy.IMMEDIATE;
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.both;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
@@ -302,4 +304,25 @@ private void assertTTLMappingEnabled(String index, String type) throws IOExcepti
         assertThat(ttlAsString, is(notNullValue()));
         assertThat(errMsg, ttlAsString, is("{enabled=true}"));
     }
+
+    // Test for #21457
+    public void testSearchWithTTL() throws Exception {
+        assertAcked(prepareCreate("test")
+                .setSettings(IndexMetaData.SETTING_VERSION_CREATED, Version.V_2_3_0.id)
+                .addMapping("type1", XContentFactory.jsonBuilder()
+                        .startObject()
+                        .startObject("type1")
+                        .startObject("_ttl").field("enabled", true).endObject()
+                        .endObject()
+                        .endObject()));
+
+        long providedTTLValue = 300000;
+        IndexResponse indexResponse = client().prepareIndex("test", "type1", "1").setSource("field1", "value1")
+                .setTTL(providedTTLValue).setRefreshPolicy(IMMEDIATE).get();
+        assertEquals(DocWriteResponse.Result.CREATED, indexResponse.getResult());
+
+        SearchResponse searchResponse = client().prepareSearch("test").get();
+        assertSearchResponse(searchResponse);
+        assertEquals(1L, searchResponse.getHits().getTotalHits());
+    }
 }
