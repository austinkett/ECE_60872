diff --git a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java
index e52aaf259696..5cb4b9286572 100644
--- a/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java
+++ b/modules/lang-painless/src/main/java/org/elasticsearch/painless/ScriptClassInfo.java
@@ -84,8 +84,7 @@ public ScriptClassInfo(Definition definition, Class<?> baseClass) {
                 componentType -> "Painless can only implement execute methods returning a whitelisted type but [" + baseClass.getName()
                         + "#execute] returns [" + componentType.getName() + "] which isn't whitelisted.");
 
-        // Look up the argument names
-        Set<String> argumentNames = new LinkedHashSet<>();
+        // Look up the argument
         List<MethodArgument> arguments = new ArrayList<>();
         String[] argumentNamesConstant = readArgumentNamesConstant(baseClass);
         Class<?>[] types = executeMethod.getParameterTypes();
@@ -95,7 +94,6 @@ public ScriptClassInfo(Definition definition, Class<?> baseClass) {
         }
         for (int arg = 0; arg < types.length; arg++) {
             arguments.add(methodArgument(definition, types[arg], argumentNamesConstant[arg]));
-            argumentNames.add(argumentNamesConstant[arg]);
         }
         this.executeArguments = unmodifiableList(arguments);
         this.needsMethods = unmodifiableList(needsMethods);
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
index 37831f977aec..0c38371bdc9c 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexAliasesService.java
@@ -133,7 +133,7 @@ ClusterState innerExecute(ClusterState currentState, Iterable<AliasAction> actio
                     Function<String, IndexMetaData> indexLookup = name -> metadata.get(name);
                     aliasValidator.validateAlias(alias, action.getIndex(), indexRouting, indexLookup);
                     if (Strings.hasLength(filter)) {
-                        IndexService indexService = indices.get(index.getIndex());
+                        IndexService indexService = indices.get(index.getIndex().getName());
                         if (indexService == null) {
                             indexService = indicesService.indexService(index.getIndex());
                             if (indexService == null) {
diff --git a/server/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java b/server/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java
index 1d4234d689ea..19253c52e300 100644
--- a/server/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java
+++ b/server/src/main/java/org/elasticsearch/monitor/jvm/DeadlockAnalyzer.java
@@ -137,9 +137,7 @@ public Deadlock(ThreadInfo[] members) {
             for (int x = 0; x < members.length; x++) {
                 ThreadInfo ti = members[x];
                 sb.append(ti.getThreadName());
-                if (x < members.length) {
-                    sb.append(" > ");
-                }
+                sb.append(" > ");
                 if (x == members.length - 1) {
                     sb.append(ti.getLockOwnerName());
                 }
diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
index f34a77d32bf8..5f45b73b62a5 100644
--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java
@@ -68,8 +68,19 @@ public void writeTo(StreamOutput out) throws IOException {
     }
 
     @Override
-    public boolean equals(Object other) {
-        return ((NXYSignificanceHeuristic) other).includeNegatives == includeNegatives && ((NXYSignificanceHeuristic) other).backgroundIsSuperset == backgroundIsSuperset;
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        NXYSignificanceHeuristic other = (NXYSignificanceHeuristic) obj;
+        if (backgroundIsSuperset != other.backgroundIsSuperset)
+            return false;
+        if (includeNegatives != other.includeNegatives)
+            return false;
+        return true;
     }
 
     @Override
