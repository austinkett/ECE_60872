diff --git a/src/main/java/org/elasticsearch/common/joda/DateMathParser.java b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java
index 06aedf58c05c..75d559e15b15 100644
--- a/src/main/java/org/elasticsearch/common/joda/DateMathParser.java
+++ b/src/main/java/org/elasticsearch/common/joda/DateMathParser.java
@@ -25,6 +25,7 @@
 import org.joda.time.MutableDateTime;
 import org.joda.time.format.DateTimeFormatter;
 
+import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -46,15 +47,22 @@ public DateMathParser(FormatDateTimeFormatter dateTimeFormatter, TimeUnit timeUn
         this.timeUnit = timeUnit;
     }
 
-    public long parse(String text, long now) {
+    public long parse(String text, Callable<Long> now) {
         return parse(text, now, false, null);
     }
 
-    public long parse(String text, long now, boolean roundUp, DateTimeZone timeZone) {
+    // Note: we take a callable here for the timestamp in order to be able to figure out
+    // if it has been used. For instance, the query cache does not cache queries that make
+    // use of `now`.
+    public long parse(String text, Callable<Long> now, boolean roundUp, DateTimeZone timeZone) {
         long time;
         String mathString;
         if (text.startsWith("now")) {
-            time = now;
+            try {
+                time = now.call();
+            } catch (Exception e) {
+                throw new ElasticsearchParseException("Could not read the current timestamp", e);
+            }
             mathString = text.substring("now".length());
         } else {
             int index = text.indexOf("||");
diff --git a/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
index aa5f04df98ed..0a2bddf686e5 100644
--- a/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/core/DateFieldMapper.java
@@ -68,6 +68,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
 import static org.elasticsearch.index.mapper.MapperBuilders.dateField;
@@ -271,9 +272,21 @@ private String convertToString(Object value) {
         return value.toString();
     }
 
+    private static Callable<Long> now() {
+        return new Callable<Long>() {
+            @Override
+            public Long call() {
+                final SearchContext context = SearchContext.current();
+                return context != null
+                    ? context.nowInMillis()
+                    : System.currentTimeMillis();
+            }
+        };
+    }
+
     @Override
     public Query fuzzyQuery(String value, Fuzziness fuzziness, int prefixLength, int maxExpansions, boolean transpositions) {
-        long iValue = dateMathParser.parse(value, System.currentTimeMillis());
+        long iValue = dateMathParser.parse(value, now());
         long iSim;
         try {
             iSim = fuzziness.asTimeValue().millis();
@@ -306,13 +319,11 @@ public long parseToMilliseconds(Object value, boolean inclusive, @Nullable DateT
     }
 
     public long parseToMilliseconds(String value, boolean inclusive, @Nullable DateTimeZone zone, @Nullable DateMathParser forcedDateParser) {
-        SearchContext sc = SearchContext.current();
-        long now = sc == null ? System.currentTimeMillis() : sc.nowInMillis();
         DateMathParser dateParser = dateMathParser;
         if (forcedDateParser != null) {
             dateParser = forcedDateParser;
         }
-        return dateParser.parse(value, now, inclusive, zone);
+        return dateParser.parse(value, now(), inclusive, zone);
     }
 
     @Override
diff --git a/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java b/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java
index 94646e5cd690..15a2550ce293 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/support/format/ValueParser.java
@@ -31,6 +31,7 @@
 import java.text.NumberFormat;
 import java.text.ParseException;
 import java.util.Locale;
+import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -92,8 +93,14 @@ public DateMath(DateMathParser parser) {
         }
 
         @Override
-        public long parseLong(String value, SearchContext searchContext) {
-            return parser.parse(value, searchContext.nowInMillis());
+        public long parseLong(String value, final SearchContext searchContext) {
+            final Callable<Long> now = new Callable<Long>() {
+                @Override
+                public Long call() throws Exception {
+                    return searchContext.nowInMillis();
+                }
+            };
+            return parser.parse(value, now);
         }
 
         @Override
diff --git a/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java b/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
index 3304699dcbdd..915b4bae1148 100644
--- a/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
+++ b/src/test/java/org/elasticsearch/common/joda/DateMathParserTests.java
@@ -24,7 +24,9 @@
 import org.elasticsearch.test.ElasticsearchTestCase;
 import org.joda.time.DateTimeZone;
 
+import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.hamcrest.Matchers.equalTo;
 
@@ -32,17 +34,26 @@
     FormatDateTimeFormatter formatter = Joda.forPattern("dateOptionalTime");
     DateMathParser parser = new DateMathParser(formatter, TimeUnit.MILLISECONDS);
 
+    private static Callable<Long> callable(final long value) {
+        return new Callable<Long>() {
+            @Override
+            public Long call() throws Exception {
+                return value;
+            }
+        };
+    }
+
     void assertDateMathEquals(String toTest, String expected) {
         assertDateMathEquals(toTest, expected, 0, false, null);
     }
     
-    void assertDateMathEquals(String toTest, String expected, long now, boolean roundUp, DateTimeZone timeZone) {
-        long gotMillis = parser.parse(toTest, now, roundUp, timeZone);
+    void assertDateMathEquals(String toTest, String expected, final long now, boolean roundUp, DateTimeZone timeZone) {
+        long gotMillis = parser.parse(toTest, callable(now), roundUp, timeZone);
         assertDateEquals(gotMillis, toTest, expected);
     }
     
     void assertDateEquals(long gotMillis, String original, String expected) {
-        long expectedMillis = parser.parse(expected, 0);
+        long expectedMillis = parser.parse(expected, callable(0));
         if (gotMillis != expectedMillis) {
             fail("Date math not equal\n" +
                 "Original              : " + original + "\n" +
@@ -119,7 +130,8 @@ public void testMultipleAdjustments() {
 
 
     public void testNow() {
-        long now = parser.parse("2014-11-18T14:27:32", 0, false, null);
+        final long now = parser.parse("2014-11-18T14:27:32", callable(0), false, null);
+        
         assertDateMathEquals("now", "2014-11-18T14:27:32", now, false, null);
         assertDateMathEquals("now+M", "2014-12-18T14:27:32", now, false, null);
         assertDateMathEquals("now-2d", "2014-11-16T14:27:32", now, false, null);
@@ -181,7 +193,7 @@ public void testTimestamps() {
         
         // also check other time units
         DateMathParser parser = new DateMathParser(Joda.forPattern("dateOptionalTime"), TimeUnit.SECONDS);
-        long datetime = parser.parse("1418248078", 0);
+        long datetime = parser.parse("1418248078", callable(0));
         assertDateEquals(datetime, "1418248078", "2014-12-10T21:47:58.000");
         
         // a timestamp before 10000 is a year
@@ -194,7 +206,7 @@ public void testTimestamps() {
     
     void assertParseException(String msg, String date, String exc) {
         try {
-            parser.parse(date, 0);
+            parser.parse(date, callable(0));
             fail("Date: " + date + "\n" + msg);
         } catch (ElasticsearchParseException e) {
             assertThat(ExceptionsHelper.detailedMessage(e).contains(exc), equalTo(true));
@@ -213,4 +225,19 @@ public void testIllegalDateFormat() {
         assertParseException("Expected bad timestamp exception", Long.toString(Long.MAX_VALUE) + "0", "timestamp");
         assertParseException("Expected bad date format exception", "123bogus", "with format");
     }
+
+    public void testOnlyCallsNowIfNecessary() {
+        final AtomicBoolean called = new AtomicBoolean();
+        final Callable<Long> now = new Callable<Long>() {
+            @Override
+            public Long call() throws Exception {
+                called.set(true);
+                return 42L;
+            }
+        };
+        parser.parse("2014-11-18T14:27:32", now, false, null);
+        assertFalse(called.get());
+        parser.parse("now/d", now, false, null);
+        assertTrue(called.get());
+    }
 }
