diff --git a/src/main/java/org/elasticsearch/index/engine/InternalEngine.java b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
index c640c06c7b59..499ea28a4b25 100644
--- a/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
+++ b/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
@@ -90,9 +90,6 @@
     private final SearcherFactory searcherFactory;
     private final SearcherManager searcherManager;
 
-    // we use flushNeeded here, since if there are no changes, then the commit won't write
-    // will not really happen, and then the commitUserData and the new translog will not be reflected
-    private volatile boolean flushNeeded = false;
     private final Lock flushLock = new ReentrantLock();
     private final ReentrantLock optimizeLock = new ReentrantLock();
 
@@ -262,7 +259,6 @@ public void create(Create create) throws EngineException {
                     innerCreate(create);
                 }
             }
-            flushNeeded = true;
         } catch (OutOfMemoryError | IllegalStateException | IOException t) {
             maybeFailEngine("create", t);
             throw new CreateFailedEngineException(shardId, create, t);
@@ -368,7 +364,6 @@ public void index(Index index) throws EngineException {
                     innerIndex(index);
                 }
             }
-            flushNeeded = true;
         } catch (OutOfMemoryError | IllegalStateException | IOException t) {
             maybeFailEngine("index", t);
             throw new IndexFailedEngineException(shardId, index, t);
@@ -460,7 +455,6 @@ public void delete(Delete delete) throws EngineException {
             ensureOpen();
             // NOTE: we don't throttle this when merges fall behind because delete-by-id does not create new segments:
             innerDelete(delete);
-            flushNeeded = true;
         } catch (OutOfMemoryError | IllegalStateException | IOException t) {
             maybeFailEngine("delete", t);
             throw new DeleteFailedEngineException(shardId, delete, t);
@@ -553,7 +547,6 @@ private void innerDelete(DeleteByQuery delete) throws EngineException {
 
             indexWriter.deleteDocuments(query);
             translog.add(new Translog.DeleteByQuery(delete));
-            flushNeeded = true;
         } catch (Throwable t) {
             maybeFailEngine("delete_by_query", t);
             throw new DeleteByQueryFailedEngineException(shardId, delete, t);
@@ -668,8 +661,7 @@ private CommitId flush(boolean commitTranslog, boolean force, boolean waitIfOngo
                         throw new FlushNotAllowedEngineException(shardId, "recovery is in progress, flush is not allowed");
                     }
 
-                    if (flushNeeded || force) {
-                        flushNeeded = false;
+                    if (indexWriter.hasUncommittedChanges() || force) {
                         try {
                             long translogId = translogIdGenerator.incrementAndGet();
                             translog.newTransientTranslog(translogId);
