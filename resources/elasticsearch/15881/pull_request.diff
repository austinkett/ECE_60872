diff --git a/core/src/main/java/org/elasticsearch/index/translog/Translog.java b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
index bf28be1392a8..c38be732d727 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/Translog.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
@@ -157,9 +157,6 @@ public Translog(TranslogConfig config) throws IOException {
         writeLock = new ReleasableLock(rwl.writeLock());
         this.location = config.getTranslogPath();
         Files.createDirectories(this.location);
-        if (config.getSyncInterval().millis() > 0 && config.getThreadPool() != null) {
-            syncScheduler = config.getThreadPool().schedule(config.getSyncInterval(), ThreadPool.Names.SAME, new Sync());
-        }
 
         try {
             if (translogGeneration != null) {
@@ -208,7 +205,9 @@ public Translog(TranslogConfig config) throws IOException {
                 this.lastCommittedTranslogFileGeneration = -1; // playing safe
 
             }
-            // now that we know which files are there, create a new current one.
+            if (config.getSyncInterval().millis() > 0 && config.getThreadPool() != null) {
+                syncScheduler = createSyncedScheduler(config);
+            }
         } catch (Throwable t) {
             // close the opened translog files if we fail to create a new translog...
             IOUtils.closeWhileHandlingException(currentCommittingTranslog, current);
@@ -216,6 +215,11 @@ public Translog(TranslogConfig config) throws IOException {
         }
     }
 
+    private ScheduledFuture<?> createSyncedScheduler(TranslogConfig config) {
+        assert(current != null);
+        return config.getThreadPool().schedule(config.getSyncInterval(), ThreadPool.Names.SAME, new Sync());
+    }
+
     /**
      * This method is used to upgarde a pre 2.0 translog structure to the new checkpoint based structure.
      * The {@link org.elasticsearch.index.translog.Translog.TranslogGeneration} in the given config is
