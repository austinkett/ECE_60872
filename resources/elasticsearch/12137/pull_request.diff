diff --git a/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
index fe8fdab090f4..4d4aa390eeb7 100644
--- a/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
+++ b/core/src/main/java/org/elasticsearch/index/engine/InternalEngine.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.engine;
 
 import com.google.common.collect.Lists;
+
 import org.apache.lucene.index.*;
 import org.apache.lucene.index.IndexWriter.IndexReaderWarmer;
 import org.apache.lucene.search.BooleanClause.Occur;
@@ -44,6 +45,7 @@
 import org.elasticsearch.common.util.concurrent.AbstractRunnable;
 import org.elasticsearch.common.util.concurrent.EsRejectedExecutionException;
 import org.elasticsearch.common.util.concurrent.ReleasableLock;
+import org.elasticsearch.index.VersionType;
 import org.elasticsearch.index.deletionpolicy.SnapshotIndexCommit;
 import org.elasticsearch.index.indexing.ShardIndexingService;
 import org.elasticsearch.index.mapper.Uid;
@@ -397,7 +399,11 @@ private void innerCreateNoLock(Create create, long currentVersion, VersionValue
                  */
                 doUpdate = true;
                 updatedVersion = 1;
-            } else {
+            }  else if (create.origin() == Operation.Origin.PRIMARY && create.versionType() == VersionType.INTERNAL && (create.version() == Versions.MATCH_ANY && currentVersion == Versions.NOT_FOUND ) ) {
+               //assuming that this means it is an update request and we can update safely
+                doUpdate = true;
+                updatedVersion = currentVersion++;
+            }  else {
                 // On primary, we throw DAEE if the _uid is already in the index with an older version:
                 assert create.origin() == Operation.Origin.PRIMARY;
                 throw new DocumentAlreadyExistsException(shardId, create.type(), create.id());
diff --git a/core/src/test/java/org/elasticsearch/action/IndicesRequestTests.java b/core/src/test/java/org/elasticsearch/action/IndicesRequestTests.java
index a89180f0768d..d70143ce2c16 100644
--- a/core/src/test/java/org/elasticsearch/action/IndicesRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/action/IndicesRequestTests.java
@@ -69,6 +69,7 @@
 import org.elasticsearch.action.get.MultiGetRequest;
 import org.elasticsearch.action.index.IndexAction;
 import org.elasticsearch.action.index.IndexRequest;
+import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.action.percolate.MultiPercolateAction;
 import org.elasticsearch.action.percolate.MultiPercolateRequest;
 import org.elasticsearch.action.percolate.PercolateAction;
@@ -248,6 +249,31 @@ public void testUpdateUpsert() {
         assertSameIndices(updateRequest, updateShardActions);
     }
 
+    @Test
+    public void testIndexNUpdateUpsert() {
+            //update action goes to the primary, index op gets executed locally, then replicated
+            String[] updateShardActions = new String[]{UpdateAction.NAME, IndexAction.NAME + "[r]"};
+            interceptTransportActions(updateShardActions);
+
+            String indexOrAlias = randomIndexOrAlias();
+            
+            String[] indexShardActions = new String[]{IndexAction.NAME, IndexAction.NAME + "[r]"};
+            interceptTransportActions(indexShardActions);
+            
+            IndexRequest indexRequest = new IndexRequest(randomIndexOrAlias(), "type", "id").source("field", "value");
+            IndexResponse indexResponse = internalCluster().clientNodeClient().index(indexRequest).actionGet();
+            clearInterceptedActions();
+            assertSameIndices(indexRequest, indexShardActions);
+            
+            UpdateRequest updateRequest = new UpdateRequest(indexOrAlias, "type", "id").upsert("field", "value").doc("field1", "value1");
+            UpdateResponse updateResponse = internalCluster().clientNodeClient().update(updateRequest).actionGet();
+            assertThat( updateResponse.getVersion(), greaterThan(indexResponse.getVersion()));
+
+            clearInterceptedActions();
+            System.out.println("updateRequest "+updateRequest +" updateShardActions = "+updateShardActions );
+            assertSameIndicesOptionalRequests(updateRequest, updateShardActions);
+    }
+    
     @Test
     public void testUpdateDelete() {
         //update action goes to the primary, delete op gets executed locally, then replicated
