diff --git a/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
index 7eb939ca8274..f2ba62fefd43 100644
--- a/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
+++ b/core/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
@@ -131,7 +131,8 @@ public String reason() {
 
     @Override
     public String toString() {
-        return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "], cause [" + (cause == null ? "_na" : ExceptionsHelper.stackTrace(cause)) + "]";
+        return "shard [" + (shardTarget == null ? "_na" : shardTarget) + "], reason [" + reason + "], cause [" +
+                (cause == null ? "_na" : ExceptionsHelper.stackTrace(cause)) + "]";
     }
 
     public static ShardSearchFailure readShardSearchFailure(StreamInput in) throws IOException {
@@ -210,9 +211,12 @@ public static ShardSearchFailure fromXContent(XContentParser parser) throws IOEx
                 parser.skipChildren();
             }
         }
-        return new ShardSearchFailure(exception,
-                new SearchShardTarget(nodeId,
-                        new ShardId(new Index(indexName, IndexMetaData.INDEX_UUID_NA_VALUE), shardId), null, OriginalIndices.NONE));
+        SearchShardTarget searchShardTarget = null;
+        if (nodeId != null) {
+            searchShardTarget = new SearchShardTarget(nodeId,
+                    new ShardId(new Index(indexName, IndexMetaData.INDEX_UUID_NA_VALUE), shardId), null, OriginalIndices.NONE);
+        }
+        return new ShardSearchFailure(exception, searchShardTarget);
     }
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java
index 02c4964af3cc..999c348b5758 100644
--- a/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java
+++ b/core/src/test/java/org/elasticsearch/action/search/SearchResponseTests.java
@@ -175,7 +175,7 @@ public void testFromXContentWithFailures() throws IOException {
                 ShardSearchFailure parsedFailure = parsed.getShardFailures()[i];
                 ShardSearchFailure originalFailure = failures[i];
                 assertEquals(originalFailure.index(), parsedFailure.index());
-                assertEquals(originalFailure.shard().getNodeId(), parsedFailure.shard().getNodeId());
+                assertEquals(originalFailure.shard(), parsedFailure.shard());
                 assertEquals(originalFailure.shardId(), parsedFailure.shardId());
                 String originalMsg = originalFailure.getCause().getMessage();
                 assertEquals(parsedFailure.getCause().getMessage(), "Elasticsearch exception [type=parsing_exception, reason=" +
diff --git a/core/src/test/java/org/elasticsearch/action/search/ShardSearchFailureTests.java b/core/src/test/java/org/elasticsearch/action/search/ShardSearchFailureTests.java
index 9a8c0b1feb1d..13625a2bc612 100644
--- a/core/src/test/java/org/elasticsearch/action/search/ShardSearchFailureTests.java
+++ b/core/src/test/java/org/elasticsearch/action/search/ShardSearchFailureTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.action.search;
 
 import org.elasticsearch.action.OriginalIndices;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.xcontent.ToXContent;
@@ -40,12 +41,14 @@
     public static ShardSearchFailure createTestItem() {
         String randomMessage = randomAlphaOfLengthBetween(3, 20);
         Exception ex = new ParsingException(0, 0, randomMessage , new IllegalArgumentException("some bad argument"));
-        String nodeId = randomAlphaOfLengthBetween(5, 10);
-        String indexName = randomAlphaOfLengthBetween(5, 10);
-        String indexUuid = randomAlphaOfLengthBetween(5, 10);
-        int shardId = randomInt();
-        return new ShardSearchFailure(ex,
-                new SearchShardTarget(nodeId, new ShardId(new Index(indexName, indexUuid), shardId), null, null));
+        SearchShardTarget searchShardTarget = null;
+        if (randomBoolean()) {
+            String nodeId = randomAlphaOfLengthBetween(5, 10);
+            String indexName = randomAlphaOfLengthBetween(5, 10);
+            searchShardTarget = new SearchShardTarget(nodeId,
+                    new ShardId(new Index(indexName, IndexMetaData.INDEX_UUID_NA_VALUE), randomInt()), null, null);
+        }
+        return new ShardSearchFailure(ex, searchShardTarget);
     }
 
     public void testFromXContent() throws IOException {
@@ -80,10 +83,10 @@ private void doFromXContentTestWithRandomFields(boolean addRandomFields) throws
             assertNull(parser.nextToken());
         }
         assertEquals(response.index(), parsed.index());
-        assertEquals(response.shard().getNodeId(), parsed.shard().getNodeId());
+        assertEquals(response.shard(), parsed.shard());
         assertEquals(response.shardId(), parsed.shardId());
 
-        /**
+        /*
          * we cannot compare the cause, because it will be wrapped in an outer
          * ElasticSearchException best effort: try to check that the original
          * message appears somewhere in the rendered xContent
