diff --git a/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java b/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java
index f09a298092e3..f57a5b75e161 100644
--- a/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java
+++ b/src/main/java/org/elasticsearch/action/admin/indices/get/GetIndexResponse.java
@@ -22,16 +22,25 @@
 import com.carrotsearch.hppc.cursors.ObjectObjectCursor;
 import com.google.common.collect.ImmutableList;
 import org.elasticsearch.action.ActionResponse;
+import org.elasticsearch.action.admin.indices.alias.get.GetAliasesResponse;
+import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;
+import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
+import org.elasticsearch.action.admin.indices.warmer.get.GetWarmersResponse;
 import org.elasticsearch.cluster.metadata.AliasMetaData;
 import org.elasticsearch.cluster.metadata.MappingMetaData;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
+import org.elasticsearch.common.collect.ImmutableOpenMap.Builder;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.search.warmer.IndexWarmersMetaData;
+import org.elasticsearch.search.warmer.IndexWarmersMetaData.Entry;
 
 import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 /**
  * A response for a delete index action.
@@ -189,4 +198,52 @@ public void writeTo(StreamOutput out) throws IOException {
             ImmutableSettings.writeSettingsToStream(indexEntry.value, out);
         }
     }
+
+    public static GetIndexResponse convertResponses(GetAliasesResponse aliasesResponse, GetMappingsResponse mappingsResponse,
+            GetSettingsResponse settingsResponse, GetWarmersResponse warmersResponse) {
+        Set<String> indices = new HashSet<String>();
+        Builder<String, ImmutableList<AliasMetaData>> aliasesBuilder = ImmutableOpenMap.builder();
+        if (aliasesResponse != null) {
+            ImmutableOpenMap<String, List<AliasMetaData>> returnedAliasesMap = aliasesResponse.getAliases();
+            if (returnedAliasesMap != null) {
+                for (ObjectObjectCursor<String, List<AliasMetaData>> entry : returnedAliasesMap) {
+                    ImmutableList.Builder<AliasMetaData> listBuilder = ImmutableList.builder();
+                    listBuilder.addAll(entry.value);
+                    aliasesBuilder.put(entry.key, listBuilder.build());
+                    indices.add(entry.key);
+                }
+            }
+        }
+        ImmutableOpenMap<String, ImmutableList<AliasMetaData>> aliases = aliasesBuilder.build();
+        ImmutableOpenMap<String, ImmutableList<Entry>> warmers = null;
+        if (warmersResponse != null) {
+            warmers = warmersResponse.getWarmers();
+            if (warmers != null) {
+                for (ObjectObjectCursor<String, ImmutableList<Entry>> warmer : warmers) {
+                    indices.add(warmer.key);
+                }
+            }
+        }
+        ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappings = null;
+        if (mappingsResponse != null) {
+            mappings = mappingsResponse.getMappings();
+            if (mappings != null) {
+                for (ObjectObjectCursor<String, ImmutableOpenMap<String, MappingMetaData>> mapping : mappings) {
+                    indices.add(mapping.key);
+                }
+            }
+        }
+        ImmutableOpenMap<String, Settings> indexToSettings = null;
+        if (settingsResponse != null) {
+            indexToSettings = settingsResponse.getIndexToSettings();
+            if (indexToSettings != null) {
+                for (ObjectObjectCursor<String, Settings> settings : indexToSettings) {
+                    indices.add(settings.key);
+                }
+            }
+        }
+        GetIndexResponse response = new GetIndexResponse(indices.toArray(new String[indices.size()]), warmers, mappings,
+                aliases, indexToSettings);
+        return response;
+    }
 }
diff --git a/src/main/java/org/elasticsearch/client/support/AbstractIndicesAdminClient.java b/src/main/java/org/elasticsearch/client/support/AbstractIndicesAdminClient.java
index 75178e51a169..b692d42e6301 100644
--- a/src/main/java/org/elasticsearch/client/support/AbstractIndicesAdminClient.java
+++ b/src/main/java/org/elasticsearch/client/support/AbstractIndicesAdminClient.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.client.support;
 
+import org.elasticsearch.ElasticsearchIllegalStateException;
+import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.action.*;
 import org.elasticsearch.action.admin.indices.alias.IndicesAliasesAction;
 import org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequest;
@@ -142,6 +144,7 @@
 import org.elasticsearch.action.admin.indices.warmer.put.PutWarmerResponse;
 import org.elasticsearch.client.IndicesAdminClient;
 import org.elasticsearch.common.Nullable;
+import org.elasticsearch.transport.ActionNotFoundTransportException;
 
 /**
  *
@@ -239,8 +242,57 @@ public AliasesExistRequestBuilder prepareAliasesExist(String... aliases) {
     }
 
     @Override
-    public void getIndex(GetIndexRequest request, ActionListener<GetIndexResponse> listener) {
-        execute(GetIndexAction.INSTANCE, request, listener);
+    public void getIndex(final GetIndexRequest request, final ActionListener<GetIndexResponse> listener) {
+        execute(GetIndexAction.INSTANCE, request, new ActionListener<GetIndexResponse>() {
+
+            @Override
+            public void onResponse(GetIndexResponse response) {
+                listener.onResponse(response);
+            }
+
+            @Override
+            public void onFailure(Throwable e) {
+                Throwable rootCause = ExceptionsHelper.unwrapCause(e);
+                if (rootCause instanceof ActionNotFoundTransportException) {
+                    String[] features = request.features();
+                    GetAliasesResponse aliasResponse = null;
+                    GetMappingsResponse mappingResponse = null;
+                    GetSettingsResponse settingsResponse = null;
+                    GetWarmersResponse warmerResponse = null;
+                    try {
+                        for (String feature : features) {
+                            switch (feature) {
+                            case "_alias":
+                            case "_aliases":
+                                aliasResponse = prepareGetAliases(new String[0]).addIndices(request.indices())
+                                        .setIndicesOptions(request.indicesOptions()).get();
+                                break;
+                            case "_mapping":
+                            case "_mappings":
+                                mappingResponse = prepareGetMappings(request.indices()).setIndicesOptions(request.indicesOptions()).get();
+                                break;
+                            case "_settings":
+                                settingsResponse = prepareGetSettings(request.indices()).setIndicesOptions(request.indicesOptions()).get();
+                                break;
+                            case "_warmer":
+                            case "_warmers":
+                                warmerResponse = prepareGetWarmers(request.indices()).setIndicesOptions(request.indicesOptions()).get();
+                                break;
+                            default:
+                                throw new ElasticsearchIllegalStateException("feature [" + feature + "] is not valid");
+                            }
+                        }
+                        GetIndexResponse getIndexResponse = GetIndexResponse.convertResponses(aliasResponse, mappingResponse,
+                                settingsResponse, warmerResponse);
+                        onResponse(getIndexResponse);
+                    } catch (Throwable e1) {
+                        listener.onFailure(e1);
+                    }
+                } else {
+                    listener.onFailure(e);
+                }
+            }
+        });
     }
 
     @Override
diff --git a/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityTests.java b/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityTests.java
new file mode 100644
index 000000000000..0bdc21dce761
--- /dev/null
+++ b/src/test/java/org/elasticsearch/bwcompat/GetIndexBackwardsCompatibilityTests.java
@@ -0,0 +1,110 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.bwcompat;
+
+import com.google.common.collect.ImmutableList;
+import org.elasticsearch.action.admin.indices.alias.Alias;
+import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
+import org.elasticsearch.action.admin.indices.get.GetIndexResponse;
+import org.elasticsearch.cluster.metadata.AliasMetaData;
+import org.elasticsearch.cluster.metadata.MappingMetaData;
+import org.elasticsearch.common.collect.ImmutableOpenMap;
+import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.search.warmer.IndexWarmersMetaData.Entry;
+import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;
+import org.junit.Test;
+
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
+import static org.hamcrest.Matchers.*;
+
+public class GetIndexBackwardsCompatibilityTests extends ElasticsearchBackwardsCompatIntegrationTest {
+
+    @Test
+    public void testGetAliases() throws Exception {
+        CreateIndexResponse createIndexResponse = prepareCreate("test").addAlias(new Alias("testAlias")).execute().actionGet();
+        assertAcked(createIndexResponse);
+        GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().addIndices("test").addFeatures("_aliases")
+                .execute().actionGet();
+        ImmutableOpenMap<String, ImmutableList<AliasMetaData>> aliasesMap = getIndexResponse.aliases();
+        assertThat(aliasesMap, notNullValue());
+        assertThat(aliasesMap.size(), equalTo(1));
+        ImmutableList<AliasMetaData> aliasesList = aliasesMap.get("test");
+        assertThat(aliasesList, notNullValue());
+        assertThat(aliasesList.size(), equalTo(1));
+        AliasMetaData alias = aliasesList.get(0);
+        assertThat(alias, notNullValue());
+        assertThat(alias.alias(), equalTo("testAlias"));
+    }
+
+    @Test
+    public void testGetMappings() throws Exception {
+        CreateIndexResponse createIndexResponse = prepareCreate("test").addMapping("type1", "{\"type1\":{}}").execute().actionGet();
+        assertAcked(createIndexResponse);
+        GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().addIndices("test").addFeatures("_mappings")
+                .execute().actionGet();
+        ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetaData>> mappings = getIndexResponse.mappings();
+        assertThat(mappings, notNullValue());
+        assertThat(mappings.size(), equalTo(1));
+        ImmutableOpenMap<String, MappingMetaData> indexMappings = mappings.get("test");
+        assertThat(indexMappings, notNullValue());
+        assertThat(indexMappings.size(), anyOf(equalTo(1), equalTo(2)));
+        if (indexMappings.size() == 2) {
+            MappingMetaData mapping = indexMappings.get("_default_");
+            assertThat(mapping, notNullValue());
+        }
+        MappingMetaData mapping = indexMappings.get("type1");
+        assertThat(mapping, notNullValue());
+        assertThat(mapping.type(), equalTo("type1"));
+    }
+
+    @Test
+    public void testGetSettings() throws Exception {
+        CreateIndexResponse createIndexResponse = prepareCreate("test").setSettings(ImmutableSettings.builder().put("number_of_shards", 1)).execute().actionGet();
+        assertAcked(createIndexResponse);
+        GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().addIndices("test").addFeatures("_settings")
+                .execute().actionGet();
+        ImmutableOpenMap<String, Settings> settingsMap = getIndexResponse.settings();
+        assertThat(settingsMap, notNullValue());
+        assertThat(settingsMap.size(), equalTo(1));
+        Settings settings = settingsMap.get("test");
+        assertThat(settings, notNullValue());
+        assertThat(settings.get("index.number_of_shards"), equalTo("1"));
+    }
+
+    @Test
+    public void testGetWarmers() throws Exception {
+        createIndex("test");
+        ensureSearchable("test");
+        assertAcked(client().admin().indices().preparePutWarmer("warmer1").setSearchRequest(client().prepareSearch("test")).get());
+        ensureSearchable("test");
+        GetIndexResponse getIndexResponse = client().admin().indices().prepareGetIndex().addIndices("test").addFeatures("_warmers")
+                .execute().actionGet();
+        ImmutableOpenMap<String, ImmutableList<Entry>> warmersMap = getIndexResponse.warmers();
+        assertThat(warmersMap, notNullValue());
+        assertThat(warmersMap.size(), equalTo(1));
+        ImmutableList<Entry> warmersList = warmersMap.get("test");
+        assertThat(warmersList, notNullValue());
+        assertThat(warmersList.size(), equalTo(1));
+        Entry warmer = warmersList.get(0);
+        assertThat(warmer, notNullValue());
+        assertThat(warmer.name(), equalTo("warmer1"));
+    }
+}
