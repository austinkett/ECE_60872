diff --git a/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java b/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java
index 7236e6eab39f..a17038c4c0b7 100644
--- a/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java
+++ b/core/src/main/java/org/elasticsearch/script/StoredScriptSource.java
@@ -138,8 +138,6 @@ private StoredScriptSource build() {
 
             if (code == null) {
                 throw new IllegalArgumentException("must specify code for stored script");
-            } else if (code.isEmpty()) {
-                throw new IllegalArgumentException("code cannot be empty");
             }
 
             if (options.size() > 1 || options.size() == 1 && options.get(Script.CONTENT_TYPE_OPTION) == null) {
diff --git a/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java
index aa9d8297330d..48909aa64511 100644
--- a/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java
+++ b/core/src/test/java/org/elasticsearch/script/ScriptMetaDataTests.java
@@ -20,9 +20,12 @@
 
 import org.elasticsearch.cluster.DiffableUtils;
 import org.elasticsearch.common.bytes.BytesArray;
+import org.elasticsearch.common.xcontent.NamedXContentRegistry;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
+import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.test.ESTestCase;
 
 import java.io.IOException;
@@ -60,6 +63,32 @@ public void testGetScript() throws Exception {
         assertEquals("{\"field\":\"value\"}", scriptMetaData.getStoredScript("any", "lang").getCode());
     }
 
+    public void testEmptyScript() throws Exception {
+        ScriptMetaData.Builder builder = new ScriptMetaData.Builder(null);
+
+        XContentBuilder sourceBuilder = XContentFactory.jsonBuilder();
+        sourceBuilder.startObject().field("template", "").endObject();
+        builder.storeScript("template_field", StoredScriptSource.parse("lang", sourceBuilder.bytes(), sourceBuilder.contentType()));
+
+        sourceBuilder = XContentFactory.jsonBuilder();
+        sourceBuilder.startObject().startObject("script").field("code", "").endObject().endObject();
+        builder.storeScript("script", StoredScriptSource.parse("lang", sourceBuilder.bytes(), sourceBuilder.contentType()));
+
+        sourceBuilder = XContentFactory.jsonBuilder();
+        sourceBuilder.startObject().field("script", "").endObject();
+        builder.storeScript("script_field", StoredScriptSource.parse("lang", sourceBuilder.bytes(), sourceBuilder.contentType()));
+
+        ScriptMetaData scriptMetaData = builder.build();
+
+        XContentBuilder metaDataBuilder = XContentFactory.jsonBuilder();
+        metaDataBuilder.startObject();
+        scriptMetaData.toXContent(metaDataBuilder, null);
+        metaDataBuilder.endObject();
+
+        XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, metaDataBuilder.bytes());
+        ScriptMetaData.fromXContent(parser);
+    }
+
     public void testDiff() throws Exception {
         ScriptMetaData.Builder builder = new ScriptMetaData.Builder(null);
         builder.storeScript("1", StoredScriptSource.parse("lang", new BytesArray("{\"foo\":\"abc\"}"), XContentType.JSON));
diff --git a/core/src/test/java/org/elasticsearch/script/StoredScriptTests.java b/core/src/test/java/org/elasticsearch/script/StoredScriptTests.java
index c653888f2a5c..bb8c96f93f4c 100644
--- a/core/src/test/java/org/elasticsearch/script/StoredScriptTests.java
+++ b/core/src/test/java/org/elasticsearch/script/StoredScriptTests.java
@@ -324,4 +324,25 @@ public void testSourceParsingErrors() throws Exception {
             assertThat(iae.getMessage(), equalTo("illegal compiler options [{option=option}] specified"));
         }
     }
+
+    public void testEmptyScript() throws Exception {
+        try (XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)) {
+            builder.startObject().field("script").startObject().field("lang", "lang").field("code", "").
+                startObject("options").endObject().endObject().endObject().string();
+
+            StoredScriptSource parsed = StoredScriptSource.parse(null, builder.bytes(), XContentType.JSON);
+            StoredScriptSource source = new StoredScriptSource("lang", "", Collections.emptyMap());
+
+            assertThat(parsed, equalTo(source));
+        }
+
+        try (XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON)) {
+            builder.startObject().field("template", "").endObject();
+
+            StoredScriptSource parsed = StoredScriptSource.parse("lang", builder.bytes(), XContentType.JSON);
+            StoredScriptSource source = new StoredScriptSource("lang", "", Collections.emptyMap());
+
+            assertThat(parsed, equalTo(source));
+        }
+    }
 }
