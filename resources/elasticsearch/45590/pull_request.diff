diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java
index 618daf1a7623..e9e84c5088d5 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/SSLService.java
@@ -276,11 +276,11 @@ public boolean isConfigurationValidForServerUsage(SSLConfiguration sslConfigurat
     }
 
     /**
-     * Indicates whether client authentication is enabled for a particular configuration
+     * Indicates whether client authentication is enabled and that the client's certificates are verified
      */
-    public boolean isSSLClientAuthEnabled(SSLConfiguration sslConfiguration) {
+    public boolean isClientAuthEnabledWithVerification(SSLConfiguration sslConfiguration) {
         Objects.requireNonNull(sslConfiguration, "SSLConfiguration cannot be null");
-        return sslConfiguration.sslClientAuth().enabled();
+        return sslConfiguration.sslClientAuth().enabled() && sslConfiguration.verificationMode().isCertificateVerificationEnabled();
     }
 
     /**
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLServiceTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLServiceTests.java
index ce043b4597d8..d1548fc404f3 100644
--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLServiceTests.java
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ssl/SSLServiceTests.java
@@ -298,8 +298,9 @@ public void testIsSSLClientAuthEnabled() throws Exception {
             .put("transport.profiles.foo.port", "9400-9410")
             .build();
         sslService = new SSLService(settings, env);
-        assertTrue(sslService.isSSLClientAuthEnabled(sslService.getSSLConfiguration("xpack.security.transport.ssl")));
-        assertTrue(sslService.isSSLClientAuthEnabled(sslService.getSSLConfiguration("transport.profiles.foo.xpack.security.ssl")));
+        assertTrue(sslService.isClientAuthEnabledWithVerification(sslService.getSSLConfiguration("xpack.security.transport.ssl")));
+        assertTrue(sslService
+                .isClientAuthEnabledWithVerification(sslService.getSSLConfiguration("transport.profiles.foo.xpack.security.ssl")));
     }
 
     public void testThatHttpClientAuthDefaultsToNone() throws Exception {
diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheck.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheck.java
index 8f5012e1ecaf..47c8e56cd854 100644
--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheck.java
+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheck.java
@@ -45,7 +45,7 @@ public BootstrapCheckResult check(BootstrapContext context) {
         if (pkiRealmEnabled) {
             for (String contextName : getSslContextNames(settings)) {
                 final SSLConfiguration configuration = sslService.getSSLConfiguration(contextName);
-                if (sslService.isSSLClientAuthEnabled(configuration)) {
+                if (sslService.isClientAuthEnabledWithVerification(configuration)) {
                     return BootstrapCheckResult.success();
                 }
             }
diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java
index 07c435c4311e..70bd6b4a567c 100644
--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java
+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/Security.java
@@ -911,7 +911,7 @@ public AsyncSender interceptSender(AsyncSender sender) {
         }
         final boolean ssl = HTTP_SSL_ENABLED.get(settings);
         final SSLConfiguration httpSSLConfig = getSslService().getHttpTransportSSLConfiguration();
-        boolean extractClientCertificate = ssl && getSslService().isSSLClientAuthEnabled(httpSSLConfig);
+        boolean extractClientCertificate = ssl && getSslService().isClientAuthEnabledWithVerification(httpSSLConfig);
         return handler -> new SecurityRestFilter(getLicenseState(), threadContext, authcService.get(), handler, extractClientCertificate);
     }
 
diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java
index dfe3105af923..6303310e5970 100644
--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java
+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java
@@ -172,7 +172,7 @@ void assertNoAuthentication(String action) {
         final boolean transportSSLEnabled = XPackSettings.TRANSPORT_SSL_ENABLED.get(settings);
         for (Map.Entry<String, SSLConfiguration> entry : profileConfigurations.entrySet()) {
             final SSLConfiguration profileConfiguration = entry.getValue();
-            final boolean extractClientCert = transportSSLEnabled && sslService.isSSLClientAuthEnabled(profileConfiguration);
+            final boolean extractClientCert = transportSSLEnabled && sslService.isClientAuthEnabledWithVerification(profileConfiguration);
             profileFilters.put(entry.getKey(), new ServerTransportFilter(authcService, authzService, threadPool.getThreadContext(),
                 extractClientCert, destructiveOperations, securityContext, licenseState));
         }
diff --git a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheckTests.java b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheckTests.java
index ec3e0a5132df..ab9333fcb6ba 100644
--- a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheckTests.java
+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/PkiRealmBootstrapCheckTests.java
@@ -51,9 +51,17 @@ public void testBootstrapCheckWithPkiRealm() throws Exception {
         env = TestEnvironment.newEnvironment(settings);
         assertFalse(runCheck(settings, env).isFailure());
 
+        // disable verification mode
+        settings = Settings.builder().put(settings)
+                .put("xpack.security.http.ssl.verification_mode", "none")
+                .build();
+        env = TestEnvironment.newEnvironment(settings);
+        assertTrue(runCheck(settings, env).isFailure());
+
         // disable http ssl
         settings = Settings.builder().put(settings)
                 .put("xpack.security.http.ssl.enabled", false)
+                .put("xpack.security.http.ssl.verification_mode", randomFrom("certificate", "full"))
                 .build();
         env = TestEnvironment.newEnvironment(settings);
         assertTrue(runCheck(settings, env).isFailure());
@@ -68,11 +76,18 @@ public void testBootstrapCheckWithPkiRealm() throws Exception {
         // test with transport profile
         settings = Settings.builder().put(settings)
                 .put("xpack.security.transport.ssl.enabled", true)
-                .put("xpack.security.transport.client_authentication", "none")
+                .put("xpack.security.transport.ssl.client_authentication", "none")
                 .put("transport.profiles.foo.xpack.security.ssl.client_authentication", randomFrom("required", "optional"))
                 .build();
         env = TestEnvironment.newEnvironment(settings);
         assertFalse(runCheck(settings, env).isFailure());
+
+        // disable verification mode for profile
+        settings = Settings.builder().put(settings)
+                .put("transport.profiles.foo.xpack.security.ssl.verification_mode", "none")
+                .build();
+        env = TestEnvironment.newEnvironment(settings);
+        assertTrue(runCheck(settings, env).isFailure());
     }
 
     private BootstrapCheck.BootstrapCheckResult runCheck(Settings settings, Environment env) throws Exception {
diff --git a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationFailUnverifiedTests.java b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationFailUnverifiedTests.java
new file mode 100644
index 000000000000..ba0c2b116427
--- /dev/null
+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationFailUnverifiedTests.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
+ * or more contributor license agreements. Licensed under the Elastic License;
+ * you may not use this file except in compliance with the Elastic License.
+ */
+
+package org.elasticsearch.xpack.security.authc.pki;
+
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.util.EntityUtils;
+import org.elasticsearch.common.network.NetworkAddress;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.transport.TransportAddress;
+import org.elasticsearch.http.HttpServerTransport;
+import org.elasticsearch.test.SecuritySingleNodeTestCase;
+import org.elasticsearch.xpack.core.common.socket.SocketAccess;
+import org.elasticsearch.xpack.core.ssl.CertParsingUtils;
+import org.elasticsearch.xpack.core.ssl.PemUtils;
+import org.elasticsearch.xpack.core.ssl.SSLClientAuth;
+import org.elasticsearch.xpack.core.ssl.VerificationMode;
+
+import java.net.InetSocketAddress;
+import java.security.SecureRandom;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.stream.Collectors;
+
+import javax.net.ssl.KeyManager;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+
+import static org.elasticsearch.test.SecuritySettingsSource.addSSLSettingsForNodePEMFiles;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.is;
+
+public class PkiAuthenticationFailUnverifiedTests extends SecuritySingleNodeTestCase {
+
+    @Override
+    protected boolean addMockHttpTransport() {
+        return false; // enable http
+    }
+
+    @Override
+    protected Settings nodeSettings() {
+        SSLClientAuth sslClientAuth = randomBoolean() ? SSLClientAuth.REQUIRED : SSLClientAuth.OPTIONAL;
+        Settings.Builder builder = Settings.builder()
+            .put(super.nodeSettings());
+        addSSLSettingsForNodePEMFiles(builder, "xpack.security.http.", true);
+        builder.put("xpack.security.http.ssl.enabled", true)
+            .put("xpack.security.http.ssl.client_authentication", sslClientAuth)
+            // verification mode does not validate certificates, hence those should not be used by the PKI realm
+            .put("xpack.security.http.ssl.verification_mode", VerificationMode.NONE)
+            .put("xpack.security.authc.realms.file.file.order", "0")
+            .put("xpack.security.authc.realms.pki.pki1.order", "1")
+            .putList("xpack.security.authc.realms.pki.pki1.certificate_authorities",
+                getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient.crt").toString())
+            .put("xpack.security.authc.realms.pki.pki1.files.role_mapping", getDataPath("role_mapping.yml"));
+        return builder.build();
+    }
+
+    public void testAuthenticationFailsWithMissingCredentials() throws Exception {
+        SSLContext context = getRestSSLContext("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem",
+            "testnode",
+            "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt",
+            Arrays.asList("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient.crt",
+                "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.crt",
+                "/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode_ec.crt"));
+        try (CloseableHttpClient client = HttpClients.custom().setSSLContext(context).build()) {
+            HttpPut put = new HttpPut(getNodeUrl() + "foo");
+            try (CloseableHttpResponse response = SocketAccess.doPrivileged(() -> client.execute(put))) {
+                assertThat(response.getStatusLine().getStatusCode(), is(401));
+                String body = EntityUtils.toString(response.getEntity());
+                assertThat(body, containsString("missing authentication credentials for REST request"));
+            }
+        }
+    }
+
+    private SSLContext getRestSSLContext(String keyPath, String password, String certPath, List<String> trustedCertPaths) throws Exception {
+        SSLContext context = SSLContext.getInstance("TLS");
+        TrustManager tm = CertParsingUtils.trustManager(CertParsingUtils.readCertificates(trustedCertPaths.stream().map(p -> getDataPath
+            (p)).collect(Collectors.toList())));
+        KeyManager km = CertParsingUtils.keyManager(CertParsingUtils.readCertificates(Collections.singletonList(getDataPath
+            (certPath))), PemUtils.readPrivateKey(getDataPath(keyPath), password::toCharArray), password.toCharArray());
+        context.init(new KeyManager[]{km}, new TrustManager[]{tm}, new SecureRandom());
+        return context;
+    }
+
+    private String getNodeUrl() {
+        TransportAddress transportAddress = randomFrom(node().injector().getInstance(HttpServerTransport.class)
+                .boundAddress().boundAddresses());
+        final InetSocketAddress inetSocketAddress = transportAddress.address();
+        return String.format(Locale.ROOT, "https://%s/", NetworkAddress.format(inetSocketAddress));
+    }
+}
diff --git a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationTests.java b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationTests.java
index 1e5b188160ce..e500700349fb 100644
--- a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationTests.java
+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/pki/PkiAuthenticationTests.java
@@ -59,7 +59,6 @@ protected Settings nodeSettings() {
             .putList("xpack.security.authc.realms.pki.pki1.certificate_authorities",
                 getDataPath("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testclient.crt").toString())
             .put("xpack.security.authc.realms.pki.pki1.files.role_mapping", getDataPath("role_mapping.yml"))
-            .put("xpack.security.authc.realms.pki.pki1.files.role_mapping", getDataPath("role_mapping.yml"))
             // pki1 never authenticates because of the principal pattern
             .put("xpack.security.authc.realms.pki.pki1.username_pattern", "CN=(MISMATCH.*?)(?:,|$)")
             .put("xpack.security.authc.realms.pki.pki2.order", "2")
@@ -70,17 +69,6 @@ protected Settings nodeSettings() {
         return builder.build();
     }
 
-    @Override
-    protected boolean transportSSLEnabled() {
-        return true;
-    }
-
-    @Override
-    protected boolean enableWarningsCheck() {
-        // TODO: consider setting this back to true now that the transport client is gone
-        return false;
-    }
-
     public void testRestAuthenticationViaPki() throws Exception {
         SSLContext context = getRestSSLContext("/org/elasticsearch/xpack/security/transport/ssl/certs/simple/testnode.pem",
             "testnode",
