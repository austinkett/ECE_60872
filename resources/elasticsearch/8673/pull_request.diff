diff --git a/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java
index e1b6751ff2f8..2e504015df4a 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/bucket/nested/ReverseNestedAggregator.java
@@ -45,6 +45,7 @@
 public class ReverseNestedAggregator extends SingleBucketAggregator implements ReaderContextAware {
 
     private final FixedBitSetFilter parentFilter;
+    private final String nestedPath;
     private DocIdSetIterator parentDocs;
 
     // TODO: Add LongIntPagedHashMap?
@@ -53,6 +54,7 @@
 
     public ReverseNestedAggregator(String name, AggregatorFactories factories, String nestedPath, AggregationContext aggregationContext, Aggregator parent) {
         super(name, factories, aggregationContext, parent);
+        this.nestedPath = nestedPath;
 
         // Early validation
         NestedAggregator closestNestedAggregator = findClosestNestedAggregator(parent);
@@ -127,7 +129,7 @@ private void innerCollect(int parentDoc, long bucketOrd) throws IOException {
         collectBucket(parentDoc, bucketOrd);
     }
 
-    private static NestedAggregator findClosestNestedAggregator(Aggregator parent) {
+    static NestedAggregator findClosestNestedAggregator(Aggregator parent) {
         for (; parent != null; parent = parent.parent()) {
             if (parent instanceof NestedAggregator) {
                 return (NestedAggregator) parent;
@@ -150,6 +152,10 @@ Filter getParentFilter() {
         return parentFilter;
     }
 
+    public String getNestedPath() {
+        return nestedPath;
+    }
+
     @Override
     protected void doClose() {
         Releasables.close(bucketOrdToLastCollectedParentDocRecycler);
diff --git a/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregator.java
index ac82263cb4c8..149270d7fe6d 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregator.java
@@ -26,7 +26,10 @@
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.lucene.ScorerAware;
 import org.elasticsearch.common.util.LongObjectPagedHashMap;
+import org.elasticsearch.search.SearchParseException;
 import org.elasticsearch.search.aggregations.*;
+import org.elasticsearch.search.aggregations.bucket.nested.NestedAggregator;
+import org.elasticsearch.search.aggregations.bucket.nested.ReverseNestedAggregator;
 import org.elasticsearch.search.aggregations.metrics.MetricsAggregator;
 import org.elasticsearch.search.aggregations.support.AggregationContext;
 import org.elasticsearch.search.fetch.FetchPhase;
@@ -156,8 +159,20 @@ public Factory(String name, FetchPhase fetchPhase, TopHitsContext topHitsContext
         }
 
         @Override
-        public Aggregator create(AggregationContext aggregationContext, Aggregator parent, long expectedBucketsCount) {
-            return new TopHitsAggregator(fetchPhase, topHitsContext, name, expectedBucketsCount, aggregationContext, parent);
+        public Aggregator create(AggregationContext context, Aggregator parent, long expectedBucketsCount) {
+            boolean seenReverseNestedAgg = false;
+            for (; parent != null; parent = parent.parent()) {
+                if (parent instanceof ReverseNestedAggregator) {
+                    if (!seenReverseNestedAgg && ((ReverseNestedAggregator) parent).getNestedPath() == null) {
+                        // If the first reverse_nested agg doesn't have a nested path defined then it joins back to the root level.
+                        break;
+                    }
+                    seenReverseNestedAgg = true;
+                } else if (parent instanceof NestedAggregator) {
+                    throw new SearchParseException(context.searchContext(), "top_hits aggregation [" + name + "] can not be defined under a nested aggregator");
+                }
+            }
+            return new TopHitsAggregator(fetchPhase, topHitsContext, name, expectedBucketsCount, context, parent);
         }
 
         @Override
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
index 0dcec77f83cd..3efffc1d2dd6 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
@@ -30,8 +30,8 @@
 import org.elasticsearch.search.aggregations.Aggregator.SubAggCollectionMode;
 import org.elasticsearch.search.aggregations.bucket.terms.Terms;
 import org.elasticsearch.search.aggregations.bucket.terms.TermsAggregatorFactory.ExecutionMode;
-import org.elasticsearch.search.aggregations.metrics.tophits.TopHits;
 import org.elasticsearch.search.aggregations.metrics.max.Max;
+import org.elasticsearch.search.aggregations.metrics.tophits.TopHits;
 import org.elasticsearch.search.highlight.HighlightField;
 import org.elasticsearch.search.sort.SortBuilders;
 import org.elasticsearch.search.sort.SortOrder;
@@ -45,10 +45,9 @@
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.search.aggregations.AggregationBuilders.*;
+import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
-import static org.hamcrest.Matchers.containsString;
-import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.Matchers.not;
+import static org.hamcrest.Matchers.*;
 import static org.hamcrest.core.IsNull.notNullValue;
 
 /**
@@ -66,7 +65,16 @@ public static String randomExecutionHint() {
 
     @Override
     public void setupSuiteScopeCluster() throws Exception {
-        createIndex("idx");
+        assertAcked(prepareCreate("idx").addMapping("nested", jsonBuilder().startObject().startObject("nested").startObject("properties")
+                .startObject("nested_field1")
+                    .field("type", "nested")
+                    .startObject("properties")
+                        .startObject("abc")
+                            .field("type", "string")
+                        .endObject()
+                    .endObject()
+                .endObject()
+                .endObject().endObject().endObject()));
         createIndex("empty");
         List<IndexRequestBuilder> builders = new ArrayList<>();
         for (int i = 0; i < 50; i++) {
@@ -137,11 +145,11 @@ private String key(Terms.Bucket bucket) {
     public void testBasics() throws Exception {
         SearchResponse response = client().prepareSearch("idx").setTypes("type")
                 .addAggregation(terms("terms")
-                        .executionHint(randomExecutionHint())
-                        .field(TERMS_AGGS_FIELD)
-                        .subAggregation(
-                                topHits("hits").addSort(SortBuilders.fieldSort(SORT_FIELD).order(SortOrder.DESC))
-                        )
+                                .executionHint(randomExecutionHint())
+                                .field(TERMS_AGGS_FIELD)
+                                .subAggregation(
+                                        topHits("hits").addSort(SortBuilders.fieldSort(SORT_FIELD).order(SortOrder.DESC))
+                                )
                 )
                 .get();
 
@@ -316,12 +324,12 @@ public void testFetchFeatures() {
                                 .field(TERMS_AGGS_FIELD)
                                 .subAggregation(
                                         topHits("hits").setSize(1)
-                                            .addHighlightedField("text")
-                                            .setExplain(true)
-                                            .addFieldDataField("field1")
-                                            .addScriptField("script", "doc['field1'].value")
-                                            .setFetchSource("text", null)
-                                            .setVersion(true)
+                                                .addHighlightedField("text")
+                                                .setExplain(true)
+                                                .addFieldDataField("field1")
+                                                .addScriptField("script", "doc['field1'].value")
+                                                .setFetchSource("text", null)
+                                                .setVersion(true)
                                 )
                 )
                 .get();
@@ -411,7 +419,7 @@ public void testFailWithSubAgg() throws Exception {
             assertThat(e.getMessage(), containsString("Aggregator [top_tags_hits] of type [top_hits] cannot accept sub-aggregations"));
         }
     }
-    
+
     @Test
     public void testFailDeferredOnlyWhenScorerIsUsed() throws Exception {
         // No track_scores or score based sort defined in top_hits agg, so don't fail:
@@ -503,4 +511,34 @@ public void testTrackScores() throws Exception {
         }
     }
 
+    @Test
+    public void testParsingFailsIfTopHitsAggIsDefinedUnderNestedAgg() throws Exception {
+        try {
+            client().prepareSearch("idx").setTypes("nested")
+                    .addAggregation(nested("nested")
+                                    .path("nested_field1")
+                                    .subAggregation(
+                                            topHits("hits")
+                                    )
+                    )
+                    .get();
+            fail();
+        } catch (SearchPhaseExecutionException e) {
+            assertThat(e.getMessage(), containsString("Parse Failure [top_hits aggregation [hits] can not be defined under a nested aggregator]"));
+        }
+
+        // Valid since the top_hits is joined back to the root level via the reverse_nested agg
+        client().prepareSearch("idx").setTypes("nested")
+                .addAggregation(nested("nested")
+                                .path("nested_field1")
+                                .subAggregation(
+                                        terms("my-bucket").field("abc")
+                                                .subAggregation(
+                                                        reverseNested("go-back")
+                                                                .subAggregation(topHits("my-hits"))
+                                                )
+                                )
+                ).get();
+    }
+
 }
