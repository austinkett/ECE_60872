diff --git a/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
index 515d3204fb6a..e73d7ea84439 100644
--- a/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
+++ b/core/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
@@ -85,8 +85,15 @@ private static Throwable deduplicateCause(Throwable cause, ShardSearchFailure[]
     @Override
     public RestStatus status() {
         if (shardFailures.length == 0) {
-            // if no successful shards, it means no active shards, so just return SERVICE_UNAVAILABLE
-            return RestStatus.SERVICE_UNAVAILABLE;
+            // no successful shard responses or no shard failures
+            Throwable cause = super.getCause();
+            if (cause == null) {
+                // if no successful shards, it means no active shards, so just return SERVICE_UNAVAILABLE
+                return RestStatus.SERVICE_UNAVAILABLE;
+            } else {
+                // no shard failures: exception on node performing reduce
+                return ExceptionsHelper.status(cause);
+            }
         }
         RestStatus status = shardFailures[0].status();
         if (shardFailures.length > 1) {
@@ -150,7 +157,7 @@ protected void innerToXContent(XContentBuilder builder, Params params) throws IO
     @Override
     protected void causeToXContent(XContentBuilder builder, Params params) throws IOException {
         if (super.getCause() != null) {
-            // if the cause is null we inject a guessed root cause that will then be rendered twice so wi disable it manually
+            // if the cause is null we inject a guessed root cause that will then be rendered twice so we disable it manually
             super.causeToXContent(builder, params);
         }
     }
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java
index e3a3ea75762b..09833706168e 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/DateHistogramParser.java
@@ -149,6 +149,7 @@ static InternalOrder resolveOrder(String key, boolean asc) {
         if ("_count".equals(key)) {
             return (InternalOrder) (asc ? InternalOrder.COUNT_ASC : InternalOrder.COUNT_DESC);
         }
+        // TODO check for valid sub-aggregation names and fields here instead of reduce phase.
         return new InternalOrder.Aggregation(key, asc);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramParser.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramParser.java
index 69aed3e733a6..9e2d4d4fdb56 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramParser.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/HistogramParser.java
@@ -141,6 +141,7 @@ static InternalOrder resolveOrder(String key, boolean asc) {
         if ("_count".equals(key)) {
             return (InternalOrder) (asc ? InternalOrder.COUNT_ASC : InternalOrder.COUNT_DESC);
         }
+        // TODO check for valid sub-aggregation names and fields here instead of reduce phase.
         return new InternalOrder.Aggregation(key, asc);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalDateHistogram.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalDateHistogram.java
index 56d3792e0c6b..998bb7d288e6 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalDateHistogram.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalDateHistogram.java
@@ -396,6 +396,12 @@ public InternalAggregation doReduce(List<InternalAggregation> aggregations, Redu
         } else {
             // sorted by sub-aggregation, need to fall back to a costly n*log(n) sort
             CollectionUtil.introSort(reducedBuckets, order.comparator());
+            if (reducedBuckets.size() == 1) {
+                // hack: force check of sub-aggregation names and fields if there is only 1 bucket (sort code bypassed)
+                // TODO check for valid sub-aggregation names and fields during parsing instead of reduce phase
+                Bucket b = reducedBuckets.get(0);
+                order.comparator().compare(b, b);
+            }
         }
 
         return new InternalDateHistogram(getName(), reducedBuckets, order, minDocCount, offset, emptyBucketInfo,
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java
index 4dae51533db3..14a55f0a435b 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/bucket/histogram/InternalHistogram.java
@@ -379,6 +379,12 @@ public InternalAggregation doReduce(List<InternalAggregation> aggregations, Redu
         } else {
             // sorted by sub-aggregation, need to fall back to a costly n*log(n) sort
             CollectionUtil.introSort(reducedBuckets, order.comparator());
+            if (reducedBuckets.size() == 1) {
+                // hack: force check of sub-aggregation names and fields if there is only 1 bucket (sort code bypassed)
+                // TODO check for valid sub-aggregation names and fields during parsing instead of reduce phase
+                Bucket b = reducedBuckets.get(0);
+                order.comparator().compare(b, b);
+            }
         }
 
         return new InternalHistogram(getName(), reducedBuckets, order, minDocCount, emptyBucketInfo, format, keyed, pipelineAggregators(),
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java
index d56a4b7f6042..d2db02f6d7d4 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramIT.java
@@ -18,6 +18,7 @@
  */
 package org.elasticsearch.search.aggregations.bucket;
 
+import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.common.joda.DateMathParser;
@@ -66,6 +67,7 @@
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.core.IsNull.notNullValue;
 
@@ -471,6 +473,23 @@ public void testSingleValuedFieldOrderedBySubAggregationDesc() throws Exception
         }
     }
 
+    public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {
+        try {
+            client().prepareSearch("idx")
+                .addAggregation(dateHistogram("histo")
+                    .field("date")
+                    .dateHistogramInterval(DateHistogramInterval.MONTH)
+                    .order(Histogram.Order.aggregation("stats_missing", "sum", false))
+                    .subAggregation(stats("stats").field("value")))
+                .get();
+            fail();
+        } catch (ElasticsearchException ex) {
+            Throwable rootCause = ex.getRootCause();
+            assertThat(rootCause, instanceOf(IllegalArgumentException.class));
+            assertThat(rootCause.getMessage(), containsString("Invalid order path"));
+        }
+    }
+
     public void testSingleValuedFieldOrderedByMultiValuedSubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(dateHistogram("histo")
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java
index f9334193eefb..6b285d43cd3c 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/HistogramIT.java
@@ -19,6 +19,7 @@
 package org.elasticsearch.search.aggregations.bucket;
 
 import com.carrotsearch.hppc.LongHashSet;
+import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.index.query.QueryBuilders;
@@ -56,6 +57,7 @@
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.lessThanOrEqualTo;
 import static org.hamcrest.core.IsNull.notNullValue;
@@ -470,6 +472,24 @@ public void testSingleValuedFieldOrderedBySubAggregationDesc() throws Exception
         }
     }
 
+    public void testSingleValuedFieldOrderedByMissingSubAggregation() throws Exception {
+        try {
+            client().prepareSearch("idx")
+                .addAggregation(
+                    histogram("histo")
+                        .field(SINGLE_VALUED_FIELD_NAME)
+                        .interval(interval)
+                        .order(Histogram.Order.aggregation("stats_missing.sum", false))
+                        .subAggregation(stats("stats").field(SINGLE_VALUED_FIELD_NAME)))
+                .get();
+            fail();
+        } catch (ElasticsearchException ex) {
+            Throwable rootCause = ex.getRootCause();
+            assertThat(rootCause, instanceOf(IllegalArgumentException.class));
+            assertThat(rootCause.getMessage(), containsString("Invalid order path"));
+        }
+    }
+
     public void testSingleValuedFieldOrderedByMultiValuedSubAggregationDesc() throws Exception {
         SearchResponse response = client().prepareSearch("idx")
                 .addAggregation(
