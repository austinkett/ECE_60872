diff --git a/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java
index 2ed677ff8f9a..153549189f7f 100644
--- a/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java
+++ b/core/src/main/java/org/elasticsearch/common/xcontent/support/AbstractXContentParser.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.common.xcontent.support;
 
 import org.apache.lucene.util.BytesRef;
+import org.apache.lucene.util.SetOnce;
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.Booleans;
 import org.elasticsearch.common.logging.DeprecationLogger;
@@ -54,7 +55,31 @@ private static void checkCoerceString(boolean coerce, Class<? extends Number> cl
         }
     }
 
-    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(Loggers.getLogger(AbstractXContentParser.class));
+    // do not use this field directly, use AbstractXContentParser#getDeprecationLogger
+    private static final SetOnce<DeprecationLogger> deprecationLogger = new SetOnce<>();
+
+    private static DeprecationLogger getDeprecationLogger() {
+        /*
+         * This implementation is intentionally verbose to make the minimum number of volatile reads. In the case that the set once is
+         * already initialized, this implementation makes exactly one volatile read. In the case that the set once is not initialized we
+         * make exactly two volatile reads.
+         */
+        final DeprecationLogger logger = deprecationLogger.get();
+        if (logger == null) {
+            synchronized (AbstractXContentParser.class) {
+                final DeprecationLogger innerLogger = deprecationLogger.get();
+                if (innerLogger == null) {
+                    final DeprecationLogger newLogger = new DeprecationLogger(Loggers.getLogger(AbstractXContentParser.class));
+                    deprecationLogger.set(newLogger);
+                    return newLogger;
+                } else {
+                    return innerLogger;
+                }
+            }
+        } else {
+            return logger;
+        }
+    }
 
     private final NamedXContentRegistry xContentRegistry;
 
@@ -112,7 +137,7 @@ public boolean booleanValue() throws IOException {
             booleanValue = doBooleanValue();
         }
         if (interpretedAsLenient) {
-            deprecationLogger.deprecated("Expected a boolean [true/false] for property [{}] but got [{}]", currentName(), rawValue);
+            getDeprecationLogger().deprecated("Expected a boolean [true/false] for property [{}] but got [{}]", currentName(), rawValue);
         }
         return booleanValue;
 
