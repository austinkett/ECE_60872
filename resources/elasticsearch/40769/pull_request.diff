diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java
index 9538bd4b4d22..5cf2f5f30dbc 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/analyze/TransportAnalyzeAction.java
@@ -178,20 +178,25 @@ protected AnalyzeResponse shardOperation(AnalyzeRequest request, ShardId shardId
     public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Analyzer analyzer, IndexAnalyzers indexAnalyzers,
             AnalysisRegistry analysisRegistry, Environment environment, int maxTokenCount) throws IOException {
         boolean closeAnalyzer = false;
+        if (indexAnalyzers == null) {
+            Settings settings = Settings.builder()
+                .put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)
+                .build();
+            IndexMetaData metaData = IndexMetaData.builder("_none_")
+                .settings(settings)
+                .numberOfShards(1)
+                .numberOfReplicas(1)
+                .build();
+            IndexSettings idxSettings = new IndexSettings(metaData, environment.settings());
+            indexAnalyzers = analysisRegistry.build(idxSettings);
+        }
         if (analyzer == null && request.analyzer() != null) {
-            if (indexAnalyzers == null) {
-                analyzer = analysisRegistry.getAnalyzer(request.analyzer());
-                if (analyzer == null) {
-                    throw new IllegalArgumentException("failed to find global analyzer [" + request.analyzer() + "]");
-                }
-            } else {
-                analyzer = indexAnalyzers.get(request.analyzer());
-                if (analyzer == null) {
-                    throw new IllegalArgumentException("failed to find analyzer [" + request.analyzer() + "]");
-                }
+            analyzer = indexAnalyzers.get(request.analyzer());
+            if (analyzer == null) {
+                throw new IllegalArgumentException("failed to find analyzer [" + request.analyzer() + "]");
             }
         } else if (request.tokenizer() != null) {
-            final IndexSettings indexSettings = indexAnalyzers == null ? null : indexAnalyzers.getIndexSettings();
+            final IndexSettings indexSettings = indexAnalyzers.getIndexSettings();
             Tuple<String, TokenizerFactory> tokenizerFactory = parseTokenizerFactory(request, indexAnalyzers,
                         analysisRegistry, environment);
 
@@ -213,7 +218,7 @@ public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Anal
             }
         } else if (((request.tokenFilters() != null && request.tokenFilters().size() > 0)
                 || (request.charFilters() != null && request.charFilters().size() > 0))) {
-            final IndexSettings indexSettings = indexAnalyzers == null ? null : indexAnalyzers.getIndexSettings();
+            final IndexSettings indexSettings = indexAnalyzers.getIndexSettings();
             // custom normalizer = if normalizer == null but filter or char_filter is not null and tokenizer/analyzer is null
             // get charfilter and filter from request
             List<CharFilterFactory> charFilterFactoryList =
@@ -232,11 +237,7 @@ public static AnalyzeResponse analyze(AnalyzeRequest request, String field, Anal
                 tokenFilterFactoryList.toArray(new TokenFilterFactory[tokenFilterFactoryList.size()]));
             closeAnalyzer = true;
         } else if (analyzer == null) {
-            if (indexAnalyzers == null) {
-                analyzer = analysisRegistry.getAnalyzer("standard");
-            } else {
-                analyzer = indexAnalyzers.getDefaultIndexAnalyzer();
-            }
+            analyzer = indexAnalyzers.getDefaultIndexAnalyzer();
         }
         if (analyzer == null) {
             throw new IllegalArgumentException("failed to find analyzer");
diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/TransportAnalyzeActionTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/TransportAnalyzeActionTests.java
index b0c2e34c3062..abdc3f8f8833 100644
--- a/server/src/test/java/org/elasticsearch/action/admin/indices/TransportAnalyzeActionTests.java
+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/TransportAnalyzeActionTests.java
@@ -131,6 +131,24 @@ public Reader create(Reader reader) {
         idxMaxTokenCount = idxSettings.getMaxTokenCount();
     }
 
+    public void testPositionIncrementGap() throws IOException {
+        AnalyzeRequest request = new AnalyzeRequest();
+        request.text("a", "b");
+        request.analyzer("standard");
+
+        // check against no index
+        AnalyzeResponse response = TransportAnalyzeAction.analyze(request, "text", null, null, registry, environment, maxTokenCount);
+        assertEquals(2, response.getTokens().size());
+        assertEquals(0, response.getTokens().get(0).getPosition());
+        assertEquals(101, response.getTokens().get(1).getPosition());
+
+        // check against defined index
+        response = TransportAnalyzeAction.analyze(request, "text", null, indexAnalyzers, registry, environment, maxTokenCount);
+        assertEquals(2, response.getTokens().size());
+        assertEquals(0, response.getTokens().get(0).getPosition());
+        assertEquals(101, response.getTokens().get(1).getPosition());
+    }
+
     /**
      * Test behavior when the named analysis component isn't defined on the index. In that case we should build with defaults.
      */
@@ -267,7 +285,7 @@ public void testGetIndexAnalyserWithoutIndexAnalyzers() throws IOException {
                     .analyzer("custom_analyzer")
                     .text("the qu1ck brown fox-dog"),
                 "text", null, null, registry, environment, maxTokenCount));
-        assertEquals(e.getMessage(), "failed to find global analyzer [custom_analyzer]");
+        assertEquals(e.getMessage(), "failed to find analyzer [custom_analyzer]");
     }
 
     public void testUnknown() throws IOException {
