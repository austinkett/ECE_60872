diff --git a/docs/reference/setup/configuration.asciidoc b/docs/reference/setup/configuration.asciidoc
index c768a490f536..4a6218b9cc5d 100644
--- a/docs/reference/setup/configuration.asciidoc
+++ b/docs/reference/setup/configuration.asciidoc
@@ -326,3 +326,28 @@ the http://logging.apache.org/log4j/1.2/manual.html[log4j documentation].
 Additional Appenders and other logging classes provided by 
 http://logging.apache.org/log4j/extras/[log4j-extras] are also available, 
 out of the box.
+
+[float]
+[[required units]]
+=== Required units
+
+coming[1.6.0]
+
+As of 1.6.0, Elasticsearch now requires that all time and byte-sized
+settings contain units to prevent accidental mis-configuration.  If
+after upgrading you hit ElasticsearchIllegalArgumentException, locate
+the troubled setting and then double-check and insert the appropriate units.
+For example, a common source of confusion was that
+`index.refresh_interval` defaults to milliseconds, not seconds, so
+`10` meant refresh every 10 milliseconds.
+
+If it is difficult to insert the missing units, or you would like to
+do it later, then you can revert to the pre-1.4.0 lenient behaviour by
+setting:
+
+[source,yaml]
+--------------------------------------------------
+settings.require_units: false
+--------------------------------------------------
+
+in `elasticsearch.yml`.
diff --git a/rest-api-spec/test/create/75_ttl.yaml b/rest-api-spec/test/create/75_ttl.yaml
index 099ed279020f..298aa1353cd6 100644
--- a/rest-api-spec/test/create/75_ttl.yaml
+++ b/rest-api-spec/test/create/75_ttl.yaml
@@ -45,7 +45,7 @@
           type:      test
           id:        1
           body:      { foo: bar }
-          ttl:       100000
+          ttl:       100000ms
  - do:
       get:
           index:   test_1
diff --git a/rest-api-spec/test/index/75_ttl.yaml b/rest-api-spec/test/index/75_ttl.yaml
index 1d73d4ed40fd..6317db5daa14 100644
--- a/rest-api-spec/test/index/75_ttl.yaml
+++ b/rest-api-spec/test/index/75_ttl.yaml
@@ -40,7 +40,7 @@
           type:      test
           id:        1
           body:      { foo: bar }
-          ttl:       100000
+          ttl:       100000ms
  - do:
       get:
           index:   test_1
diff --git a/rest-api-spec/test/update/75_ttl.yaml b/rest-api-spec/test/update/75_ttl.yaml
index f6b05b9eca25..ecb5c38fa041 100644
--- a/rest-api-spec/test/update/75_ttl.yaml
+++ b/rest-api-spec/test/update/75_ttl.yaml
@@ -44,7 +44,7 @@
           body:
             doc:        { foo: baz }
             upsert:     { foo: bar }
-          ttl:       100000
+          ttl:       100000ms
 
  - do:
       get:
diff --git a/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java
index b6665160121e..a6677e8f3aed 100644
--- a/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java
+++ b/src/main/java/org/elasticsearch/action/bulk/BulkRequest.java
@@ -309,8 +309,9 @@ public BulkRequest add(BytesReference data, @Nullable String defaultIndex, @Null
                             timestamp = parser.text();
                         } else if ("_ttl".equals(currentFieldName) || "ttl".equals(currentFieldName)) {
                             if (parser.currentToken() == XContentParser.Token.VALUE_STRING) {
-                                ttl = TimeValue.parseTimeValue(parser.text(), null).millis();
+                                ttl = TimeValue.parseTimeValue(parser.text(), null, "ttl").millis();
                             } else {
+                                // nocommit how to require units here too?
                                 ttl = parser.longValue();
                             }
                         } else if ("op_type".equals(currentFieldName) || "opType".equals(currentFieldName)) {
diff --git a/src/main/java/org/elasticsearch/action/update/UpdateHelper.java b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java
index 4e4a2864f90b..22dc294ed00f 100644
--- a/src/main/java/org/elasticsearch/action/update/UpdateHelper.java
+++ b/src/main/java/org/elasticsearch/action/update/UpdateHelper.java
@@ -257,9 +257,10 @@ private Long getTTLFromScriptContext(Map<String, Object> ctx) {
         Object fetchedTTL = ctx.get("_ttl");
         if (fetchedTTL != null) {
             if (fetchedTTL instanceof Number) {
+                // nocommit how to require units here too?
                 ttl = ((Number) fetchedTTL).longValue();
             } else {
-                ttl = TimeValue.parseTimeValue((String) fetchedTTL, null).millis();
+                ttl = TimeValue.parseTimeValue((String) fetchedTTL, null, "_ttl").millis();
             }
         }
         return ttl;
diff --git a/src/main/java/org/elasticsearch/cluster/settings/Validator.java b/src/main/java/org/elasticsearch/cluster/settings/Validator.java
index 92c1427a1605..9f03a0c53980 100644
--- a/src/main/java/org/elasticsearch/cluster/settings/Validator.java
+++ b/src/main/java/org/elasticsearch/cluster/settings/Validator.java
@@ -45,11 +45,11 @@ public String validate(String setting, String value) {
         @Override
         public String validate(String setting, String value) {
             try {
-                if (TimeValue.parseTimeValue(value, null) == null) {
+                if (TimeValue.parseTimeValue(value, null, setting) == null) {
                     return "cannot parse value [" + value + "] as time";
                 }
             } catch (ElasticsearchParseException ex) {
-                return "cannot parse value [" + value + "] as time";
+                return ex.getMessage();
             }
             return null;
         }
@@ -59,7 +59,7 @@ public String validate(String setting, String value) {
         @Override
         public String validate(String setting, String value) {
             try {
-                TimeValue timeValue = TimeValue.parseTimeValue(value, null);
+                TimeValue timeValue = TimeValue.parseTimeValue(value, null, setting);
                 if (timeValue == null) {
                     return "cannot parse value [" + value + "] as time";
                 }
@@ -67,7 +67,7 @@ public String validate(String setting, String value) {
                     return "cannot parse value [" + value + "] as non negative time";
                 }
             } catch (ElasticsearchParseException ex) {
-                return "cannot parse value [" + value + "] as time";
+                return ex.getMessage();
             }
             return null;
         }
@@ -197,7 +197,7 @@ public String validate(String setting, String value) {
         @Override
         public String validate(String setting, String value) {
             try {
-                parseBytesSizeValue(value);
+                parseBytesSizeValue(value, setting);
             } catch (ElasticsearchParseException ex) {
                 return ex.getMessage();
             }
diff --git a/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
index eca908ddae95..0413e5d1a060 100644
--- a/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
@@ -63,6 +63,19 @@
     public static final Settings EMPTY = new Builder().build();
     private final static Pattern ARRAY_PATTERN = Pattern.compile("(.*)\\.\\d+$");
 
+    /** Name of the setting to use to disable required units for byte size, time settings. */
+    public static final String SETTINGS_REQUIRE_UNITS = "settings.require_units";
+
+    private static boolean settingsRequireUnits = true;
+
+    public static void setSettingsRequireUnits(boolean v) {
+        settingsRequireUnits = v;
+    }
+
+    public static boolean getSettingsRequireUnits() {
+        return settingsRequireUnits;
+    }
+
     private ImmutableMap<String, String> settings;
     private final ImmutableMap<String, String> forcedUnderscoreSettings;
     private transient ClassLoader classLoader;
@@ -358,32 +371,53 @@ public Boolean getAsBoolean(String[] settings, Boolean defaultValue) {
 
     @Override
     public TimeValue getAsTime(String setting, TimeValue defaultValue) {
-        return parseTimeValue(get(setting), defaultValue);
+        return parseTimeValue(get(setting), defaultValue, setting);
     }
 
     @Override
     public TimeValue getAsTime(String[] settings, TimeValue defaultValue) {
-        return parseTimeValue(get(settings), defaultValue);
+        // NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseTimeValue:
+        for (String setting : settings) {
+            String retVal = get(setting);
+            if (retVal != null) {
+                parseTimeValue(get(settings), defaultValue, setting);
+            }
+        }
+        return defaultValue;
     }
 
     @Override
     public ByteSizeValue getAsBytesSize(String setting, ByteSizeValue defaultValue) throws SettingsException {
-        return parseBytesSizeValue(get(setting), defaultValue);
+        return parseBytesSizeValue(get(setting), defaultValue, setting);
     }
 
     @Override
     public ByteSizeValue getAsBytesSize(String[] settings, ByteSizeValue defaultValue) throws SettingsException {
-        return parseBytesSizeValue(get(settings), defaultValue);
+        // NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseBytesSizeValue
+        for (String setting : settings) {
+            String retVal = get(setting);
+            if (retVal != null) {
+                parseBytesSizeValue(get(settings), defaultValue, setting);
+            }
+        }
+        return defaultValue;
     }
 
     @Override
     public ByteSizeValue getAsMemory(String setting, String defaultValue) throws SettingsException {
-        return MemorySizeValue.parseBytesSizeValueOrHeapRatio(get(setting, defaultValue));
+        return MemorySizeValue.parseBytesSizeValueOrHeapRatio(get(setting, defaultValue), setting);
     }
 
     @Override
     public ByteSizeValue getAsMemory(String[] settings, String defaultValue) throws SettingsException {
-        return MemorySizeValue.parseBytesSizeValueOrHeapRatio(get(settings, defaultValue));
+        // NOTE: duplicated from get(String[]) so we can pass which setting name was actually used to parseBytesSizeValueOrHeapRatio
+        for (String setting : settings) {
+            String retVal = get(setting);
+            if (retVal != null) {
+                return MemorySizeValue.parseBytesSizeValueOrHeapRatio(retVal, setting);
+            }
+        }
+        return MemorySizeValue.parseBytesSizeValueOrHeapRatio(defaultValue, null);
     }
 
     @Override
@@ -800,7 +834,7 @@ public Builder put(String setting, double value) {
          * @return The builder
          */
         public Builder put(String setting, long value, TimeUnit timeUnit) {
-            put(setting, timeUnit.toMillis(value));
+            put(setting, timeUnit.toMillis(value) + "ms");
             return this;
         }
 
@@ -812,7 +846,7 @@ public Builder put(String setting, long value, TimeUnit timeUnit) {
          * @return The builder
          */
         public Builder put(String setting, long value, ByteSizeUnit sizeUnit) {
-            put(setting, sizeUnit.toBytes(value));
+            put(setting, sizeUnit.toBytes(value) + "b");
             return this;
         }
 
diff --git a/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java b/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
index 539b25de9b25..6f9be35f4b38 100644
--- a/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
+++ b/src/main/java/org/elasticsearch/common/unit/ByteSizeValue.java
@@ -25,14 +25,12 @@
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.settings.ImmutableSettings;
 
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.Locale;
 
-/**
- *
- */
 public class ByteSizeValue implements Serializable, Streamable {
 
     private long size;
@@ -173,10 +171,14 @@ public String toString() {
     }
 
     public static ByteSizeValue parseBytesSizeValue(String sValue) throws ElasticsearchParseException {
-        return parseBytesSizeValue(sValue, null);
+        return parseBytesSizeValue(sValue, null, null);
+    }
+
+    public static ByteSizeValue parseBytesSizeValue(String sValue, String settingName) throws ElasticsearchParseException {
+        return parseBytesSizeValue(sValue, null, settingName);
     }
 
-    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue) throws ElasticsearchParseException {
+    public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue defaultValue, String settingName) throws ElasticsearchParseException {
         if (sValue == null) {
             return defaultValue;
         }
@@ -205,11 +207,31 @@ public static ByteSizeValue parseBytesSizeValue(String sValue, ByteSizeValue def
                 bytes = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 2)) * ByteSizeUnit.C5);
             } else if (lastTwoChars.endsWith("b")) {
                 bytes = Long.parseLong(sValue.substring(0, sValue.length() - 1));
+            } else if (sValue.equals("-1")) {
+                // Allow this special value to be unit-less:
+                bytes = -1;
+            } else if (sValue.equals("0")) {
+                // Allow this special value to be unit-less:
+                bytes = 0;
             } else {
-                bytes = Long.parseLong(sValue);
+                // Default bytes
+                if (ImmutableSettings.getSettingsRequireUnits()) {
+                    if (settingName != null) {
+                        throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + sValue + "] as a size in bytes: unit is missing or unrecognized");
+                    } else {
+                        throw new ElasticsearchParseException("Failed to parse [" + sValue + "] as a size in bytes: unit is missing or unrecognized");
+                    }
+                } else {
+                    // Leniency default to bytes for bwc:
+                    bytes = Long.parseLong(sValue);
+                }
             }
         } catch (NumberFormatException e) {
-            throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            if (settingName != null) {
+                throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + sValue + "]", e);
+            } else {
+                throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            }
         }
         return new ByteSizeValue(bytes, ByteSizeUnit.BYTES);
     }
@@ -250,4 +272,4 @@ public int hashCode() {
         result = 31 * result + (sizeUnit != null ? sizeUnit.hashCode() : 0);
         return result;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java b/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java
index 2204fe8cac54..ab892a6d88a0 100644
--- a/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java
+++ b/src/main/java/org/elasticsearch/common/unit/MemorySizeValue.java
@@ -32,19 +32,31 @@
      *  <tt>42</tt> (default assumed unit is byte) or <tt>2mb</tt>, or percentages of the heap size: if
      *  the heap is 1G, <tt>10%</tt> will be parsed as <tt>100mb</tt>.  */
     public static ByteSizeValue parseBytesSizeValueOrHeapRatio(String sValue) {
+        return parseBytesSizeValueOrHeapRatio(sValue, null);
+    }
+
+    public static ByteSizeValue parseBytesSizeValueOrHeapRatio(String sValue, String settingName) {
         if (sValue != null && sValue.endsWith("%")) {
             final String percentAsString = sValue.substring(0, sValue.length() - 1);
             try {
                 final double percent = Double.parseDouble(percentAsString);
                 if (percent < 0 || percent > 100) {
-                    throw new ElasticsearchParseException("Percentage should be in [0-100], got " + percentAsString);
+                    if (settingName != null) {
+                        throw new ElasticsearchParseException("setting [" + settingName + "]: Percentage should be in [0-100], got " + percentAsString);
+                    } else {
+                        throw new ElasticsearchParseException("Percentage should be in [0-100], got " + percentAsString);
+                    }
                 }
                 return new ByteSizeValue((long) ((percent / 100) * JvmInfo.jvmInfo().getMem().getHeapMax().bytes()), ByteSizeUnit.BYTES);
             } catch (NumberFormatException e) {
-                throw new ElasticsearchParseException("Failed to parse [" + percentAsString + "] as a double", e);
+                if (settingName != null) {
+                    throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + percentAsString + "] as a double", e);
+                } else {
+                    throw new ElasticsearchParseException("Failed to parse [" + percentAsString + "] as a double", e);
+                }
             }
         } else {
-            return parseBytesSizeValue(sValue);
+            return parseBytesSizeValue(sValue, settingName);
         }
     }
 }
diff --git a/src/main/java/org/elasticsearch/common/unit/SizeValue.java b/src/main/java/org/elasticsearch/common/unit/SizeValue.java
index 458c855d833f..3de153acb248 100644
--- a/src/main/java/org/elasticsearch/common/unit/SizeValue.java
+++ b/src/main/java/org/elasticsearch/common/unit/SizeValue.java
@@ -25,6 +25,7 @@
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.settings.ImmutableSettings;
 
 import java.io.IOException;
 import java.io.Serializable;
@@ -166,10 +167,18 @@ public String toString() {
     }
 
     public static SizeValue parseSizeValue(String sValue) throws ElasticsearchParseException {
-        return parseSizeValue(sValue, null);
+        return parseSizeValue(sValue, null, null);
+    }
+
+    public static SizeValue parseSizeValue(String sValue, String settingName) throws ElasticsearchParseException {
+        return parseSizeValue(sValue, null, settingName);
     }
 
     public static SizeValue parseSizeValue(String sValue, SizeValue defaultValue) throws ElasticsearchParseException {
+        return parseSizeValue(sValue, defaultValue, null);
+    }
+
+    public static SizeValue parseSizeValue(String sValue, SizeValue defaultValue, String settingName) throws ElasticsearchParseException {
         if (sValue == null) {
             return defaultValue;
         }
@@ -191,7 +200,11 @@ public static SizeValue parseSizeValue(String sValue, SizeValue defaultValue) th
                 singles = Long.parseLong(sValue);
             }
         } catch (NumberFormatException e) {
-            throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            if (settingName != null) {
+                throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + sValue + "]", e);
+            } else {
+                throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            }
         }
         return new SizeValue(singles, SizeUnit.SINGLE);
     }
@@ -232,4 +245,4 @@ public int hashCode() {
         result = 31 * result + (sizeUnit != null ? sizeUnit.hashCode() : 0);
         return result;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/org/elasticsearch/common/unit/TimeValue.java b/src/main/java/org/elasticsearch/common/unit/TimeValue.java
index 6ad1bbc0d2e6..5279d085b901 100644
--- a/src/main/java/org/elasticsearch/common/unit/TimeValue.java
+++ b/src/main/java/org/elasticsearch/common/unit/TimeValue.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.settings.ImmutableSettings;
 import org.joda.time.Period;
 import org.joda.time.PeriodType;
 import org.joda.time.format.PeriodFormat;
@@ -33,9 +34,6 @@
 import java.io.Serializable;
 import java.util.concurrent.TimeUnit;
 
-/**
- *
- */
 public class TimeValue implements Serializable, Streamable {
 
     public static TimeValue timeValueNanos(long nanos) {
@@ -226,6 +224,10 @@ public String toString() {
     }
 
     public static TimeValue parseTimeValue(String sValue, TimeValue defaultValue) {
+        return parseTimeValue(sValue, defaultValue, null);
+    }
+
+    public static TimeValue parseTimeValue(String sValue, TimeValue defaultValue, String settingName) {
         if (sValue == null) {
             return defaultValue;
         }
@@ -245,12 +247,31 @@ public static TimeValue parseTimeValue(String sValue, TimeValue defaultValue) {
                 millis = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * 24 * 60 * 60 * 1000);
             } else if (sValue.endsWith("w")) {
                 millis = (long) (Double.parseDouble(sValue.substring(0, sValue.length() - 1)) * 7 * 24 * 60 * 60 * 1000);
+            } else if (sValue.equals("-1")) {
+                // Allow this special value to be unit-less:
+                millis = -1;
+            } else if (sValue.equals("0")) {
+                // Allow this special value to be unit-less:
+                millis = 0;
             } else {
-                millis = Long.parseLong(sValue);
+                if (ImmutableSettings.getSettingsRequireUnits()) {
+                    if (settingName != null) {
+                        throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + sValue + "] as a time value: unit is missing or unrecognized");
+                    } else {
+                        throw new ElasticsearchParseException("Failed to parse [" + sValue + "] as a time value: unit is missing or unrecognized");
+                    }
+                } else {
+                    // Leniency default to msec for bwc:
+                    millis = Long.parseLong(sValue);
+                }
             }
             return new TimeValue(millis, TimeUnit.MILLISECONDS);
         } catch (NumberFormatException e) {
-            throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            if (settingName != null) {
+                throw new ElasticsearchParseException("Failed to parse setting [" + settingName + "] with value [" + sValue + "]", e);
+            } else {
+                throw new ElasticsearchParseException("Failed to parse [" + sValue + "]", e);
+            }
         }
     }
 
diff --git a/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java
index 1a42ce8997dc..226532fc608f 100644
--- a/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java
+++ b/src/main/java/org/elasticsearch/http/netty/HttpRequestHandler.java
@@ -57,7 +57,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
         }
 
         // the netty HTTP handling always copy over the buffer to its own buffer, either in NioWorker internally
-        // when reading, or using a cumalation buffer
+        // when reading, or using a cumulation buffer
         NettyHttpRequest httpRequest = new NettyHttpRequest(request, e.getChannel());
         if (oue != null) {
             serverTransport.dispatchRequest(httpRequest, new NettyHttpChannel(serverTransport, httpRequest, corsPattern, oue, detailedErrorsEnabled));
diff --git a/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
index 5154b2074e12..cb314f5eed49 100644
--- a/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/core/BinaryFieldMapper.java
@@ -117,10 +117,11 @@ public BinaryFieldMapper build(BuilderContext context) {
                     iterator.remove();
                 } else if (fieldName.equals("compress_threshold") && fieldNode != null) {
                     if (fieldNode instanceof Number) {
+                        // nocommit how to require units here too?
                         builder.compressThreshold(((Number) fieldNode).longValue());
                         builder.compress(true);
                     } else {
-                        builder.compressThreshold(ByteSizeValue.parseBytesSizeValue(fieldNode.toString()).bytes());
+                        builder.compressThreshold(ByteSizeValue.parseBytesSizeValue(fieldNode.toString(), "compress_threshold").bytes());
                         builder.compress(true);
                     }
                     iterator.remove();
diff --git a/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java
index 21544a9e8594..13e9a58fec59 100644
--- a/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/internal/SourceFieldMapper.java
@@ -147,9 +147,17 @@ public SourceFieldMapper build(BuilderContext context) {
                 if (fieldName.equals("enabled")) {
                     builder.enabled(nodeBooleanValue(fieldNode));
                     iterator.remove();
-                } else if (fieldName.equals("compress")) {
-                    if (fieldNode != null) {
-                        builder.compress(nodeBooleanValue(fieldNode));
+                } else if (fieldName.equals("compress") && fieldNode != null) {
+                    builder.compress(nodeBooleanValue(fieldNode));
+                    iterator.remove();
+                } else if (fieldName.equals("compress_threshold") && fieldNode != null) {
+                    if (fieldNode instanceof Number) {
+                        // nocommit how to require units here too?
+                        builder.compressThreshold(((Number) fieldNode).longValue());
+                        builder.compress(true);
+                    } else {
+                        builder.compressThreshold(ByteSizeValue.parseBytesSizeValue(fieldNode.toString(), "compress_threshold").bytes());
+                        builder.compress(true);
                     }
                     iterator.remove();
                 } else if (fieldName.equals("compress_threshold")) {
diff --git a/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java
index 4f2c57e3e945..29581d5e76b1 100644
--- a/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/internal/TTLFieldMapper.java
@@ -179,8 +179,9 @@ public void parse(ParseContext context) throws IOException, MapperParsingExcepti
         if (context.sourceToParse().ttl() < 0) { // no ttl has been provided externally
             long ttl;
             if (context.parser().currentToken() == XContentParser.Token.VALUE_STRING) {
-                ttl = TimeValue.parseTimeValue(context.parser().text(), null).millis();
+                ttl = TimeValue.parseTimeValue(context.parser().text(), null, "ttl").millis();
             } else {
+                // nocommit how to require units here too?
                 ttl = context.parser().longValue(coerce.value());
             }
             if (ttl <= 0) {
diff --git a/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java b/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java
index fcb6f3919c6f..58a709b5a29b 100644
--- a/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java
+++ b/src/main/java/org/elasticsearch/node/internal/InternalSettingsPreparer.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.node.internal;
 
 import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.common.Booleans;
 import org.elasticsearch.common.Names;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.collect.Tuple;
@@ -130,6 +131,11 @@
             settingsBuilder.put(ClusterName.SETTING, ClusterName.DEFAULT.value());
         }
 
+        String v = settingsBuilder.get(ImmutableSettings.SETTINGS_REQUIRE_UNITS);
+        if (v != null) {
+            ImmutableSettings.setSettingsRequireUnits(Booleans.parseBoolean(v, true));
+        }
+
         Settings v1 = settingsBuilder.build();
         environment = new Environment(v1);
 
diff --git a/src/main/java/org/elasticsearch/rest/RestRequest.java b/src/main/java/org/elasticsearch/rest/RestRequest.java
index a908e5c55a76..52d96f2de37c 100644
--- a/src/main/java/org/elasticsearch/rest/RestRequest.java
+++ b/src/main/java/org/elasticsearch/rest/RestRequest.java
@@ -141,11 +141,11 @@ public Boolean paramAsBooleanOptional(String key, Boolean defaultValue) {
     }
 
     public TimeValue paramAsTime(String key, TimeValue defaultValue) {
-        return parseTimeValue(param(key), defaultValue);
+        return parseTimeValue(param(key), defaultValue, key);
     }
 
     public ByteSizeValue paramAsSize(String key, ByteSizeValue defaultValue) {
-        return parseBytesSizeValue(param(key), defaultValue);
+        return parseBytesSizeValue(param(key), defaultValue, key);
     }
 
     public String[] paramAsStringArray(String key, String[] defaultValue) {
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/hotthreads/RestNodesHotThreadsAction.java b/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/hotthreads/RestNodesHotThreadsAction.java
index 7c8a970d92c0..5e374079e37a 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/hotthreads/RestNodesHotThreadsAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/cluster/node/hotthreads/RestNodesHotThreadsAction.java
@@ -56,7 +56,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
         nodesHotThreadsRequest.threads(request.paramAsInt("threads", nodesHotThreadsRequest.threads()));
         nodesHotThreadsRequest.ignoreIdleThreads(request.paramAsBoolean("ignore_idle_threads", nodesHotThreadsRequest.ignoreIdleThreads()));
         nodesHotThreadsRequest.type(request.param("type", nodesHotThreadsRequest.type()));
-        nodesHotThreadsRequest.interval(TimeValue.parseTimeValue(request.param("interval"), nodesHotThreadsRequest.interval()));
+        nodesHotThreadsRequest.interval(TimeValue.parseTimeValue(request.param("interval"), nodesHotThreadsRequest.interval(), "interval"));
         nodesHotThreadsRequest.snapshots(request.paramAsInt("snapshots", nodesHotThreadsRequest.snapshots()));
         client.admin().cluster().nodesHotThreads(nodesHotThreadsRequest, new RestResponseListener<NodesHotThreadsResponse>(channel) {
             @Override
diff --git a/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java b/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java
index a9d60e02aa5a..20b914885031 100644
--- a/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/mlt/RestMoreLikeThisAction.java
@@ -74,7 +74,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
         mltRequest.searchFrom(request.paramAsInt("search_from", mltRequest.searchFrom()));
         String searchScroll = request.param("search_scroll");
         if (searchScroll != null) {
-            mltRequest.searchScroll(new Scroll(parseTimeValue(searchScroll, null)));
+            mltRequest.searchScroll(new Scroll(parseTimeValue(searchScroll, null, "search_scroll")));
         }
         if (request.hasContent()) {
             mltRequest.searchSource(request.content());
diff --git a/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java b/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java
index a0e04a1af063..da780bb5fe0a 100644
--- a/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/search/RestSearchAction.java
@@ -110,7 +110,7 @@ public static SearchRequest parseSearchRequest(RestRequest request) {
 
         String scroll = request.param("scroll");
         if (scroll != null) {
-            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null)));
+            searchRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")));
         }
 
         searchRequest.types(Strings.splitStringByCommaToArray(request.param("type")));
diff --git a/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java b/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java
index 4d4c3ce6eb14..770ada8fbb6d 100644
--- a/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/search/RestSearchScrollAction.java
@@ -58,7 +58,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
         searchScrollRequest.listenerThreaded(false);
         String scroll = request.param("scroll");
         if (scroll != null) {
-            searchScrollRequest.scroll(new Scroll(parseTimeValue(scroll, null)));
+            searchScrollRequest.scroll(new Scroll(parseTimeValue(scroll, null, "scroll")));
         }
 
         client.searchScroll(searchScrollRequest, new RestStatusToXContentListener<SearchResponse>(channel));
diff --git a/src/test/java/org/elasticsearch/cluster/ack/AckTests.java b/src/test/java/org/elasticsearch/cluster/ack/AckTests.java
index e1da078e3eb2..382fa785ea06 100644
--- a/src/test/java/org/elasticsearch/cluster/ack/AckTests.java
+++ b/src/test/java/org/elasticsearch/cluster/ack/AckTests.java
@@ -72,11 +72,11 @@ public void testUpdateSettingsAcknowledgement() {
         createIndex("test");
 
         assertAcked(client().admin().indices().prepareUpdateSettings("test")
-                .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999)));
+                .setSettings(ImmutableSettings.builder().put("refresh_interval", "9999ms")));
 
         for (Client client : clients()) {
             String refreshInterval = getLocalClusterState(client).metaData().index("test").settings().get("index.refresh_interval");
-            assertThat(refreshInterval, equalTo("9999"));
+            assertThat(refreshInterval, equalTo("9999ms"));
         }
     }
 
@@ -84,7 +84,7 @@ public void testUpdateSettingsAcknowledgement() {
     public void testUpdateSettingsNoAcknowledgement() {
         createIndex("test");
         UpdateSettingsResponse updateSettingsResponse = client().admin().indices().prepareUpdateSettings("test").setTimeout("0s")
-                .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999)).get();
+                .setSettings(ImmutableSettings.builder().put("refresh_interval", "9999ms")).get();
         assertThat(updateSettingsResponse.isAcknowledged(), equalTo(false));
     }
 
diff --git a/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsTests.java b/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsTests.java
index 9947c1a12b8d..a4532871e7db 100644
--- a/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsTests.java
+++ b/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsTests.java
@@ -19,10 +19,14 @@
 
 package org.elasticsearch.cluster.settings;
 
+import org.elasticsearch.ElasticsearchIllegalArgumentException;
 import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsResponse;
+import org.elasticsearch.cluster.ClusterName;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.cluster.routing.allocation.decider.DisableAllocationDecider;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.util.concurrent.EsExecutors;
 import org.elasticsearch.discovery.DiscoverySettings;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.hamcrest.Matchers;
@@ -141,4 +145,41 @@ public void testUpdateDiscoveryPublishTimeout() {
         assertThat(response.getTransientSettings().getAsMap().entrySet(), Matchers.emptyIterable());
         assertThat(discoverySettings.getPublishTimeout().seconds(), equalTo(1l));
     }
+
+    @Test(expected = ElasticsearchIllegalArgumentException.class)
+    public void testMissingUnits() {
+        assertAcked(prepareCreate("test"));
+
+        // Should fail:
+        client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put("index.refresh_interval", "10")).execute().actionGet();
+    }
+
+    @Test
+    public void testMissingUnitsLenient() {
+        try {
+            createNode(ImmutableSettings.builder().put(ImmutableSettings.SETTINGS_REQUIRE_UNITS, "false").build());
+            assertAcked(prepareCreate("test"));
+            client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put("index.refresh_interval", "10")).execute().actionGet();
+        } finally {
+            // Restore the default so subsequent tests require units:
+            assertFalse(ImmutableSettings.getSettingsRequireUnits());
+            ImmutableSettings.setSettingsRequireUnits(true);
+        }
+    }
+
+    private void createNode(Settings settings) {
+        internalCluster().startNode(ImmutableSettings.builder()
+                        .put(ClusterName.SETTING, "ClusterSettingsTests")
+                        .put("node.name", "ClusterSettingsTests")
+                        .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)
+                        .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)
+                        .put(EsExecutors.PROCESSORS, 1) // limit the number of threads created
+                        .put("http.enabled", false)
+                        .put("index.store.type", "ram")
+                        .put("config.ignore_system_properties", true) // make sure we get what we set :)
+                        .put("gateway.type", "none")
+                        .put("indices.memory.interval", "100ms")
+                        .put(settings)
+        );
+    }
 }
diff --git a/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java b/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
index 0522f879cd18..e8b644cdedb8 100644
--- a/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
+++ b/src/test/java/org/elasticsearch/common/unit/ByteSizeValueTests.java
@@ -83,7 +83,6 @@ public void testParsing() {
         assertThat(ByteSizeValue.parseBytesSizeValue("1b").toString(), is("1b"));
         assertThat(ByteSizeValue.parseBytesSizeValue("23kb").toString(), is("23kb"));
         assertThat(ByteSizeValue.parseBytesSizeValue("23k").toString(), is("23kb"));
-        assertThat(ByteSizeValue.parseBytesSizeValue("23").toString(), is("23b"));
     }
 
     @Test(expected = ElasticsearchParseException.class)
@@ -91,8 +90,18 @@ public void testFailOnEmptyParsing() {
         assertThat(ByteSizeValue.parseBytesSizeValue("").toString(), is("23kb"));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
+    public void testFailOnMissingUnits() {
+        ByteSizeValue.parseBytesSizeValue("23");
+    }
+
+    @Test(expected = ElasticsearchParseException.class)
+    public void testFailOnUnknownUnits() {
+        ByteSizeValue.parseBytesSizeValue("23jw");
+    }
+
     @Test(expected = ElasticsearchParseException.class)
     public void testFailOnEmptyNumberParsing() {
         assertThat(ByteSizeValue.parseBytesSizeValue("g").toString(), is("23b"));
     }
-}
\ No newline at end of file
+}
diff --git a/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java b/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
index 21e33d65f0d9..62ea9dcccd91 100644
--- a/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
+++ b/src/test/java/org/elasticsearch/common/unit/FuzzinessTests.java
@@ -158,7 +158,7 @@ public void testAuto() {
         assertThat(Fuzziness.AUTO.asDouble(), equalTo(1d));
         assertThat(Fuzziness.AUTO.asLong(), equalTo(1l));
         assertThat(Fuzziness.AUTO.asShort(), equalTo((short) 1));
-        assertThat(Fuzziness.AUTO.asTimeValue(), equalTo(TimeValue.parseTimeValue("1", TimeValue.timeValueMillis(1))));
+        assertThat(Fuzziness.AUTO.asTimeValue(), equalTo(TimeValue.parseTimeValue("1ms", TimeValue.timeValueMillis(1))));
 
     }
 
diff --git a/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java b/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
index 371c5b8e2313..3f880eb88d2a 100644
--- a/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
+++ b/src/test/java/org/elasticsearch/common/unit/TimeValueTests.java
@@ -19,15 +19,17 @@
 
 package org.elasticsearch.common.unit;
 
+import java.io.IOException;
+import java.util.concurrent.TimeUnit;
+
+import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.io.stream.BytesStreamInput;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.test.ElasticsearchTestCase;
 import org.joda.time.PeriodType;
 import org.junit.Test;
 
-import java.io.IOException;
-import java.util.concurrent.TimeUnit;
-
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.lessThan;
 
@@ -69,6 +71,16 @@ public void testMinusOne() {
         assertThat(new TimeValue(-1).nanos(), lessThan(0l));
     }
 
+    @Test(expected = ElasticsearchParseException.class)
+    public void testFailOnUnknownUnits() {
+        TimeValue.parseTimeValue("23tw", null);
+    }
+
+    @Test(expected = ElasticsearchParseException.class)
+    public void testFailOnMissingUnits() {
+        TimeValue.parseTimeValue("42", null);
+    }
+
     private void assertEqualityAfterSerialize(TimeValue value) throws IOException {
         BytesStreamOutput out = new BytesStreamOutput();
         value.writeTo(out);
@@ -84,6 +96,5 @@ public void testSerialize() throws Exception {
         assertEqualityAfterSerialize(new TimeValue(100, TimeUnit.DAYS));
         assertEqualityAfterSerialize(new TimeValue(-1));
         assertEqualityAfterSerialize(new TimeValue(1, TimeUnit.NANOSECONDS));
-
     }
 }
diff --git a/src/test/java/org/elasticsearch/common/util/BigArraysTests.java b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java
index 2013edb53a46..4273bfe06489 100644
--- a/src/test/java/org/elasticsearch/common/util/BigArraysTests.java
+++ b/src/test/java/org/elasticsearch/common/util/BigArraysTests.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.common.breaker.CircuitBreaker;
 import org.elasticsearch.common.breaker.CircuitBreakingException;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.indices.breaker.HierarchyCircuitBreakerService;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
 import org.elasticsearch.node.settings.NodeSettingsService;
@@ -336,7 +337,7 @@ public void testMaxSizeExceededOnNew() throws Exception {
         for (String type : Arrays.asList("Byte", "Int", "Long", "Float", "Double", "Object")) {
             HierarchyCircuitBreakerService hcbs = new HierarchyCircuitBreakerService(
                     ImmutableSettings.builder()
-                            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, size - 1)
+                            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, size - 1, ByteSizeUnit.BYTES)
                             .build(),
                     new NodeSettingsService(ImmutableSettings.EMPTY));
             BigArrays bigArrays = new BigArrays(ImmutableSettings.EMPTY, null, hcbs).withCircuitBreaking();
@@ -356,7 +357,7 @@ public void testMaxSizeExceededOnResize() throws Exception {
             final long maxSize = randomIntBetween(1 << 10, 1 << 22);
             HierarchyCircuitBreakerService hcbs = new HierarchyCircuitBreakerService(
                     ImmutableSettings.builder()
-                            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, maxSize)
+                            .put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING, maxSize, ByteSizeUnit.BYTES)
                             .build(),
                     new NodeSettingsService(ImmutableSettings.EMPTY));
             BigArrays bigArrays = new BigArrays(ImmutableSettings.EMPTY, null, hcbs).withCircuitBreaking();
diff --git a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
index e955baa6ad2f..dce0e3807a60 100644
--- a/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
+++ b/src/test/java/org/elasticsearch/index/store/CorruptedFileTest.java
@@ -49,6 +49,7 @@
 import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.discovery.Discovery;
 import org.elasticsearch.index.merge.policy.MergePolicyModule;
 import org.elasticsearch.index.settings.IndexSettings;
@@ -485,7 +486,7 @@ public void testCorruptFileThenSnapshotAndRestore() throws ExecutionException, I
                 .setType("fs").setSettings(settingsBuilder()
                         .put("location", newTempDirPath(LifecycleScope.SUITE).toAbsolutePath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
         logger.info("--> snapshot");
         CreateSnapshotResponse createSnapshotResponse = client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test").get();
         assertThat(createSnapshotResponse.getSnapshotInfo().state(), equalTo(SnapshotState.PARTIAL));
diff --git a/src/test/java/org/elasticsearch/index/translog/fs/FsBufferedTranslogTests.java b/src/test/java/org/elasticsearch/index/translog/fs/FsBufferedTranslogTests.java
index 428a2f7842b0..041ff8dfa4d7 100644
--- a/src/test/java/org/elasticsearch/index/translog/fs/FsBufferedTranslogTests.java
+++ b/src/test/java/org/elasticsearch/index/translog/fs/FsBufferedTranslogTests.java
@@ -22,6 +22,7 @@
 import org.apache.lucene.util.IOUtils;
 import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.index.translog.AbstractSimpleTranslogTests;
 import org.elasticsearch.index.translog.Translog;
 import org.junit.AfterClass;
@@ -41,7 +42,7 @@ protected Translog create() throws IOException {
         return new FsTranslog(shardId,
                 ImmutableSettings.settingsBuilder()
                         .put("index.translog.fs.type", FsTranslogFile.Type.BUFFERED.name())
-                        .put("index.translog.fs.buffer_size", 10 + randomInt(128 * 1024))
+                        .put("index.translog.fs.buffer_size", 10 + randomInt(128 * 1024), ByteSizeUnit.BYTES)
                         .build(),
                 translogFileDirectory()
         );
diff --git a/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceTests.java b/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceTests.java
index 311449aaece5..8b9d05062bd9 100644
--- a/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceTests.java
+++ b/src/test/java/org/elasticsearch/indices/memory/breaker/CircuitBreakerServiceTests.java
@@ -29,6 +29,8 @@
 import org.elasticsearch.common.breaker.CircuitBreaker;
 import org.elasticsearch.common.breaker.CircuitBreakingException;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
+import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.indices.breaker.BreakerSettings;
 import org.elasticsearch.indices.breaker.CircuitBreakerService;
@@ -89,8 +91,11 @@ public void teardown() {
         reset();
     }
 
-    private String randomRidiculouslySmallLimit() {
-        return randomFrom(Arrays.asList("100b", "100"));
+    private ByteSizeValue randomRidiculouslySmallLimit() {
+        // 2 different ways to say 100 bytes
+        return randomFrom(Arrays.asList(ByteSizeValue.parseBytesSizeValue("100b"),
+                                        new ByteSizeValue(100, ByteSizeUnit.BYTES)));
+         //, (10000. / JvmInfo.jvmInfo().getMem().getHeapMax().bytes()) + "%")); // this is prone to rounding errors and will fail if JVM memory changes!
     }
 
     /** Returns true if any of the nodes used a noop breaker */
diff --git a/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java b/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
index c7b0245fce15..6777830b0038 100644
--- a/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
+++ b/src/test/java/org/elasticsearch/indices/recovery/IndexRecoveryTests.java
@@ -39,6 +39,7 @@
 import org.elasticsearch.cluster.routing.allocation.command.MoveAllocationCommand;
 import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.discovery.DiscoveryService;
@@ -128,8 +129,8 @@ private void slowDownRecovery(ByteSizeValue shardSize) {
         assertTrue(client().admin().cluster().prepareUpdateSettings()
                 .setTransientSettings(ImmutableSettings.builder()
                                 // one chunk per sec..
-                                .put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize)
-                                .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, chunkSize)
+                                .put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize, ByteSizeUnit.BYTES)
+                                .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, chunkSize, ByteSizeUnit.BYTES)
                 )
                 .get().isAcknowledged());
     }
diff --git a/src/test/java/org/elasticsearch/percolator/TTLPercolatorTests.java b/src/test/java/org/elasticsearch/percolator/TTLPercolatorTests.java
index b142dc7ba311..45b0adef1a61 100644
--- a/src/test/java/org/elasticsearch/percolator/TTLPercolatorTests.java
+++ b/src/test/java/org/elasticsearch/percolator/TTLPercolatorTests.java
@@ -54,7 +54,7 @@
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .put("indices.ttl.interval", PURGE_INTERVAL)
+                .put("indices.ttl.interval", PURGE_INTERVAL, TimeUnit.MILLISECONDS)
                 .build();
     }
 
@@ -158,7 +158,7 @@ public boolean apply(Object input) {
     public void testEnsureTTLDoesNotCreateIndex() throws IOException, InterruptedException {
         ensureGreen();
         client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder()
-                .put("indices.ttl.interval", 60) // 60 sec
+                .put("indices.ttl.interval", 60, TimeUnit.SECONDS) // 60 sec
                 .build()).get();
 
         String typeMapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
@@ -171,7 +171,7 @@ public void testEnsureTTLDoesNotCreateIndex() throws IOException, InterruptedExc
                 .execute().actionGet();
         ensureGreen();
         client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder()
-                .put("indices.ttl.interval", 1) // 60 sec
+                .put("indices.ttl.interval", 1, TimeUnit.SECONDS) // 1 sec
                 .build()).get();
 
         for (int i = 0; i < 100; i++) {
diff --git a/src/test/java/org/elasticsearch/recovery/RelocationTests.java b/src/test/java/org/elasticsearch/recovery/RelocationTests.java
index 299c61108b77..dd89a63b803c 100644
--- a/src/test/java/org/elasticsearch/recovery/RelocationTests.java
+++ b/src/test/java/org/elasticsearch/recovery/RelocationTests.java
@@ -47,6 +47,7 @@
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.Priority;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.discovery.DiscoveryService;
@@ -403,8 +404,8 @@ public void testMoveShardsWhileRelocation() throws Exception {
         assertTrue(client().admin().cluster().prepareUpdateSettings()
                 .setTransientSettings(ImmutableSettings.builder()
                                 // one chunk per sec..
-                                .put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize)
-                                .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, chunkSize)
+                                .put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize, ByteSizeUnit.BYTES)
+                                .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE, chunkSize, ByteSizeUnit.BYTES)
                 )
                 .get().isAcknowledged());
 
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
index b34d09bfc1a0..86317cb4a9a2 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
@@ -1307,7 +1307,7 @@ public void testIssue8209() throws InterruptedException, ExecutionException {
     /**
      * see issue #9634, negative interval in date_histogram should raise exception
      */
-    public void testExeptionOnNegativerInterval() {
+    public void testExceptionOnNegativeInterval() {
         try {
             client().prepareSearch("idx")
                     .addAggregation(dateHistogram("histo").field("date").interval(-TimeUnit.DAYS.toMillis(1)).minDocCount(0)).execute()
diff --git a/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
index 55b61aad7d94..8bfe6c549d14 100644
--- a/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/DedicatedClusterSnapshotRestoreTests.java
@@ -46,6 +46,7 @@
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.XContentBuilder;
@@ -613,7 +614,7 @@ public void chaosSnapshotTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDir(LifecycleScope.SUITE))
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         int initialIndices = between(1, 3);
         logger.info("--> create {} indices", initialIndices);
diff --git a/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java b/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
index fcae6d44a29d..605fb904f694 100644
--- a/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/RepositoriesTests.java
@@ -32,6 +32,7 @@
 import org.elasticsearch.cluster.metadata.RepositoryMetaData;
 import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.repositories.RepositoryException;
 import org.elasticsearch.repositories.RepositoryVerificationException;
@@ -142,9 +143,9 @@ public void repositoryAckTimeoutTest() throws Exception {
         logger.info("-->  creating repository test-repo-1 with 0s timeout - shouldn't ack");
         PutRepositoryResponse putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-1")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
-                                .put("compress", randomBoolean())
-                                .put("chunk_size", randomIntBetween(5, 100))
+                        .put("location", newTempDir(LifecycleScope.SUITE))
+                        .put("compress", randomBoolean())
+                        .put("chunk_size", randomIntBetween(5, 100), ByteSizeUnit.BYTES)
                 )
                 .setTimeout("0s").get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(false));
@@ -152,9 +153,9 @@ public void repositoryAckTimeoutTest() throws Exception {
         logger.info("-->  creating repository test-repo-2 with standard timeout - should ack");
         putRepositoryResponse = client().admin().cluster().preparePutRepository("test-repo-2")
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
-                                .put("location", newTempDir(LifecycleScope.SUITE))
-                                .put("compress", randomBoolean())
-                                .put("chunk_size", randomIntBetween(5, 100))
+                        .put("location", newTempDir(LifecycleScope.SUITE))
+                        .put("compress", randomBoolean())
+                        .put("chunk_size", randomIntBetween(5, 100), ByteSizeUnit.BYTES)
                 ).get();
         assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));
 
diff --git a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
index a120c01bc80f..f64d886e2e7f 100644
--- a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
@@ -49,6 +49,7 @@
 import org.elasticsearch.cluster.routing.allocation.decider.FilterAllocationDecider;
 import org.elasticsearch.common.collect.ImmutableOpenMap;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.index.shard.ShardId;
@@ -90,7 +91,7 @@ public void basicWorkFlowTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDirPath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         createIndex("test-idx-1", "test-idx-2", "test-idx-3");
         ensureGreen();
@@ -278,11 +279,11 @@ public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDirPath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         logger.info("--> create index with foo type");
         assertAcked(prepareCreate("test-idx", 2, ImmutableSettings.builder()
-                .put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put("refresh_interval", 10)));
+                .put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put("refresh_interval", "10s")));
 
         NumShards numShards = getNumShards("test-idx");
 
@@ -297,7 +298,7 @@ public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {
         logger.info("--> delete the index and recreate it with bar type");
         cluster().wipeIndices("test-idx");
         assertAcked(prepareCreate("test-idx", 2, ImmutableSettings.builder()
-                .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put("refresh_interval", 5)));
+                .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put("refresh_interval", "5s")));
         assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("bar").setSource("baz", "type=string"));
         ensureGreen();
 
@@ -315,7 +316,7 @@ public void restoreWithDifferentMappingsAndSettingsTest() throws Exception {
 
         logger.info("--> assert that old settings are restored");
         GetSettingsResponse getSettingsResponse = client.admin().indices().prepareGetSettings("test-idx").execute().actionGet();
-        assertThat(getSettingsResponse.getSetting("test-idx", "index.refresh_interval"), equalTo("10"));
+        assertThat(getSettingsResponse.getSetting("test-idx", "index.refresh_interval"), equalTo("10s"));
     }
 
     @Test
@@ -758,7 +759,7 @@ public void deleteSnapshotTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", repo)
                         .put("compress", false)
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         createIndex("test-idx");
         ensureGreen();
@@ -854,7 +855,7 @@ public void deleteSnapshotWithMissingMetadataTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", repo)
                         .put("compress", false)
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         createIndex("test-idx-1", "test-idx-2");
         ensureYellow();
@@ -1243,7 +1244,7 @@ public void urlRepositoryTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", repositoryLocation)
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         createIndex("test-idx");
         ensureGreen();
@@ -1303,9 +1304,9 @@ public void throttlingTest() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", repositoryLocation)
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(1000, 10000))
-                        .put("max_restore_bytes_per_sec", throttleRestore ? "0.5k" : "0")
-                        .put("max_snapshot_bytes_per_sec", throttleSnapshot ? "0.5k" : "0")));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)
+                        .put("max_restore_bytes_per_sec", throttleRestore ? "2.5k" : "0")
+                        .put("max_snapshot_bytes_per_sec", throttleSnapshot ? "2.5k" : "0")));
 
         createIndex("test-idx");
         ensureGreen();
@@ -1459,7 +1460,7 @@ public void snapshotRelocatingPrimary() throws Exception {
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDirPath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         // Create index on 1 nodes and make sure each node has a primary by setting no replicas
         assertAcked(prepareCreate("test-idx", 1, ImmutableSettings.builder().put("number_of_replicas", 0)));
@@ -1473,8 +1474,8 @@ public void snapshotRelocatingPrimary() throws Exception {
 
         // Update settings to make sure that relocation is slow so we can start snapshot before relocation is finished
         assertAcked(client.admin().indices().prepareUpdateSettings("test-idx").setSettings(ImmutableSettings.builder()
-                        .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, "all")
-                        .put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC, 100)
+                .put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE, "all")
+                .put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC, 100, ByteSizeUnit.BYTES)
         ));
 
         logger.info("--> start relocations");
@@ -1507,7 +1508,7 @@ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedExc
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDirPath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         // only one shard
         assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)));
diff --git a/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java b/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
index 10ca2e091d91..df3b7282ddfc 100644
--- a/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
+++ b/src/test/java/org/elasticsearch/snapshots/SnapshotBackwardsCompatibilityTest.java
@@ -34,6 +34,7 @@
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
 import org.elasticsearch.common.io.FileSystemUtils;
 import org.elasticsearch.common.settings.ImmutableSettings;
+import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -61,7 +62,7 @@ public void testSnapshotAndRestore() throws ExecutionException, InterruptedExcep
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", newTempDirPath(LifecycleScope.SUITE).toAbsolutePath())
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
         String[] indicesBefore = new String[randomIntBetween(2,5)];
         String[] indicesAfter = new String[randomIntBetween(2,5)];
         for (int i = 0; i < indicesBefore.length; i++) {
@@ -171,7 +172,7 @@ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedExc
                 .setType("fs").setSettings(ImmutableSettings.settingsBuilder()
                         .put("location", tempDir)
                         .put("compress", randomBoolean())
-                        .put("chunk_size", randomIntBetween(100, 1000))));
+                        .put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)));
 
         // only one shard
         assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder()
diff --git a/src/test/java/org/elasticsearch/test/InternalTestCluster.java b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
index 701b7fa8479e..d4fab02465e4 100644
--- a/src/test/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/src/test/java/org/elasticsearch/test/InternalTestCluster.java
@@ -417,7 +417,7 @@ private static Settings getRandomNodeSettings(long seed) {
         }
 
         if (random.nextBoolean()) {
-            builder.put(MappingUpdatedAction.INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME, RandomInts.randomIntBetween(random, 0, 500) /*milliseconds*/);
+            builder.put(MappingUpdatedAction.INDICES_MAPPING_ADDITIONAL_MAPPING_CHANGE_TIME, RandomInts.randomIntBetween(random, 0, 500), TimeUnit.MILLISECONDS);
         }
 
         if (random.nextInt(10) == 0) {
diff --git a/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java b/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java
index 70435ea67508..de07cc7f1bfe 100644
--- a/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java
+++ b/src/test/java/org/elasticsearch/ttl/SimpleTTLTests.java
@@ -25,12 +25,10 @@
 import org.elasticsearch.action.admin.indices.stats.IndicesStatsResponse;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexResponse;
-import org.elasticsearch.cluster.metadata.MappingMetaData;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
-import org.elasticsearch.test.ElasticsearchIntegrationTest.ClusterScope;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -58,7 +56,7 @@ protected int numberOfShards() {
     protected Settings nodeSettings(int nodeOrdinal) {
         return settingsBuilder()
                 .put(super.nodeSettings(nodeOrdinal))
-                .put("indices.ttl.interval", PURGE_INTERVAL)
+                .put("indices.ttl.interval", PURGE_INTERVAL, TimeUnit.MILLISECONDS)
                 .put("cluster.routing.operation.use_type", false) // make sure we control the shard computation
                 .put("cluster.routing.operation.hash.type", "djb")
                 .build();
diff --git a/src/test/resources/org/elasticsearch/bwcompat/index-1.4.1.zip b/src/test/resources/org/elasticsearch/bwcompat/index-1.4.1.zip
index 2129cfe296dc..d50c8d466756 100644
Binary files a/src/test/resources/org/elasticsearch/bwcompat/index-1.4.1.zip and b/src/test/resources/org/elasticsearch/bwcompat/index-1.4.1.zip differ
diff --git a/src/test/resources/org/elasticsearch/bwcompat/repo-1.5.0.zip b/src/test/resources/org/elasticsearch/bwcompat/repo-1.5.0.zip
index f8688d903867..5c9a0e70e758 100644
Binary files a/src/test/resources/org/elasticsearch/bwcompat/repo-1.5.0.zip and b/src/test/resources/org/elasticsearch/bwcompat/repo-1.5.0.zip differ
