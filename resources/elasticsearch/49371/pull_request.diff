diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java
index b075a7606c87..6ccf08a4fce8 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Classification.java
@@ -70,6 +70,11 @@ public static Classification fromXContent(XContentParser parser, boolean ignoreU
      * This way the user can see if the prediction was made with confidence they need.
      */
     private static final int DEFAULT_NUM_TOP_CLASSES = 2;
+    /**
+     * User-provided name for prediction field must not clash with names of other fields emitted on the same JSON level by C++ code.
+     * This list should be updated every time a new field is added in lib/api/CDataFrameTrainBoostedTreeClassifierRunner.cc.
+     */
+    private static final List<String> PREDICTION_FIELD_NAME_BLACKLIST = List.of("prediction_probability", "is_training", "top_classes");
 
     private final String dependentVariable;
     private final BoostedTreeParams boostedTreeParams;
@@ -82,6 +87,11 @@ public Classification(String dependentVariable,
                           @Nullable String predictionFieldName,
                           @Nullable Integer numTopClasses,
                           @Nullable Double trainingPercent) {
+        if (predictionFieldName != null && PREDICTION_FIELD_NAME_BLACKLIST.contains(predictionFieldName)) {
+            throw ExceptionsHelper.badRequestException(
+                "[{}] must not be equal to any of {}",
+                PREDICTION_FIELD_NAME.getPreferredName(), PREDICTION_FIELD_NAME_BLACKLIST);
+        }
         if (numTopClasses != null && (numTopClasses < 0 || numTopClasses > 1000)) {
             throw ExceptionsHelper.badRequestException("[{}] must be an integer in [0, 1000]", NUM_TOP_CLASSES.getPreferredName());
         }
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java
index 6fa163dd65ca..9e0ab94d36a9 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/Regression.java
@@ -56,6 +56,12 @@ public static Regression fromXContent(XContentParser parser, boolean ignoreUnkno
         return ignoreUnknownFields ? LENIENT_PARSER.apply(parser, null) : STRICT_PARSER.apply(parser, null);
     }
 
+    /**
+     * User-provided name for prediction field must not clash with names of other fields emitted on the same JSON level by C++ code.
+     * This list should be updated every time a new field is added in lib/api/CDataFrameTrainBoostedTreeRegressionRunner.cc.
+     */
+    private static final List<String> PREDICTION_FIELD_NAME_BLACKLIST = List.of("is_training");
+
     private final String dependentVariable;
     private final BoostedTreeParams boostedTreeParams;
     private final String predictionFieldName;
@@ -65,6 +71,10 @@ public Regression(String dependentVariable,
                       BoostedTreeParams boostedTreeParams,
                       @Nullable String predictionFieldName,
                       @Nullable Double trainingPercent) {
+        if (predictionFieldName != null && PREDICTION_FIELD_NAME_BLACKLIST.contains(predictionFieldName)) {
+            throw ExceptionsHelper.badRequestException(
+                "[{}] must not be equal to any of {}", PREDICTION_FIELD_NAME.getPreferredName(), PREDICTION_FIELD_NAME_BLACKLIST);
+        }
         if (trainingPercent != null && (trainingPercent < 1.0 || trainingPercent > 100.0)) {
             throw ExceptionsHelper.badRequestException("[{}] must be a double in [1, 100]", TRAINING_PERCENT.getPreferredName());
         }
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java
index 8306d08af797..aa7d291cdbb6 100644
--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/ClassificationTests.java
@@ -45,6 +45,33 @@ public static Classification createRandom() {
         return Classification::new;
     }
 
+    public void testConstructor_GivenPredictionFieldNameIsBlacklisted() {
+        {
+            ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
+                () -> new Classification("foo", BOOSTED_TREE_PARAMS, "prediction_probability", 3, 50.0));
+
+            assertThat(
+                e.getMessage(),
+                equalTo("[prediction_field_name] must not be equal to any of [prediction_probability, is_training, top_classes]"));
+        }
+        {
+            ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
+                () -> new Classification("foo", BOOSTED_TREE_PARAMS, "is_training", 3, 50.0));
+
+            assertThat(
+                e.getMessage(),
+                equalTo("[prediction_field_name] must not be equal to any of [prediction_probability, is_training, top_classes]"));
+        }
+        {
+            ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
+                () -> new Classification("foo", BOOSTED_TREE_PARAMS, "top_classes", 3, 50.0));
+
+            assertThat(
+                e.getMessage(),
+                equalTo("[prediction_field_name] must not be equal to any of [prediction_probability, is_training, top_classes]"));
+        }
+    }
+
     public void testConstructor_GivenTrainingPercentIsLessThanOne() {
         ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
             () -> new Classification("foo", BOOSTED_TREE_PARAMS, "result", 3, 0.999));
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/RegressionTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/RegressionTests.java
index 089f29e53cb5..808f82d8b920 100644
--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/RegressionTests.java
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/ml/dataframe/analyses/RegressionTests.java
@@ -44,6 +44,13 @@ public static Regression createRandom() {
         return Regression::new;
     }
 
+    public void testConstructor_GivenPredictionFieldNameIsBlacklisted() {
+        ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
+            () -> new Regression("foo", BOOSTED_TREE_PARAMS, "is_training", 50.0));
+
+        assertThat(e.getMessage(), equalTo("[prediction_field_name] must not be equal to any of [is_training]"));
+    }
+
     public void testConstructor_GivenTrainingPercentIsLessThanOne() {
         ElasticsearchStatusException e = expectThrows(ElasticsearchStatusException.class,
             () -> new Regression("foo", BOOSTED_TREE_PARAMS, "result", 0.999));
diff --git a/x-pack/plugin/ml/qa/ml-with-security/build.gradle b/x-pack/plugin/ml/qa/ml-with-security/build.gradle
index 961dc944ea7d..e28098542694 100644
--- a/x-pack/plugin/ml/qa/ml-with-security/build.gradle
+++ b/x-pack/plugin/ml/qa/ml-with-security/build.gradle
@@ -77,6 +77,7 @@ integTest.runner {
     'ml/data_frame_analytics_crud/Test put regression given maximum_number_trees is greater than 2k',
     'ml/data_frame_analytics_crud/Test put regression given feature_bag_fraction is negative',
     'ml/data_frame_analytics_crud/Test put regression given feature_bag_fraction is greater than one',
+    'ml/data_frame_analytics_crud/Test put regression given prediction_field_name is blacklisted',
     'ml/data_frame_analytics_crud/Test put regression given training_percent is less than one',
     'ml/data_frame_analytics_crud/Test put regression given training_percent is greater than hundred',
     'ml/data_frame_analytics_crud/Test put classification given dependent_variable is not defined',
@@ -90,6 +91,7 @@ integTest.runner {
     'ml/data_frame_analytics_crud/Test put classification given feature_bag_fraction is greater than one',
     'ml/data_frame_analytics_crud/Test put classification given num_top_classes is less than zero',
     'ml/data_frame_analytics_crud/Test put classification given num_top_classes is greater than 1k',
+    'ml/data_frame_analytics_crud/Test put classification given prediction_field_name is blacklisted',
     'ml/data_frame_analytics_crud/Test put classification given training_percent is less than one',
     'ml/data_frame_analytics_crud/Test put classification given training_percent is greater than hundred',
     'ml/data_frame_analytics_memory_usage_estimation/Test memory usage estimation for empty data frame',
diff --git a/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_crud.yml b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_crud.yml
index 6e1828efcd4b..17212b88c1b0 100644
--- a/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_crud.yml
+++ b/x-pack/plugin/src/test/resources/rest-api-spec/test/ml/data_frame_analytics_crud.yml
@@ -1387,6 +1387,29 @@ setup:
             }
           }
 
+---
+"Test put regression given prediction_field_name is blacklisted":
+
+  - do:
+      catch: /\[prediction_field_name\] must not be equal to any of \[is_training\]/
+      ml.put_data_frame_analytics:
+        id: "regression-prediction-field-name-is-blacklisted"
+        body: >
+          {
+            "source": {
+              "index": "index-source"
+            },
+            "dest": {
+              "index": "index-dest"
+            },
+            "analysis": {
+              "regression": {
+                "dependent_variable": "foo",
+                "prediction_field_name": "is_training"
+              }
+            }
+          }
+
 ---
 "Test put regression given training_percent is less than one":
 
@@ -1727,6 +1750,29 @@ setup:
             }
           }
 
+---
+"Test put classification given prediction_field_name is blacklisted":
+
+  - do:
+      catch: /\[prediction_field_name\] must not be equal to any of \[prediction_probability, is_training, top_classes\]/
+      ml.put_data_frame_analytics:
+        id: "classification-prediction-field-name-is-blacklisted"
+        body: >
+          {
+            "source": {
+              "index": "index-source"
+            },
+            "dest": {
+              "index": "index-dest"
+            },
+            "analysis": {
+              "classification": {
+                "dependent_variable": "foo",
+                "prediction_field_name": "is_training"
+              }
+            }
+          }
+
 ---
 "Test put classification given training_percent is less than one":
 
