diff --git a/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java b/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java
index 55991b35413d..11daaddd1472 100644
--- a/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java
+++ b/core/src/main/java/org/elasticsearch/rest/BytesRestResponse.java
@@ -93,14 +93,9 @@ public BytesRestResponse(RestChannel channel, Exception e) throws IOException {
 
     public BytesRestResponse(RestChannel channel, RestStatus status, Exception e) throws IOException {
         this.status = status;
-        if (channel.request().method() == RestRequest.Method.HEAD) {
-            this.content = BytesArray.EMPTY;
-            this.contentType = TEXT_CONTENT_TYPE;
-        } else {
-            try (XContentBuilder builder = build(channel, status, e)) {
-                this.content = builder.bytes();
-                this.contentType = builder.contentType().mediaType();
-            }
+        try (XContentBuilder builder = build(channel, status, e)) {
+            this.content = builder.bytes();
+            this.contentType = builder.contentType().mediaType();
         }
         if (e instanceof ElasticsearchException) {
             copyHeaders(((ElasticsearchException) e));
diff --git a/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java
index 52dd23f1b449..6f264fc5e7f1 100644
--- a/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java
+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/rest/Netty4HeadBodyIsEmptyIT.java
@@ -162,6 +162,16 @@ public void testGetSourceAction() throws IOException {
         }
     }
 
+    public void testException() throws IOException {
+        /*
+         * This will throw an index not found exception which will be sent on the channel; previously when handling HEAD requests that would
+         * throw an exception, the content was swallowed and a content length header of zero was returned. Instead of swallowing the content
+         * we now let it rise up to the upstream channel so that it can compute the content length that would be returned. This test case is
+         * a test for this situation.
+         */
+        headTestCase("/index-not-found-exception", emptyMap(), NOT_FOUND.getStatus(), greaterThan(0));
+    }
+
     private void headTestCase(final String url, final Map<String, String> params, final Matcher<Integer> matcher) throws IOException {
         headTestCase(url, params, OK.getStatus(), matcher);
     }
