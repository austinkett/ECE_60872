diff --git a/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java b/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java
index 4704097bb3cc..9168b3b199e2 100644
--- a/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java
+++ b/src/main/java/org/elasticsearch/common/lucene/search/MultiPhrasePrefixQuery.java
@@ -198,15 +198,27 @@ public final String toString(String f) {
                 buffer.append("(");
                 for (int j = 0; j < terms.length; j++) {
                     buffer.append(terms[j].text());
-                    if (j < terms.length - 1)
-                        buffer.append(" ");
+                    if (j < terms.length - 1) {
+                        if (i.hasNext()) {
+                            buffer.append(" ");
+                        } else {
+                            buffer.append("* ");
+                        }
+                    }
+                }
+                if (i.hasNext()) {
+                    buffer.append(") ");
+                } else {
+                    buffer.append("*)");
                 }
-                buffer.append(")");
             } else {
                 buffer.append(terms[0].text());
+                if (i.hasNext()) {
+                    buffer.append(" ");
+                } else {
+                    buffer.append("*");
+                }
             }
-            if (i.hasNext())
-                buffer.append(" ");
         }
         buffer.append("\"");
 
@@ -272,8 +284,8 @@ private boolean termArraysEquals(List<Term[]> termArrays1, List<Term[]> termArra
         }
         return true;
     }
-    
+
     public String getField() {
         return field;
     }
-}
\ No newline at end of file
+}
diff --git a/src/test/java/org/elasticsearch/validate/SimpleValidateQueryTests.java b/src/test/java/org/elasticsearch/validate/SimpleValidateQueryTests.java
index ffac024c78b5..5a856ad5d6ef 100644
--- a/src/test/java/org/elasticsearch/validate/SimpleValidateQueryTests.java
+++ b/src/test/java/org/elasticsearch/validate/SimpleValidateQueryTests.java
@@ -226,7 +226,7 @@ public void explainValidateQueryTwoNodes() throws IOException {
             assertThat(response.getQueryExplanation().get(0).getExplanation(), nullValue());
 
         }
-        
+
         for (Client client : internalCluster()) {
                 ValidateQueryResponse response = client.admin().indices().prepareValidateQuery("test")
                     .setQuery(QueryBuilders.queryString("foo"))
@@ -297,6 +297,43 @@ public void explainFilteredAlias() {
         assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:value1"));
     }
 
+    @Test
+    public void explainMatchPhrasePrefix() {
+        assertAcked(prepareCreate("test").setSettings(
+                ImmutableSettings.settingsBuilder().put(indexSettings())
+                        .put("index.analysis.filter.syns.type", "synonym")
+                        .putArray("index.analysis.filter.syns.synonyms", "one,two")
+                        .put("index.analysis.analyzer.syns.tokenizer", "standard")
+                        .putArray("index.analysis.analyzer.syns.filter", "syns")
+                    ).addMapping("test", "field","type=string,analyzer=syns"));
+        ensureGreen();
+
+        ValidateQueryResponse validateQueryResponse = client().admin().indices().prepareValidateQuery("test")
+                .setQuery(QueryBuilders.matchPhrasePrefixQuery("field", "foo")).setExplain(true).get();
+        assertThat(validateQueryResponse.isValid(), equalTo(true));
+        assertThat(validateQueryResponse.getQueryExplanation().size(), equalTo(1));
+        assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:\"foo*\""));
+
+        validateQueryResponse = client().admin().indices().prepareValidateQuery("test")
+                .setQuery(QueryBuilders.matchPhrasePrefixQuery("field", "foo bar")).setExplain(true).get();
+        assertThat(validateQueryResponse.isValid(), equalTo(true));
+        assertThat(validateQueryResponse.getQueryExplanation().size(), equalTo(1));
+        assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:\"foo bar*\""));
+
+        // Stacked tokens
+        validateQueryResponse = client().admin().indices().prepareValidateQuery("test")
+                .setQuery(QueryBuilders.matchPhrasePrefixQuery("field", "one bar")).setExplain(true).get();
+        assertThat(validateQueryResponse.isValid(), equalTo(true));
+        assertThat(validateQueryResponse.getQueryExplanation().size(), equalTo(1));
+        assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:\"(one two) bar*\""));
+
+        validateQueryResponse = client().admin().indices().prepareValidateQuery("test")
+                .setQuery(QueryBuilders.matchPhrasePrefixQuery("field", "foo one")).setExplain(true).get();
+        assertThat(validateQueryResponse.isValid(), equalTo(true));
+        assertThat(validateQueryResponse.getQueryExplanation().size(), equalTo(1));
+        assertThat(validateQueryResponse.getQueryExplanation().get(0).getExplanation(), containsString("field:\"foo (one* two*)\""));
+    }
+
     @Test
     public void irrelevantPropertiesBeforeQuery() throws IOException {
         createIndex("test");
