diff --git a/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
index 6b77d6dae648..e02104c65563 100644
--- a/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
+++ b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
@@ -44,7 +44,7 @@ public static GeoDistance readFromStream(StreamInput in) throws IOException {
         Version clientVersion = in.getVersion();
         int ord = in.readVInt();
         // bwc client deprecation for FACTOR and SLOPPY_ARC
-        if (clientVersion.before(Version.V_5_3_3)) {
+        if (clientVersion.before(Version.V_5_3_0)) {
             switch (ord) {
                 case 0: return PLANE;
                 case 1: // FACTOR uses PLANE
@@ -72,7 +72,7 @@ public static GeoDistance readFromStream(StreamInput in) throws IOException {
     public void writeTo(StreamOutput out) throws IOException {
         Version clientVersion = out.getVersion();
         int ord = this.ordinal();
-        if (clientVersion.before(Version.V_5_3_3)) {
+        if (clientVersion.before(Version.V_5_3_0)) {
             switch (ord) {
                 case 0:
                     out.write(0);  // write PLANE ordinal
@@ -83,8 +83,9 @@ public void writeTo(StreamOutput out) throws IOException {
                 default:
                     throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");
             }
+        } else {
+            out.writeVInt(this.ordinal());
         }
-        out.writeVInt(this.ordinal());
     }
 
     /**
diff --git a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
index ae9042237ac7..da0d00939ae0 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
@@ -27,12 +27,17 @@
 import org.elasticsearch.test.VersionUtils;
 
 import java.io.IOException;
+import java.util.Arrays;
 
+import static org.hamcrest.Matchers.both;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
+import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.isOneOf;
 import static org.hamcrest.Matchers.lessThan;
+import static org.hamcrest.collection.IsIn.isIn;
 
 /**
  * Basic Tests for {@link GeoDistance}
@@ -88,15 +93,16 @@ public void testReadFromSerializationBWC() throws Exception {
         }
     }
 
-    public void testWriteToSerializationBWC() throws Exception {
+    public void testWriteToSerializationBWC52() throws Exception {
         GeoDistance geoDistance = randomFrom(GeoDistance.PLANE, GeoDistance.ARC);
         try (BytesStreamOutput out = new BytesStreamOutput()) {
-            out.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.V_5_3_2));
+            out.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.V_5_2_2));
             geoDistance.writeTo(out);
             try (StreamInput in = out.bytes().streamInput()) {
                 in.setVersion(out.getVersion());
-                GeoDistance copy = GeoDistance.readFromStream(in);
-                assertThat(copy, isOneOf(GeoDistance.PLANE, GeoDistance.ARC));
+                int ord = in.readVInt();
+                assertThat(ord, isIn(Arrays.asList(0, 2)));
+                assertThat(in.read(), equalTo(-1));
             }
         }
     }
