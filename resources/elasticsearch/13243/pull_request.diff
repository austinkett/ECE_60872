diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlus.java b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlus.java
index b21bd5224c39..6eb5153e59d5 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlus.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/HyperLogLogPlusPlus.java
@@ -62,6 +62,7 @@
     private static final boolean HYPERLOGLOG = true;
     private static final float MAX_LOAD_FACTOR = 0.75f;
     private static final int P2 = 25;
+    private static final int BIAS_K = 6;
 
     /**
      * Compute the required precision so that <code>count</code> distinct entries
@@ -374,23 +375,30 @@ static int runLen(long hash, int p) {
     private double estimateBias(double e) {
         final double[] rawEstimateData = rawEstimateData();
         final double[] biasData = biasData();
-        int index = Arrays.binarySearch(rawEstimateData, e);
-        if (index >= 0) {
-            return biasData[index];
-        } else {
-            index = -1 - index;
-            if (index == 0) {
-                return biasData[0];
-            } else if (index >= biasData.length) {
-                return biasData[biasData.length - 1];
-            } else {
-                double w1 = (e - rawEstimateData[index - 1]);
-                assert w1 >= 0;
-                double w2 = (rawEstimateData[index] - e);
-                assert w2 >= 0;
-                return (biasData[index - 1] * w1 + biasData[index] * w2) / (w1 + w2);
+
+        final double[] weights = new double[BIAS_K];
+        int index = biasData.length - BIAS_K;
+        for (int i = 0; i < rawEstimateData.length; ++i) {
+            final double w = 1.0 / Math.abs(rawEstimateData[i] - e);
+            final int j = i % weights.length;
+            if (Double.isInfinite(w)) {
+                return biasData[i];
+            } else if (weights[j] >= w) {
+                index = i - BIAS_K;
+                break;
             }
+            weights[j] = w;
+        }
+
+        double weightSum = 0.0;
+        double biasSum = 0.0;
+        for (int i = 0, j = index; i < BIAS_K; ++i, ++j) {
+            final double w = weights[i];
+            final double b = biasData[j];
+            biasSum += w * b;
+            weightSum += w;
         }
+        return biasSum / weightSum;
     }
 
     private double[] biasData() {
