diff --git a/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java
index ab316e9f31a0..2d178c20e860 100644
--- a/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java
+++ b/src/main/java/org/elasticsearch/common/xcontent/support/XContentMapValues.java
@@ -175,7 +175,7 @@ private static void filter(Map<String, Object> map, Map<String, Object> into, St
                             break;
                         }
                         pathIsPrefixOfAnInclude = true;
-                        break;
+                        continue;
                     }
                     if (include.startsWith(path)) {
                         if (include.length() == path.length()) {
@@ -184,7 +184,7 @@ private static void filter(Map<String, Object> map, Map<String, Object> into, St
                         } else if (include.length() > path.length() && include.charAt(path.length()) == '.') {
                             // include might may match deeper paths. Dive deeper.
                             pathIsPrefixOfAnInclude = true;
-                            break;
+                            continue;
                         }
                     }
                     if (Regex.simpleMatch(include, path)) {
diff --git a/src/test/java/org/elasticsearch/search/source/SourceFetchingTests.java b/src/test/java/org/elasticsearch/search/source/SourceFetchingTests.java
index de30d6c7c35e..88cc4d8589a0 100644
--- a/src/test/java/org/elasticsearch/search/source/SourceFetchingTests.java
+++ b/src/test/java/org/elasticsearch/search/source/SourceFetchingTests.java
@@ -81,5 +81,26 @@ public void testSourceFiltering() {
 
     }
 
+    /**
+     * Test Case for #5132: Source filtering with wildcards broken when given multiple patterns
+     * https://github.com/elasticsearch/elasticsearch/issues/5132
+     */
+    @Test
+    public void testSourceWithWildcardFiltering() {
+        createIndex("test");
+        ensureGreen();
 
+        client().prepareIndex("test", "type1", "1").setSource("field", "value").get();
+        refresh();
+
+        SearchResponse response = client().prepareSearch("test").setFetchSource(new String[]{"*.notexisting","field"}, null).get();
+        assertThat(response.getHits().getAt(0).getSourceAsString(), notNullValue());
+        assertThat(response.getHits().getAt(0).getSource().size(), equalTo(1));
+        assertThat((String) response.getHits().getAt(0).getSource().get("field"), equalTo("value"));
+
+        response = client().prepareSearch("test").setFetchSource(new String[]{"field.notexisting.*","field"}, null).get();
+        assertThat(response.getHits().getAt(0).getSourceAsString(), notNullValue());
+        assertThat(response.getHits().getAt(0).getSource().size(), equalTo(1));
+        assertThat((String) response.getHits().getAt(0).getSource().get("field"), equalTo("value"));
+    }
 }
