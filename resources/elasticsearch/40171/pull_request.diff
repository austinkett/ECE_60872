diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java
index 9135bf648a19..c84855b11fb3 100644
--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java
+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/NamedXContentRegistry.java
@@ -119,15 +119,7 @@ public NamedXContentRegistry(List<Entry> entries) {
      * @throws NamedObjectNotFoundException if the categoryClass or name is not registered
      */
     public <T, C> T parseNamedObject(Class<T> categoryClass, String name, XContentParser parser, C context) throws IOException {
-        Map<String, Entry> parsers = registry.get(categoryClass);
-        if (parsers == null) {
-            if (registry.isEmpty()) {
-                // The "empty" registry will never work so we throw a better exception as a hint.
-                throw new NamedObjectNotFoundException("named objects are not supported for this parser");
-            }
-            throw new NamedObjectNotFoundException("unknown named object category [" + categoryClass.getName() + "]");
-        }
-        Entry entry = parsers.get(name);
+        Entry entry = getEntry(categoryClass, name);
         if (entry == null) {
             throw new NamedObjectNotFoundException(parser.getTokenLocation(), "unable to parse " + categoryClass.getSimpleName() +
                 " with name [" + name + "]: parser not found");
@@ -141,4 +133,24 @@ public NamedXContentRegistry(List<Entry> entries) {
         return categoryClass.cast(entry.parser.parse(parser, context));
     }
 
+    public void assertNamedXContent(Class<?> categoryClass, String name) throws IOException {
+        Entry entry = getEntry(categoryClass, name);
+        if (entry == null) {
+            throw new NamedObjectNotFoundException("unable to serialize " + categoryClass.getSimpleName() + " with name [" + name +
+                "]: parser not found");
+        }
+    }
+
+    private Entry getEntry(Class<?> categoryClass, String name) {
+        Map<String, Entry> parsers = registry.get(categoryClass);
+        if (parsers == null) {
+            if (registry.isEmpty()) {
+                // The "empty" registry will never work so we throw a better exception as a hint.
+                throw new NamedObjectNotFoundException("named objects are not supported for this parser");
+            }
+            throw new NamedObjectNotFoundException("unknown named object category [" + categoryClass.getName() + "]");
+        }
+        return parsers.get(name);
+    }
+
 }
diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java
index 51a4f86a0d3b..f479d3abfd47 100644
--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java
+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentBuilder.java
@@ -62,6 +62,10 @@ public static XContentBuilder builder(XContent xContent) throws IOException {
         return new XContentBuilder(xContent, new ByteArrayOutputStream());
     }
 
+    public static XContentBuilder builder(XContent xContent, NamedXContentRegistry registry) throws IOException {
+        return new XContentBuilder(xContent, new ByteArrayOutputStream(), Collections.emptySet(), Collections.emptySet(), registry);
+    }
+
     /**
      * Create a new {@link XContentBuilder} using the given {@link XContent} content and some inclusive and/or exclusive filters.
      * <p>
@@ -76,7 +80,7 @@ public static XContentBuilder builder(XContent xContent) throws IOException {
      * @throws IOException if an {@link IOException} occurs while building the content
      */
     public static XContentBuilder builder(XContent xContent, Set<String> includes, Set<String> excludes) throws IOException {
-        return new XContentBuilder(xContent, new ByteArrayOutputStream(), includes, excludes);
+        return new XContentBuilder(xContent, new ByteArrayOutputStream(), includes, excludes, NamedXContentRegistry.EMPTY);
     }
 
     private static final Map<Class<?>, Writer> WRITERS;
@@ -160,6 +164,8 @@ public static XContentBuilder builder(XContent xContent, Set<String> includes, S
      */
     private final OutputStream bos;
 
+    private final NamedXContentRegistry registry;
+
     /**
      * When this flag is set to true, some types of values are written in a format easier to read for a human.
      */
@@ -195,8 +201,18 @@ public XContentBuilder(XContent xContent, OutputStream bos, Set<String> includes
      * @param excludes the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.
      */
     public XContentBuilder(XContent xContent, OutputStream os, Set<String> includes, Set<String> excludes) throws IOException {
+        this(xContent, os, includes, excludes, NamedXContentRegistry.EMPTY);
+    }
+
+    public XContentBuilder(XContent xContent, OutputStream os, NamedXContentRegistry registry) throws IOException {
+        this(xContent, os, Collections.emptySet(), Collections.emptySet(), registry);
+    }
+
+    public XContentBuilder(XContent xContent, OutputStream os, Set<String> includes, Set<String> excludes,
+                           NamedXContentRegistry registry) throws IOException {
         this.bos = os;
         this.generator = xContent.createGenerator(bos, includes, excludes);
+        this.registry = registry;
     }
 
     public XContentType contentType() {
@@ -989,6 +1005,18 @@ public XContentBuilder copyCurrentStructure(XContentParser parser) throws IOExce
         return this;
     }
 
+    public XContentBuilder writeNamedXContent(Class<?> categoryClass,
+                                              String name,
+                                              ToXContent object,
+                                              ToXContent.Params params) throws IOException {
+        registry.assertNamedXContent(categoryClass, name);
+
+        startObject(name);
+        object.toXContent(this, params);
+        endObject();
+        return this;
+    }
+
     @Override
     public void flush() throws IOException {
         generator.flush();
diff --git a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java
index 38bc251be41d..a900b7a82668 100644
--- a/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java
+++ b/libs/x-content/src/main/java/org/elasticsearch/common/xcontent/XContentFactory.java
@@ -109,6 +109,28 @@ public static XContentBuilder contentBuilder(XContentType type, OutputStream out
         throw new IllegalArgumentException("No matching content type for " + type);
     }
 
+    public static XContentBuilder contentBuilder(XContentType type, OutputStream stream,
+                                                 NamedXContentRegistry registry) throws IOException {
+        XContent xContent;
+        switch (type) {
+            case JSON:
+                xContent = JsonXContent.jsonXContent;
+                break;
+            case SMILE:
+                xContent = SmileXContent.smileXContent;
+                break;
+            case YAML:
+                xContent = YamlXContent.yamlXContent;
+                break;
+            case CBOR:
+                xContent = CborXContent.cborXContent;
+                break;
+            default:
+                throw new IllegalArgumentException("No matching content type for " + type);
+        }
+        return new XContentBuilder(xContent, stream, registry);
+    }
+
     /**
      * Returns a binary content builder for the provided content type.
      */
diff --git a/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java
index 9e2d3dcde351..059c809135e5 100644
--- a/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java
+++ b/server/src/main/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommand.java
@@ -34,6 +34,7 @@
 import org.elasticsearch.common.xcontent.NamedXContentRegistry;
 import org.elasticsearch.env.Environment;
 import org.elasticsearch.env.NodeEnvironment;
+import org.elasticsearch.gateway.MetaDataStateFormat;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -60,12 +61,14 @@
     static final String WRITE_METADATA_EXCEPTION_MSG = "exception occurred when writing new metadata to disk";
     static final String ABORTED_BY_USER_MSG = "aborted by user";
     final OptionSpec<Integer> nodeOrdinalOption;
+    final MetaDataStateFormat<MetaData> format;
 
     public ElasticsearchNodeCommand(String description) {
         super(description);
         nodeOrdinalOption = parser.accepts("ordinal", "Optional node ordinal, 0 if not specified")
                 .withRequiredArg().ofType(Integer.class);
         namedXContentRegistry = new NamedXContentRegistry(ClusterModule.getNamedXWriteables());
+        format = MetaData.format(namedXContentRegistry);
     }
 
     protected void processNodePathsWithLock(Terminal terminal, OptionSet options, Environment env) throws IOException {
@@ -98,8 +101,7 @@ protected void processNodePathsWithLock(Terminal terminal, OptionSet options, En
             throw new ElasticsearchException(GLOBAL_GENERATION_MISSING_MSG);
         }
         terminal.println(Terminal.Verbosity.VERBOSE, "Loading global metadata file");
-        final MetaData metaData = MetaData.FORMAT.loadGeneration(logger, namedXContentRegistry, manifest.getGlobalGeneration(),
-                dataPaths);
+        final MetaData metaData = format.loadGeneration(logger, namedXContentRegistry, manifest.getGlobalGeneration(), dataPaths);
         if (metaData == null) {
             throw new ElasticsearchException(NO_GLOBAL_METADATA_MSG + " [generation = " + manifest.getGlobalGeneration() + "]");
         }
@@ -132,7 +134,7 @@ protected void writeNewMetaData(Terminal terminal, Manifest oldManifest, long ne
                          "[clusterUUID = " + newMetaData.clusterUUID() + ", committed = " + newMetaData.clusterUUIDCommitted() + "]");
             terminal.println(Terminal.Verbosity.VERBOSE, "New coordination metadata is " + newMetaData.coordinationMetaData());
             terminal.println(Terminal.Verbosity.VERBOSE, "Writing new global metadata to disk");
-            newGeneration = MetaData.FORMAT.write(newMetaData, dataPaths);
+            newGeneration = format.write(newMetaData, dataPaths);
             Manifest newManifest = new Manifest(newCurrentTerm, oldManifest.getClusterStateVersion(), newGeneration,
                     oldManifest.getIndexGenerations());
             terminal.println(Terminal.Verbosity.VERBOSE, "New manifest is " + newManifest);
@@ -140,7 +142,7 @@ protected void writeNewMetaData(Terminal terminal, Manifest oldManifest, long ne
             Manifest.FORMAT.writeAndCleanup(newManifest, dataPaths);
         } catch (Exception e) {
             terminal.println(Terminal.Verbosity.VERBOSE, "Cleaning up new metadata");
-            MetaData.FORMAT.cleanupOldFiles(oldManifest.getGlobalGeneration(), dataPaths);
+            format.cleanupOldFiles(oldManifest.getGlobalGeneration(), dataPaths);
             throw new ElasticsearchException(WRITE_METADATA_EXCEPTION_MSG, e);
         }
         // if cleaning old files fail, we still succeeded.
@@ -154,7 +156,7 @@ protected void writeNewMetaData(Terminal terminal, Manifest oldManifest, long ne
 
     protected void cleanUpOldMetaData(Terminal terminal, Path[] dataPaths, long newGeneration) {
         terminal.println(Terminal.Verbosity.VERBOSE, "Cleaning up old metadata");
-        MetaData.FORMAT.cleanupOldFiles(newGeneration, dataPaths);
+        format.cleanupOldFiles(newGeneration, dataPaths);
     }
 
 
diff --git a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
index 720c6f7d8eba..2f305177a9b7 100644
--- a/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
+++ b/server/src/main/java/org/elasticsearch/cluster/metadata/MetaData.java
@@ -48,6 +48,7 @@
 import org.elasticsearch.common.settings.Setting.Property;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.NamedObjectNotFoundException;
+import org.elasticsearch.common.xcontent.NamedXContentRegistry;
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.ToXContentFragment;
 import org.elasticsearch.common.xcontent.XContentBuilder;
@@ -55,13 +56,16 @@
 import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.json.JsonXContent;
 import org.elasticsearch.gateway.MetaDataStateFormat;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.IndexNotFoundException;
 import org.elasticsearch.plugins.MapperPlugin;
 import org.elasticsearch.rest.RestStatus;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -1231,8 +1235,8 @@ public MetaData build() {
             return aliasAndIndexLookup;
         }
 
-        public static String toXContent(MetaData metaData) throws IOException {
-            XContentBuilder builder = XContentFactory.contentBuilder(XContentType.JSON);
+        public static String toXContent(MetaData metaData, NamedXContentRegistry registry) throws IOException {
+            XContentBuilder builder = new XContentBuilder(JsonXContent.jsonXContent, new ByteArrayOutputStream(), registry);
             builder.startObject();
             toXContent(metaData, builder, ToXContent.EMPTY_PARAMS);
             builder.endObject();
@@ -1280,9 +1284,7 @@ public static void toXContent(MetaData metaData, XContentBuilder builder, ToXCon
 
             for (ObjectObjectCursor<String, Custom> cursor : metaData.customs()) {
                 if (cursor.value.context().contains(context)) {
-                    builder.startObject(cursor.key);
-                    cursor.value.toXContent(builder, params);
-                    builder.endObject();
+                    builder.writeNamedXContent(Custom.class, cursor.key, cursor.value, params);
                 }
             }
             builder.endObject();
@@ -1369,16 +1371,23 @@ public static MetaData fromXContent(XContentParser parser) throws IOException {
     /**
      * State format for {@link MetaData} to write to and load from disk
      */
-    public static final MetaDataStateFormat<MetaData> FORMAT = new MetaDataStateFormat<MetaData>(GLOBAL_STATE_FILE_PREFIX) {
 
-        @Override
-        public void toXContent(XContentBuilder builder, MetaData state) throws IOException {
-            Builder.toXContent(state, builder, FORMAT_PARAMS);
-        }
+    public static MetaDataStateFormat<MetaData> format(final NamedXContentRegistry registry) {
+        return new MetaDataStateFormat<MetaData>(GLOBAL_STATE_FILE_PREFIX) {
+            @Override
+            public void toXContent(XContentBuilder builder, MetaData state) throws IOException {
+                Builder.toXContent(state, builder, FORMAT_PARAMS);
+            }
 
-        @Override
-        public MetaData fromXContent(XContentParser parser) throws IOException {
-            return Builder.fromXContent(parser);
-        }
-    };
+            @Override
+            protected XContentBuilder newXContentBuilder(XContentType type, OutputStream stream) throws IOException {
+                return XContentFactory.contentBuilder(type, stream, registry);
+            }
+
+            @Override
+            public MetaData fromXContent(XContentParser parser) throws IOException {
+                return Builder.fromXContent(parser);
+            }
+        };
+    }
 }
diff --git a/server/src/main/java/org/elasticsearch/gateway/MetaStateService.java b/server/src/main/java/org/elasticsearch/gateway/MetaStateService.java
index d67cdccb9a09..cd3e830e7bba 100644
--- a/server/src/main/java/org/elasticsearch/gateway/MetaStateService.java
+++ b/server/src/main/java/org/elasticsearch/gateway/MetaStateService.java
@@ -47,13 +47,14 @@
     private final NamedXContentRegistry namedXContentRegistry;
 
     // we allow subclasses in tests to redefine formats, e.g. to inject failures
-    protected MetaDataStateFormat<MetaData> META_DATA_FORMAT = MetaData.FORMAT;
+    protected MetaDataStateFormat<MetaData> META_DATA_FORMAT;
     protected MetaDataStateFormat<IndexMetaData> INDEX_META_DATA_FORMAT = IndexMetaData.FORMAT;
     protected MetaDataStateFormat<Manifest> MANIFEST_FORMAT = Manifest.FORMAT;
 
     public MetaStateService(NodeEnvironment nodeEnv, NamedXContentRegistry namedXContentRegistry) {
         this.nodeEnv = nodeEnv;
         this.namedXContentRegistry = namedXContentRegistry;
+        META_DATA_FORMAT = MetaData.format(namedXContentRegistry);
     }
 
     /**
diff --git a/server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java b/server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java
index ca6ec74dc2ce..cde569dd9248 100644
--- a/server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java
+++ b/server/src/main/java/org/elasticsearch/repositories/blobstore/ChecksumBlobStoreFormat.java
@@ -190,7 +190,7 @@ protected BytesReference write(T obj) throws IOException {
     }
 
     protected void write(T obj, StreamOutput streamOutput) throws IOException {
-        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType, streamOutput)) {
+        try (XContentBuilder builder = XContentFactory.contentBuilder(xContentType, streamOutput, namedXContentRegistry)) {
             builder.startObject();
             obj.toXContent(builder, SNAPSHOT_ONLY_FORMAT_PARAMS);
             builder.endObject();
diff --git a/server/src/test/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommandIT.java b/server/src/test/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommandIT.java
index f2ceae6ebab8..fd44ef459c4f 100644
--- a/server/src/test/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommandIT.java
+++ b/server/src/test/java/org/elasticsearch/cluster/coordination/ElasticsearchNodeCommandIT.java
@@ -33,10 +33,12 @@
 import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.env.NodeMetaData;
 import org.elasticsearch.env.TestEnvironment;
+import org.elasticsearch.gateway.MetaDataStateFormat;
 import org.elasticsearch.node.Node;
 import org.elasticsearch.test.ESIntegTestCase;
 import org.elasticsearch.test.InternalTestCluster;
 import org.elasticsearch.test.junit.annotations.TestLogging;
+import org.junit.Before;
 
 import java.io.IOException;
 import java.nio.file.Path;
@@ -56,6 +58,13 @@
 @TestLogging("_root:DEBUG,org.elasticsearch.cluster.service:TRACE,org.elasticsearch.cluster.coordination:TRACE")
 public class ElasticsearchNodeCommandIT extends ESIntegTestCase {
 
+    private MetaDataStateFormat<MetaData> format;
+
+    @Before
+    public void setup() {
+        format = MetaData.format(xContentRegistry());
+    }
+
     private MockTerminal executeCommand(ElasticsearchNodeCommand command, Environment environment, int nodeOrdinal, boolean abort)
             throws Exception {
         final MockTerminal terminal = new MockTerminal();
@@ -216,7 +225,7 @@ public void testBootstrapNoMetaData() throws IOException {
         internalCluster().stopRandomDataNode();
 
         Environment environment = TestEnvironment.newEnvironment(internalCluster().getDefaultSettings());
-        MetaData.FORMAT.cleanupOldFiles(-1, nodeEnvironment.nodeDataPaths());
+        format.cleanupOldFiles(-1, nodeEnvironment.nodeDataPaths());
 
         expectThrows(() -> unsafeBootstrap(environment), ElasticsearchNodeCommand.NO_GLOBAL_METADATA_MSG);
     }
@@ -229,7 +238,7 @@ public void testDetachNoMetaData() throws IOException {
         internalCluster().stopRandomDataNode();
 
         Environment environment = TestEnvironment.newEnvironment(internalCluster().getDefaultSettings());
-        MetaData.FORMAT.cleanupOldFiles(-1, nodeEnvironment.nodeDataPaths());
+        format.cleanupOldFiles(-1, nodeEnvironment.nodeDataPaths());
 
         expectThrows(() -> detachCluster(environment), ElasticsearchNodeCommand.NO_GLOBAL_METADATA_MSG);
     }
@@ -300,7 +309,7 @@ public void test3MasterNodes2Failed() throws Exception {
 
         logger.info("--> unsafely-bootstrap 1st master-eligible node");
         MockTerminal terminal = unsafeBootstrap(environment);
-        MetaData metaData = MetaData.FORMAT.loadLatestState(logger, xContentRegistry(), nodeEnvironment.nodeDataPaths());
+        MetaData metaData = format.loadLatestState(logger, xContentRegistry(), nodeEnvironment.nodeDataPaths());
         assertThat(terminal.getOutput(), containsString(
                 String.format(Locale.ROOT, UnsafeBootstrapMasterCommand.CLUSTER_STATE_TERM_VERSION_MSG_FORMAT,
                         metaData.coordinationMetaData().term(), metaData.version())));
@@ -480,6 +489,6 @@ private Manifest loadLatestManifest(Path[] dataPaths, NamedXContentRegistry name
     }
 
     private MetaData loadMetaData(Path[] dataPaths, NamedXContentRegistry namedXContentRegistry, Manifest manifest) {
-        return MetaData.FORMAT.loadGeneration(logger, namedXContentRegistry, manifest.getGlobalGeneration(), dataPaths);
+        return format.loadGeneration(logger, namedXContentRegistry, manifest.getGlobalGeneration(), dataPaths);
     }
 }
diff --git a/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java
index 685b7cca98a9..8d0fca96f93b 100644
--- a/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java
+++ b/server/src/test/java/org/elasticsearch/cluster/metadata/MetaDataTests.java
@@ -401,7 +401,7 @@ public void testMetaDataGlobalStateChangesOnIndexDeletions() {
     public void testXContentWithIndexGraveyard() throws IOException {
         final IndexGraveyard graveyard = IndexGraveyardTests.createRandom();
         final MetaData originalMeta = MetaData.builder().indexGraveyard(graveyard).build();
-        final XContentBuilder builder = JsonXContent.contentBuilder();
+        final XContentBuilder builder = xContentBuilder(JsonXContent.jsonXContent);
         builder.startObject();
         originalMeta.toXContent(builder, ToXContent.EMPTY_PARAMS);
         builder.endObject();
@@ -414,7 +414,7 @@ public void testXContentWithIndexGraveyard() throws IOException {
     public void testXContentClusterUUID() throws IOException {
         final MetaData originalMeta = MetaData.builder().clusterUUID(UUIDs.randomBase64UUID())
             .clusterUUIDCommitted(randomBoolean()).build();
-        final XContentBuilder builder = JsonXContent.contentBuilder();
+        final XContentBuilder builder = xContentBuilder(JsonXContent.jsonXContent);
         builder.startObject();
         originalMeta.toXContent(builder, ToXContent.EMPTY_PARAMS);
         builder.endObject();
@@ -467,7 +467,7 @@ public void testXContentWithCoordinationMetaData() throws IOException {
 
         MetaData metaData = MetaData.builder().coordinationMetaData(originalMeta).build();
 
-        final XContentBuilder builder = JsonXContent.contentBuilder();
+        final XContentBuilder builder = xContentBuilder(JsonXContent.jsonXContent);
         builder.startObject();
         metaData.toXContent(builder, ToXContent.EMPTY_PARAMS);
         builder.endObject();
diff --git a/server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java b/server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
index ae24915e32d5..3659cce3cf67 100644
--- a/server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
+++ b/server/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java
@@ -145,7 +145,7 @@ public void testSimpleJsonFromAndTo() throws IOException {
                         .putAlias(newAliasMetaDataBuilder("alias-bar3").routing("routing-bar")))
                 .build();
 
-        String metaDataSource = MetaData.Builder.toXContent(metaData);
+        String metaDataSource = MetaData.Builder.toXContent(metaData, xContentRegistry());
 
         MetaData parsedMetaData = MetaData.Builder.fromXContent(createParser(JsonXContent.jsonXContent, metaDataSource));
 
diff --git a/server/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java b/server/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
index 1f4e0bafe4a3..7b9634b987cf 100644
--- a/server/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
+++ b/server/src/test/java/org/elasticsearch/gateway/GatewayMetaStateTests.java
@@ -322,7 +322,7 @@ public void eval(MockDirectoryWrapper dir) throws IOException {
 
         MetaStateServiceWithFailures(int invertedFailRate, NodeEnvironment nodeEnv, NamedXContentRegistry namedXContentRegistry) {
             super(nodeEnv, namedXContentRegistry);
-            META_DATA_FORMAT = wrap(MetaData.FORMAT);
+            META_DATA_FORMAT = wrap(MetaData.format(namedXContentRegistry));
             INDEX_META_DATA_FORMAT = wrap(IndexMetaData.FORMAT);
             MANIFEST_FORMAT = wrap(Manifest.FORMAT);
             failRandomly = false;
diff --git a/server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java b/server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
index 40f3bd8a0162..86863e593e63 100644
--- a/server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
+++ b/server/src/test/java/org/elasticsearch/gateway/MetaDataStateFormatTests.java
@@ -39,7 +39,9 @@
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.ToXContentFragment;
 import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
+import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.test.ESTestCase;
 
@@ -419,13 +421,17 @@ public void testFailRandomlyAndReadAnyState() throws IOException {
         writeAndReadStateSuccessfully(format, paths);
     }
 
-    private static MetaDataStateFormat<MetaData> metaDataFormat() {
+    private MetaDataStateFormat<MetaData> metaDataFormat() {
         return new MetaDataStateFormat<MetaData>(MetaData.GLOBAL_STATE_FILE_PREFIX) {
             @Override
             public void toXContent(XContentBuilder builder, MetaData state) throws IOException {
                 MetaData.Builder.toXContent(state, builder, ToXContent.EMPTY_PARAMS);
             }
 
+            protected XContentBuilder newXContentBuilder(XContentType type, OutputStream stream) throws IOException {
+                return XContentFactory.contentBuilder(type, stream, xContentRegistry());
+            }
+
             @Override
             public MetaData fromXContent(XContentParser parser) throws IOException {
                 return MetaData.Builder.fromXContent(parser);
diff --git a/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
index 6b36f985c210..121fa23dbd25 100644
--- a/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
+++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
@@ -125,6 +125,7 @@
 import org.junit.internal.AssumptionViolatedException;
 import org.junit.rules.RuleChain;
 
+import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UncheckedIOException;
@@ -1278,6 +1279,10 @@ protected final XContentParser createParser(XContent xContent, BytesReference da
         return xContent.createParser(xContentRegistry(), LoggingDeprecationHandler.INSTANCE, data.streamInput());
     }
 
+    protected final XContentBuilder xContentBuilder(XContent xContent) throws IOException {
+        return new XContentBuilder(xContent, new ByteArrayOutputStream(), xContentRegistry());
+    }
+
     /**
      * The {@link NamedXContentRegistry} to use for this test. Subclasses should override and use liberally.
      */
