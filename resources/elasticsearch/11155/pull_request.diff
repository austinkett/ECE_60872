diff --git a/src/main/java/org/elasticsearch/ElasticsearchException.java b/src/main/java/org/elasticsearch/ElasticsearchException.java
index a622b0f7e81f..627c1b674a15 100644
--- a/src/main/java/org/elasticsearch/ElasticsearchException.java
+++ b/src/main/java/org/elasticsearch/ElasticsearchException.java
@@ -22,16 +22,18 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.index.Index;
+import org.elasticsearch.index.IndexException;
 import org.elasticsearch.rest.HasRestHeaders;
 import org.elasticsearch.rest.RestStatus;
 
 import java.io.IOException;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 /**
  * A base class for all elasticsearch exceptions.
@@ -288,6 +290,4 @@ public static String getExceptionName(Throwable ex) {
     public String toString() {
         return ExceptionsHelper.detailedMessage(this).trim();
     }
-
-
 }
diff --git a/src/main/java/org/elasticsearch/ExceptionsHelper.java b/src/main/java/org/elasticsearch/ExceptionsHelper.java
index 9c29a4dc0aaa..c9f51cb5d55d 100644
--- a/src/main/java/org/elasticsearch/ExceptionsHelper.java
+++ b/src/main/java/org/elasticsearch/ExceptionsHelper.java
@@ -22,15 +22,21 @@
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.IndexFormatTooNewException;
 import org.apache.lucene.index.IndexFormatTooOldException;
+import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.logging.ESLogger;
 import org.elasticsearch.common.logging.Loggers;
+import org.elasticsearch.index.Index;
+import org.elasticsearch.index.IndexException;
 import org.elasticsearch.rest.RestStatus;
 
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 /**
  *
@@ -214,4 +220,59 @@ public static boolean reThrowIfNotNull(@Nullable Throwable e) {
         }
         return true;
     }
+
+
+    /**
+     * Deduplicate the failures by exception message and index.
+     */
+    public static ShardOperationFailedException[] groupBy(ShardOperationFailedException[] failures) {
+        List<ShardOperationFailedException> uniqueFailures = new ArrayList<>();
+        Set<GroupBy> reasons = new HashSet<>();
+        for (ShardOperationFailedException failure : failures) {
+            GroupBy reason = new GroupBy(failure.getCause());
+            if (reasons.contains(reason) == false) {
+                reasons.add(reason);
+                uniqueFailures.add(failure);
+            }
+        }
+        return uniqueFailures.toArray(new ShardOperationFailedException[0]);
+    }
+
+    static class GroupBy {
+        final String reason;
+        final Index index;
+        final Class<? extends Throwable> causeType;
+
+        public GroupBy(Throwable t) {
+            if (t instanceof IndexException) {
+                index = ((IndexException) t).index();
+            } else {
+                index = null;
+            }
+            reason = t.getMessage();
+            causeType = t.getClass();
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            GroupBy groupBy = (GroupBy) o;
+
+            if (!causeType.equals(groupBy.causeType)) return false;
+            if (index != null ? !index.equals(groupBy.index) : groupBy.index != null) return false;
+            if (reason != null ? !reason.equals(groupBy.reason) : groupBy.reason != null) return false;
+
+            return true;
+        }
+
+        @Override
+        public int hashCode() {
+            int result = reason != null ? reason.hashCode() : 0;
+            result = 31 * result + (index != null ? index.hashCode() : 0);
+            result = 31 * result + causeType.hashCode();
+            return result;
+        }
+    }
 }
diff --git a/src/main/java/org/elasticsearch/action/ActionWriteResponse.java b/src/main/java/org/elasticsearch/action/ActionWriteResponse.java
index 11240cc2cbc7..a63f6dcd9fa9 100644
--- a/src/main/java/org/elasticsearch/action/ActionWriteResponse.java
+++ b/src/main/java/org/elasticsearch/action/ActionWriteResponse.java
@@ -231,6 +231,11 @@ public RestStatus status() {
                 return status;
             }
 
+            @Override
+            public Throwable getCause() {
+                return cause;
+            }
+
             /**
              * @return Whether this failure occurred on a primary shard.
              * (this only reports true for delete by query)
diff --git a/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java b/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java
index 49b3d0194af0..95cda257690a 100644
--- a/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java
+++ b/src/main/java/org/elasticsearch/action/ShardOperationFailedException.java
@@ -20,16 +20,23 @@
 package org.elasticsearch.action;
 
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.xcontent.ToXContent;
+import org.elasticsearch.index.Index;
+import org.elasticsearch.index.IndexException;
 import org.elasticsearch.rest.RestStatus;
 
 import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 /**
  * An exception indicating that a failure occurred performing an operation on the shard.
  *
  *
  */
-public interface ShardOperationFailedException extends Streamable, Serializable {
+public interface ShardOperationFailedException extends Streamable, Serializable, ToXContent {
 
     /**
      * The index the operation failed on. Might return <tt>null</tt> if it can't be derived.
@@ -50,4 +57,9 @@
      * The status of the failure.
      */
     RestStatus status();
+
+    /**
+     * The cause of this failure
+     */
+    Throwable getCause();
 }
diff --git a/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java
index c32f02f00227..3b9d2e03ba09 100644
--- a/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java
+++ b/src/main/java/org/elasticsearch/action/bulk/BulkItemResponse.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.action.bulk;
 
+import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.action.ActionWriteResponse;
 import org.elasticsearch.action.delete.DeleteResponse;
@@ -27,6 +28,7 @@
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.rest.RestStatus;
 
 import java.io.IOException;
@@ -44,26 +46,17 @@
         private final String index;
         private final String type;
         private final String id;
-        private final String message;
+        private final Throwable cause;
         private final RestStatus status;
 
         public Failure(String index, String type, String id, Throwable t) {
             this.index = index;
             this.type = type;
             this.id = id;
-            this.message = t.toString();
+            this.cause = t;
             this.status = ExceptionsHelper.status(t);
         }
 
-
-        public Failure(String index, String type, String id, String message, RestStatus status) {
-            this.index = index;
-            this.type = type;
-            this.id = id;
-            this.message = message;
-            this.status = status;
-        }
-
         /**
          * The index name of the action.
          */
@@ -89,7 +82,7 @@ public String getId() {
          * The failure message.
          */
         public String getMessage() {
-            return this.message;
+            return this.cause.toString();
         }
 
         /**
@@ -98,6 +91,10 @@ public String getMessage() {
         public RestStatus getStatus() {
             return this.status;
         }
+
+        public Throwable getCause() {
+            return cause;
+        }
     }
 
     private int id;
@@ -265,9 +262,8 @@ public void readFrom(StreamInput in) throws IOException {
             String fIndex = in.readString();
             String fType = in.readString();
             String fId = in.readOptionalString();
-            String fMessage = in.readString();
-            RestStatus status = RestStatus.readFrom(in);
-            failure = new Failure(fIndex, fType, fId, fMessage, status);
+            Throwable throwable = in.readThrowable();
+            failure = new Failure(fIndex, fType, fId, throwable);
         }
     }
 
@@ -295,8 +291,7 @@ public void writeTo(StreamOutput out) throws IOException {
             out.writeString(failure.getIndex());
             out.writeString(failure.getType());
             out.writeOptionalString(failure.getId());
-            out.writeString(failure.getMessage());
-            RestStatus.writeTo(out, failure.getStatus());
+            out.writeThrowable(failure.getCause());
         }
     }
 }
diff --git a/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java
index 66d3965b4f5b..5ffba0598bc1 100644
--- a/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java
+++ b/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java
@@ -284,7 +284,7 @@ private void executeBulk(final BulkRequest bulkRequest, final long startTime, fi
                 MappingMetaData mappingMd = clusterState.metaData().index(concreteIndex).mappingOrDefault(updateRequest.type());
                 if (mappingMd != null && mappingMd.routing().required() && updateRequest.routing() == null) {
                     BulkItemResponse.Failure failure = new BulkItemResponse.Failure(updateRequest.index(), updateRequest.type(),
-                            updateRequest.id(), "routing is required for this item", RestStatus.BAD_REQUEST);
+                            updateRequest.id(), new IllegalArgumentException("routing is required for this item"));
                     responses.set(i, new BulkItemResponse(i, updateRequest.type(), failure));
                     continue;
                 }
@@ -328,21 +328,19 @@ public void onResponse(BulkShardResponse bulkShardResponse) {
                 @Override
                 public void onFailure(Throwable e) {
                     // create failures for all relevant requests
-                    String message = ExceptionsHelper.detailedMessage(e);
-                    RestStatus status = ExceptionsHelper.status(e);
                     for (BulkItemRequest request : requests) {
                         if (request.request() instanceof IndexRequest) {
                             IndexRequest indexRequest = (IndexRequest) request.request();
                             responses.set(request.id(), new BulkItemResponse(request.id(), indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),
-                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(indexRequest.index()), indexRequest.type(), indexRequest.id(), message, status)));
+                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(indexRequest.index()), indexRequest.type(), indexRequest.id(), e)));
                         } else if (request.request() instanceof DeleteRequest) {
                             DeleteRequest deleteRequest = (DeleteRequest) request.request();
                             responses.set(request.id(), new BulkItemResponse(request.id(), "delete",
-                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(deleteRequest.index()), deleteRequest.type(), deleteRequest.id(), message, status)));
+                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(deleteRequest.index()), deleteRequest.type(), deleteRequest.id(), e)));
                         } else if (request.request() instanceof UpdateRequest) {
                             UpdateRequest updateRequest = (UpdateRequest) request.request();
                             responses.set(request.id(), new BulkItemResponse(request.id(), "update",
-                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(updateRequest.index()), updateRequest.type(), updateRequest.id(), message, status)));
+                                    new BulkItemResponse.Failure(concreteIndices.getConcreteIndex(updateRequest.index()), updateRequest.type(), updateRequest.id(), e)));
                         }
                     }
                     if (counter.decrementAndGet() == 0) {
diff --git a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
index 13881c688b60..2fef36f650cf 100644
--- a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
@@ -116,7 +116,7 @@ public InternalAggregations getAggregations() {
     @Override
     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
         builder.field(Fields.TOOK, tookInMillis);
-        RestActions.buildBroadcastShardsHeader(builder, this);
+        RestActions.buildBroadcastShardsHeader(builder, params, this);
 
         builder.field(Fields.TOTAL, count);
         if (matches != null) {
diff --git a/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java b/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
index d0202ba219d9..c1ab2d6bfb2b 100644
--- a/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
+++ b/src/main/java/org/elasticsearch/action/search/SearchPhaseExecutionException.java
@@ -20,6 +20,8 @@
 package org.elasticsearch.action.search;
 
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.ExceptionsHelper;
+import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.IndexException;
@@ -92,8 +94,8 @@ protected void innerToXContent(XContentBuilder builder, Params params) throws IO
         builder.field("grouped", group); // notify that it's grouped
         builder.field("failed_shards");
         builder.startArray();
-        ShardSearchFailure[] failures = params.paramAsBoolean("group_shard_failures", true) ? groupBy(shardFailures) : shardFailures;
-        for (ShardSearchFailure failure : failures) {
+        ShardOperationFailedException[] failures = params.paramAsBoolean("group_shard_failures", true) ? ExceptionsHelper.groupBy(shardFailures) : shardFailures;
+        for (ShardOperationFailedException failure : failures) {
             builder.startObject();
             failure.toXContent(builder, params);
             builder.endObject();
@@ -103,25 +105,11 @@ protected void innerToXContent(XContentBuilder builder, Params params) throws IO
 
     }
 
-    private ShardSearchFailure[] groupBy(ShardSearchFailure[] failures) {
-        List<ShardSearchFailure> uniqueFailures = new ArrayList<>();
-        Set<GroupBy> reasons = new HashSet<>();
-        for (ShardSearchFailure failure : failures) {
-            GroupBy reason = new GroupBy(failure.getCause());
-            if (reasons.contains(reason) == false) {
-                reasons.add(reason);
-                uniqueFailures.add(failure);
-            }
-        }
-        return uniqueFailures.toArray(new ShardSearchFailure[0]);
-
-    }
-
     @Override
     public ElasticsearchException[] guessRootCauses() {
-        ShardSearchFailure[] failures = groupBy(shardFailures);
+        ShardOperationFailedException[] failures = ExceptionsHelper.groupBy(shardFailures);
         List<ElasticsearchException> rootCauses = new ArrayList<>(failures.length);
-        for (ShardSearchFailure failure : failures) {
+        for (ShardOperationFailedException failure : failures) {
             ElasticsearchException[] guessRootCauses = ElasticsearchException.guessRootCauses(failure.getCause());
             rootCauses.addAll(Arrays.asList(guessRootCauses));
         }
@@ -132,42 +120,4 @@ protected void innerToXContent(XContentBuilder builder, Params params) throws IO
     public String toString() {
         return buildMessage(phaseName, getMessage(), shardFailures);
     }
-
-    static class GroupBy {
-        final String reason;
-        final Index index;
-        final Class<? extends Throwable> causeType;
-
-        public GroupBy(Throwable t) {
-            if (t instanceof IndexException) {
-                index = ((IndexException) t).index();
-            } else {
-                index = null;
-            }
-            reason = t.getMessage();
-            causeType = t.getClass();
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) return true;
-            if (o == null || getClass() != o.getClass()) return false;
-
-            GroupBy groupBy = (GroupBy) o;
-
-            if (!causeType.equals(groupBy.causeType)) return false;
-            if (index != null ? !index.equals(groupBy.index) : groupBy.index != null) return false;
-            if (reason != null ? !reason.equals(groupBy.reason) : groupBy.reason != null) return false;
-
-            return true;
-        }
-
-        @Override
-        public int hashCode() {
-            int result = reason != null ? reason.hashCode() : 0;
-            result = 31 * result + (index != null ? index.hashCode() : 0);
-            result = 31 * result + causeType.hashCode();
-            return result;
-        }
-    }
 }
diff --git a/src/main/java/org/elasticsearch/action/search/SearchResponse.java b/src/main/java/org/elasticsearch/action/search/SearchResponse.java
index b0e2f2131914..769e0978a712 100644
--- a/src/main/java/org/elasticsearch/action/search/SearchResponse.java
+++ b/src/main/java/org/elasticsearch/action/search/SearchResponse.java
@@ -177,7 +177,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         if (isTerminatedEarly() != null) {
             builder.field(Fields.TERMINATED_EARLY, isTerminatedEarly());
         }
-        RestActions.buildBroadcastShardsHeader(builder, getTotalShards(), getSuccessfulShards(), getFailedShards(), getShardFailures());
+        RestActions.buildBroadcastShardsHeader(builder, params, getTotalShards(), getSuccessfulShards(), getFailedShards(), getShardFailures());
         internalResponse.toXContent(builder, params);
         return builder;
     }
diff --git a/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java b/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
index c090c3e6d727..79d0de4884ea 100644
--- a/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
+++ b/src/main/java/org/elasticsearch/action/search/ShardSearchFailure.java
@@ -40,7 +40,7 @@
 /**
  * Represents a failure to search on a specific shard.
  */
-public class ShardSearchFailure implements ShardOperationFailedException, ToXContent {
+public class ShardSearchFailure implements ShardOperationFailedException {
 
     public static final ShardSearchFailure[] EMPTY_ARRAY = new ShardSearchFailure[0];
 
@@ -172,6 +172,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         return builder;
     }
 
+    @Override
     public Throwable getCause() {
         return cause;
     }
diff --git a/src/main/java/org/elasticsearch/action/support/DefaultShardOperationFailedException.java b/src/main/java/org/elasticsearch/action/support/DefaultShardOperationFailedException.java
index 3be7b7d2aee1..313692d75b15 100644
--- a/src/main/java/org/elasticsearch/action/support/DefaultShardOperationFailedException.java
+++ b/src/main/java/org/elasticsearch/action/support/DefaultShardOperationFailedException.java
@@ -24,6 +24,8 @@
 import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
+import org.elasticsearch.common.xcontent.ToXContent;
+import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.shard.IndexShardException;
 import org.elasticsearch.rest.RestStatus;
 
@@ -81,6 +83,11 @@ public RestStatus status() {
         return status;
     }
 
+    @Override
+    public Throwable getCause() {
+        return reason;
+    }
+
     public static DefaultShardOperationFailedException readShardOperationFailed(StreamInput in) throws IOException {
         DefaultShardOperationFailedException exp = new DefaultShardOperationFailedException();
         exp.readFrom(in);
@@ -114,4 +121,19 @@ public void writeTo(StreamOutput out) throws IOException {
     public String toString() {
         return "[" + index + "][" + shardId + "] failed, reason [" + reason() + "]";
     }
+
+    @Override
+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
+        builder.field("shard", shardId());
+        builder.field("index", index());
+        builder.field("status", status.name());
+        if (reason != null) {
+            builder.field("reason");
+            builder.startObject();
+            ElasticsearchException.toXContent(builder, params, reason);
+            builder.endObject();
+        }
+        return builder;
+
+    }
 }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/cache/clear/RestClearIndicesCacheAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/cache/clear/RestClearIndicesCacheAction.java
index e676409dbeca..09560a4e2e86 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/cache/clear/RestClearIndicesCacheAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/cache/clear/RestClearIndicesCacheAction.java
@@ -62,7 +62,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(ClearIndicesCacheResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
             }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/flush/RestFlushAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/flush/RestFlushAction.java
index 6c95342cf893..97a951d2ad24 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/flush/RestFlushAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/flush/RestFlushAction.java
@@ -60,7 +60,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(FlushResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
             }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java
index 74379f632c5c..3ecafae993ad 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/optimize/RestOptimizeAction.java
@@ -61,7 +61,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(OptimizeResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
             }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/refresh/RestRefreshAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/refresh/RestRefreshAction.java
index 949b82270ff2..85775d55394d 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/refresh/RestRefreshAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/refresh/RestRefreshAction.java
@@ -58,7 +58,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(RefreshResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
             }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/segments/RestIndicesSegmentsAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/segments/RestIndicesSegmentsAction.java
index b5b2ba6e7c41..7356d1b759fe 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/segments/RestIndicesSegmentsAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/segments/RestIndicesSegmentsAction.java
@@ -54,7 +54,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(IndicesSegmentResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 response.toXContent(builder, request);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/stats/RestIndicesStatsAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/stats/RestIndicesStatsAction.java
index a71e5a3f8145..0d6d71fdd908 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/stats/RestIndicesStatsAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/stats/RestIndicesStatsAction.java
@@ -103,7 +103,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(IndicesStatsResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 response.toXContent(builder, request);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
index 23509582a669..1dd086eb3ce0 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/upgrade/RestUpgradeAction.java
@@ -87,7 +87,7 @@ public RestResponse buildResponse(IndicesSegmentResponse response, XContentBuild
         });
     }
     
-    void handlePost(RestRequest request, RestChannel channel, Client client) {
+    void handlePost(final RestRequest request, RestChannel channel, Client client) {
         OptimizeRequest optimizeReq = new OptimizeRequest(Strings.splitStringByCommaToArray(request.param("index")));
         optimizeReq.flush(true);
         optimizeReq.upgrade(true);
@@ -97,7 +97,7 @@ void handlePost(RestRequest request, RestChannel channel, Client client) {
             @Override
             public RestResponse buildResponse(OptimizeResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 builder.endObject();
                 return new BytesRestResponse(OK, builder);
             }
diff --git a/src/main/java/org/elasticsearch/rest/action/admin/indices/validate/query/RestValidateQueryAction.java b/src/main/java/org/elasticsearch/rest/action/admin/indices/validate/query/RestValidateQueryAction.java
index 4f237465bd62..67661967d56b 100644
--- a/src/main/java/org/elasticsearch/rest/action/admin/indices/validate/query/RestValidateQueryAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/admin/indices/validate/query/RestValidateQueryAction.java
@@ -84,7 +84,7 @@ public RestResponse buildResponse(ValidateQueryResponse response, XContentBuilde
                 builder.startObject();
                 builder.field("valid", response.isValid());
 
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
 
                 if (response.getQueryExplanation() != null && !response.getQueryExplanation().isEmpty()) {
                     builder.startArray("explanations");
diff --git a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java
index 1a3a1b38a6e0..987178595a6a 100644
--- a/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.rest.action.bulk;
 
+import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.ActionWriteResponse;
 import org.elasticsearch.action.WriteConsistencyLevel;
 import org.elasticsearch.action.bulk.BulkItemResponse;
@@ -102,7 +103,9 @@ public RestResponse buildResponse(BulkResponse response, XContentBuilder builder
                     }
                     if (itemResponse.isFailed()) {
                         builder.field(Fields.STATUS, itemResponse.getFailure().getStatus().getStatus());
-                        builder.field(Fields.ERROR, itemResponse.getFailure().getMessage());
+                        builder.startObject(Fields.ERROR);
+                        ElasticsearchException.toXContent(builder, request, itemResponse.getFailure().getCause());
+                        builder.endObject();
                     } else {
                         ActionWriteResponse.ShardInfo shardInfo = itemResponse.getResponse().getShardInfo();
                         shardInfo.toXContent(builder, request);
diff --git a/src/main/java/org/elasticsearch/rest/action/count/RestCountAction.java b/src/main/java/org/elasticsearch/rest/action/count/RestCountAction.java
index dc38db491815..677f3af45082 100644
--- a/src/main/java/org/elasticsearch/rest/action/count/RestCountAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/count/RestCountAction.java
@@ -85,7 +85,7 @@ public RestResponse buildResponse(CountResponse response, XContentBuilder builde
                     builder.field("terminated_early", response.terminatedEarly());
                 }
                 builder.field("count", response.getCount());
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
 
                 builder.endObject();
                 return new BytesRestResponse(response.status(), builder);
diff --git a/src/main/java/org/elasticsearch/rest/action/fieldstats/RestFieldStatsAction.java b/src/main/java/org/elasticsearch/rest/action/fieldstats/RestFieldStatsAction.java
index ca382f3c6425..6850b8b91ec9 100644
--- a/src/main/java/org/elasticsearch/rest/action/fieldstats/RestFieldStatsAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/fieldstats/RestFieldStatsAction.java
@@ -62,7 +62,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             @Override
             public RestResponse buildResponse(FieldStatsResponse response, XContentBuilder builder) throws Exception {
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
 
                 builder.startObject("indices");
                 for (Map.Entry<String, Map<String, FieldStats>> entry1 : response.getIndicesMergedFieldStats().entrySet()) {
diff --git a/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java b/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java
index 184a62244d14..8bf360dc36cb 100644
--- a/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java
+++ b/src/main/java/org/elasticsearch/rest/action/suggest/RestSuggestAction.java
@@ -72,7 +72,7 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
             public RestResponse buildResponse(SuggestResponse response, XContentBuilder builder) throws Exception {
                 RestStatus restStatus = RestStatus.status(response.getSuccessfulShards(), response.getTotalShards(), response.getShardFailures());
                 builder.startObject();
-                buildBroadcastShardsHeader(builder, response);
+                buildBroadcastShardsHeader(builder, request, response);
                 Suggest suggest = response.getSuggest();
                 if (suggest != null) {
                     suggest.toXContent(builder, request);
diff --git a/src/main/java/org/elasticsearch/rest/action/support/RestActions.java b/src/main/java/org/elasticsearch/rest/action/support/RestActions.java
index ee2cb77bb902..67ceb83c33b3 100644
--- a/src/main/java/org/elasticsearch/rest/action/support/RestActions.java
+++ b/src/main/java/org/elasticsearch/rest/action/support/RestActions.java
@@ -19,16 +19,14 @@
 
 package org.elasticsearch.rest.action.support;
 
+import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.action.ShardOperationFailedException;
 import org.elasticsearch.action.support.QuerySourceBuilder;
 import org.elasticsearch.action.support.broadcast.BroadcastOperationResponse;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.lucene.uid.Versions;
-import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentBuilderString;
-import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.common.xcontent.XContentType;
+import org.elasticsearch.common.xcontent.*;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.index.query.QueryStringQueryBuilder;
 import org.elasticsearch.rest.RestRequest;
@@ -62,33 +60,23 @@ public static long parseVersion(RestRequest request, long defaultVersion) {
         static final XContentBuilderString SUCCESSFUL = new XContentBuilderString("successful");
         static final XContentBuilderString FAILED = new XContentBuilderString("failed");
         static final XContentBuilderString FAILURES = new XContentBuilderString("failures");
-        static final XContentBuilderString INDEX = new XContentBuilderString("index");
-        static final XContentBuilderString SHARD = new XContentBuilderString("shard");
-        static final XContentBuilderString STATUS = new XContentBuilderString("status");
-        static final XContentBuilderString REASON = new XContentBuilderString("reason");
     }
 
-    public static void buildBroadcastShardsHeader(XContentBuilder builder, BroadcastOperationResponse response) throws IOException {
-        buildBroadcastShardsHeader(builder, response.getTotalShards(), response.getSuccessfulShards(), response.getFailedShards(), response.getShardFailures());
+    public static void buildBroadcastShardsHeader(XContentBuilder builder, ToXContent.Params params, BroadcastOperationResponse response) throws IOException {
+        buildBroadcastShardsHeader(builder, params, response.getTotalShards(), response.getSuccessfulShards(), response.getFailedShards(), response.getShardFailures());
     }
 
-    public static void buildBroadcastShardsHeader(XContentBuilder builder, int total, int successful, int failed, ShardOperationFailedException[] shardFailures) throws IOException {
+    public static void buildBroadcastShardsHeader(XContentBuilder builder, ToXContent.Params params, int total, int successful, int failed, ShardOperationFailedException[] shardFailures) throws IOException {
         builder.startObject(Fields._SHARDS);
         builder.field(Fields.TOTAL, total);
         builder.field(Fields.SUCCESSFUL, successful);
         builder.field(Fields.FAILED, failed);
         if (shardFailures != null && shardFailures.length > 0) {
             builder.startArray(Fields.FAILURES);
-            for (ShardOperationFailedException shardFailure : shardFailures) {
+            final boolean group = params.paramAsBoolean("group_shard_failures", true); // we group by default
+            for (ShardOperationFailedException shardFailure : group ? ExceptionsHelper.groupBy(shardFailures) : shardFailures) {
                 builder.startObject();
-                if (shardFailure.index() != null) {
-                    builder.field(Fields.INDEX, shardFailure.index(), XContentBuilder.FieldCaseConversion.NONE);
-                }
-                if (shardFailure.shardId() != -1) {
-                    builder.field(Fields.SHARD, shardFailure.shardId());
-                }
-                builder.field(Fields.STATUS, shardFailure.status().getStatus());
-                builder.field(Fields.REASON, shardFailure.reason());
+                shardFailure.toXContent(builder, params);
                 builder.endObject();
             }
             builder.endArray();
diff --git a/src/main/java/org/elasticsearch/snapshots/Snapshot.java b/src/main/java/org/elasticsearch/snapshots/Snapshot.java
index 365f88a0048e..3feed76c5ffe 100644
--- a/src/main/java/org/elasticsearch/snapshots/Snapshot.java
+++ b/src/main/java/org/elasticsearch/snapshots/Snapshot.java
@@ -255,7 +255,9 @@ public XContentBuilder toXContent(XContentBuilder builder, ToXContent.Params par
         builder.field(Fields.SUCCESSFUL_SHARDS, successfulShards);
         builder.startArray(Fields.FAILURES);
         for (SnapshotShardFailure shardFailure : shardFailures) {
-            SnapshotShardFailure.toXContent(shardFailure, builder, params);
+            builder.startObject();
+            shardFailure.toXContent(builder, params);
+            builder.endObject();
         }
         builder.endArray();
         builder.endObject();
diff --git a/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java b/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java
index 8e09fbd2c23f..1a280908f067 100644
--- a/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java
+++ b/src/main/java/org/elasticsearch/snapshots/SnapshotInfo.java
@@ -223,7 +223,9 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         }
         builder.startArray(Fields.FAILURES);
         for (SnapshotShardFailure shardFailure : shardFailures) {
-            SnapshotShardFailure.toXContent(shardFailure, builder, params);
+            builder.startObject();
+            shardFailure.toXContent(builder, params);
+            builder.endObject();
         }
         builder.endArray();
         builder.startObject(Fields.SHARDS);
diff --git a/src/main/java/org/elasticsearch/snapshots/SnapshotShardFailure.java b/src/main/java/org/elasticsearch/snapshots/SnapshotShardFailure.java
index 83c903244a8c..9edea5c87203 100644
--- a/src/main/java/org/elasticsearch/snapshots/SnapshotShardFailure.java
+++ b/src/main/java/org/elasticsearch/snapshots/SnapshotShardFailure.java
@@ -27,6 +27,8 @@
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentParser;
+import org.elasticsearch.index.shard.ShardId;
+import org.elasticsearch.index.snapshots.IndexShardSnapshotFailedException;
 import org.elasticsearch.rest.RestStatus;
 
 import java.io.IOException;
@@ -106,6 +108,11 @@ public RestStatus status() {
         return status;
     }
 
+    @Override
+    public Throwable getCause() {
+        return new IndexShardSnapshotFailedException(new ShardId(index, shardId), reason);
+    }
+
     /**
      * Returns node id where failure occurred
      *
@@ -162,13 +169,7 @@ public String toString() {
      */
     public static void toXContent(SnapshotShardFailure snapshotShardFailure, XContentBuilder builder, ToXContent.Params params) throws IOException {
         builder.startObject();
-        if (snapshotShardFailure.nodeId != null) {
-            builder.field("node_id", snapshotShardFailure.nodeId);
-        }
-        builder.field("index", snapshotShardFailure.index);
-        builder.field("reason", snapshotShardFailure.reason);
-        builder.field("shard_id", snapshotShardFailure.shardId);
-        builder.field("status", snapshotShardFailure.status.name());
+        snapshotShardFailure.toXContent(builder, params);
         builder.endObject();
     }
 
@@ -212,4 +213,16 @@ public static SnapshotShardFailure fromXContent(XContentParser parser) throws IO
         }
         return snapshotShardFailure;
     }
+
+    @Override
+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
+        builder.field("index", index);
+        builder.field("shard_id", shardId);
+        builder.field("reason", reason);
+        if (nodeId != null) {
+            builder.field("node_id", nodeId);
+        }
+        builder.field("status", status.name());
+        return builder;
+    }
 }
