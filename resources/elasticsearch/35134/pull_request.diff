diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java
index 37180db15d5d..03267329aa35 100644
--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java
+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/cli/ErrorsTestCase.java
@@ -27,7 +27,7 @@
     @Override
     public void testSelectInvalidSql() throws Exception {
         assertFoundOneProblem(command("SELECT * FRO"));
-        assertEquals("line 1:8: Cannot determine columns for *" + END, readLine());
+        assertEquals("line 1:8: Cannot determine columns for [*]" + END, readLine());
     }
 
     @Override
diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java
index b32e1ed78ef8..bb9d5f2c2fc1 100644
--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java
+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/jdbc/ErrorsTestCase.java
@@ -20,7 +20,7 @@
     public void testSelectInvalidSql() throws Exception {
         try (Connection c = esJdbc()) {
             SQLException e = expectThrows(SQLException.class, () -> c.prepareStatement("SELECT * FRO").executeQuery());
-            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for *", e.getMessage());
+            assertEquals("Found 1 problem(s)\nline 1:8: Cannot determine columns for [*]", e.getMessage());
         }
     }
 
diff --git a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java
index 73fa3ef1d779..7287784089f1 100644
--- a/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java
+++ b/x-pack/plugin/sql/qa/src/main/java/org/elasticsearch/xpack/sql/qa/rest/RestSqlTestCase.java
@@ -202,7 +202,7 @@ public void testSelectWhereExistsFails() throws Exception {
     @Override
     public void testSelectInvalidSql() {
         String mode = randomFrom("jdbc", "plain");
-        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for *"));
+        expectBadRequest(() -> runSql(mode, "SELECT * FRO"), containsString("1:8: Cannot determine columns for [*]"));
     }
 
     @Override
diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java
index 9876718d4d29..b376e38e40bc 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/analyzer/Analyzer.java
@@ -380,7 +380,13 @@ else if (!fa.dataType().isPrimitive()) {
             List<Attribute> output = child.output();
             for (NamedExpression ne : projections) {
                 if (ne instanceof UnresolvedStar) {
-                    result.addAll(expandStar((UnresolvedStar) ne, output));
+                    List<NamedExpression> expanded = expandStar((UnresolvedStar) ne, output);
+                    // the field exists, but cannot be expanded (no sub-fields)
+                    if (expanded.isEmpty()) {
+                        result.add(ne);
+                    } else {
+                        result.addAll(expanded);
+                    }
                 } else if (ne instanceof UnresolvedAlias) {
                     UnresolvedAlias ua = (UnresolvedAlias) ne;
                     if (ua.child() instanceof UnresolvedStar) {
@@ -403,6 +409,13 @@ else if (!fa.dataType().isPrimitive()) {
                 // since this is an unresolved start we don't know whether it's a path or an actual qualifier
                 Attribute q = resolveAgainstList(us.qualifier(), output);
 
+                // the wildcard couldn't be expanded because the field doesn't exist at all
+                // so, add to the list of expanded attributes its qualifier (the field without the wildcard)
+                // the qualifier will be unresolved and later used in the error message presented to the user
+                if (q == null) {
+                    expanded.add(us.qualifier());
+                    return expanded;
+                }
                 // now use the resolved 'qualifier' to match
                 for (Attribute attr : output) {
                     // filter the attributes that match based on their path
diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java
index 948a5465efa8..c9ef08eab5ae 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/UnresolvedStar.java
@@ -66,12 +66,12 @@ public boolean equals(Object obj) {
     }
 
     private String message() {
-        return (qualifier() != null ? qualifier() + "." : "") + "*";
+        return (qualifier() != null ? qualifier().qualifiedName() + "." : "") + "*";
     }
 
     @Override
     public String unresolvedMessage() {
-        return "Cannot determine columns for " + message();
+        return "Cannot determine columns for [" + message() + "]";
     }
 
     @Override
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java
index 512b2da732a7..3b03079ca723 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/analyzer/VerifierErrorMessagesTests.java
@@ -49,6 +49,38 @@ public void testMissingIndex() {
     public void testMissingColumn() {
         assertEquals("1:8: Unknown column [xxx]", verify("SELECT xxx FROM test"));
     }
+    
+    public void testMissingColumnWithWildcard() {
+        assertEquals("1:8: Unknown column [xxx]", verify("SELECT xxx.* FROM test"));
+    }
+    
+    public void testMisspelledColumnWithWildcard() {
+        assertEquals("1:8: Unknown column [tex], did you mean [text]?", verify("SELECT tex.* FROM test"));
+    }
+    
+    public void testColumnWithNoSubFields() {
+        assertEquals("1:8: Cannot determine columns for [text.*]", verify("SELECT text.* FROM test"));
+    }
+    
+    public void testMultipleColumnsWithWildcard1() {
+        assertEquals("1:14: Unknown column [a]\n" + 
+                "line 1:17: Unknown column [b]\n" + 
+                "line 1:22: Unknown column [c]\n" + 
+                "line 1:25: Unknown column [tex], did you mean [text]?", verify("SELECT bool, a, b.*, c, tex.* FROM test"));
+    }
+    
+    public void testMultipleColumnsWithWildcard2() {
+        assertEquals("1:8: Unknown column [tex], did you mean [text]?\n" + 
+                "line 1:21: Unknown column [a]\n" + 
+                "line 1:24: Unknown column [dat], did you mean [date]?\n" + 
+                "line 1:31: Unknown column [c]", verify("SELECT tex.*, bool, a, dat.*, c FROM test"));
+    }
+    
+    public void testMultipleColumnsWithWildcard3() {
+        assertEquals("1:8: Unknown column [ate], did you mean [date]?\n" + 
+                "line 1:21: Unknown column [keyw], did you mean [keyword]?\n" + 
+                "line 1:29: Unknown column [da], did you mean [date]?" , verify("SELECT ate.*, bool, keyw.*, da FROM test"));
+    }
 
     public void testMisspelledColumn() {
         assertEquals("1:8: Unknown column [txt], did you mean [text]?", verify("SELECT txt FROM test"));
