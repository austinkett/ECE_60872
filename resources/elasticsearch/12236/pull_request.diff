diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/ValuesSourceMetricsAggregationBuilder.java b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/ValuesSourceMetricsAggregationBuilder.java
index d584b0596dcf..e67554862258 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/ValuesSourceMetricsAggregationBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/ValuesSourceMetricsAggregationBuilder.java
@@ -19,13 +19,10 @@
 
 package org.elasticsearch.search.aggregations.metrics;
 
-import com.google.common.collect.Maps;
-
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.script.Script;
 
 import java.io.IOException;
-import java.util.Map;
 
 /**
  *
@@ -34,12 +31,6 @@
 
     private String field;
     private Script script;
-    @Deprecated
-    private String scriptString; // TODO Remove in 3.0
-    @Deprecated
-    private String lang; // TODO Remove in 3.0
-    @Deprecated
-    private Map<String, Object> params; // TODO Remove in 3.0
     private String format;
     private Object missing;
 
@@ -62,53 +53,6 @@ public B script(Script script) {
         return (B) this;
     }
 
-    /**
-     * @deprecated use {@link #script(Script)} instead.
-     */
-    @Deprecated
-    @SuppressWarnings("unchecked")
-    public B script(String script) {
-        this.scriptString = script;
-        return (B) this;
-    }
-
-    /**
-     * @deprecated use {@link #script(Script)} instead.
-     */
-    @Deprecated
-    @SuppressWarnings("unchecked")
-    public B lang(String lang) {
-        this.lang = lang;
-        return (B) this;
-    }
-
-    /**
-     * @deprecated use {@link #script(Script)} instead.
-     */
-    @Deprecated
-    @SuppressWarnings("unchecked")
-    public B params(Map<String, Object> params) {
-        if (this.params == null) {
-            this.params = params;
-        } else {
-            this.params.putAll(params);
-        }
-        return (B) this;
-    }
-
-    /**
-     * @deprecated use {@link #script(Script)} instead.
-     */
-    @Deprecated
-    @SuppressWarnings("unchecked")
-    public B param(String name, Object value) {
-        if (this.params == null) {
-            this.params = Maps.newHashMap();
-        }
-        this.params.put(name, value);
-        return (B) this;
-    }
-
     @SuppressWarnings("unchecked")
     public B format(String format) {
         this.format = format;
@@ -133,22 +77,10 @@ protected void internalXContent(XContentBuilder builder, Params params) throws I
             builder.field("script", script);
         }
 
-        if (scriptString != null) {
-            builder.field("script", scriptString);
-        }
-
-        if (lang != null) {
-            builder.field("lang", lang);
-        }
-
         if (format != null) {
             builder.field("format", format);
         }
 
-        if (this.params != null && !this.params.isEmpty()) {
-            builder.field("params").map(this.params);
-        }
-
         if (missing != null) {
             builder.field("missing", missing);
         }
diff --git a/core/src/test/java/org/elasticsearch/script/expression/ExpressionScriptTests.java b/core/src/test/java/org/elasticsearch/script/expression/ExpressionScriptTests.java
index 1dedc6ef3507..098cbb514a55 100644
--- a/core/src/test/java/org/elasticsearch/script/expression/ExpressionScriptTests.java
+++ b/core/src/test/java/org/elasticsearch/script/expression/ExpressionScriptTests.java
@@ -29,7 +29,6 @@
 import org.elasticsearch.action.update.UpdateRequestBuilder;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
-import org.elasticsearch.index.engine.Engine;
 import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilder;
 import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders;
@@ -362,8 +361,12 @@ public void testSpecialValueVariable() throws Exception {
 
         SearchRequestBuilder req = client().prepareSearch().setIndices("test");
         req.setQuery(QueryBuilders.matchAllQuery())
-                .addAggregation(AggregationBuilders.stats("int_agg").field("x").script("_value * 3").lang(ExpressionScriptEngineService.NAME))
-                .addAggregation(AggregationBuilders.stats("double_agg").field("y").script("_value - 1.1").lang(ExpressionScriptEngineService.NAME));
+                .addAggregation(
+                        AggregationBuilders.stats("int_agg").field("x")
+                                .script(new Script("_value * 3", ScriptType.INLINE, ExpressionScriptEngineService.NAME, null)))
+                .addAggregation(
+                        AggregationBuilders.stats("double_agg").field("y")
+                                .script(new Script("_value - 1.1", ScriptType.INLINE, ExpressionScriptEngineService.NAME, null)));
 
         SearchResponse rsp = req.get();
         assertEquals(3, rsp.getHits().getTotalHits());
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
index 1d62df80c0d5..1f0a47522cdb 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/bucket/TopHitsTests.java
@@ -474,21 +474,15 @@ public void testSortByBucket() throws Exception {
 
     @Test
     public void testFieldCollapsing() throws Exception {
-        SearchResponse response = client().prepareSearch("idx").setTypes("field-collapsing")
+        SearchResponse response = client()
+                .prepareSearch("idx")
+                .setTypes("field-collapsing")
                 .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)
                 .setQuery(matchQuery("text", "term rare"))
-                .addAggregation(terms("terms")
-                                .executionHint(randomExecutionHint())
-                                .field("group")
-                                .order(Terms.Order.aggregation("max_score", false))
-                                .subAggregation(
-                                        topHits("hits").setSize(1)
-                                )
-                                .subAggregation(
-                                        max("max_score").script("_score.doubleValue()")
-                                )
-                )
-                .get();
+                .addAggregation(
+                        terms("terms").executionHint(randomExecutionHint()).field("group")
+                                .order(Terms.Order.aggregation("max_score", false)).subAggregation(topHits("hits").setSize(1))
+                                .subAggregation(max("max_score").script(new Script("_score.doubleValue()")))).get();
         assertSearchResponse(response);
 
         Terms terms = response.getAggregations().get("terms");
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTests.java
index 42764b5fc3b3..e8c42fb9747b 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AbstractNumericTests.java
@@ -103,24 +103,4 @@ public void setupSuiteScopeCluster() throws Exception {
 
     public abstract void testScript_MultiValued_WithParams() throws Exception;
 
-    public abstract void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception;
-
-    public abstract void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception;
-
-    public abstract void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception;
-
-    public abstract void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_SingleValued_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_MultiValued_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception;
-
-    public abstract void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception;
-
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgTests.java
index 590db86e3acb..3f7719a8e625 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/AvgTests.java
@@ -335,194 +335,4 @@ public void testScript_MultiValued_WithParams() throws Exception {
         assertThat(avg.getName(), equalTo("avg"));
         assertThat(avg.getValue(), equalTo((double) (1+2+2+3+3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11) / 20));
     }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").field("value").script("_value + 1"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (2+3+4+5+6+7+8+9+10+11) / 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").field("value").script("_value + inc").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (2+3+4+5+6+7+8+9+10+11) / 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").field("values").script("_value + 1"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11+11+12+12+13) / 20));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").field("values").script("_value + inc").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11+11+12+12+13) / 20));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("doc['value'].value"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (1+2+3+4+5+6+7+8+9+10) / 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("doc['value'].value + inc").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (2+3+4+5+6+7+8+9+10+11) / 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("doc['value'].value + inc").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (2+3+4+5+6+7+8+9+10+11) / 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("[ doc['value'].value, doc['value'].value + 1 ]"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (1+2+2+3+3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11) / 20));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("[ doc['value'].value, doc['value'].value + 1 ]"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (1+2+2+3+3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11) / 20));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(avg("avg").script("[ doc['value'].value, doc['value'].value + inc ]").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Avg avg = searchResponse.getAggregations().get("avg");
-        assertThat(avg, notNullValue());
-        assertThat(avg.getName(), equalTo("avg"));
-        assertThat(avg.getValue(), equalTo((double) (1+2+2+3+3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11) / 20));
-    }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
index 4780d6237a5d..bf708ec5c504 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
@@ -483,152 +483,4 @@ public void asSubAggHashed() throws Exception {
         }
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedStringScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client().prepareSearch("idx").setTypes("type")
-                .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script("doc['str_value'].value"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedStringScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client().prepareSearch("idx").setTypes("type")
-                .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).script("doc['str_values'].values"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs * 2);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedNumericScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client()
-                .prepareSearch("idx")
-                .setTypes("type")
-                .addAggregation(
-                        cardinality("cardinality").precisionThreshold(precisionThreshold).script(
-                                "doc['" + singleNumericField(false) + "'].value")).execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedNumericScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client()
-                .prepareSearch("idx")
-                .setTypes("type")
-                .addAggregation(
-                        cardinality("cardinality").precisionThreshold(precisionThreshold).script(
-                                "doc['" + multiNumericField(false) + "'].values")).execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs * 2);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedStringValueScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client().prepareSearch("idx").setTypes("type")
-                .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_value").script("_value"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedStringValueScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client().prepareSearch("idx").setTypes("type")
-                .addAggregation(cardinality("cardinality").precisionThreshold(precisionThreshold).field("str_values").script("_value"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs * 2);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedNumericValueScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client()
-                .prepareSearch("idx")
-                .setTypes("type")
-                .addAggregation(
-                        cardinality("cardinality").precisionThreshold(precisionThreshold).field(singleNumericField(false)).script("_value"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedNumericValueScript_OldScriptAPI() throws Exception {
-        SearchResponse response = client()
-                .prepareSearch("idx")
-                .setTypes("type")
-                .addAggregation(
-                        cardinality("cardinality").precisionThreshold(precisionThreshold).field(multiNumericField(false)).script("_value"))
-                .execute().actionGet();
-
-        assertSearchResponse(response);
-
-        Cardinality count = response.getAggregations().get("cardinality");
-        assertThat(count, notNullValue());
-        assertThat(count.getName(), equalTo("cardinality"));
-        assertCount(count, numDocs * 2);
-    }
-
 }
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsTests.java
index 93721ff15c04..3d9a0d46b55d 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ExtendedStatsTests.java
@@ -578,283 +578,4 @@ private void checkUpperLowerBounds(ExtendedStats stats, double sigma) {
         assertThat(stats.getStdDeviationBound(ExtendedStats.Bounds.LOWER), equalTo(stats.getAvg() - (stats.getStdDeviation() * sigma)));
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").field("value").script("_value + 1").sigma(sigma)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").field("value").script("_value + inc").param("inc", 1).sigma(sigma)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").field("values").script("_value - 1").sigma(sigma)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 20));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(20l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 4 + 9 + 16 + 25 + 36 + 49 + 64
-                + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").field("values").script("_value - dec").param("dec", 1).sigma(sigma)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 20));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(20l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 4 + 9 + 16 + 25 + 36 + 49 + 64
-                + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").script("doc['value'].value").sigma(sigma)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) / 10));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(10.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10));
-        assertThat(stats.getCount(), equalTo(10l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100));
-        assertThat(stats.getVariance(), equalTo(variance(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").script("doc['value'].value + inc").param("inc", 1).sigma(sigma)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").script("doc['value'].value + inc").param("inc", 1).sigma(sigma)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").script("doc['values'].values").sigma(sigma)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12) / 20));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(12.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12));
-        assertThat(stats.getCount(), equalTo(20l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121 + 9 + 16 + 25 + 36 + 49 + 64
-                + 81 + 100 + 121 + 144));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(extendedStats("stats").script("doc['values'].values").sigma(sigma)).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12) / 20));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(12.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12));
-        assertThat(stats.getCount(), equalTo(20l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 121 + 9 + 16 + 25 + 36 + 49 + 64
-                + 81 + 100 + 121 + 144));
-        assertThat(stats.getVariance(), equalTo(variance(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)));
-        checkUpperLowerBounds(stats, sigma);
-
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        double sigma = randomDouble() * randomIntBetween(1, 10);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        extendedStats("stats").script("[ doc['value'].value, doc['value'].value - dec ]").param("dec", 1).sigma(sigma))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ExtendedStats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9) / 20));
-        assertThat(stats.getMin(), equalTo(0.0));
-        assertThat(stats.getMax(), equalTo(10.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9));
-        assertThat(stats.getCount(), equalTo(20l));
-        assertThat(stats.getSumOfSquares(), equalTo((double) 1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81 + 100 + 0 + 1 + 4 + 9 + 16 + 25 + 36
-                + 49 + 64 + 81));
-        assertThat(stats.getVariance(), equalTo(variance(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)));
-        assertThat(stats.getStdDeviation(), equalTo(stdDev(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)));
-        checkUpperLowerBounds(stats, sigma);
-    }
-
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxTests.java
index bab238189ec5..66a34b65138d 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MaxTests.java
@@ -335,177 +335,4 @@ public void testScript_MultiValued_WithParams() throws Exception {
         assertThat(max.getName(), equalTo("max"));
         assertThat(max.getValue(), equalTo(11.0));
     }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").field("value").script("_value + 1")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(11.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").field("value").script("_value + inc").param("inc", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(11.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").field("values").script("_value + 1")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(13.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(max("max").field("values").script("_value + inc").param("inc", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(13.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("doc['value'].value")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(10.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("doc['value'].value + inc").param("inc", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(11.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("doc['value'].value + inc").param("inc", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(11.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("doc['values'].values")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(12.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("doc['values'].values")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(12.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(max("max").script("[ doc['value'].value, doc['value'].value + inc ]").param("inc", 1)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Max max = searchResponse.getAggregations().get("max");
-        assertThat(max, notNullValue());
-        assertThat(max.getName(), equalTo("max"));
-        assertThat(max.getValue(), equalTo(11.0));
-    }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MinTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MinTests.java
index 7ef2d9dbd025..94f895911a66 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MinTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/MinTests.java
@@ -345,208 +345,4 @@ public void testScript_MultiValued_WithParams() throws Exception {
         assertThat(min.getValue(), equalTo(1.0));
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(min("min").field("value").script("_value - 1")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(0.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(min("min").field("value").script("_value - dec").param("dec", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(0.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(min("min").field("values").script("_value - 1"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(1.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void testMultiValuedField_WithValueScript_Reverse_OldScriptAPI() throws Exception {
-        // test what happens when values arrive in reverse order since the min aggregator is optimized to work on sorted values
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").field("values").script("_value * -1"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(-12d));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").field("values").script("_value - dec").param("dec", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(1.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("doc['value'].value"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(1.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("doc['value'].value - dec").param("dec", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(0.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("doc['value'].value - dec").param("dec", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(0.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("doc['values'].values"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(2.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("doc['values'].values"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(2.0));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(min("min").script("List values = doc['values'].values; double[] res = new double[values.size()]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;").param("dec", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Min min = searchResponse.getAggregations().get("min");
-        assertThat(min, notNullValue());
-        assertThat(min.getName(), equalTo("min"));
-        assertThat(min.getValue(), equalTo(1.0));
-    }
-
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksTests.java
index 742763f5f90f..b59c11ac18ed 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentileRanksTests.java
@@ -472,215 +472,4 @@ public void testOrderBySubAggregation() {
         }
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).field("value").script("_value - 1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).field("value").script("_value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).field("values").script("_value - 1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void testMultiValuedField_WithValueScript_Reverse_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(-maxValues, -minValues);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).field("values").script("_value * -1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, -maxValues, -minValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).field("values").script("_value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValue, maxValue);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentileRanks("percentile_ranks")).script("doc['value'].value").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValue, maxValue);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).script("doc['value'].value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValue - 1, maxValue - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks")).script("doc['value'].value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValues, maxValues);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentileRanks("percentile_ranks")).script("doc['values'].values").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValues, maxValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValues, maxValues);
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentileRanks("percentile_ranks")).script("doc['values'].values").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValues, maxValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercents(minValues - 1, maxValues - 1);
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentileRanks("percentile_ranks"))
-                                .script("List values = doc['values'].values; double[] res = new double[values.size()]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;")
-                                .param("dec", 1).percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final PercentileRanks percentiles = searchResponse.getAggregations().get("percentile_ranks");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentilesTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentilesTests.java
index 7050432f0b9f..ed9c3c33b82b 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentilesTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/PercentilesTests.java
@@ -455,206 +455,4 @@ public void testOrderBySubAggregation() {
         }
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).field("value").script("_value - 1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentiles("percentiles")).field("value").script("_value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).field("values").script("_value - 1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void testMultiValuedField_WithValueScript_Reverse_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).field("values").script("_value * -1").percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, -maxValues, -minValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentiles("percentiles")).field("values").script("_value - dec").param("dec", 1)
-                                .percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).script("doc['value'].value").percentiles(pcts)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValue, maxValue);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentiles("percentiles")).script("doc['value'].value - dec").param("dec", 1).percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentiles("percentiles")).script("doc['value'].value - dec").param("dec", 1).percentiles(pcts))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValue - 1, maxValue - 1);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).script("doc['values'].values").percentiles(pcts)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValues, maxValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(randomCompression(percentiles("percentiles")).script("doc['values'].values").percentiles(pcts)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValues, maxValues);
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        final double[] pcts = randomPercentiles();
-        SearchResponse searchResponse = client()
-                .prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(
-                        randomCompression(percentiles("percentiles"))
-                                .script("List values = doc['values'].values; double[] res = new double[values.size()]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;")
-                                .param("dec", 1).percentiles(pcts)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        final Percentiles percentiles = searchResponse.getAggregations().get("percentiles");
-        assertConsistent(pcts, percentiles, minValues - 1, maxValues - 1);
-    }
-
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsTests.java
index 15365d3063ee..e5ae18774f81 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/StatsTests.java
@@ -463,239 +463,4 @@ private void assertShardExecutionState(SearchResponse response, int expectedFail
         }
         assertThat("Not all shards are initialized", response.getSuccessfulShards(), equalTo(response.getTotalShards()));
     }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").field("value").script("_value + 1")).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").field("value").script("_value + inc").param("inc", 1)).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").field("values").script("_value - 1")).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 20));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(20l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").field("values").script("_value - dec").param("dec", 1)).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 20));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(20l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("doc['value'].value")).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10) / 10));
-        assertThat(stats.getMin(), equalTo(1.0));
-        assertThat(stats.getMax(), equalTo(10.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10));
-        assertThat(stats.getCount(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("doc['value'].value + inc").param("inc", 1)).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("doc['value'].value + inc").param("inc", 1)).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11) / 10));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(11.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-        assertThat(stats.getCount(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("doc['values'].values")).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12) / 20));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(12.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12));
-        assertThat(stats.getCount(), equalTo(20l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("doc['values'].values")).execute().actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(),
-                equalTo((double) (2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12) / 20));
-        assertThat(stats.getMin(), equalTo(2.0));
-        assertThat(stats.getMax(), equalTo(12.0));
-        assertThat(stats.getSum(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12));
-        assertThat(stats.getCount(), equalTo(20l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(stats("stats").script("[ doc['value'].value, doc['value'].value - dec ]").param("dec", 1)).execute()
-                .actionGet();
-
-        assertShardExecutionState(searchResponse, 0);
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Stats stats = searchResponse.getAggregations().get("stats");
-        assertThat(stats, notNullValue());
-        assertThat(stats.getName(), equalTo("stats"));
-        assertThat(stats.getAvg(), equalTo((double) (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9) / 20));
-        assertThat(stats.getMin(), equalTo(0.0));
-        assertThat(stats.getMax(), equalTo(10.0));
-        assertThat(stats.getSum(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 0 + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9));
-        assertThat(stats.getCount(), equalTo(20l));
-    }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/SumTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/SumTests.java
index b9107b4a6e94..6145cc5054c3 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/SumTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/SumTests.java
@@ -336,168 +336,4 @@ public void testMultiValuedField_WithValueScript_WithParams() throws Exception {
         assertThat(sum.getName(), equalTo("sum"));
         assertThat(sum.getValue(), equalTo((double) 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 + 7 + 8 + 8 + 9 + 9 + 10 + 10 + 11 + 11 + 12 + 12 + 13));
     }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").field("value").script("_value + 1")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testSingleValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").field("value").script("_value + increment").param("increment", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("doc['value'].value")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_SingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("doc['value'].value + inc").param("inc", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_ExplicitSingleValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("doc['value'].value + inc").param("inc", 1)).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Override
-    @Test
-    public void testScript_MultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("[ doc['value'].value, doc['value'].value + 1 ]")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 + 7 + 8 + 8 + 9 + 9 + 10 + 10 + 11));
-    }
-
-    @Override
-    @Test
-    public void testScript_ExplicitMultiValued_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("[ doc['value'].value, doc['value'].value + 1 ]")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 + 7 + 8 + 8 + 9 + 9 + 10 + 10 + 11));
-    }
-
-    @Override
-    @Test
-    public void testScript_MultiValued_WithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").script("[ doc['value'].value, doc['value'].value + inc ]").param("inc", 1)).execute()
-                .actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 + 7 + 8 + 8 + 9 + 9 + 10 + 10 + 11));
-    }
-
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_OldScriptAPI() throws Exception {
-
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(sum("sum").field("values").script("_value + 1"))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11+11+12+12+13));
-    }
-
-    @Override
-    @Test
-    public void testMultiValuedField_WithValueScript_WithParams_OldScriptAPI() throws Exception {
-
-        SearchResponse searchResponse = client().prepareSearch("idx")
-                .setQuery(matchAllQuery())
-                .addAggregation(sum("sum").field("values").script("_value + increment").param("increment", 1))
-                .execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        Sum sum = searchResponse.getAggregations().get("sum");
-        assertThat(sum, notNullValue());
-        assertThat(sum.getName(), equalTo("sum"));
-        assertThat(sum.getValue(), equalTo((double) 3+4+4+5+5+6+6+7+7+8+8+9+9+10+10+11+11+12+12+13));
-    }
 }
\ No newline at end of file
diff --git a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountTests.java b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountTests.java
index 9d74d0cf896e..0840bd607082 100644
--- a/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountTests.java
+++ b/core/src/test/java/org/elasticsearch/search/aggregations/metrics/ValueCountTests.java
@@ -201,68 +201,4 @@ public void multiValuedScriptWithParams() throws Exception {
         assertThat(valueCount.getValue(), equalTo(20l));
     }
 
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(count("count").script("doc['value'].value")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ValueCount valueCount = searchResponse.getAggregations().get("count");
-        assertThat(valueCount, notNullValue());
-        assertThat(valueCount.getName(), equalTo("count"));
-        assertThat(valueCount.getValue(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedScript_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(count("count").script("doc['values'].values")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ValueCount valueCount = searchResponse.getAggregations().get("count");
-        assertThat(valueCount, notNullValue());
-        assertThat(valueCount.getName(), equalTo("count"));
-        assertThat(valueCount.getValue(), equalTo(20l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void singleValuedScriptWithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(count("count").script("doc[s].value").param("s", "value")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ValueCount valueCount = searchResponse.getAggregations().get("count");
-        assertThat(valueCount, notNullValue());
-        assertThat(valueCount.getName(), equalTo("count"));
-        assertThat(valueCount.getValue(), equalTo(10l));
-    }
-
-    /*
-     * TODO Remove in 3.0
-     */
-    @Test
-    public void multiValuedScriptWithParams_OldScriptAPI() throws Exception {
-        SearchResponse searchResponse = client().prepareSearch("idx").setQuery(matchAllQuery())
-                .addAggregation(count("count").script("doc[s].values").param("s", "values")).execute().actionGet();
-
-        assertThat(searchResponse.getHits().getTotalHits(), equalTo(10l));
-
-        ValueCount valueCount = searchResponse.getAggregations().get("count");
-        assertThat(valueCount, notNullValue());
-        assertThat(valueCount.getName(), equalTo("count"));
-        assertThat(valueCount.getValue(), equalTo(20l));
-    }
-
 }
\ No newline at end of file
