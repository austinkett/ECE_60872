diff --git a/distribution/src/bin/elasticsearch-env.bat b/distribution/src/bin/elasticsearch-env.bat
index f874b85c86db..a4f5125485f9 100644
--- a/distribution/src/bin/elasticsearch-env.bat
+++ b/distribution/src/bin/elasticsearch-env.bat
@@ -58,5 +58,5 @@ set ES_DISTRIBUTION_FLAVOR=${es.distribution.flavor}
 set ES_DISTRIBUTION_TYPE=${es.distribution.type}
 
 if not defined ES_TMPDIR (
-  for /f "tokens=* usebackq" %%a in (`"%JAVA% -cp "!ES_CLASSPATH!" "org.elasticsearch.tools.launchers.TempDirectory""`) do set ES_TMPDIR=%%a
+  for /f "tokens=* usebackq" %%a in (`CALL %JAVA% -cp "!ES_CLASSPATH!" "org.elasticsearch.tools.launchers.TempDirectory"`) do set  ES_TMPDIR=%%a
 )
diff --git a/distribution/src/bin/elasticsearch.bat b/distribution/src/bin/elasticsearch.bat
index 9b67fa2e0ffa..2d2ff6c122d2 100644
--- a/distribution/src/bin/elasticsearch.bat
+++ b/distribution/src/bin/elasticsearch.bat
@@ -41,9 +41,9 @@ IF ERRORLEVEL 1 (
 	EXIT /B %ERRORLEVEL%
 )
 
-set "ES_JVM_OPTIONS=%ES_PATH_CONF%\jvm.options"
+set ES_JVM_OPTIONS=%ES_PATH_CONF%\jvm.options
 @setlocal
-for /F "usebackq delims=" %%a in (`"%JAVA% -cp "!ES_CLASSPATH!" "org.elasticsearch.tools.launchers.JvmOptionsParser" "!ES_JVM_OPTIONS!" || echo jvm_options_parser_failed"`) do set JVM_OPTIONS=%%a
+for /F "usebackq delims=" %%a in (`CALL %JAVA% -cp "!ES_CLASSPATH!" "org.elasticsearch.tools.launchers.JvmOptionsParser" "!ES_JVM_OPTIONS!" ^|^| echo jvm_options_parser_failed`) do set JVM_OPTIONS=%%a
 @endlocal & set "MAYBE_JVM_OPTIONS_PARSER_FAILED=%JVM_OPTIONS%" & set ES_JAVA_OPTS=%JVM_OPTIONS:${ES_TMPDIR}=!ES_TMPDIR!% %ES_JAVA_OPTS%
 
 if "%MAYBE_JVM_OPTIONS_PARSER_FAILED%" == "jvm_options_parser_failed" (
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java
index f3126ed9bb08..a0cf98aac658 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/ArchiveTestCase.java
@@ -20,8 +20,12 @@
 package org.elasticsearch.packaging.test;
 
 import com.carrotsearch.randomizedtesting.annotations.TestCaseOrdering;
+import com.carrotsearch.randomizedtesting.generators.RandomStrings;
 import org.apache.http.client.fluent.Request;
 import org.elasticsearch.packaging.util.Archives;
+import org.elasticsearch.packaging.util.Distribution;
+import org.elasticsearch.packaging.util.FileUtils;
+import org.elasticsearch.packaging.util.Installation;
 import org.elasticsearch.packaging.util.Platforms;
 import org.elasticsearch.packaging.util.ServerUtils;
 import org.elasticsearch.packaging.util.Shell;
@@ -29,20 +33,18 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 
-import org.elasticsearch.packaging.util.Distribution;
-import org.elasticsearch.packaging.util.Installation;
-
-import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.util.Arrays;
 import java.util.stream.Stream;
 
+import static com.carrotsearch.randomizedtesting.RandomizedTest.getRandom;
 import static java.util.stream.Collectors.joining;
 import static org.elasticsearch.packaging.util.Archives.ARCHIVE_OWNER;
-import static org.elasticsearch.packaging.util.Cleanup.cleanEverything;
 import static org.elasticsearch.packaging.util.Archives.installArchive;
 import static org.elasticsearch.packaging.util.Archives.verifyArchiveInstallation;
+import static org.elasticsearch.packaging.util.Cleanup.cleanEverything;
 import static org.elasticsearch.packaging.util.FileMatcher.Fileness.File;
 import static org.elasticsearch.packaging.util.FileMatcher.file;
 import static org.elasticsearch.packaging.util.FileMatcher.p660;
@@ -53,6 +55,7 @@
 import static org.elasticsearch.packaging.util.FileUtils.rm;
 import static org.elasticsearch.packaging.util.ServerUtils.makeRequest;
 import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.notNullValue;
@@ -76,7 +79,7 @@
     protected abstract Distribution distribution();
 
     @BeforeClass
-    public static void cleanup() {
+    public static void cleanup() throws Exception {
         installation = null;
         cleanEverything();
     }
@@ -86,12 +89,12 @@ public void onlyCompatibleDistributions() {
         assumeTrue("only compatible distributions", distribution().packaging.compatible);
     }
 
-    public void test10Install() {
+    public void test10Install() throws Exception {
         installation = installArchive(distribution());
         verifyArchiveInstallation(installation, distribution());
     }
 
-    public void test20PluginsListWithNoPlugins() {
+    public void test20PluginsListWithNoPlugins() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Installation.Executables bin = installation.executables();
@@ -101,7 +104,7 @@ public void test20PluginsListWithNoPlugins() {
         assertThat(r.stdout, isEmptyString());
     }
 
-    public void test30AbortWhenJavaMissing() {
+    public void test30AbortWhenJavaMissing() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Installation.Executables bin = installation.executables();
@@ -143,7 +146,7 @@ public void test30AbortWhenJavaMissing() {
         });
     }
 
-    public void test40CreateKeystoreManually() {
+    public void test40CreateKeystoreManually() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Installation.Executables bin = installation.executables();
@@ -176,7 +179,7 @@ public void test40CreateKeystoreManually() {
         });
     }
 
-    public void test50StartAndStop() throws IOException {
+    public void test50StartAndStop() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         // cleanup from previous test
@@ -192,8 +195,63 @@ public void test50StartAndStop() throws IOException {
 
         Archives.stopElasticsearch(installation);
     }
+    public void test51JavaHomeWithSpecialCharacters() throws Exception {
+        assumeThat(installation, is(notNullValue()));
+
+        Platforms.onWindows(() -> {
+            final Shell sh = new Shell();
+            try {
+                // once windows 2012 is no longer supported and powershell 5.0 is always available we can change this command
+                sh.run("cmd /c mklink /D 'C:\\Program Files (x86)\\java' $Env:JAVA_HOME");
+
+                sh.getEnv().put("JAVA_HOME", "C:\\Program Files (x86)\\java");
+
+                //verify ES can start, stop and run plugin list
+                Archives.runElasticsearch(installation, sh);
+
+                Archives.stopElasticsearch(installation);
+
+                String pluginListCommand = installation.bin + "/elasticsearch-plugin list";
+                Result result = sh.run(pluginListCommand);
+                assertThat(result.exitCode, equalTo(0));
+
+            } finally {
+                //clean up sym link
+                sh.run("cmd /c rmdir 'C:\\Program Files (x86)\\java' ");
+            }
+        });
+
+        Platforms.onLinux(() -> {
+            final Shell sh = new Shell();
+            // Create temporary directory with a space and link to java binary.
+            // Use it as java_home
+            String nameWithSpace = RandomStrings.randomAsciiAlphanumOfLength(getRandom(), 10) + "java home";
+            String test_java_home = FileUtils.mkdir(Paths.get("/home",ARCHIVE_OWNER, nameWithSpace)).toAbsolutePath().toString();
+            try {
+                final String systemJavaHome = sh.run("echo $JAVA_HOME").stdout.trim();
+                final String java = systemJavaHome + "/bin/java";
+
+                sh.run("mkdir -p \"" + test_java_home + "/bin\"");
+                sh.run("ln -s \"" + java + "\" \"" + test_java_home + "/bin/java\"");
+                sh.run("chown -R " + ARCHIVE_OWNER + ":" + ARCHIVE_OWNER + " \"" + test_java_home + "\"");
+
+                sh.getEnv().put("JAVA_HOME", test_java_home);
+
+                //verify ES can start, stop and run plugin list
+                Archives.runElasticsearch(installation, sh);
+
+                Archives.stopElasticsearch(installation);
+
+                String pluginListCommand = installation.bin + "/elasticsearch-plugin list";
+                Result result = sh.run(pluginListCommand);
+                assertThat(result.exitCode, equalTo(0));
+            } finally {
+                FileUtils.rm(Paths.get("\"" + test_java_home + "\""));
+            }
+        });
+    }
 
-    public void test60AutoCreateKeystore() {
+    public void test60AutoCreateKeystore() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         assertThat(installation.config("elasticsearch.keystore"), file(File, ARCHIVE_OWNER, ARCHIVE_OWNER, p660));
@@ -212,7 +270,7 @@ public void test60AutoCreateKeystore() {
         });
     }
 
-    public void test70CustomPathConfAndJvmOptions() throws IOException {
+    public void test70CustomPathConfAndJvmOptions() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Path tempConf = getTempDir().resolve("esconf-alternate");
@@ -261,7 +319,7 @@ public void test70CustomPathConfAndJvmOptions() throws IOException {
         }
     }
 
-    public void test80RelativePathConf() throws IOException {
+    public void test80RelativePathConf() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Path temp = getTempDir().resolve("esconf-alternate");
@@ -304,7 +362,7 @@ public void test80RelativePathConf() throws IOException {
         }
     }
 
-    public void test90SecurityCliPackaging() {
+    public void test90SecurityCliPackaging() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Installation.Executables bin = installation.executables();
@@ -328,7 +386,7 @@ public void test90SecurityCliPackaging() {
         }
     }
 
-    public void test100RepairIndexCliPackaging() {
+    public void test100RepairIndexCliPackaging() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Installation.Executables bin = installation.executables();
@@ -344,5 +402,4 @@ public void test100RepairIndexCliPackaging() {
             Platforms.onWindows(action);
         }
     }
-
 }
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/DebPreservationTestCase.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/DebPreservationTestCase.java
index 522c038fc2bf..619b1b3a2625 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/DebPreservationTestCase.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/DebPreservationTestCase.java
@@ -55,7 +55,7 @@
     protected abstract Distribution distribution();
 
     @BeforeClass
-    public static void cleanup() {
+    public static void cleanup() throws Exception {
         installation = null;
         cleanEverything();
     }
@@ -66,14 +66,14 @@ public void onlyCompatibleDistributions() {
         assumeTrue("only compatible distributions", distribution().packaging.compatible);
     }
 
-    public void test10Install() {
+    public void test10Install() throws Exception {
         assertRemoved(distribution());
         installation = install(distribution());
         assertInstalled(distribution());
         verifyPackageInstallation(installation, distribution());
     }
 
-    public void test20Remove() {
+    public void test20Remove() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         remove(distribution());
@@ -118,7 +118,7 @@ public void test20Remove() {
         assertTrue(Files.exists(installation.envFile));
     }
 
-    public void test30Purge() {
+    public void test30Purge() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Shell sh = new Shell();
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java
index 1e18a73230c8..2ea7bd3060e3 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/PackageTestCase.java
@@ -24,7 +24,6 @@
 import org.elasticsearch.packaging.util.Installation;
 import org.elasticsearch.packaging.util.Platforms;
 import org.elasticsearch.packaging.util.Shell;
-
 import org.elasticsearch.packaging.util.Shell.Result;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -52,13 +51,11 @@
 import static org.elasticsearch.packaging.util.Platforms.getOsRelease;
 import static org.elasticsearch.packaging.util.Platforms.isSystemd;
 import static org.elasticsearch.packaging.util.ServerUtils.runElasticsearchTests;
-
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.isEmptyString;
-
 import static org.hamcrest.core.Is.is;
 import static org.junit.Assume.assumeThat;
 import static org.junit.Assume.assumeTrue;
@@ -71,13 +68,13 @@
     protected abstract Distribution distribution();
 
     @BeforeClass
-    public static void cleanup() {
+    public static void cleanup() throws Exception {
         installation = null;
         cleanEverything();
     }
 
     @Before
-    public void onlyCompatibleDistributions() {
+    public void onlyCompatibleDistributions() throws Exception {
         assumeTrue("only compatible distributions", distribution().packaging.compatible);
     }
 
@@ -98,14 +95,14 @@ public void test05InstallFailsWhenJavaMissing() {
         }
     }
 
-    public void test10InstallPackage() {
+    public void test10InstallPackage() throws Exception {
         assertRemoved(distribution());
         installation = install(distribution());
         assertInstalled(distribution());
         verifyPackageInstallation(installation, distribution());
     }
 
-    public void test20PluginsCommandWhenNoPlugins() {
+    public void test20PluginsCommandWhenNoPlugins() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         final Shell sh = new Shell();
@@ -127,7 +124,7 @@ public void test40StartServer() throws IOException {
         verifyPackageInstallation(installation, distribution()); // check startup script didn't change permissions
     }
 
-    public void test50Remove() {
+    public void test50Remove() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         remove(distribution());
@@ -185,7 +182,7 @@ public void test50Remove() {
         Platforms.onRPM(() -> assertFalse(Files.exists(SYSTEMD_SERVICE)));
     }
 
-    public void test60Reinstall() {
+    public void test60Reinstall() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         installation = install(distribution());
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/RpmPreservationTestCase.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/RpmPreservationTestCase.java
index 4787766ae3b6..bb919468fccd 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/RpmPreservationTestCase.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/test/RpmPreservationTestCase.java
@@ -58,7 +58,7 @@
     protected abstract Distribution distribution();
 
     @BeforeClass
-    public static void cleanup() {
+    public static void cleanup() throws Exception {
         installation = null;
         cleanEverything();
     }
@@ -69,14 +69,14 @@ public void onlyCompatibleDistributions() {
         assumeTrue("only compatible distributions", distribution().packaging.compatible);
     }
 
-    public void test10Install() {
+    public void test10Install() throws Exception {
         assertRemoved(distribution());
         installation = install(distribution());
         assertInstalled(distribution());
         verifyPackageInstallation(installation, distribution());
     }
 
-    public void test20Remove() {
+    public void test20Remove() throws Exception {
         assumeThat(installation, is(notNullValue()));
 
         remove(distribution());
@@ -91,7 +91,7 @@ public void test20Remove() {
         assertFalse(Files.exists(installation.envFile));
     }
 
-    public void test30PreserveConfig() {
+    public void test30PreserveConfig() throws Exception {
         final Shell sh = new Shell();
 
         installation = install(distribution());
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java
index 45629f286fcc..1c338001bc34 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Archives.java
@@ -19,7 +19,6 @@
 
 package org.elasticsearch.packaging.util;
 
-import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -37,15 +36,14 @@
 import static org.elasticsearch.packaging.util.FileUtils.getDefaultArchiveInstallPath;
 import static org.elasticsearch.packaging.util.FileUtils.getDistributionFile;
 import static org.elasticsearch.packaging.util.FileUtils.lsGlob;
-
 import static org.elasticsearch.packaging.util.FileUtils.mv;
 import static org.elasticsearch.packaging.util.FileUtils.slurp;
 import static org.elasticsearch.packaging.util.Platforms.isDPKG;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.collection.IsEmptyCollection.empty;
 import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
+import static org.hamcrest.collection.IsEmptyCollection.empty;
+import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNot.not;
 import static org.junit.Assert.assertTrue;
 
@@ -59,11 +57,11 @@
         ? "vagrant"
         : "elasticsearch";
 
-    public static Installation installArchive(Distribution distribution) {
+    public static Installation installArchive(Distribution distribution) throws Exception {
         return installArchive(distribution, getDefaultArchiveInstallPath(), getCurrentVersion());
     }
 
-    public static Installation installArchive(Distribution distribution, Path fullInstallPath, String version) {
+    public static Installation installArchive(Distribution distribution, Path fullInstallPath, String version) throws Exception {
         final Shell sh = new Shell();
 
         final Path distributionFile = getDistributionFile(distribution);
@@ -255,11 +253,11 @@ private static void verifyDefaultInstallation(Installation es, Distribution dist
         ).forEach(configFile -> assertThat(es.config(configFile), file(File, owner, owner, p660)));
     }
 
-    public static void runElasticsearch(Installation installation) throws IOException {
+    public static void runElasticsearch(Installation installation) throws Exception {
         runElasticsearch(installation, new Shell());
     }
 
-    public static void runElasticsearch(Installation installation, Shell sh) throws IOException {
+    public static void runElasticsearch(Installation installation, Shell sh) throws Exception {
         final Path pidFile = installation.home.resolve("elasticsearch.pid");
 
         final Installation.Executables bin = installation.executables();
@@ -309,7 +307,7 @@ public static void runElasticsearch(Installation installation, Shell sh) throws
         Platforms.onWindows(() -> sh.run("Get-Process -Id " + pid));
     }
 
-    public static void stopElasticsearch(Installation installation) {
+    public static void stopElasticsearch(Installation installation) throws Exception {
         Path pidFile = installation.home.resolve("elasticsearch.pid");
         assertTrue(Files.exists(pidFile));
         String pid = slurp(pidFile).trim();
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java
index fda61e9fb36e..f9b98d58ccac 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Cleanup.java
@@ -50,7 +50,7 @@
     // todo
     private static final List<String> ELASTICSEARCH_FILES_WINDOWS = Collections.emptyList();
 
-    public static void cleanEverything() {
+    public static void cleanEverything() throws Exception {
         final Shell sh = new Shell();
 
         // kill elasticsearch processes
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Packages.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Packages.java
index 8f7414294bff..ddf3daf245ab 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Packages.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Packages.java
@@ -52,14 +52,14 @@
     public static final Path SYSVINIT_SCRIPT = Paths.get("/etc/init.d/elasticsearch");
     public static final Path SYSTEMD_SERVICE = Paths.get("/usr/lib/systemd/system/elasticsearch.service");
 
-    public static void assertInstalled(Distribution distribution) {
+    public static void assertInstalled(Distribution distribution) throws Exception {
         final Result status = packageStatus(distribution);
         assertThat(status.exitCode, is(0));
 
         Platforms.onDPKG(() -> assertFalse(Pattern.compile("(?m)^Status:.+deinstall ok").matcher(status.stdout).find()));
     }
 
-    public static void assertRemoved(Distribution distribution) {
+    public static void assertRemoved(Distribution distribution) throws Exception {
         final Result status = packageStatus(distribution);
 
         Platforms.onRPM(() -> assertThat(status.exitCode, is(1)));
@@ -125,7 +125,7 @@ public static Result runInstallCommand(Distribution distribution, String version
         }
     }
 
-    public static void remove(Distribution distribution) {
+    public static void remove(Distribution distribution) throws Exception {
         final Shell sh = new Shell();
 
         Platforms.onRPM(() -> {
diff --git a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java
index c7ca1284ca69..ffe14536abba 100644
--- a/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java
+++ b/qa/vagrant/src/main/java/org/elasticsearch/packaging/util/Platforms.java
@@ -64,25 +64,25 @@ public static boolean isSysVInit() {
         return new Shell().runIgnoreExitCode("which service").isSuccess();
     }
 
-    public static void onWindows(PlatformAction action) {
+    public static void onWindows(PlatformAction action) throws Exception {
         if (WINDOWS) {
             action.run();
         }
     }
 
-    public static void onLinux(PlatformAction action) {
+    public static void onLinux(PlatformAction action) throws Exception {
         if (LINUX) {
             action.run();
         }
     }
 
-    public static void onRPM(PlatformAction action) {
+    public static void onRPM(PlatformAction action) throws Exception {
         if (isRPM()) {
             action.run();
         }
     }
 
-    public static void onDPKG(PlatformAction action) {
+    public static void onDPKG(PlatformAction action) throws Exception {
         if (isDPKG()) {
             action.run();
         }
@@ -93,6 +93,6 @@ public static void onDPKG(PlatformAction action) {
      */
     @FunctionalInterface
     public interface PlatformAction {
-        void run();
+        void run() throws Exception;
     }
 }
