diff --git a/src/main/java/org/elasticsearch/action/indexedscripts/get/TransportGetIndexedScriptAction.java b/src/main/java/org/elasticsearch/action/indexedscripts/get/TransportGetIndexedScriptAction.java
index 6c2fbf231d88..90a24968d946 100644
--- a/src/main/java/org/elasticsearch/action/indexedscripts/get/TransportGetIndexedScriptAction.java
+++ b/src/main/java/org/elasticsearch/action/indexedscripts/get/TransportGetIndexedScriptAction.java
@@ -51,7 +51,7 @@ public GetIndexedScriptRequest newRequestInstance(){
     @Override
     public void doExecute(GetIndexedScriptRequest request, final ActionListener<GetIndexedScriptResponse> listener){
         // forward the handling to the script service we are running on a network thread here...
-        scriptService.queryScriptIndex(request,new ActionListener<GetResponse>() {
+        scriptService.queryScriptIndex(request, new ActionListener<GetResponse>() {
             @Override
             public void onResponse(GetResponse getFields) {
                 listener.onResponse(new GetIndexedScriptResponse(getFields));
diff --git a/src/main/java/org/elasticsearch/script/ScriptService.java b/src/main/java/org/elasticsearch/script/ScriptService.java
index 2a1eced9aca5..aaaeb7ce9fff 100644
--- a/src/main/java/org/elasticsearch/script/ScriptService.java
+++ b/src/main/java/org/elasticsearch/script/ScriptService.java
@@ -361,7 +361,7 @@ public void queryScriptIndex(GetIndexedScriptRequest request, final ActionListen
         String scriptLang = validateScriptLanguage(request.scriptLang());
         GetRequest getRequest = new GetRequest(request, SCRIPT_INDEX).type(scriptLang).id(request.id())
                 .version(request.version()).versionType(request.versionType())
-                .operationThreaded(false).preference("_local"); //Set preference for no forking
+                .preference("_local"); //Set preference for no forking
         client.get(getRequest, listener);
     }
 
@@ -416,7 +416,7 @@ public void putScriptToIndex(PutIndexedScriptRequest request, ActionListener<Ind
         validate(request.safeSource(), scriptLang);
 
         IndexRequest indexRequest = new IndexRequest(request).index(SCRIPT_INDEX).type(scriptLang).id(request.id())
-                .listenerThreaded(false).operationThreaded(false).version(request.version()).versionType(request.versionType())
+                .version(request.version()).versionType(request.versionType())
                 .source(request.safeSource(), true).opType(request.opType()).refresh(true); //Always refresh after indexing a template
         client.index(indexRequest, listener);
     }
