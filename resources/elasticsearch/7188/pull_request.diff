diff --git a/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
index 4de36b60e056..895074954c26 100644
--- a/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
+++ b/src/main/java/org/elasticsearch/common/geo/builders/BasePolygonBuilder.java
@@ -417,7 +417,7 @@ private static void connect(Edge in, Edge out) {
                 in.next = new Edge(in.intersect, out.next, in.intersect);
             }
             out.next = new Edge(out.intersect, e1, out.intersect);
-        } else {
+        } else if (in.next != out){
             // first edge intersects with dateline
             Edge e2 = new Edge(out.intersect, in.next, out.intersect);
 
diff --git a/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
index c8ddde476007..ada43929d672 100644
--- a/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
+++ b/src/main/java/org/elasticsearch/common/geo/builders/ShapeBuilder.java
@@ -293,12 +293,6 @@ protected static int intersections(double dateline, Edge[] edges) {
 
             double position = intersection(p1, p2, dateline);
             if (!Double.isNaN(position)) {
-                if (position == 1) {
-                    if (Double.compare(p1.x, dateline) == Double.compare(edges[i].next.next.coordinate.x, dateline)) {
-                        // Ignore the ear
-                        continue;
-                    }
-                }
                 edges[i].intersection(position);
                 numIntersections++;
             }
diff --git a/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java b/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
index 1ab0483f1b91..24ae9e5e8a36 100644
--- a/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
+++ b/src/test/java/org/elasticsearch/common/geo/ShapeBuilderTests.java
@@ -308,4 +308,66 @@ public void testComplexShapeWithHole() {
 
          assertPolygon(shape);
      }
+
+    @Test
+    public void testShapeWithHoleAtEdgeEndPoints() {
+        PolygonBuilder builder = ShapeBuilder.newPolygon()
+                .point(-4, 2)
+                .point(4, 2)
+                .point(6, 0)
+                .point(4, -2)
+                .point(-4, -2)
+                .point(-6, 0)
+                .point(-4, 2);
+
+        builder.hole()
+            .point(4, 1)
+            .point(4, -1)
+            .point(-4, -1)
+            .point(-4, 1)
+            .point(4, 1);
+
+        Shape shape = builder.close().build();
+
+         assertPolygon(shape);
+     }
+
+    @Test
+    public void testShapeWithPointOnDateline() {
+        PolygonBuilder builder = ShapeBuilder.newPolygon()
+                .point(180, 0)
+                .point(176, 4)
+                .point(176, -4)
+                .point(180, 0);
+
+        Shape shape = builder.close().build();
+
+         assertPolygon(shape);
+     }
+
+    @Test
+    public void testShapeWithEdgeAlongDateline() {
+        PolygonBuilder builder = ShapeBuilder.newPolygon()
+                .point(180, 0)
+                .point(176, 4)
+                .point(180, -4)
+                .point(180, 0);
+
+        Shape shape = builder.close().build();
+
+         assertPolygon(shape);
+     }
+
+    @Test
+    public void testShapeWithEdgeAcrossDateline() {
+        PolygonBuilder builder = ShapeBuilder.newPolygon()
+                .point(180, 0)
+                .point(176, 4)
+                .point(-176, 4)
+                .point(180, 0);
+
+        Shape shape = builder.close().build();
+
+         assertPolygon(shape);
+     }
 }
