diff --git a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
index b25f5f6a02df..389f0266d49a 100755
--- a/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/MapperService.java
@@ -458,6 +458,17 @@ public MappedFieldType fullName(String fullName) {
         return fieldTypes.get(fullName);
     }
 
+    /**
+     * Returns the {@link MappedFieldType} for the give fullName.
+     *
+     * If multiple types have fields with the same full name, the first is returned.
+     *
+     * This is an alias to make {@code fullName} easier to find
+     */
+    public MappedFieldType getFieldForName(String fullName) {
+        return this.fullName(fullName);
+    }
+
     /**
      * Returns all the fields that match the given pattern. If the pattern is prefixed with a type
      * then the fields will be returned with a type prefix.
diff --git a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
index fcf1a12eba7b..a35f64ebbafd 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryParser.java
@@ -30,6 +30,7 @@
 import org.apache.lucene.search.PrefixQuery;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.BytesRef;
+import org.elasticsearch.index.mapper.MappedFieldType;
 
 import java.io.IOException;
 import java.util.Locale;
@@ -43,11 +44,14 @@
 public class SimpleQueryParser extends org.apache.lucene.queryparser.simple.SimpleQueryParser {
 
     private final Settings settings;
+    private final Map<String, MappedFieldType> fieldToType;
 
     /** Creates a new parser with custom flags used to enable/disable certain features. */
-    public SimpleQueryParser(Analyzer analyzer, Map<String, Float> weights, int flags, Settings settings) {
+    public SimpleQueryParser(Analyzer analyzer, Map<String, Float> weights, Map<String, MappedFieldType> fieldToType,
+                             int flags, Settings settings) {
         super(analyzer, weights, flags);
         this.settings = settings;
+        this.fieldToType = fieldToType;
     }
 
     /**
@@ -66,7 +70,15 @@ public Query newDefaultQuery(String text) {
         bq.setDisableCoord(true);
         for (Map.Entry<String,Float> entry : weights.entrySet()) {
             try {
-                Query q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());
+                Query q;
+                MappedFieldType mpt = fieldToType.get(entry.getKey());
+                if (mpt != null && mpt.isNumeric()) {
+                    // If the field is numeric, it needs to use a different query type instead of trying to analyze a 'string' as a 'long
+                    q = mpt.termQuery(text, null);
+                } else {
+                    q = createBooleanQuery(entry.getKey(), text, super.getDefaultOperator());
+                }
+
                 if (q != null) {
                     bq.add(wrapWithBoost(q, entry.getValue()), BooleanClause.Occur.SHOULD);
                 }
diff --git a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
index 5bb10b74a2bd..28f76a13e721 100644
--- a/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/SimpleQueryStringBuilder.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.query;
 
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
 import org.elasticsearch.common.Strings;
@@ -29,6 +30,7 @@
 import org.elasticsearch.common.regex.Regex;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.index.mapper.MappedFieldType;
+import org.elasticsearch.index.mapper.MapperService;
 import org.elasticsearch.index.query.SimpleQueryParser.Settings;
 
 import java.io.IOException;
@@ -269,19 +271,28 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         }
 
         // Use standard analyzer by default if none specified
-        Analyzer luceneAnalyzer;
+        Analyzer defaultAnalyzer;
         if (analyzer == null) {
-            luceneAnalyzer = context.getMapperService().searchAnalyzer();
+            defaultAnalyzer = context.getMapperService().searchAnalyzer();
         } else {
-            luceneAnalyzer = context.getAnalysisService().analyzer(analyzer);
-            if (luceneAnalyzer == null) {
+            defaultAnalyzer = context.getAnalysisService().analyzer(analyzer);
+            if (defaultAnalyzer == null) {
                 throw new QueryShardException(context, "[" + SimpleQueryStringBuilder.NAME + "] analyzer [" + analyzer
                         + "] not found");
             }
+        }
 
+        // Fetch each mapped type for the fields specified
+        Map<String, MappedFieldType> fieldToType = new HashMap<>();
+        MapperService ms = context.getMapperService();
+        for (String fieldName : resolvedFieldsAndWeights.keySet()) {
+            MappedFieldType mapping = ms.getFieldForName(fieldName);
+            if (mapping != null) {
+                fieldToType.put(fieldName, mapping);
+            }
         }
 
-        SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings);
+        SimpleQueryParser sqp = new SimpleQueryParser(defaultAnalyzer, resolvedFieldsAndWeights, fieldToType, flags, settings);
         sqp.setDefaultOperator(defaultOperator.toBooleanClauseOccur());
 
         Query query = sqp.parse(queryText);
@@ -394,4 +405,3 @@ protected boolean doEquals(SimpleQueryStringBuilder other) {
                 && Objects.equals(settings, other.settings) && (flags == other.flags);
     }
 }
-
diff --git a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
index 1a585db3934e..b2dceb4bb982 100644
--- a/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
+++ b/core/src/test/java/org/elasticsearch/search/query/SimpleQueryStringIT.java
@@ -21,6 +21,7 @@
 
 import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
+import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.index.query.BoolQueryBuilder;
 import org.elasticsearch.index.query.Operator;
@@ -30,7 +31,9 @@
 import org.elasticsearch.test.ESIntegTestCase;
 
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Locale;
+import java.util.Map;
 import java.util.concurrent.ExecutionException;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
@@ -100,6 +103,22 @@ public void testSimpleQueryString() throws ExecutionException, InterruptedExcept
         assertSearchHits(searchResponse, "5", "6");
     }
 
+    // See: https://github.com/elastic/elasticsearch/issues/16577
+    public void testSimpleQueryStringUsesFieldAnalyzer() throws Exception {
+        client().prepareIndex("test", "type1", "1").setSource("foo", 123, "bar", "abc").get();
+        client().prepareIndex("test", "type1", "2").setSource("foo", 234, "bar", "bcd").get();
+
+        refresh();
+
+        Map<String, Float> fields = new HashMap<>();
+        fields.put("foo", 1.0f);
+        fields.put("bar", 1.0f);
+        SearchResponse searchResponse = client().prepareSearch().setQuery(
+            simpleQueryStringQuery("123").fields(fields)).get();
+        assertHitCount(searchResponse, 1L);
+        assertSearchHits(searchResponse, "1");
+    }
+
     public void testSimpleQueryStringMinimumShouldMatch() throws Exception {
         createIndex("test");
         ensureGreen("test");
