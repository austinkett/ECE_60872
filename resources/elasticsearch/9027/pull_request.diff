diff --git a/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java
index dcbff03d7326..a948b8bcefd6 100644
--- a/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java
+++ b/src/main/java/org/elasticsearch/index/query/TermsFilterParser.java
@@ -188,18 +188,8 @@ public Filter parse(QueryParseContext parseContext) throws IOException, QueryPar
             }
 
             // external lookup, use it
-            TermsLookup termsLookup = new TermsLookup(fieldMapper, lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);
-
-            Filter filter = termsFilterCache.termsFilter(termsLookup, lookupCache, cacheKey);
-            if (filter == null) {
-                return null;
-            }
-
-            // cache the whole filter by default, or if explicitly told to
-            if (cache != null) {
-                filter = parseContext.cacheFilter(filter, cacheKey, cache);
-            }
-            return filter;
+            TermsLookup termsLookup = new TermsLookup(lookupIndex, lookupType, lookupId, lookupRouting, lookupPath, parseContext);
+            terms.addAll(termsFilterCache.terms(termsLookup, lookupCache, cacheKey));
         }
 
         if (terms.isEmpty()) {
diff --git a/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java b/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java
index 1e8a44170b7f..d0ec4540b539 100644
--- a/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java
+++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/IndicesTermsFilterCache.java
@@ -22,8 +22,8 @@
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.Weigher;
+import com.google.common.collect.ImmutableList;
 
-import org.apache.lucene.search.Filter;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.get.GetRequest;
@@ -33,7 +33,6 @@
 import org.elasticsearch.common.component.AbstractComponent;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.lucene.HashedBytesRef;
-import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.ByteSizeUnit;
 import org.elasticsearch.common.unit.ByteSizeValue;
@@ -49,7 +48,7 @@
  */
 public class IndicesTermsFilterCache extends AbstractComponent {
 
-    private static TermsFilterValue NO_TERMS = new TermsFilterValue(0, Queries.MATCH_NO_FILTER);
+    private static TermsFilterValue NO_TERMS = new TermsFilterValue(0, ImmutableList.of());
 
     private final Client client;
 
@@ -78,10 +77,9 @@ public IndicesTermsFilterCache(Settings settings, Client client) {
         this.cache = builder.build();
     }
 
-    @Nullable
-    public Filter termsFilter(final TermsLookup lookup, boolean cacheLookup, @Nullable HashedBytesRef cacheKey) throws RuntimeException {
+    public List<Object> terms(final TermsLookup lookup, boolean cacheLookup, @Nullable HashedBytesRef cacheKey) throws RuntimeException {
         if (!cacheLookup) {
-            return buildTermsFilterValue(lookup).filter;
+            return buildTermsFilterValue(lookup).values;
         }
 
         HashedBytesRef key;
@@ -96,7 +94,7 @@ public Filter termsFilter(final TermsLookup lookup, boolean cacheLookup, @Nullab
                 public TermsFilterValue call() throws Exception {
                     return buildTermsFilterValue(lookup);
                 }
-            }).filter;
+            }).values;
         } catch (ExecutionException e) {
             if (e.getCause() instanceof RuntimeException) {
                 throw (RuntimeException) e.getCause();
@@ -114,8 +112,7 @@ TermsFilterValue buildTermsFilterValue(TermsLookup lookup) {
         if (values.isEmpty()) {
             return NO_TERMS;
         }
-        Filter filter = lookup.getFieldMapper().termsFilter(values, lookup.getQueryParseContext());
-        return new TermsFilterValue(estimateSizeInBytes(values), filter);
+        return new TermsFilterValue(estimateSizeInBytes(values), ImmutableList.copyOf(values));
     }
 
     long estimateSizeInBytes(List<Object> terms) {
@@ -150,14 +147,13 @@ public int weigh(HashedBytesRef key, TermsFilterValue value) {
         }
     }
 
-    // TODO: if TermsFilter exposed sizeInBytes, we won't need this wrapper
     static class TermsFilterValue {
         public final long sizeInBytes;
-        public final Filter filter;
+        public final ImmutableList<Object> values;
 
-        TermsFilterValue(long sizeInBytes, Filter filter) {
+        TermsFilterValue(long sizeInBytes, ImmutableList<Object> values) {
             this.sizeInBytes = sizeInBytes;
-            this.filter = filter;
+            this.values = values;
         }
     }
 }
diff --git a/src/main/java/org/elasticsearch/indices/cache/filter/terms/TermsLookup.java b/src/main/java/org/elasticsearch/indices/cache/filter/terms/TermsLookup.java
index 0bc72ee0be0e..ed323b72dc12 100644
--- a/src/main/java/org/elasticsearch/indices/cache/filter/terms/TermsLookup.java
+++ b/src/main/java/org/elasticsearch/indices/cache/filter/terms/TermsLookup.java
@@ -20,15 +20,12 @@
 package org.elasticsearch.indices.cache.filter.terms;
 
 import org.elasticsearch.common.Nullable;
-import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.query.QueryParseContext;
 
 /**
  */
 public class TermsLookup {
 
-    private final FieldMapper fieldMapper;
-
     private final String index;
     private final String type;
     private final String id;
@@ -38,8 +35,7 @@
     @Nullable
     private final QueryParseContext queryParseContext;
 
-    public TermsLookup(FieldMapper fieldMapper, String index, String type, String id, String routing, String path, @Nullable QueryParseContext queryParseContext) {
-        this.fieldMapper = fieldMapper;
+    public TermsLookup(String index, String type, String id, String routing, String path, @Nullable QueryParseContext queryParseContext) {
         this.index = index;
         this.type = type;
         this.id = id;
@@ -48,10 +44,6 @@ public TermsLookup(FieldMapper fieldMapper, String index, String type, String id
         this.queryParseContext = queryParseContext;
     }
 
-    public FieldMapper getFieldMapper() {
-        return fieldMapper;
-    }
-
     public String getIndex() {
         return index;
     }
@@ -78,6 +70,6 @@ public QueryParseContext getQueryParseContext() {
     }
 
     public String toString() {
-        return fieldMapper.names().fullName() + ":" + index + "/" + type + "/" + id + "/" + path;
+        return index + "/" + type + "/" + id + "/" + path;
     }
 }
