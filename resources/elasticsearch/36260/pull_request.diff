diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java
index 0ae426f8e03b..e8c1fa78d2dc 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/SearchIT.java
@@ -223,6 +223,19 @@ public void testSearchNoQuery() throws IOException {
             assertTrue(searchHit.getSourceAsMap().containsKey("num2"));
         }
     }
+    
+    public void testSearchNoQueryDeprecated() throws IOException {
+        SearchRequest searchRequest = new SearchRequest("index");
+        searchRequest.types("foo");
+        SearchResponse searchResponse = execute(searchRequest, highLevelClient()::search, highLevelClient()::searchAsync);
+        assertWarnings("[types removal] Specifying types in search requests is deprecated.");
+    }    
+    
+
+    @Override
+    protected boolean getStrictDeprecationMode() {
+        return false;
+    }
 
     public void testSearchMatchQuery() throws IOException {
         SearchRequest searchRequest = new SearchRequest("index");
diff --git a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java
index d68e371f3183..1a877234bdf8 100644
--- a/client/rest/src/main/java/org/elasticsearch/client/RestClient.java
+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClient.java
@@ -108,16 +108,18 @@
     private final AtomicInteger lastNodeIndex = new AtomicInteger(0);
     private final ConcurrentMap<HttpHost, DeadHostState> blacklist = new ConcurrentHashMap<>();
     private final FailureListener failureListener;
+    private final WarningListener warningListener;
     private final NodeSelector nodeSelector;
     private volatile NodeTuple<List<Node>> nodeTuple;
     private final boolean strictDeprecationMode;
 
     RestClient(CloseableHttpAsyncClient client, long maxRetryTimeoutMillis, Header[] defaultHeaders, List<Node> nodes, String pathPrefix,
-            FailureListener failureListener, NodeSelector nodeSelector, boolean strictDeprecationMode) {
+            WarningListener warningListener, FailureListener failureListener, NodeSelector nodeSelector, boolean strictDeprecationMode) {
         this.client = client;
         this.maxRetryTimeoutMillis = maxRetryTimeoutMillis;
         this.defaultHeaders = Collections.unmodifiableList(Arrays.asList(defaultHeaders));
         this.failureListener = failureListener;
+        this.warningListener = warningListener;
         this.pathPrefix = pathPrefix;
         this.nodeSelector = nodeSelector;
         this.strictDeprecationMode = strictDeprecationMode;
@@ -215,7 +217,11 @@ public synchronized void setNodes(Collection<Node> nodes) {
     public Response performRequest(Request request) throws IOException {
         SyncResponseListener listener = new SyncResponseListener(maxRetryTimeoutMillis);
         performRequestAsyncNoCatch(request, listener);
-        return listener.get();
+        Response result = listener.get();
+        if (result.hasWarnings() && warningListener != null) {
+            warningListener.onWarning(request, result);
+        }
+        return result;
     }
 
     /**
@@ -236,11 +242,35 @@ public Response performRequest(Request request) throws IOException {
      */
     public void performRequestAsync(Request request, ResponseListener responseListener) {
         try {
+            if (warningListener != null) {
+                responseListener = new WarningResponseListener(responseListener, request);
+            }
             performRequestAsyncNoCatch(request, responseListener);
         } catch (Exception e) {
             responseListener.onFailure(e);
         }
     }
+    // Used to wrap the caller's listener with one that can handle any warnings. 
+    private class WarningResponseListener implements ResponseListener{
+        final ResponseListener delegate;
+        final Request request;
+
+        WarningResponseListener(ResponseListener delegate, Request request) {
+            this.delegate = delegate;
+            this.request = request;
+        }
+
+        public void onSuccess(Response response) {
+            if(response.hasWarnings()){
+                warningListener.onWarning(request, response);
+            }
+            delegate.onSuccess(response);
+        }
+
+        public void onFailure(Exception exception) {
+            delegate.onFailure(exception);
+        }
+    }
 
     void performRequestAsyncNoCatch(Request request, ResponseListener listener) throws IOException {
         Map<String, String> requestParams = new HashMap<>(request.getParameters());
@@ -737,6 +767,16 @@ Response get() throws IOException {
          */
         public void onFailure(Node node) {}
     }
+    
+    /**
+     * Listener that allows to be notified whenever a warning is supplied in a response.
+     */
+    public static class WarningListener {
+        /**
+         * Notifies that a response contained a warning.
+         */
+        public void onWarning(Request request, Response response) {}
+    }    
 
     /**
      * {@link NodeTuple} enables the {@linkplain Node}s and {@linkplain AuthCache}
diff --git a/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java
index 84cc3ee1667b..c754d8245c5d 100644
--- a/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java
+++ b/client/rest/src/main/java/org/elasticsearch/client/RestClientBuilder.java
@@ -52,6 +52,7 @@
     private int maxRetryTimeout = DEFAULT_MAX_RETRY_TIMEOUT_MILLIS;
     private Header[] defaultHeaders = EMPTY_HEADERS;
     private RestClient.FailureListener failureListener;
+    private RestClient.WarningListener warningListener;
     private HttpClientConfigCallback httpClientConfigCallback;
     private RequestConfigCallback requestConfigCallback;
     private String pathPrefix;
@@ -101,6 +102,17 @@ public RestClientBuilder setFailureListener(RestClient.FailureListener failureLi
         this.failureListener = failureListener;
         return this;
     }
+    
+    /**
+     * Sets the {@link RestClient.WarningListener} to be notified for each request failure
+     *
+     * @throws NullPointerException if {@code warningListener} is {@code null}.
+     */
+    public RestClientBuilder setWarningListener(RestClient.WarningListener warningListener) {
+        Objects.requireNonNull(warningListener, "warningListener must not be null");
+        this.warningListener = warningListener;
+        return this;
+    }    
 
     /**
      * Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request.
@@ -209,7 +221,7 @@ public CloseableHttpAsyncClient run() {
             }
         });
         RestClient restClient = new RestClient(httpClient, maxRetryTimeout, defaultHeaders, nodes,
-                pathPrefix, failureListener, nodeSelector, strictDeprecationMode);
+                pathPrefix, warningListener, failureListener, nodeSelector, strictDeprecationMode);
         httpClient.start();
         return restClient;
     }
diff --git a/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsTests.java b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsTests.java
index 7dd1c4d842bf..3b4b6a195d07 100644
--- a/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsTests.java
+++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientMultipleHostsTests.java
@@ -115,7 +115,7 @@ public void run() {
         }
         nodes = Collections.unmodifiableList(nodes);
         failureListener = new HostsTrackingFailureListener();
-        return new RestClient(httpClient, 10000, new Header[0], nodes, null, failureListener, nodeSelector, false);
+        return new RestClient(httpClient, 10000, new Header[0], nodes, null, null, failureListener, nodeSelector, false);
     }
 
     /**
diff --git a/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java b/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java
index 65eb92c0e8d4..9540cf98865b 100644
--- a/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java
+++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientSingleHostTests.java
@@ -153,7 +153,7 @@ public void run() {
         failureListener = new HostsTrackingFailureListener();
         strictDeprecationMode = randomBoolean();
         restClient = new RestClient(httpClient, 10000, defaultHeaders,
-                singletonList(node), null, failureListener, NodeSelector.ANY, strictDeprecationMode);
+                singletonList(node), null, null, failureListener, NodeSelector.ANY, strictDeprecationMode);
     }
 
     /**
diff --git a/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java
index 69cdfeae85df..4894eca099a0 100644
--- a/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java
+++ b/client/rest/src/test/java/org/elasticsearch/client/RestClientTests.java
@@ -57,7 +57,7 @@
     public void testCloseIsIdempotent() throws IOException {
         List<Node> nodes = singletonList(new Node(new HttpHost("localhost", 9200)));
         CloseableHttpAsyncClient closeableHttpAsyncClient = mock(CloseableHttpAsyncClient.class);
-        RestClient restClient = new RestClient(closeableHttpAsyncClient, 1_000, new Header[0], nodes, null, null, null, false);
+        RestClient restClient = new RestClient(closeableHttpAsyncClient, 1_000, new Header[0], nodes, null, null, null, null, false);
         restClient.close();
         verify(closeableHttpAsyncClient, times(1)).close();
         restClient.close();
@@ -345,7 +345,7 @@ private static String assertSelectAllRejected( NodeTuple<List<Node>> nodeTuple,
     private static RestClient createRestClient() {
         List<Node> nodes = Collections.singletonList(new Node(new HttpHost("localhost", 9200)));
         return new RestClient(mock(CloseableHttpAsyncClient.class), randomLongBetween(1_000, 30_000),
-                new Header[] {}, nodes, null, null, null, false);
+                new Header[] {}, nodes, null, null, null, null, false);
     }
 
     public void testRoundRobin() throws IOException {
diff --git a/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java
index 200aaecaa17c..73eccb7d8ced 100644
--- a/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java
+++ b/test/framework/src/main/java/org/elasticsearch/test/rest/ESRestTestCase.java
@@ -26,16 +26,19 @@
 import org.apache.http.nio.conn.ssl.SSLIOSessionStrategy;
 import org.apache.http.ssl.SSLContexts;
 import org.apache.http.util.EntityUtils;
+import org.apache.logging.log4j.LogManager;
 import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksAction;
 import org.elasticsearch.client.Request;
 import org.elasticsearch.client.Response;
 import org.elasticsearch.client.ResponseException;
 import org.elasticsearch.client.RestClient;
+import org.elasticsearch.client.RestClient.WarningListener;
 import org.elasticsearch.client.RestClientBuilder;
 import org.elasticsearch.common.CheckedRunnable;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.io.PathUtils;
+import org.elasticsearch.common.logging.DeprecationLogger;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.util.concurrent.ThreadContext;
@@ -608,9 +611,21 @@ protected String getProtocol() {
         return "http";
     }
 
+    //TODO change below LogManager.getLogger... to "new NoOpLogger()" and refactor 
+    // org.elasticsearch.xpack.core.security.support.NoOpLogger to somewhere common outside of security
+    private static final DeprecationLogger deprecationLogger = new DeprecationLogger(LogManager.getLogger(ESRestTestCase.class)) {};
+
     protected RestClient buildClient(Settings settings, HttpHost[] hosts) throws IOException {
         RestClientBuilder builder = RestClient.builder(hosts);
         configureClient(builder, settings);
+        builder.setWarningListener(new WarningListener() {
+            @Override
+            public void onWarning(Request request, Response response) {
+                for (String warningMessage : response.getWarnings()) {
+                    deprecationLogger.deprecated(warningMessage);
+                }
+            }            
+        });
         builder.setStrictDeprecationMode(getStrictDeprecationMode());
         return builder.build();
     }
