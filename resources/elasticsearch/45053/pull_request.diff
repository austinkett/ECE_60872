diff --git a/server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java b/server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java
index a76493464784..81343ef730af 100644
--- a/server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java
+++ b/server/src/main/java/org/elasticsearch/search/internal/ContextIndexSearcher.java
@@ -185,7 +185,7 @@ private void searchInternal(List<LeafReaderContext> leaves, Weight weight, Colle
                 continue;
             }
             Bits liveDocs = ctx.reader().getLiveDocs();
-            BitSet liveDocsBitSet = getSparseBitSetOrNull(ctx.reader().getLiveDocs());
+            BitSet liveDocsBitSet = getSparseBitSetOrNull(liveDocs);
             if (liveDocsBitSet == null) {
                 BulkScorer bulkScorer = weight.bulkScorer(ctx);
                 if (bulkScorer != null) {
@@ -226,7 +226,8 @@ private static BitSet getSparseBitSetOrNull(Bits liveDocs) {
     }
 
     static void intersectScorerAndBitSet(Scorer scorer, BitSet acceptDocs,
-                                            LeafCollector collector, Runnable checkCancelled) throws IOException {
+                                         LeafCollector collector, Runnable checkCancelled) throws IOException {
+        collector.setScorer(scorer);
         // ConjunctionDISI uses the DocIdSetIterator#cost() to order the iterators, so if roleBits has the lowest cardinality it should
         // be used first:
         DocIdSetIterator iterator = ConjunctionDISI.intersectIterators(Arrays.asList(new BitSetIterator(acceptDocs,
diff --git a/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java b/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
index ed2f972562c9..186436e4bad3 100644
--- a/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
+++ b/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
@@ -35,15 +35,20 @@
 import org.apache.lucene.index.PostingsEnum;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermsEnum;
+import org.apache.lucene.search.BoostQuery;
 import org.apache.lucene.search.BulkScorer;
+import org.apache.lucene.search.ConstantScoreQuery;
 import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.Explanation;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.LeafCollector;
 import org.apache.lucene.search.MatchAllDocsQuery;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Scorable;
+import org.apache.lucene.search.ScoreMode;
 import org.apache.lucene.search.Scorer;
 import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Accountable;
@@ -107,16 +112,24 @@ public void testIntersectScorerAndRoleBits() throws Exception {
         iw.close();
         DirectoryReader directoryReader = DirectoryReader.open(directory);
         IndexSearcher searcher = new IndexSearcher(directoryReader);
-        Weight weight = searcher.createWeight(new TermQuery(new Term("field2", "value1")),
-            org.apache.lucene.search.ScoreMode.COMPLETE_NO_SCORES, 1f);
+        Weight weight = searcher.createWeight(
+            new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term("field2", "value1"))), 3f),
+            ScoreMode.COMPLETE, 1f);
 
         LeafReaderContext leaf = directoryReader.leaves().get(0);
 
         CombinedBitSet bitSet = new CombinedBitSet(query(leaf, "field1", "value1"), leaf.reader().getLiveDocs());
         LeafCollector leafCollector = new LeafBucketCollector() {
+            Scorable scorer;
+            @Override
+            public void setScorer(Scorable scorer) throws IOException {
+                this.scorer = scorer;
+            }
+
             @Override
             public void collect(int doc, long bucket) throws IOException {
                 assertThat(doc, equalTo(0));
+                assertThat(scorer.score(), equalTo(3f));
             }
         };
         intersectScorerAndBitSet(weight.scorer(leaf), bitSet, leafCollector, () -> {});
@@ -130,7 +143,6 @@ public void collect(int doc, long bucket) throws IOException {
         };
         intersectScorerAndBitSet(weight.scorer(leaf), bitSet, leafCollector,  () -> {});
 
-
         bitSet = new CombinedBitSet(query(leaf, "field1", "value3"), leaf.reader().getLiveDocs());
         leafCollector = new LeafBucketCollector() {
             @Override
@@ -232,6 +244,12 @@ public void onRemoval(ShardId shardId, Accountable accountable) {
 
         // make sure scorers are created only once, see #1725
         assertEquals(1, searcher.count(new CreateScorerOnceQuery(new MatchAllDocsQuery())));
+
+        TopDocs topDocs = searcher.search(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term("foo", "bar"))), 3f), 1);
+        assertEquals(1, topDocs.totalHits.value);
+        assertEquals(1, topDocs.scoreDocs.length);
+        assertEquals(3f, topDocs.scoreDocs[0].score, 0);
+
         IOUtils.close(reader, w, dir);
     }
 
