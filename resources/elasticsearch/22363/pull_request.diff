diff --git a/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java b/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java
index 8c14c6b5c9d5..9603ab759f6e 100644
--- a/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java
+++ b/core/src/main/java/org/elasticsearch/transport/ConnectionProfile.java
@@ -82,21 +82,23 @@ private ConnectionProfile(List<ConnectionTypeHandle> handles, int numConnections
         /**
          * Sets a connect timeout for this connection profile
          */
-        public void setConnectTimeout(TimeValue connectTimeout) {
+        public Builder setConnectTimeout(TimeValue connectTimeout) {
             if (connectTimeout.millis() < 0) {
                 throw new IllegalArgumentException("connectTimeout must be non-negative but was: " + connectTimeout);
             }
             this.connectTimeout = connectTimeout;
+            return this;
         }
 
         /**
          * Sets a handshake timeout for this connection profile
          */
-        public void setHandshakeTimeout(TimeValue handshakeTimeout) {
+        public Builder setHandshakeTimeout(TimeValue handshakeTimeout) {
             if (handshakeTimeout.millis() < 0) {
                 throw new IllegalArgumentException("handshakeTimeout must be non-negative but was: " + handshakeTimeout);
             }
             this.handshakeTimeout = handshakeTimeout;
+            return this;
         }
 
         /**
@@ -104,7 +106,7 @@ public void setHandshakeTimeout(TimeValue handshakeTimeout) {
          * @param numConnections the number of connections to use in the pool for the given connection types
          * @param types a set of types that should share the given number of connections
          */
-        public void addConnections(int numConnections, TransportRequestOptions.Type... types) {
+        public Builder addConnections(int numConnections, TransportRequestOptions.Type... types) {
             if (types == null || types.length == 0) {
                 throw new IllegalArgumentException("types must not be null");
             }
@@ -116,6 +118,7 @@ public void addConnections(int numConnections, TransportRequestOptions.Type... t
             addedTypes.addAll(Arrays.asList(types));
             handles.add(new ConnectionTypeHandle(offset, numConnections, EnumSet.copyOf(Arrays.asList(types))));
             offset += numConnections;
+            return this;
         }
 
         /**
diff --git a/modules/transport-netty3/src/main/java/org/elasticsearch/transport/netty3/Netty3Transport.java b/modules/transport-netty3/src/main/java/org/elasticsearch/transport/netty3/Netty3Transport.java
index ee9f9953fd08..72f17b4a3f5d 100644
--- a/modules/transport-netty3/src/main/java/org/elasticsearch/transport/netty3/Netty3Transport.java
+++ b/modules/transport-netty3/src/main/java/org/elasticsearch/transport/netty3/Netty3Transport.java
@@ -340,6 +340,7 @@ public long serverOpen() {
         return channels == null ? 0 : channels.numberOfOpenChannels();
     }
 
+    @Override
     protected NodeChannels connectToChannels(DiscoveryNode node, ConnectionProfile profile) {
         final Channel[] channels = new Channel[profile.getNumConnections()];
         final NodeChannels nodeChannels = new NodeChannels(node, channels, profile);
@@ -350,6 +351,8 @@ protected NodeChannels connectToChannels(DiscoveryNode node, ConnectionProfile p
             final TimeValue defaultConnectTimeout = defaultConnectionProfile.getConnectTimeout();
             if (profile.getConnectTimeout() != null && profile.getConnectTimeout().equals(defaultConnectTimeout) == false) {
                 clientBootstrap = new ClientBootstrap(this.clientBootstrap.getFactory());
+                clientBootstrap.setPipelineFactory(this.clientBootstrap.getPipelineFactory());
+                clientBootstrap.setOptions(this.clientBootstrap.getOptions());
                 clientBootstrap.setOption("connectTimeoutMillis", Math.toIntExact(profile.getConnectTimeout().millis()));
                 connectTimeout = profile.getConnectTimeout();
             } else {
diff --git a/modules/transport-netty3/src/test/java/org/elasticsearch/transport/netty3/Netty3ScheduledPingTests.java b/modules/transport-netty3/src/test/java/org/elasticsearch/transport/netty3/Netty3ScheduledPingTests.java
index ac828f6786a5..084057f82a44 100644
--- a/modules/transport-netty3/src/test/java/org/elasticsearch/transport/netty3/Netty3ScheduledPingTests.java
+++ b/modules/transport-netty3/src/test/java/org/elasticsearch/transport/netty3/Netty3ScheduledPingTests.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.common.lease.Releasables;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.indices.breaker.CircuitBreakerService;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
@@ -31,6 +32,7 @@
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.TestThreadPool;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.elasticsearch.transport.ConnectionProfile;
 import org.elasticsearch.transport.TransportResponseHandler;
 import org.elasticsearch.transport.TcpTransport;
 import org.elasticsearch.transport.TransportChannel;
@@ -84,8 +86,23 @@ public void testScheduledPing() throws Exception {
         DiscoveryNode nodeB =
             new DiscoveryNode("TS_B", "TS_B", serviceB.boundAddress().publishAddress(), emptyMap(), emptySet(), Version.CURRENT);
 
-        serviceA.connectToNode(nodeB);
-        serviceB.connectToNode(nodeA);
+        if (randomBoolean()) {
+            // use connection profile with different connect timeout
+            final ConnectionProfile connectionProfile = new ConnectionProfile.Builder()
+                .addConnections(1,
+                    TransportRequestOptions.Type.BULK,
+                    TransportRequestOptions.Type.PING,
+                    TransportRequestOptions.Type.RECOVERY,
+                    TransportRequestOptions.Type.REG,
+                    TransportRequestOptions.Type.STATE)
+                .setConnectTimeout(TimeValue.timeValueSeconds(42))
+                .build();
+            serviceA.connectToNode(nodeB, connectionProfile);
+            serviceB.connectToNode(nodeA, connectionProfile);
+        } else {
+            serviceA.connectToNode(nodeB);
+            serviceB.connectToNode(nodeA);
+        }
 
         assertBusy(new Runnable() {
             @Override
diff --git a/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java
index 2786077d084f..22fd472fe185 100644
--- a/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java
+++ b/modules/transport-netty4/src/test/java/org/elasticsearch/transport/netty4/Netty4ScheduledPingTests.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.common.lease.Releasables;
 import org.elasticsearch.common.network.NetworkService;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.common.util.BigArrays;
 import org.elasticsearch.indices.breaker.CircuitBreakerService;
 import org.elasticsearch.indices.breaker.NoneCircuitBreakerService;
@@ -31,6 +32,7 @@
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.TestThreadPool;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.elasticsearch.transport.ConnectionProfile;
 import org.elasticsearch.transport.TcpTransport;
 import org.elasticsearch.transport.TransportChannel;
 import org.elasticsearch.transport.TransportException;
@@ -84,8 +86,23 @@ public void testScheduledPing() throws Exception {
         DiscoveryNode nodeB =
             new DiscoveryNode("TS_B", "TS_B", serviceB.boundAddress().publishAddress(), emptyMap(), emptySet(), Version.CURRENT);
 
-        serviceA.connectToNode(nodeB);
-        serviceB.connectToNode(nodeA);
+        if (randomBoolean()) {
+            // use connection profile with different connect timeout
+            final ConnectionProfile connectionProfile = new ConnectionProfile.Builder()
+                .addConnections(1,
+                    TransportRequestOptions.Type.BULK,
+                    TransportRequestOptions.Type.PING,
+                    TransportRequestOptions.Type.RECOVERY,
+                    TransportRequestOptions.Type.REG,
+                    TransportRequestOptions.Type.STATE)
+                .setConnectTimeout(TimeValue.timeValueSeconds(42))
+                .build();
+            serviceA.connectToNode(nodeB, connectionProfile);
+            serviceB.connectToNode(nodeA, connectionProfile);
+        } else {
+            serviceA.connectToNode(nodeB);
+            serviceB.connectToNode(nodeA);
+        }
 
         assertBusy(new Runnable() {
             @Override
