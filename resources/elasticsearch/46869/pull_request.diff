diff --git a/server/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java b/server/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java
index d3acd02a06d1..73a574992225 100644
--- a/server/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java
+++ b/server/src/main/java/org/elasticsearch/common/blobstore/BlobPath.java
@@ -22,9 +22,11 @@
 import org.elasticsearch.common.Nullable;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.function.Predicate;
 
 /**
  * The list of paths where a blob can reside.  The contents of the paths are dependent upon the implementation of {@link BlobContainer}.
@@ -58,7 +60,7 @@ private BlobPath(List<String> paths) {
 
     public BlobPath add(String path) {
         List<String> paths = new ArrayList<>(this.paths);
-        paths.add(path);
+        paths.addAll(normalizePath(path));
         return new BlobPath(Collections.unmodifiableList(paths));
     }
 
@@ -92,4 +94,17 @@ public String toString() {
         }
         return sb.toString();
     }
+
+    private static List<String> normalizePath(String path) {
+        final String[] res =
+            Arrays.stream(path.split(SEPARATOR)).filter(Predicate.not(String::isEmpty)).toArray(String[]::new);
+        if (path.startsWith(SEPARATOR)) {
+            if (res.length == 0) {
+                return Collections.singletonList(SEPARATOR);
+            } else {
+                res[0] = SEPARATOR + res[0];
+            }
+        }
+        return Arrays.asList(res);
+    }
 }
diff --git a/server/src/test/java/org/elasticsearch/common/blobstore/BlobPathTests.java b/server/src/test/java/org/elasticsearch/common/blobstore/BlobPathTests.java
index ec846ca30690..d4e08be30c34 100644
--- a/server/src/test/java/org/elasticsearch/common/blobstore/BlobPathTests.java
+++ b/server/src/test/java/org/elasticsearch/common/blobstore/BlobPathTests.java
@@ -38,4 +38,23 @@ public void testBuildAsString() {
         path = path.add("d/");
         assertThat(path.buildAsString(), is("a/b/c/d/"));
     }
+
+    public void testNormalizesPath() {
+        BlobPath path = new BlobPath();
+        path = path.add("foo/");
+        path = path.add("bar");
+        assertThat(path.buildAsString(), is("foo/bar/"));
+
+        path = new BlobPath();
+        path = path.add("/");
+        assertThat(path.buildAsString(), is("/"));
+
+        path = new BlobPath();
+        path = path.add("foo//bar");
+        assertThat(path.buildAsString(), is("foo/bar/"));
+
+        path = new BlobPath();
+        path = path.add("/foo");
+        assertThat(path.buildAsString(), is("/foo/"));
+    }
 }
