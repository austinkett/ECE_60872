diff --git a/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java
index 38c014132fe5..660cbf291c80 100644
--- a/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java
+++ b/modules/percolator/src/test/java/org/elasticsearch/percolator/PercolateQueryBuilderTests.java
@@ -377,7 +377,7 @@ public void testSerializationFailsUnlessFetched() throws IOException {
     }
 
     public void testFieldAlias() throws IOException {
-        assumeTrue("Test only runs when there is a single mapping type.", isSingleType());
+        assumeTrue("Test only runs on indexes that enforce a single mapping type.", isSingleType());
 
         QueryShardContext shardContext = createShardContext();
 
diff --git a/server/src/main/java/org/elasticsearch/index/mapper/FieldAliasMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/FieldAliasMapper.java
index 6f785f604cf5..1e5857c9087c 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/FieldAliasMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/FieldAliasMapper.java
@@ -115,7 +115,8 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         private static void checkIndexCompatibility(IndexSettings settings, String name) {
             if (!settings.isSingleType()) {
                 throw new IllegalStateException("Cannot create a field alias [" + name + "] " +
-                    "on index [" + settings.getIndex().getName() + "], as it has multiple types.");
+                    "for index [" + settings.getIndex().getName() + "]. Field aliases can only " +
+                    "be specified on indexes that enforce a single mapping type.");
             }
         }
     }
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/FieldAliasMapperTests.java b/server/src/test/java/org/elasticsearch/index/mapper/FieldAliasMapperTests.java
index 12b723c71304..24494d46e004 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/FieldAliasMapperTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/FieldAliasMapperTests.java
@@ -200,7 +200,7 @@ public void testFieldAliasDisallowedWithMultipleTypes() throws IOException {
         .endObject());
         IllegalStateException e = expectThrows(IllegalStateException.class,
             () -> parser.parse("type", new CompressedXContent(mapping)));
-        assertEquals("Cannot create a field alias [alias-field] on index [alias-test],"
-            + " as it has multiple types.", e.getMessage());
+        assertEquals("Cannot create a field alias [alias-field] for index [alias-test]. Field aliases" +
+            " can only be specified on indexes that enforce a single mapping type.", e.getMessage());
     }
 }
diff --git a/server/src/test/java/org/elasticsearch/index/query/TermsSetQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/TermsSetQueryBuilderTests.java
index 51875a97ca63..1a45c17749eb 100644
--- a/server/src/test/java/org/elasticsearch/index/query/TermsSetQueryBuilderTests.java
+++ b/server/src/test/java/org/elasticsearch/index/query/TermsSetQueryBuilderTests.java
@@ -263,7 +263,7 @@ public void testDoToQuery_msmScriptField() throws Exception {
     }
 
     public void testFieldAlias() {
-        assumeTrue("Test runs only when there is a single mapping type.", isSingleType());
+        assumeTrue("Test only runs on indexes that enforce a single mapping type.", isSingleType());
 
         List<String> randomTerms = Arrays.asList(generateRandomStringArray(5, 10, false, false));
         TermsSetQueryBuilder queryBuilder = new TermsSetQueryBuilder(STRING_ALIAS_FIELD_NAME, randomTerms)
