diff --git a/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
index 5ed98746fbf5..424e640983dd 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
@@ -91,9 +91,10 @@
 
         static {
             FIELD_TYPE.setTokenized(false);
-            FIELD_TYPE.setOmitNorms(true);
             FIELD_TYPE.setStored(false);
+            FIELD_TYPE.setHasDocValues(false);
             FIELD_TYPE.setIndexOptions(IndexOptions.DOCS);
+            FIELD_TYPE.setOmitNorms(true);
             FIELD_TYPE.freeze();
         }
 
@@ -125,6 +126,14 @@ public Builder indexOptions(IndexOptions indexOptions) {
             return super.indexOptions(indexOptions);
         }
 
+        @Override
+        public Builder docValues(boolean docValues) {
+            if (docValues) {
+                throw new IllegalArgumentException("[" + CONTENT_TYPE + "] fields do not support doc values");
+            }
+            return super.docValues(docValues);
+        }
+
         public Builder depthLimit(int depthLimit) {
             if (depthLimit < 0) {
                 throw new IllegalArgumentException("[depth_limit] must be positive, got " + depthLimit);
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/JsonFieldMapperTests.java b/server/src/test/java/org/elasticsearch/index/mapper/JsonFieldMapperTests.java
index 220c3c2b080a..5d8a08468e69 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/JsonFieldMapperTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/JsonFieldMapperTests.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.index.mapper;
 
+import org.apache.lucene.index.DocValuesType;
 import org.apache.lucene.index.IndexableField;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.Strings;
@@ -87,6 +88,7 @@ public void testDefaults() throws Exception {
         assertEquals(new BytesRef("value"), fields[0].binaryValue());
         assertFalse(fields[0].fieldType().stored());
         assertTrue(fields[0].fieldType().omitNorms());
+        assertEquals(DocValuesType.NONE, fields[0].fieldType().docValuesType());
 
         IndexableField[] keyedFields = parsedDoc.rootDoc().getFields("field._keyed");
         assertEquals(1, keyedFields.length);
@@ -95,6 +97,7 @@ public void testDefaults() throws Exception {
         assertEquals(new BytesRef("key\0value"), keyedFields[0].binaryValue());
         assertFalse(keyedFields[0].fieldType().stored());
         assertTrue(keyedFields[0].fieldType().omitNorms());
+        assertEquals(DocValuesType.NONE, keyedFields[0].fieldType().docValuesType());
 
         IndexableField[] fieldNamesFields = parsedDoc.rootDoc().getFields(FieldNamesFieldMapper.NAME);
         assertEquals(1, fieldNamesFields.length);
@@ -127,6 +130,23 @@ public void testDisableIndex() throws Exception {
         assertEquals(0, fields.length);
     }
 
+    public void testEnableDocValues() throws Exception {
+        String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject()
+            .startObject("type")
+                .startObject("properties")
+                    .startObject("field")
+                        .field("type", "json")
+                        .field("doc_values", true)
+                    .endObject()
+                .endObject()
+            .endObject()
+        .endObject());
+
+        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,
+            () -> parser.parse("type", new CompressedXContent(mapping)));
+        assertEquals("[json] fields do not support doc values", e.getMessage());
+    }
+
     public void testEnableStore() throws Exception {
         String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject()
             .startObject("type")
