diff --git a/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java
index 9494131eda03..dec5c81ed3c9 100644
--- a/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java
+++ b/server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java
@@ -341,20 +341,24 @@ private void executeSearch(SearchTask task, SearchTimeProvider timeProvider, Sea
         final DiscoveryNodes nodes = clusterState.nodes();
         BiFunction<String, String, Transport.Connection> connectionLookup = buildConnectionLookup(searchRequest.getLocalClusterAlias(),
             nodes::get, remoteConnections, searchTransportService::getConnection);
-        if (searchRequest.isMaxConcurrentShardRequestsSet() == false) {
-            // we try to set a default of max concurrent shard requests based on
-            // the node count but upper-bound it by 256 by default to keep it sane. A single
-            // search request that fans out lots of shards should hit a cluster too hard while 256 is already a lot.
-            // we multiply it by the default number of shards such that a single request in a cluster of 1 would hit all shards of a
-            // default index.
-            searchRequest.setMaxConcurrentShardRequests(Math.min(256, nodeCount
-                * IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.getDefault(Settings.EMPTY)));
-        }
+        assert nodeCount > 0 || shardIterators.size() == 0 : "non empty search iterators but node count is 0";
+        setMaxConcurrentShardRequests(searchRequest, nodeCount);
         boolean preFilterSearchShards = shouldPreFilterSearchShards(searchRequest, shardIterators);
         searchAsyncAction(task, searchRequest, shardIterators, timeProvider, connectionLookup, clusterState.version(),
             Collections.unmodifiableMap(aliasFilter), concreteIndexBoosts, routingMap, listener, preFilterSearchShards, clusters).start();
     }
 
+    static void setMaxConcurrentShardRequests(SearchRequest searchRequest, int nodeCount) {
+        if (searchRequest.isMaxConcurrentShardRequestsSet() == false) {
+            // we try to set a default of max concurrent shard requests based on the node count but upper-bound it by 256 by default to
+            // keep it sane. A single search request that fans out to lots of shards should hit a cluster too hard while 256 is already
+            // a lot. we multiply it by the default number of shards such that a single request in a cluster of 1 would hit all shards of
+            // a default index. We take into account that we may be in a cluster with no data nodes searching against no shards.
+            searchRequest.setMaxConcurrentShardRequests(Math.min(256, Math.max(nodeCount, 1)
+                * IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.getDefault(Settings.EMPTY)));
+        }
+    }
+
     static BiFunction<String, String, Transport.Connection> buildConnectionLookup(String requestClusterAlias,
                                                               Function<String, DiscoveryNode> localNodes,
                                                               BiFunction<String, String, DiscoveryNode> remoteNodes,
diff --git a/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionTests.java b/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionTests.java
index 16ff4389d7c4..5f2aaca83131 100644
--- a/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionTests.java
+++ b/server/src/test/java/org/elasticsearch/action/search/TransportSearchActionTests.java
@@ -341,4 +341,25 @@ private static OriginalIndices randomOriginalIndices() {
         return new OriginalIndices(localIndices, IndicesOptions.fromOptions(randomBoolean(),
                 randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean(), randomBoolean()));
     }
+
+    public void testSetMaxConcurrentShardRequests() {
+        {
+            SearchRequest searchRequest = new SearchRequest();
+            int value = randomIntBetween(1, Integer.MAX_VALUE);
+            searchRequest.setMaxConcurrentShardRequests(value);
+            TransportSearchAction.setMaxConcurrentShardRequests(searchRequest, randomIntBetween(0, Integer.MAX_VALUE));
+            assertEquals(value, searchRequest.getMaxConcurrentShardRequests());
+        }
+        {
+            SearchRequest searchRequest = new SearchRequest();
+            int nodeCount = randomIntBetween(1, 1000000);
+            TransportSearchAction.setMaxConcurrentShardRequests(searchRequest, nodeCount);
+            assertEquals(Math.min(256, nodeCount * 5), searchRequest.getMaxConcurrentShardRequests());
+        }
+        {
+            SearchRequest searchRequest = new SearchRequest();
+            TransportSearchAction.setMaxConcurrentShardRequests(searchRequest, 0);
+            assertEquals(5, searchRequest.getMaxConcurrentShardRequests());
+        }
+    }
 }
