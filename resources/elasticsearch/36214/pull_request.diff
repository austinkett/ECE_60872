diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java
index b9045d467291..8d7d6b5bbee4 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolver.java
@@ -136,7 +136,7 @@ public boolean equals(Object obj) {
 
     private static final IndicesOptions INDICES_ONLY_OPTIONS = new IndicesOptions(
             EnumSet.of(Option.ALLOW_NO_INDICES, Option.IGNORE_UNAVAILABLE, Option.IGNORE_ALIASES), EnumSet.of(WildcardStates.OPEN));
-
+    private static final List<String> FIELD_NAMES_BLACKLIST = Arrays.asList("_size");
 
     private final Client client;
     private final String clusterName;
@@ -272,8 +272,8 @@ static IndexResolution mergedMapping(String indexPattern, Map<String, Map<String
 
             String name = entry.getKey();
 
-            // skip internal fields
-            if (!name.startsWith("_")) {
+            // Skip any of the blacklisted field names.
+            if (!FIELD_NAMES_BLACKLIST.contains(name)) {
                 Map<String, FieldCapabilities> types = entry.getValue();
                 // field is mapped differently across indices
                 if (types.size() > 1) {
@@ -297,6 +297,12 @@ static IndexResolution mergedMapping(String indexPattern, Map<String, Map<String
                 // type is okay, check aggregation
                 else {
                     fieldCap = types.values().iterator().next();
+                    
+                    // Skip internal fields (name starting with underscore and its type reported by field_caps starts with underscore
+                    // as well). A meta field named "_version", for example, has the type named "_version".
+                    if (name.startsWith("_") && fieldCap.getType().startsWith("_")) {
+                        continue;
+                    }
                     // validate search/agg-able
                     if (fieldCap.isAggregatable() && fieldCap.nonAggregatableIndices() != null) {
                         errorMessage.append("mapped as aggregatable except in ");
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java
index f4fc0d602b6d..7ef57972b313 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/analysis/index/IndexResolverTests.java
@@ -112,6 +112,25 @@ public void testMultiLevelNestedMappings() throws Exception {
         assertTrue(resolution.isValid());
         assertEqualsMaps(nestedMapping, resolution.get().mapping());
     }
+    
+    public void testMetaFieldsAreIgnored() throws Exception {
+        Map<String, Map<String, FieldCapabilities>> fieldCaps = new HashMap<>();
+        addFieldCaps(fieldCaps, "_version", "_version", false, false);
+        addFieldCaps(fieldCaps, "_meta_field", "integer", true, true);
+        addFieldCaps(fieldCaps, "_size", "integer", true, true);
+        addFieldCaps(fieldCaps, "text", "keyword", true, true);
+        
+        String wildcard = "*";
+        IndexResolution resolution = IndexResolver.mergedMapping(wildcard, fieldCaps);
+        assertTrue(resolution.isValid());
+
+        EsIndex esIndex = resolution.get();
+        assertEquals(wildcard, esIndex.name());
+        assertNull(esIndex.mapping().get("_version"));
+        assertNull(esIndex.mapping().get("_size"));
+        assertEquals(DataType.INTEGER, esIndex.mapping().get("_meta_field").getDataType());
+        assertEquals(DataType.KEYWORD, esIndex.mapping().get("text").getDataType());
+    }
 
     public static IndexResolution merge(EsIndex... indices) {
         return IndexResolver.mergedMapping("*", fromMappings(indices));
@@ -209,4 +228,11 @@ public String toString() {
             assertEquals(String.format(Locale.ROOT, "Key [%s] has different values", entry.getKey()), entry.getValue(), rv);
         }
     }
+    
+    private void addFieldCaps(Map<String, Map<String, FieldCapabilities>> fieldCaps, String name, String type, boolean isSearchable,
+            boolean isAggregatable) {
+        Map<String, FieldCapabilities> cap = new HashMap<>();
+        cap.put(name, new FieldCapabilities(name, type, isSearchable, isAggregatable));
+        fieldCaps.put(name, cap);
+    }
 }
\ No newline at end of file
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/TypesTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/TypesTests.java
index 5a612fdbe611..8e02e82eb831 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/TypesTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/type/TypesTests.java
@@ -38,12 +38,13 @@ public void testEmptyMap() {
 
     public void testBasicMapping() {
         Map<String, EsField> mapping = loadMapping("mapping-basic.json");
-        assertThat(mapping.size(), is(6));
+        assertThat(mapping.size(), is(7));
         assertThat(mapping.get("emp_no").getDataType(), is(INTEGER));
         assertThat(mapping.get("first_name"), instanceOf(TextEsField.class));
         assertThat(mapping.get("last_name").getDataType(), is(TEXT));
         assertThat(mapping.get("gender").getDataType(), is(KEYWORD));
         assertThat(mapping.get("salary").getDataType(), is(INTEGER));
+        assertThat(mapping.get("_meta_field").getDataType(), is(KEYWORD));
     }
 
     public void testDefaultStringMapping() {
diff --git a/x-pack/plugin/sql/src/test/resources/mapping-basic.json b/x-pack/plugin/sql/src/test/resources/mapping-basic.json
index c1747d1561c6..142b347fbe31 100644
--- a/x-pack/plugin/sql/src/test/resources/mapping-basic.json
+++ b/x-pack/plugin/sql/src/test/resources/mapping-basic.json
@@ -17,6 +17,9 @@
         },
         "salary" : {
             "type" : "integer"
+        },
+        "_meta_field": {
+            "type" : "keyword"
         }
     }
 }
diff --git a/x-pack/plugin/sql/src/test/resources/mapping-numeric.json b/x-pack/plugin/sql/src/test/resources/mapping-numeric.json
index a95ecfb3aa70..15b02ab5f311 100644
--- a/x-pack/plugin/sql/src/test/resources/mapping-numeric.json
+++ b/x-pack/plugin/sql/src/test/resources/mapping-numeric.json
@@ -11,6 +11,14 @@
         },
         "long" : {
             "type" : "long"
+        },
+        "meta_subfield" : {
+            "type" : "text",
+            "fields" : {
+                "_meta" : {
+                     "type" : "keyword"
+                }
+            }
         }
     }
 }
