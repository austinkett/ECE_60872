diff --git a/core/src/main/java/org/elasticsearch/action/bulk/Retry.java b/core/src/main/java/org/elasticsearch/action/bulk/Retry.java
index 8681719f4648..836dff3eab44 100644
--- a/core/src/main/java/org/elasticsearch/action/bulk/Retry.java
+++ b/core/src/main/java/org/elasticsearch/action/bulk/Retry.java
@@ -156,7 +156,7 @@ public void run() {
         }
 
         private BulkRequest createBulkRequestForRetry(BulkResponse bulkItemResponses) {
-            BulkRequest requestToReissue = new BulkRequest();
+            BulkRequest requestToReissue = new BulkRequest(currentBulkRequest);
             int index = 0;
             for (BulkItemResponse bulkItemResponse : bulkItemResponses.getItems()) {
                 if (bulkItemResponse.isFailed()) {
diff --git a/core/src/test/java/org/elasticsearch/action/bulk/RetryTests.java b/core/src/test/java/org/elasticsearch/action/bulk/RetryTests.java
index 4d73f932d2f4..060139fc7f94 100644
--- a/core/src/test/java/org/elasticsearch/action/bulk/RetryTests.java
+++ b/core/src/test/java/org/elasticsearch/action/bulk/RetryTests.java
@@ -30,6 +30,8 @@
 import org.junit.After;
 import org.junit.Before;
 
+import static org.apache.lucene.util.TestUtil.randomSimpleString;
+
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -63,6 +65,11 @@ private BulkRequest createBulkRequest() {
         request.add(new UpdateRequest("shop", "products", "3"));
         request.add(new UpdateRequest("shop", "products", "4"));
         request.add(new UpdateRequest("shop", "products", "5"));
+
+        // Add a dummy header and context so we can assert that we kept it
+        request.putHeader(randomSimpleString(random()), randomSimpleString(random()));
+        request.putInContext(new Object(), new Object());
+
         return request;
     }
 
@@ -177,6 +184,7 @@ public void assertOnFailureNeverCalled() {
 
     private static class MockBulkClient extends NoOpClient {
         private int numberOfCallsToFail;
+        private BulkRequest firstRequest;
 
         private MockBulkClient(String testName, int numberOfCallsToFail) {
             super(testName);
@@ -192,6 +200,12 @@ private MockBulkClient(String testName, int numberOfCallsToFail) {
 
         @Override
         public void bulk(BulkRequest request, ActionListener<BulkResponse> listener) {
+            if (firstRequest == null) {
+                firstRequest = request;
+            } else {
+                assertEquals(firstRequest.getHeaders(), request.getHeaders());
+                assertEquals(firstRequest.getContext(), request.getContext());
+            }
             // do everything synchronously, that's fine for a test
             boolean shouldFail = numberOfCallsToFail > 0;
             numberOfCallsToFail--;
diff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java
index 946e01295311..91676f3e2d9a 100644
--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java
+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractAsyncBulkByScrollAction.java
@@ -325,7 +325,7 @@ void startNormalTermination(final List<Failure> indexingFailures, final List<Sha
             finishHim(null, indexingFailures, searchFailures, timedOut);
             return;
         }
-        RefreshRequest refresh = new RefreshRequest();
+        RefreshRequest refresh = new RefreshRequest(mainRequest);
         refresh.indices(destinationIndices.toArray(new String[destinationIndices.size()]));
         client.admin().indices().refresh(refresh, new ActionListener<RefreshResponse>() {
             @Override
@@ -364,7 +364,7 @@ void finishHim(Throwable failure, List<Failure> indexingFailures, List<ShardSear
              * Fire off the clear scroll but don't wait for it it return before
              * we send the use their response.
              */
-            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();
+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest(mainRequest);
             clearScrollRequest.addScrollId(scrollId);
             client.clearScroll(clearScrollRequest, new ActionListener<ClearScrollResponse>() {
                 @Override
diff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBaseReindexRestHandler.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBaseReindexRestHandler.java
index 2809b72e1fd4..6ec1e45cb796 100644
--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBaseReindexRestHandler.java
+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/AbstractBaseReindexRestHandler.java
@@ -40,16 +40,31 @@
 public abstract class AbstractBaseReindexRestHandler<Request extends ActionRequest<Request>, Response extends BulkIndexByScrollResponse,
         TA extends TransportAction<Request, Response>> extends BaseRestHandler {
     private final ClusterService clusterService;
+    private final RestController controller;
     private final TA action;
 
     protected AbstractBaseReindexRestHandler(Settings settings, RestController controller, Client client, ClusterService clusterService,
             TA action) {
         super(settings, controller, client);
         this.clusterService = clusterService;
+        this.controller = controller;
         this.action = action;
     }
 
     protected void execute(RestRequest request, Request internalRequest, RestChannel channel) throws IOException {
+        /*
+         * Copy the HeadersAndContext from the request to the internalRequest so things that rely on context don't complain. Normally
+         * requests don't have to do this because they receive a wrapped client implementation that does it transparently. We can't do that
+         * because we need a task listener which is not exposed by the client interface.
+         */
+        for (String usefulHeader : controller.relevantHeaders()) {
+            String headerValue = request.header(usefulHeader);
+            if (headerValue != null) {
+                internalRequest.putHeader(usefulHeader, headerValue);
+            }
+        }
+        internalRequest.copyContextFrom(request);
+
         if (request.paramAsBoolean("wait_for_completion", true)) {
             action.execute(internalRequest, new BulkIndexByScrollResponseContentListener<Response>(channel));
             return;
diff --git a/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java
index 419a7bf29489..b0452463ed81 100644
--- a/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java
+++ b/modules/reindex/src/test/java/org/elasticsearch/index/reindex/AsyncBulkByScrollActionTests.java
@@ -139,8 +139,7 @@ private String scrollId() {
     public void testFirstSearchRequestHasContextFromMainRequest() {
         firstSearchRequest = new SearchRequest();
         new DummyAbstractAsyncBulkByScrollAction().initialSearch();
-        assertEquals(mainRequest.getContext(), client.lastSentSearchRequest.get().getContext());
-        assertEquals(mainRequest.getHeaders(), client.lastSentSearchRequest.get().getHeaders());
+        // Actual assertions done by the client instance
     }
 
     public void testScrollResponseSetsTotal() {
@@ -160,8 +159,7 @@ public void testSubsequentSearchScrollRequestsHaveContextFromMainRequest() {
         DummyAbstractAsyncBulkByScrollAction action = new DummyAbstractAsyncBulkByScrollAction();
         action.setScroll(scrollId());
         action.startNextScroll();
-        assertEquals(mainRequest.getContext(), client.lastSentSearchScrollRequest.get().getContext());
-        assertEquals(mainRequest.getHeaders(), client.lastSentSearchScrollRequest.get().getHeaders());
+        // Actual assertions done by the client instance
     }
 
     public void testEachScrollResponseIsABatch() {
@@ -382,7 +380,7 @@ void startNextScroll() {
                 successLatch.countDown();
             }
         };
-        BulkRequest request = new BulkRequest();
+        BulkRequest request = new BulkRequest(mainRequest);
         for (int i = 0; i < size + 1; i++) {
             request.add(new IndexRequest("index", "type", "id" + i));
         }
@@ -568,7 +566,7 @@ public String toString() {
         }
     }
 
-    private static class MyMockClient extends FilterClient {
+    private class MyMockClient extends FilterClient {
         private final List<String> scrollsCleared = new ArrayList<>();
         private final AtomicInteger bulksAttempts = new AtomicInteger();
         private final AtomicReference<SearchRequest> lastSentSearchRequest = new AtomicReference<>();
@@ -588,6 +586,8 @@ public MyMockClient(Client in) {
                     Response extends ActionResponse,
                     RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>
                 > void doExecute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {
+            assertEquals(request + "preserved context", mainRequest.getContext(), request.getContext());
+            assertEquals(request + "preserved headers", mainRequest.getHeaders(), request.getHeaders());
             if (request instanceof SearchRequest) {
                 lastSentSearchRequest.set((SearchRequest) request);
                 return;
