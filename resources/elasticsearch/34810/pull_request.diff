diff --git a/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/XPackIT.java b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/XPackIT.java
index b10d56ca8d3b..cf911e93e567 100644
--- a/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/XPackIT.java
+++ b/qa/rolling-upgrade/src/test/java/org/elasticsearch/upgrades/XPackIT.java
@@ -207,7 +207,6 @@ public void testTrialLicense() throws IOException {
      * would pollute the cluster state with its job that the non-xpack
      * nodes couldn't understand.
      */
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/34764")
     public void testCreateRollup() throws IOException {
         // Rollup validates its input on job creation so lets make an index for it
         Request indexInputDoc = new Request("POST", "/rollup_test_input_1/doc/");
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJobConfig.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJobConfig.java
index 9672202586b9..2f8cf942b3b3 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJobConfig.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/rollup/job/RollupJobConfig.java
@@ -5,6 +5,7 @@
  */
 package org.elasticsearch.xpack.core.rollup.job;
 
+import org.elasticsearch.Version;
 import org.elasticsearch.action.ActionRequestValidationException;
 import org.elasticsearch.action.fieldcaps.FieldCapabilities;
 import org.elasticsearch.common.Nullable;
@@ -243,7 +244,11 @@ public void writeTo(final StreamOutput out) throws IOException {
         out.writeString(rollupIndex);
         out.writeString(cron);
         out.writeOptionalWriteable(groupConfig);
-        out.writeList(metricsConfig);
+        if(out.getVersion().before(Version.V_6_5_0)) {
+            out.writeList(metricsWithoutDateField());
+        } else {
+            out.writeList(metricsConfig);
+        }
         out.writeTimeValue(timeout);
         out.writeInt(pageSize);
     }
@@ -285,6 +290,16 @@ public String toJSONString() {
         return toString();
     }
 
+    private List<MetricConfig> metricsWithoutDateField() {
+        if (groupConfig != null) {
+            String timeField = groupConfig.getDateHistogram().getField();
+            return metricsConfig.stream()
+                .filter(metricConfig -> metricConfig.getField().equals(timeField) == false)
+                .collect(Collectors.toList());
+        }
+        return metricsConfig;
+    }
+
     public static RollupJobConfig fromXContent(final XContentParser parser, @Nullable final String optionalJobId) throws IOException {
         return PARSER.parse(parser, optionalJobId);
     }
