diff --git a/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java
index 9c327c5294ef..b4531f9c489e 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/NumberFieldMapper.java
@@ -846,7 +846,7 @@ private static double objectToDouble(Object value) {
 
     public static final class NumberFieldType extends SimpleMappedFieldType {
 
-        NumberType type;
+        private final NumberType type;
 
         public NumberFieldType(NumberType type) {
             super();
@@ -856,7 +856,7 @@ public NumberFieldType(NumberType type) {
             setOmitNorms(true);
         }
 
-        NumberFieldType(NumberFieldType other) {
+        private NumberFieldType(NumberFieldType other) {
             super(other);
             this.type = other.type;
         }
@@ -936,6 +936,20 @@ public DocValueFormat docValueFormat(String format, DateTimeZone timeZone) {
                 return new DocValueFormat.Decimal(format);
             }
         }
+
+        @Override
+        public boolean equals(Object o) {
+            if (super.equals(o) == false) {
+                return false;
+            }
+            NumberFieldType that = (NumberFieldType) o;
+            return type == that.type;
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(super.hashCode(), type);
+        }
     }
 
     private Explicit<Boolean> ignoreMalformed;
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java b/server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java
index 3ffe48fe70af..4b2967553e57 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/NumberFieldTypeTests.java
@@ -20,7 +20,6 @@
 package org.elasticsearch.index.mapper;
 
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
-
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.FloatPoint;
 import org.apache.lucene.document.HalfFloatPoint;
@@ -37,10 +36,11 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.BytesRef;
-import org.elasticsearch.core.internal.io.IOUtils;
 import org.apache.lucene.util.TestUtil;
+import org.elasticsearch.core.internal.io.IOUtils;
 import org.elasticsearch.index.mapper.MappedFieldType.Relation;
 import org.elasticsearch.index.mapper.NumberFieldMapper.NumberType;
+import org.elasticsearch.index.mapper.NumberFieldMapper.NumberFieldType;
 import org.hamcrest.Matchers;
 import org.junit.Before;
 
@@ -68,6 +68,17 @@ protected MappedFieldType createDefaultFieldType() {
         return new NumberFieldMapper.NumberFieldType(type);
     }
 
+    public void testEqualsWithDifferentNumberTypes() {
+        NumberType type = randomFrom(NumberType.values());
+        NumberFieldType fieldType = new NumberFieldType(type);
+
+        NumberType otherType = randomValueOtherThan(type,
+            () -> randomFrom(NumberType.values()));
+        NumberFieldType otherFieldType = new NumberFieldType(otherType);
+
+        assertNotEquals(fieldType, otherFieldType);
+    }
+
     public void testIsFieldWithinQuery() throws IOException {
         MappedFieldType ft = createDefaultFieldType();
         // current impl ignores args and should always return INTERSECTS
