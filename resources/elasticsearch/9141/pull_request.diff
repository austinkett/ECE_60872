diff --git a/src/main/java/org/elasticsearch/action/ActionFuture.java b/src/main/java/org/elasticsearch/action/ActionFuture.java
index 3848536b0d11..bca3730b61b0 100644
--- a/src/main/java/org/elasticsearch/action/ActionFuture.java
+++ b/src/main/java/org/elasticsearch/action/ActionFuture.java
@@ -34,9 +34,9 @@
 public interface ActionFuture<T> extends Future<T> {
 
     /**
-     * Similar to {@link #get()}, just catching the {@link InterruptedException} with
-     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},
-     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}.
+     * Similar to {@link #get()}, just catching the {@link InterruptedException} and throwing
+     * an {@link org.elasticsearch.ElasticsearchIllegalStateException} instead. Also catches
+     * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
      * <p/>
      * <p>Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
      * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
@@ -45,9 +45,9 @@
     T actionGet() throws ElasticsearchException;
 
     /**
-     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with
-     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},
-     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}.
+     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
+     * an {@link org.elasticsearch.ElasticsearchIllegalStateException} instead. Also catches
+     * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
      * <p/>
      * <p>Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
      * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
@@ -56,9 +56,9 @@
     T actionGet(String timeout) throws ElasticsearchException;
 
     /**
-     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with
-     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},
-     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}.
+     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
+     * an {@link org.elasticsearch.ElasticsearchIllegalStateException} instead. Also catches
+     * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
      * <p/>
      * <p>Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
      * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
@@ -69,9 +69,9 @@
     T actionGet(long timeoutMillis) throws ElasticsearchException;
 
     /**
-     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with
-     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},
-     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}.
+     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
+     * an {@link org.elasticsearch.ElasticsearchIllegalStateException} instead. Also catches
+     * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
      * <p/>
      * <p>Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
      * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
@@ -80,9 +80,9 @@
     T actionGet(long timeout, TimeUnit unit) throws ElasticsearchException;
 
     /**
-     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} with
-     * restoring the interrupted state on the thread and throwing an {@link org.elasticsearch.ElasticsearchIllegalStateException},
-     * and throwing the actual cause of the {@link java.util.concurrent.ExecutionException}.
+     * Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing
+     * an {@link org.elasticsearch.ElasticsearchIllegalStateException} instead. Also catches
+     * {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.
      * <p/>
      * <p>Note, the actual cause is unwrapped to the actual failure (for example, unwrapped
      * from {@link org.elasticsearch.transport.RemoteTransportException}. The root failure is
diff --git a/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
index f5acc4f0427e..1aa0ead9217b 100644
--- a/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
+++ b/src/main/java/org/elasticsearch/action/support/AdapterActionFuture.java
@@ -44,7 +44,6 @@ public T actionGet() throws ElasticsearchException {
         try {
             return get();
         } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
             throw new ElasticsearchIllegalStateException("Future got interrupted", e);
         } catch (ExecutionException e) {
             throw rethrowExecutionException(e);
@@ -73,7 +72,6 @@ public T actionGet(long timeout, TimeUnit unit) throws ElasticsearchException {
         } catch (TimeoutException e) {
             throw new ElasticsearchTimeoutException(e.getMessage());
         } catch (InterruptedException e) {
-            Thread.currentThread().interrupt();
             throw new ElasticsearchIllegalStateException("Future got interrupted", e);
         } catch (ExecutionException e) {
             throw rethrowExecutionException(e);
