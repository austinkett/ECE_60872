diff --git a/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
index e0572e188d01..4fd6c4f95db4 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java
@@ -76,7 +76,7 @@ protected void masterOperation(final ClusterStateRequest request, final ClusterS
         logger.trace("Serving cluster state request using version {}", currentState.version());
         ClusterState.Builder builder = ClusterState.builder(currentState.getClusterName());
         builder.version(currentState.version());
-        builder.uuid(currentState.uuid());
+        builder.updateId(currentState.updateId());
         if (request.nodes()) {
             builder.nodes(currentState.nodes());
         }
diff --git a/core/src/main/java/org/elasticsearch/cluster/ClusterState.java b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java
index ab44768d5a45..99bb9398edc5 100644
--- a/core/src/main/java/org/elasticsearch/cluster/ClusterState.java
+++ b/core/src/main/java/org/elasticsearch/cluster/ClusterState.java
@@ -76,9 +76,9 @@
  * to a node if this node was present in the previous version of the cluster state. If a node is not present was
  * not present in the previous version of the cluster state, such node is unlikely to have the previous cluster
  * state version and should be sent a complete version. In order to make sure that the differences are applied to
- * correct version of the cluster state, each cluster state version update generates {@link #uuid} that uniquely
- * identifies this version of the state. This uuid is verified by the {@link ClusterStateDiff#apply} method to
- * makes sure that the correct diffs are applied. If uuids don’t match, the {@link ClusterStateDiff#apply} method
+ * correct version of the cluster state, each cluster state version update generates {@link #updateId} that uniquely
+ * identifies this version of the state. This updateId is verified by the {@link ClusterStateDiff#apply} method to
+ * makes sure that the correct diffs are applied. If updateIds don’t match, the {@link ClusterStateDiff#apply} method
  * throws the {@link IncompatibleClusterStateVersionException}, which should cause the publishing mechanism to send
  * a full version of the cluster state to the node on which this exception was thrown.
  */
@@ -138,13 +138,13 @@ public static void registerPrototype(String type, Custom proto) {
         return proto;
     }
 
-    public static final String UNKNOWN_UUID = "_na_";
+    public static final String UNKNOWN_UPDATE_ID = "_na_";
 
     public static final long UNKNOWN_VERSION = -1;
 
     private final long version;
 
-    private final String uuid;
+    private final String updateId;
 
     private final RoutingTable routingTable;
 
@@ -165,13 +165,13 @@ public static void registerPrototype(String type, Custom proto) {
 
     private volatile ClusterStateStatus status;
 
-    public ClusterState(long version, String uuid, ClusterState state) {
-        this(state.clusterName, version, uuid, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.customs(), false);
+    public ClusterState(long version, String updateId, ClusterState state) {
+        this(state.clusterName, version, updateId, state.metaData(), state.routingTable(), state.nodes(), state.blocks(), state.customs(), false);
     }
 
-    public ClusterState(ClusterName clusterName, long version, String uuid, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs, boolean wasReadFromDiff) {
+    public ClusterState(ClusterName clusterName, long version, String updateId, MetaData metaData, RoutingTable routingTable, DiscoveryNodes nodes, ClusterBlocks blocks, ImmutableOpenMap<String, Custom> customs, boolean wasReadFromDiff) {
         this.version = version;
-        this.uuid = uuid;
+        this.updateId = updateId;
         this.clusterName = clusterName;
         this.metaData = metaData;
         this.routingTable = routingTable;
@@ -200,11 +200,11 @@ public long getVersion() {
     }
 
     /**
-     * This uuid is automatically generated for for each version of cluster state. It is used to make sure that
+     * This updateId is automatically generated for for each version of cluster state. It is used to make sure that
      * we are applying diffs to the right previous state.
      */
-    public String uuid() {
-        return this.uuid;
+    public String updateId() {
+        return this.updateId;
     }
 
     public DiscoveryNodes nodes() {
@@ -283,7 +283,7 @@ public RoutingNodes readOnlyRoutingNodes() {
     public String prettyPrint() {
         StringBuilder sb = new StringBuilder();
         sb.append("version: ").append(version).append("\n");
-        sb.append("uuid: ").append(uuid).append("\n");
+        sb.append("update_id: ").append(updateId).append("\n");
         sb.append("from_diff: ").append(wasReadFromDiff).append("\n");
         sb.append("meta data version: ").append(metaData.version()).append("\n");
         sb.append(nodes().prettyPrint());
@@ -362,7 +362,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
 
         if (metrics.contains(Metric.VERSION)) {
             builder.field("version", version);
-            builder.field("uuid", uuid);
+            builder.field("update_id", updateId);
         }
 
         if (metrics.contains(Metric.MASTER_NODE)) {
@@ -559,7 +559,7 @@ public static Builder builder(ClusterState state) {
 
         private final ClusterName clusterName;
         private long version = 0;
-        private String uuid = UNKNOWN_UUID;
+        private String updateId = UNKNOWN_UPDATE_ID;
         private MetaData metaData = MetaData.EMPTY_META_DATA;
         private RoutingTable routingTable = RoutingTable.EMPTY_ROUTING_TABLE;
         private DiscoveryNodes nodes = DiscoveryNodes.EMPTY_NODES;
@@ -571,7 +571,7 @@ public static Builder builder(ClusterState state) {
         public Builder(ClusterState state) {
             this.clusterName = state.clusterName;
             this.version = state.version();
-            this.uuid = state.uuid();
+            this.updateId = state.updateId();
             this.nodes = state.nodes();
             this.routingTable = state.routingTable();
             this.metaData = state.metaData();
@@ -633,12 +633,12 @@ public Builder version(long version) {
 
         public Builder incrementVersion() {
             this.version = version + 1;
-            this.uuid = UNKNOWN_UUID;
+            this.updateId = UNKNOWN_UPDATE_ID;
             return this;
         }
 
-        public Builder uuid(String uuid) {
-            this.uuid = uuid;
+        public Builder updateId(String updateId) {
+            this.updateId = updateId;
             return this;
         }
 
@@ -667,10 +667,10 @@ public Builder fromDiff(boolean fromDiff) {
         }
 
         public ClusterState build() {
-            if (UNKNOWN_UUID.equals(uuid)) {
-                uuid = Strings.randomBase64UUID();
+            if (UNKNOWN_UPDATE_ID.equals(updateId)) {
+                updateId = Strings.randomBase64UUID();
             }
-            return new ClusterState(clusterName, version, uuid, metaData, routingTable, nodes, blocks, customs.build(), fromDiff);
+            return new ClusterState(clusterName, version, updateId, metaData, routingTable, nodes, blocks, customs.build(), fromDiff);
         }
 
         public static byte[] toBytes(ClusterState state) throws IOException {
@@ -711,7 +711,7 @@ public ClusterState readFrom(StreamInput in, DiscoveryNode localNode) throws IOE
         ClusterName clusterName = ClusterName.readClusterName(in);
         Builder builder = new Builder(clusterName);
         builder.version = in.readLong();
-        builder.uuid = in.readString();
+        builder.updateId = in.readString();
         builder.metaData = MetaData.Builder.readFrom(in);
         builder.routingTable = RoutingTable.Builder.readFrom(in);
         builder.nodes = DiscoveryNodes.Builder.readFrom(in, localNode);
@@ -734,7 +734,7 @@ public ClusterState readFrom(StreamInput in) throws IOException {
     public void writeTo(StreamOutput out) throws IOException {
         clusterName.writeTo(out);
         out.writeLong(version);
-        out.writeString(uuid);
+        out.writeString(updateId);
         metaData.writeTo(out);
         routingTable.writeTo(out);
         nodes.writeTo(out);
@@ -750,9 +750,9 @@ public void writeTo(StreamOutput out) throws IOException {
 
         private final long toVersion;
 
-        private final String fromUuid;
+        private final String fromUpdateId;
 
-        private final String toUuid;
+        private final String toUpdateId;
 
         private final ClusterName clusterName;
 
@@ -767,8 +767,8 @@ public void writeTo(StreamOutput out) throws IOException {
         private final Diff<ImmutableOpenMap<String, Custom>> customs;
 
         public ClusterStateDiff(ClusterState before, ClusterState after) {
-            fromUuid = before.uuid;
-            toUuid = after.uuid;
+            fromUpdateId = before.updateId;
+            toUpdateId = after.updateId;
             toVersion = after.version;
             clusterName = after.clusterName;
             routingTable = after.routingTable.diff(before.routingTable);
@@ -780,8 +780,8 @@ public ClusterStateDiff(ClusterState before, ClusterState after) {
 
         public ClusterStateDiff(StreamInput in, ClusterState proto) throws IOException {
             clusterName = ClusterName.readClusterName(in);
-            fromUuid = in.readString();
-            toUuid = in.readString();
+            fromUpdateId = in.readString();
+            toUpdateId = in.readString();
             toVersion = in.readLong();
             routingTable = proto.routingTable.readDiffFrom(in);
             nodes = proto.nodes.readDiffFrom(in);
@@ -803,8 +803,8 @@ public Custom readFrom(StreamInput in, String key) throws IOException {
         @Override
         public void writeTo(StreamOutput out) throws IOException {
             clusterName.writeTo(out);
-            out.writeString(fromUuid);
-            out.writeString(toUuid);
+            out.writeString(fromUpdateId);
+            out.writeString(toUpdateId);
             out.writeLong(toVersion);
             routingTable.writeTo(out);
             nodes.writeTo(out);
@@ -816,14 +816,14 @@ public void writeTo(StreamOutput out) throws IOException {
         @Override
         public ClusterState apply(ClusterState state) {
             Builder builder = new Builder(clusterName);
-            if (toUuid.equals(state.uuid)) {
+            if (toUpdateId.equals(state.updateId)) {
                 // no need to read the rest - cluster state didn't change
                 return state;
             }
-            if (fromUuid.equals(state.uuid) == false) {
-                throw new IncompatibleClusterStateVersionException(state.version, state.uuid, toVersion, fromUuid);
+            if (fromUpdateId.equals(state.updateId) == false) {
+                throw new IncompatibleClusterStateVersionException(state.version, state.updateId, toVersion, fromUpdateId);
             }
-            builder.uuid(toUuid);
+            builder.updateId(toUpdateId);
             builder.version(toVersion);
             builder.routingTable(routingTable.apply(state.routingTable));
             builder.nodes(nodes.apply(state.nodes));
diff --git a/core/src/main/java/org/elasticsearch/cluster/IncompatibleClusterStateVersionException.java b/core/src/main/java/org/elasticsearch/cluster/IncompatibleClusterStateVersionException.java
index 92f5897bf2ee..cf21acdd205f 100644
--- a/core/src/main/java/org/elasticsearch/cluster/IncompatibleClusterStateVersionException.java
+++ b/core/src/main/java/org/elasticsearch/cluster/IncompatibleClusterStateVersionException.java
@@ -22,14 +22,14 @@
 import org.elasticsearch.ElasticsearchException;
 
 /**
- * Thrown by {@link Diffable#readDiffAndApply(org.elasticsearch.common.io.stream.StreamInput)} method
+ * Thrown by {@link Diff#apply} method if the diffs cannot be applied to the given cluster state
  */
 public class IncompatibleClusterStateVersionException extends ElasticsearchException {
     public IncompatibleClusterStateVersionException(String msg) {
         super(msg);
     }
 
-    public IncompatibleClusterStateVersionException(long expectedVersion, String expectedUuid, long receivedVersion, String receivedUuid) {
-        super("Expected diff for version " + expectedVersion + " with uuid " + expectedUuid + " got version " + receivedVersion + " and uuid " + receivedUuid);
+    public IncompatibleClusterStateVersionException(long expectedVersion, String expectedUpdateId, long receivedVersion, String receivedUpdateId) {
+        super("Expected diff for version " + expectedVersion + " with updateId " + expectedUpdateId + " got version " + receivedVersion + " and updateId " + receivedUpdateId);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java
index fe5200e5f405..dec9e97cd044 100644
--- a/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java
+++ b/core/src/main/java/org/elasticsearch/cluster/service/InternalClusterService.java
@@ -519,11 +519,11 @@ public void run() {
                 }
 
                 TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
-                logger.debug("processing [{}]: took {} done applying updated cluster_state (version: {}, uuid: {})", source, executionTime, newClusterState.version(), newClusterState.uuid());
+                logger.debug("processing [{}]: took {} done applying updated cluster_state (version: {}, updateId: {})", source, executionTime, newClusterState.version(), newClusterState.updateId());
                 warnAboutSlowTaskIfNeeded(executionTime, source);
             } catch (Throwable t) {
                 TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
-                StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.uuid()).append("], source [").append(source).append("]\n");
+                StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], updateId [").append(newClusterState.updateId()).append("], source [").append(source).append("]\n");
                 sb.append(newClusterState.nodes().prettyPrint());
                 sb.append(newClusterState.routingTable().prettyPrint());
                 sb.append(newClusterState.readOnlyRoutingNodes().prettyPrint());
diff --git a/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java
index 7fd585a6a419..e4263636c36b 100644
--- a/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java
+++ b/core/src/main/java/org/elasticsearch/discovery/zen/publish/PublishClusterStateAction.java
@@ -266,7 +266,7 @@ public void messageReceived(BytesTransportRequest request, final TransportChanne
                 } else if (lastSeenClusterState != null) {
                     Diff<ClusterState> diff = lastSeenClusterState.readDiffFrom(in);
                     lastSeenClusterState = diff.apply(lastSeenClusterState);
-                    logger.debug("received diff cluster state version {} with uuid {}, diff size {}", lastSeenClusterState.version(), lastSeenClusterState.uuid(), request.bytes().length());
+                    logger.debug("received diff cluster state version {} with updateId {}, diff size {}", lastSeenClusterState.version(), lastSeenClusterState.updateId(), request.bytes().length());
                 } else {
                     logger.debug("received diff for but don't have any local cluster state - requesting full state");
                     throw new IncompatibleClusterStateVersionException("have no local cluster state");
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceTests.java b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceTests.java
index 72f1c9011063..4f2a52757952 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterServiceTests.java
@@ -750,7 +750,7 @@ public void testClusterStateUpdateLogging() throws Exception {
         MockLogAppender mockAppender = new MockLogAppender();
         mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test1", "cluster.service", Level.DEBUG, "*processing [test1]: took * no change in cluster_state"));
         mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test2", "cluster.service", Level.TRACE, "*failed to execute cluster state update in *"));
-        mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test3", "cluster.service", Level.DEBUG, "*processing [test3]: took * done applying updated cluster_state (version: *, uuid: *)"));
+        mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test3", "cluster.service", Level.DEBUG, "*processing [test3]: took * done applying updated cluster_state (version: *, updateId: *)"));
 
         Logger rootLogger = Logger.getRootLogger();
         rootLogger.addAppender(mockAppender);
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffPublishingTests.java b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffPublishingTests.java
index b66c235d8337..b3cccc8e74f5 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffPublishingTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffPublishingTests.java
@@ -87,7 +87,7 @@ public MockNode createMockNode(final String name, Settings settings, Version ver
         return createMockNode(name, settings, version, new PublishClusterStateAction.NewClusterStateListener() {
             @Override
             public void onNewClusterState(ClusterState clusterState, NewStateProcessed newStateProcessed) {
-                logger.debug("Node [{}] onNewClusterState version [{}], uuid [{}]", name, clusterState.version(), clusterState.uuid());
+                logger.debug("Node [{}] onNewClusterState version [{}], updateId [{}]", name, clusterState.version(), clusterState.updateId());
                 newStateProcessed.onNewClusterStateProcessed();
             }
         });
@@ -392,7 +392,7 @@ public void onNewClusterState(ClusterState clusterState, NewStateProcessed newSt
         MockNode nodeB = createMockNode("nodeB", noDiffPublishingSettings, Version.CURRENT, new PublishClusterStateAction.NewClusterStateListener() {
             @Override
             public void onNewClusterState(ClusterState clusterState, NewStateProcessed newStateProcessed) {
-                logger.debug("Got cluster state update, version [{}], guid [{}], from diff [{}]", clusterState.version(), clusterState.uuid(), clusterState.wasReadFromDiff());
+                logger.debug("Got cluster state update, version [{}], updateId [{}], from diff [{}]", clusterState.version(), clusterState.updateId(), clusterState.wasReadFromDiff());
                 assertFalse(clusterState.wasReadFromDiff());
                 newStateProcessed.onNewClusterStateProcessed();
             }
@@ -496,7 +496,7 @@ public void check(ClusterState clusterState, PublishClusterStateAction.NewCluste
             }
         });
 
-        ClusterState unserializableClusterState = new ClusterState(clusterState.version(), clusterState.uuid(), clusterState) {
+        ClusterState unserializableClusterState = new ClusterState(clusterState.version(), clusterState.updateId(), clusterState) {
             @Override
             public Diff<ClusterState> diff(ClusterState previousState) {
                 return new Diff<ClusterState>() {
@@ -615,7 +615,7 @@ public void add(NewClusterStateExpectation expectation) {
     public static class DelegatingClusterState extends ClusterState {
 
         public DelegatingClusterState(ClusterState clusterState) {
-            super(clusterState.version(), clusterState.uuid(), clusterState);
+            super(clusterState.version(), clusterState.updateId(), clusterState);
         }
 
 
diff --git a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java
index 5bf180dbf90f..6e8d745de9c5 100644
--- a/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java
+++ b/core/src/test/java/org/elasticsearch/cluster/ClusterStateDiffTests.java
@@ -116,7 +116,7 @@ public void testClusterStateDiffSerialization() throws Exception {
             try {
                 // Check non-diffable elements
                 assertThat(clusterStateFromDiffs.version(), equalTo(clusterState.version()));
-                assertThat(clusterStateFromDiffs.uuid(), equalTo(clusterState.uuid()));
+                assertThat(clusterStateFromDiffs.updateId(), equalTo(clusterState.updateId()));
 
                 // Check nodes
                 assertThat(clusterStateFromDiffs.nodes().nodes(), equalTo(clusterState.nodes().nodes()));
diff --git a/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java b/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
index 3ad3cd76dfb0..04a23ef92a5d 100644
--- a/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
+++ b/core/src/test/java/org/elasticsearch/test/ElasticsearchIntegrationTest.java
@@ -1085,7 +1085,7 @@ protected void ensureClusterStateConsistency() throws IOException {
                     // Check that the non-master node has the same version of the cluster state as the master and that this node didn't disconnect from the master
                     if (masterClusterState.version() == localClusterState.version() && localClusterState.nodes().nodes().containsKey(masterId)) {
                         try {
-                            assertEquals("clusterstate UUID does not match", masterClusterState.uuid(), localClusterState.uuid());
+                            assertEquals("clusterstate updateId does not match", masterClusterState.updateId(), localClusterState.updateId());
                             // We cannot compare serialization bytes since serialization order of maps is not guaranteed
                             // but we can compare serialization sizes - they should be the same
                             assertEquals("clusterstate size does not match", masterClusterStateSize, localClusterStateSize);
