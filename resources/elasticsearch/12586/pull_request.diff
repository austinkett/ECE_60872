diff --git a/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java
index d110942388f6..cc3aa5068db1 100644
--- a/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java
+++ b/core/src/main/java/org/elasticsearch/bootstrap/Bootstrap.java
@@ -222,7 +222,7 @@ private void stop() {
         }
     }
 
-    public static void main(String[] args) {
+    public static void main(String[] args) throws Throwable {
         BootstrapCLIParser bootstrapCLIParser = new BootstrapCLIParser();
         CliTool.ExitStatus status = bootstrapCLIParser.execute(args);
 
@@ -239,28 +239,16 @@ public static void main(String[] args) {
             foreground = false;
         }
 
-        String stage = "Settings";
+        Tuple<Settings, Environment> tuple = initialSettings(foreground);
+        Settings settings = tuple.v1();
+        Environment environment = tuple.v2();
 
-        Settings settings = null;
-        Environment environment = null;
-        try {
-            Tuple<Settings, Environment> tuple = initialSettings(foreground);
-            settings = tuple.v1();
-            environment = tuple.v2();
-
-            if (environment.pidFile() != null) {
-                stage = "Pid";
-                PidFile.create(environment.pidFile(), true);
-            }
-
-            stage = "Logging";
-            setupLogging(settings, environment);
-        } catch (Exception e) {
-            String errorMessage = buildErrorMessage(stage, e);
-            sysError(errorMessage, true);
-            System.exit(3);
+        if (environment.pidFile() != null) {
+            PidFile.create(environment.pidFile(), true);
         }
 
+        setupLogging(settings, environment);
+
         if (System.getProperty("es.max-open-files", "false").equals("true")) {
             ESLogger logger = Loggers.getLogger(Bootstrap.class);
             logger.info("max_open_files [{}]", ProcessProbe.getInstance().getMaxFileDescriptorCount());
@@ -272,7 +260,6 @@ public static void main(String[] args) {
             logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
         }
 
-        stage = "Initialization";
         try {
             if (!foreground) {
                 Loggers.disableConsoleLogging();
@@ -284,7 +271,6 @@ public static void main(String[] args) {
 
             INSTANCE.setup(true, settings, environment);
 
-            stage = "Startup";
             INSTANCE.start();
 
             if (!foreground) {
@@ -295,14 +281,9 @@ public static void main(String[] args) {
             if (INSTANCE.node != null) {
                 logger = Loggers.getLogger(Bootstrap.class, INSTANCE.node.settings().get("name"));
             }
-            String errorMessage = buildErrorMessage(stage, e);
-            if (foreground) {
-                sysError(errorMessage, true);
-                Loggers.disableConsoleLogging();
-            }
             logger.error("Exception", e);
             
-            System.exit(3);
+            throw e;
         }
     }
 
@@ -323,38 +304,4 @@ private static void sysError(String line, boolean flush) {
             System.err.flush();
         }
     }
-
-    private static String buildErrorMessage(String stage, Throwable e) {
-        StringBuilder errorMessage = new StringBuilder("{").append(Version.CURRENT).append("}: ");
-        errorMessage.append(stage).append(" Failed ...\n");
-        if (e instanceof CreationException) {
-            CreationException createException = (CreationException) e;
-            Set<String> seenMessages = newHashSet();
-            int counter = 1;
-            for (Message message : createException.getErrorMessages()) {
-                String detailedMessage;
-                if (message.getCause() == null) {
-                    detailedMessage = message.getMessage();
-                } else {
-                    detailedMessage = ExceptionsHelper.detailedMessage(message.getCause(), true, 0);
-                }
-                if (detailedMessage == null) {
-                    detailedMessage = message.getMessage();
-                }
-                if (seenMessages.contains(detailedMessage)) {
-                    continue;
-                }
-                seenMessages.add(detailedMessage);
-                errorMessage.append("").append(counter++).append(") ").append(detailedMessage);
-            }
-        } else {
-            errorMessage.append("- ").append(ExceptionsHelper.detailedMessage(e, true, 0));
-        }
-        if (Loggers.getLogger(Bootstrap.class).isDebugEnabled()) {
-            errorMessage.append("\n").append(ExceptionsHelper.stackTrace(e));
-        }
-        return errorMessage.toString();
-    }
-    
-
 }
diff --git a/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java
index e9a851ecea16..21910e5cd96a 100644
--- a/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java
+++ b/core/src/main/java/org/elasticsearch/bootstrap/Elasticsearch.java
@@ -24,7 +24,7 @@
  */
 public class Elasticsearch extends Bootstrap {
 
-    public static void main(String[] args) {
+    public static void main(String[] args) throws Throwable {
         Bootstrap.main(args);
     }
 }
\ No newline at end of file
diff --git a/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java
index 96e310eff3fe..9190b6eca6fc 100644
--- a/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java
+++ b/core/src/main/java/org/elasticsearch/bootstrap/ElasticsearchF.java
@@ -25,7 +25,7 @@
  */
 public class ElasticsearchF {
 
-    public static void main(String[] args) {
+    public static void main(String[] args) throws Throwable {
         System.setProperty("es.foreground", "yes");
         Bootstrap.main(args);
     }
