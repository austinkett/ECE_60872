diff --git a/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java b/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java
index 4fa760c7a9e0..d500583ac05e 100644
--- a/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java
+++ b/src/main/java/org/elasticsearch/action/admin/indices/delete/TransportDeleteIndexAction.java
@@ -19,7 +19,6 @@
 
 package org.elasticsearch.action.admin.indices.delete;
 
-import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.support.ActionFilters;
 import org.elasticsearch.action.support.DestructiveOperations;
@@ -36,6 +35,9 @@
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.TransportService;
 
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
+
 /**
  * Delete index action.
  */
@@ -83,22 +85,22 @@ protected void masterOperation(final DeleteIndexRequest request, final ClusterSt
         }
         // TODO: this API should be improved, currently, if one delete index failed, we send a failure, we should send a response array that includes all the indices that were deleted
         final CountDown count = new CountDown(concreteIndices.length);
+        final AtomicReference<Throwable> lastFailure = new AtomicReference<>();
+        final AtomicBoolean ack = new AtomicBoolean(true);
         for (final String index : concreteIndices) {
             deleteIndexService.deleteIndex(new MetaDataDeleteIndexService.Request(index).timeout(request.timeout()).masterTimeout(request.masterNodeTimeout()), new MetaDataDeleteIndexService.Listener() {
 
-                private volatile Throwable lastFailure;
-                private volatile boolean ack = true;
-
                 @Override
                 public void onResponse(MetaDataDeleteIndexService.Response response) {
                     if (!response.acknowledged()) {
-                        ack = false;
+                        ack.set(false);
                     }
                     if (count.countDown()) {
-                        if (lastFailure != null) {
-                            listener.onFailure(lastFailure);
+                        Throwable failure = lastFailure.get();
+                        if (failure != null) {
+                            listener.onFailure(failure);
                         } else {
-                            listener.onResponse(new DeleteIndexResponse(ack));
+                            listener.onResponse(new DeleteIndexResponse(ack.get()));
                         }
                     }
                 }
@@ -106,7 +108,7 @@ public void onResponse(MetaDataDeleteIndexService.Response response) {
                 @Override
                 public void onFailure(Throwable t) {
                     logger.debug("[{}] failed to delete index", t, index);
-                    lastFailure = t;
+                    lastFailure.set(t);
                     if (count.countDown()) {
                         listener.onFailure(t);
                     }
