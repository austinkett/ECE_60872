diff --git a/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java
index 6b5e497b8e51..06eea6367edc 100644
--- a/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java
+++ b/core/src/main/java/org/elasticsearch/action/termvectors/TermVectorsWriter.java
@@ -71,7 +71,7 @@ void setFields(Fields termVectorsByField, Set<String> selectedFields, EnumSet<Fl
 
             // if no terms found, take the retrieved term vector fields for stats
             if (topLevelTerms == null) {
-                topLevelTerms = fieldTermVector;
+                topLevelTerms = EMPTY_TERMS;
             }
 
             TermsEnum topLevelIterator = topLevelTerms.iterator();
@@ -292,4 +292,18 @@ private void writePotentiallyNegativeVLong(long value) throws IOException {
         // further...
         output.writeVLong(Math.max(0, value + 1));
     }
+
+    /** Implements an empty {@link Terms}. */
+    private static final Terms EMPTY_TERMS = new Terms() {
+        @Override public TermsEnum iterator() throws IOException { return TermsEnum.EMPTY; }
+        @Override public long size() throws IOException { return 0; }
+        @Override public long getSumTotalTermFreq() throws IOException { return 0; }
+        @Override public long getSumDocFreq() throws IOException { return 0; }
+        @Override public int getDocCount() throws IOException { return 0; }
+        @Override public boolean hasFreqs() { return false; }
+        @Override public boolean hasOffsets() { return false; }
+        @Override public boolean hasPositions() { return false; }
+        @Override public boolean hasPayloads() { return false; }
+    };
+
 }
diff --git a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
index 3835edbbe9a3..765e39b3fbff 100644
--- a/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
+++ b/core/src/test/java/org/elasticsearch/action/termvectors/GetTermVectorsIT.java
@@ -848,6 +848,16 @@ public void testArtificialNoDoc() throws IOException {
                 .get();
         assertThat(resp.isExists(), equalTo(true));
         checkBrownFoxTermVector(resp.getFields(), "field1", false);
+
+        // Since the index is empty, all of artificial document's "term_statistics" should be 0/absent
+        Terms terms = resp.getFields().terms("field1");
+        assertEquals("sumDocFreq should be 0 for a non-existing field!", 0, terms.getSumDocFreq());
+        assertEquals("sumTotalTermFreq should be 0 for a non-existing field!", 0, terms.getSumTotalTermFreq());
+        TermsEnum termsEnum = terms.iterator(); // we're guaranteed to receive terms for that field
+        while (termsEnum.next() != null) {
+            String term = termsEnum.term().utf8ToString();
+            assertEquals("term [" + term + "] does not exist in the index; ttf should be 0!", 0, termsEnum.totalTermFreq());
+        }
     }
 
     public void testPerFieldAnalyzer() throws IOException {
