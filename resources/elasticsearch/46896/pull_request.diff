diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateApiKeyRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateApiKeyRequest.java
index ad5f0a9ba2cf..b24293ea39bd 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateApiKeyRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/CreateApiKeyRequest.java
@@ -46,6 +46,7 @@
      * @param name name for the API key
      * @param roles list of {@link Role}s
      * @param expiration to specify expiration for the API key
+     * @param refreshPolicy refresh policy {@link RefreshPolicy} for the request, defaults to {@link RefreshPolicy#IMMEDIATE}
      */
     public CreateApiKeyRequest(String name, List<Role> roles, @Nullable TimeValue expiration, @Nullable final RefreshPolicy refreshPolicy) {
         if (Strings.hasText(name)) {
@@ -55,7 +56,7 @@ public CreateApiKeyRequest(String name, List<Role> roles, @Nullable TimeValue ex
         }
         this.roles = Objects.requireNonNull(roles, "roles may not be null");
         this.expiration = expiration;
-        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public String getName() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeletePrivilegesRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeletePrivilegesRequest.java
index 7ea416fc339c..dc5894670c4a 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeletePrivilegesRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeletePrivilegesRequest.java
@@ -48,7 +48,7 @@ public DeletePrivilegesRequest(String application, String... privileges) {
      *
      * @param application   the name of the application for which the privileges will be deleted
      * @param privileges    the privileges to delete
-     * @param refreshPolicy the refresh policy {@link RefreshPolicy} for the request, defaults to {@link RefreshPolicy#getDefault()}
+     * @param refreshPolicy the refresh policy {@link RefreshPolicy} for the request, defaults to {@link RefreshPolicy#IMMEDIATE}
      */
     public DeletePrivilegesRequest(String application, String[] privileges, @Nullable RefreshPolicy refreshPolicy) {
         if (Strings.hasText(application) == false) {
@@ -59,7 +59,7 @@ public DeletePrivilegesRequest(String application, String[] privileges, @Nullabl
         }
         this.application = application;
         this.privileges = privileges;
-        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public String getApplication() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeleteRoleMappingRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeleteRoleMappingRequest.java
index c55178f15b8a..ccff6816a694 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeleteRoleMappingRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/DeleteRoleMappingRequest.java
@@ -37,14 +37,14 @@
      *
      * @param name role mapping name to be deleted
      * @param refreshPolicy refresh policy {@link RefreshPolicy} for the
-     * request, defaults to {@link RefreshPolicy#getDefault()}
+     * request, defaults to {@link RefreshPolicy#IMMEDIATE}
      */
     public DeleteRoleMappingRequest(final String name, @Nullable final RefreshPolicy refreshPolicy) {
         if (Strings.hasText(name) == false) {
             throw new IllegalArgumentException("role-mapping name is required");
         }
         this.name = name;
-        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public String getName() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleMappingRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleMappingRequest.java
index 9a9e0fa62f96..f0db988f5381 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleMappingRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleMappingRequest.java
@@ -52,6 +52,17 @@ public PutRoleMappingRequest(final String name, final boolean enabled, final Lis
         this(name, enabled, roles, Collections.emptyList(), rules, metadata, refreshPolicy);
     }
 
+    /**
+     * Constructor to create request object to create or update a role mapping.
+     * @param name name for role mapping
+     * @param enabled mappings that have enabled set to {@code false} are ignored when role mapping is performed
+     * @param roles a list of roles that are granted to the users that match the role mapping rules
+     * @param templates a list of mustache templates that will be evaluated to determine the roles names that should granted to the
+     *                  users that match the role mapping rules
+     * @param rules the rules that determine which users should be matched by the mapping
+     * @param metadata metadata to be associated with role mapping
+     * @param refreshPolicy the refresh policy for the request. Defaults to {@link RefreshPolicy#IMMEDIATE}
+     */
     public PutRoleMappingRequest(final String name, final boolean enabled, final List<String> roles, final List<TemplateRoleName> templates,
                                  final RoleMapperExpression rules, @Nullable final Map<String, Object> metadata,
                                  @Nullable final RefreshPolicy refreshPolicy) {
@@ -70,7 +81,7 @@ public PutRoleMappingRequest(final String name, final boolean enabled, final Lis
         }
         this.rules = Objects.requireNonNull(rules, "role-mapping rules are missing");
         this.metadata = (metadata == null) ? Collections.emptyMap() : metadata;
-        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public String getName() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleRequest.java
index 91180dfbc57a..1c1a45e07c48 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutRoleRequest.java
@@ -36,9 +36,14 @@
     private final Role role;
     private final RefreshPolicy refreshPolicy;
 
+    /**
+     * Constructor to create qequest object to create or update a role.
+     * @param role {@link Role} to be created or updated.
+     * @param refreshPolicy the refresh policy for the request. Defaults to {@link RefreshPolicy#IMMEDIATE}
+     */
     public PutRoleRequest(Role role, @Nullable final RefreshPolicy refreshPolicy) {
         this.role = Objects.requireNonNull(role);
-        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = (refreshPolicy == null) ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public Role getRole() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java
index f7bf87da0027..b32f1e7b3c4f 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/PutUserRequest.java
@@ -105,7 +105,7 @@ public PutUserRequest(User user, @Nullable char[] password, boolean enabled, @Nu
      * @param passwordHash the hash of the password. Only one of "password" or "passwordHash" may be populated.
      *                     The other parameter must be {@code null}.
      * @param enabled true if the user is enabled and allowed to access elasticsearch
-     * @param refreshPolicy the refresh policy for the request.
+     * @param refreshPolicy the refresh policy for the request. Defaults to {@link RefreshPolicy#IMMEDIATE}
      */
     private PutUserRequest(User user, @Nullable char[] password, @Nullable char[] passwordHash, boolean enabled,
                            RefreshPolicy refreshPolicy) {
@@ -116,7 +116,7 @@ private PutUserRequest(User user, @Nullable char[] password, @Nullable char[] pa
         this.password = password;
         this.passwordHash = passwordHash;
         this.enabled = enabled;
-        this.refreshPolicy = refreshPolicy == null ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = refreshPolicy == null ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public User getUser() {
diff --git a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/SetUserEnabledRequest.java b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/SetUserEnabledRequest.java
index ab61f7d879d2..6fe38a17f0de 100644
--- a/client/rest-high-level/src/main/java/org/elasticsearch/client/security/SetUserEnabledRequest.java
+++ b/client/rest-high-level/src/main/java/org/elasticsearch/client/security/SetUserEnabledRequest.java
@@ -32,10 +32,16 @@
     private final String username;
     private final RefreshPolicy refreshPolicy;
 
+    /**
+     * Constructor for creating request for enabling or disabling a built-in or native user
+     * @param enabled if set to {@code true} will enable a user else if set to {@code false} to disable a user
+     * @param username user name
+     * @param refreshPolicy the refresh policy for the request. Defaults to {@link RefreshPolicy#IMMEDIATE}
+     */
     SetUserEnabledRequest(boolean enabled, String username, RefreshPolicy refreshPolicy) {
         this.enabled = enabled;
         this.username = Objects.requireNonNull(username, "username is required");
-        this.refreshPolicy = refreshPolicy == null ? RefreshPolicy.getDefault() : refreshPolicy;
+        this.refreshPolicy = refreshPolicy == null ? RefreshPolicy.IMMEDIATE : refreshPolicy;
     }
 
     public boolean isEnabled() {
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DeleteRoleMappingRequestTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DeleteRoleMappingRequestTests.java
index d3b6c0740c0c..ad0c5a0a8848 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DeleteRoleMappingRequestTests.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/DeleteRoleMappingRequestTests.java
@@ -27,6 +27,7 @@
 import java.util.stream.Collectors;
 
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.is;
 
 public class DeleteRoleMappingRequestTests extends ESTestCase {
 
@@ -69,4 +70,10 @@ private static DeleteRoleMappingRequest mutateTestItem(DeleteRoleMappingRequest
             return new DeleteRoleMappingRequest(original.getName(), randomFrom(values));
         }
     }
+
+    public void testBuildRequestDefaultsToImmediateRefreshPolicy() {
+        final String name = randomAlphaOfLength(5);
+        final DeleteRoleMappingRequest deleteRoleMappingRequest = new DeleteRoleMappingRequest(name, null);
+        assertThat(deleteRoleMappingRequest.getRefreshPolicy(), is(RefreshPolicy.IMMEDIATE));
+    }
 }
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleMappingRequestTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleMappingRequestTests.java
index bf5ba34bffc5..e89f9ad0abd7 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleMappingRequestTests.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleMappingRequestTests.java
@@ -37,6 +37,7 @@
 import java.util.Map;
 
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.is;
 
 public class PutRoleMappingRequestTests extends ESTestCase {
 
@@ -240,4 +241,9 @@ private static PutRoleMappingRequest mutateTestItem(PutRoleMappingRequest origin
         }
     }
 
+    public void testBuildRequestDefaultsToImmediateRefreshPolicy() {
+        PutRoleMappingRequest putRoleMappingRequest = new PutRoleMappingRequest(randomAlphaOfLength(4), randomBoolean(),
+            Collections.singletonList("superuser"), Collections.emptyList(), FieldRoleMapperExpression.ofUsername("user"), null, null);
+        assertThat(putRoleMappingRequest.getRefreshPolicy(), is(RefreshPolicy.IMMEDIATE));
+    }
 }
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleRequestTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleRequestTests.java
index 32860a807ae6..19a68a652140 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleRequestTests.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutRoleRequestTests.java
@@ -37,8 +37,8 @@
 import java.util.Locale;
 import java.util.Map;
 
-import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.empty;
+import static org.hamcrest.Matchers.is;
 
 public class PutRoleRequestTests extends AbstractXContentTestCase<PutRoleRequest> {
 
@@ -84,4 +84,8 @@ private static Role randomRole(String roleName) {
         return roleBuilder.build(); 
     }
 
+    public void testBuildRequestDefaultsToImmediateRefreshPolicy() {
+        final PutRoleRequest request = createTestInstance();
+        assertThat(request.getRefreshPolicy(), is(RefreshPolicy.IMMEDIATE));
+    }
 }
diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutUserRequestTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutUserRequestTests.java
index 76d3b283b0d9..a03c1916b03c 100644
--- a/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutUserRequestTests.java
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/security/PutUserRequestTests.java
@@ -98,4 +98,11 @@ public void testBuildRequestForUpdateOnly() throws Exception {
         assertThat(metadata.get("status"), is("active"));
     }
 
+    public void testBuildRequestDefaultsToImmediateRefreshPolicy() {
+        final User user = new User("hawkeye", Arrays.asList("kibana_user", "avengers"),
+            Collections.singletonMap("status", "active"), "Clinton Barton", null);
+        final char[] password = "f@rmb0y".toCharArray();
+        final PutUserRequest request = PutUserRequest.withPassword(user, password, true, null);
+        assertThat(request.getRefreshPolicy(), is(RefreshPolicy.IMMEDIATE));
+    }
 }
