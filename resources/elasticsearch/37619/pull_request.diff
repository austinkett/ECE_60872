diff --git a/client/rest-high-level/src/test/java/org/elasticsearch/client/watcher/VerifyRepositoryResponseTests.java b/client/rest-high-level/src/test/java/org/elasticsearch/client/watcher/VerifyRepositoryResponseTests.java
new file mode 100644
index 000000000000..72193dc55e9e
--- /dev/null
+++ b/client/rest-high-level/src/test/java/org/elasticsearch/client/watcher/VerifyRepositoryResponseTests.java
@@ -0,0 +1,59 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.client.watcher;
+
+import org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryResponse;
+import org.elasticsearch.common.xcontent.ToXContent;
+import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.test.ESTestCase;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.elasticsearch.test.AbstractXContentTestCase.xContentTester;
+
+public class VerifyRepositoryResponseTests extends ESTestCase {
+
+    public void testFromXContent() throws IOException {
+        xContentTester(this::createParser,
+            VerifyRepositoryResponseTests::createTestInstance,
+            VerifyRepositoryResponseTests::toXContent,
+            VerifyRepositoryResponse::fromXContent)
+            .supportsUnknownFields(true)
+            .shuffleFieldsExceptions(new String[] {"nodes"}) // do not mix up the order of nodes, it will cause the tests to fail
+            .randomFieldsExcludeFilter((f) -> f.equals("nodes")) // everything in nodes needs to be a particular parseable object
+            .assertToXContentEquivalence(false)
+            .test();
+    }
+
+    private static VerifyRepositoryResponse createTestInstance() {
+        List<VerifyRepositoryResponse.NodeView> nodes = new ArrayList<>();
+        for (int i = 0; i < randomIntBetween(0, 2); i++) {
+            nodes.add(new VerifyRepositoryResponse.NodeView(randomAlphaOfLength(5), randomAlphaOfLength(5)));
+        }
+
+        return new VerifyRepositoryResponse(nodes);
+    }
+
+    private static XContentBuilder toXContent(VerifyRepositoryResponse response, XContentBuilder builder) throws IOException {
+        return response.toXContent(builder, ToXContent.EMPTY_PARAMS);
+    }
+}
diff --git a/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java
index 41835d3e1125..d72136852631 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/cluster/repositories/verify/VerifyRepositoryResponse.java
@@ -48,7 +48,7 @@
     public static class NodeView implements Writeable, ToXContentObject {
         private static final ObjectParser.NamedObjectParser<NodeView, Void> PARSER;
         static {
-            ObjectParser<NodeView, Void> internalParser = new ObjectParser<>(NODES);
+            ObjectParser<NodeView, Void> internalParser = new ObjectParser<>(NODES, true, null);
             internalParser.declareString(NodeView::setName, new ParseField(NAME));
             PARSER = (p, v, name) -> internalParser.parse(p, new NodeView(name), null);
         }
@@ -110,7 +110,7 @@ public int hashCode() {
     private List<NodeView> nodes;
 
     private static final ObjectParser<VerifyRepositoryResponse, Void> PARSER =
-        new ObjectParser<>(VerifyRepositoryResponse.class.getName(), VerifyRepositoryResponse::new);
+        new ObjectParser<>(VerifyRepositoryResponse.class.getName(), true, VerifyRepositoryResponse::new);
     static {
         PARSER.declareNamedObjects(VerifyRepositoryResponse::setNodes, NodeView.PARSER, new ParseField("nodes"));
     }
@@ -122,6 +122,10 @@ public VerifyRepositoryResponse(DiscoveryNode[] nodes) {
         this.nodes = Arrays.stream(nodes).map(dn ->  new NodeView(dn.getId(), dn.getName())).collect(Collectors.toList());
     }
 
+    public VerifyRepositoryResponse(List<NodeView> nodes) {
+        this.nodes = nodes;
+    }
+
     @Override
     public void readFrom(StreamInput in) throws IOException {
         super.readFrom(in);
@@ -168,19 +172,15 @@ public String toString() {
     }
 
     @Override
-    public boolean equals(Object obj) {
-        if (obj == null) {
-            return false;
-        }
-        if (getClass() != obj.getClass()) {
-            return false;
-        }
-        VerifyRepositoryResponse other = (VerifyRepositoryResponse) obj;
-        return nodes.equals(other.nodes);
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        VerifyRepositoryResponse that = (VerifyRepositoryResponse) o;
+        return Objects.equals(nodes, that.nodes);
     }
 
     @Override
     public int hashCode() {
-        return nodes.hashCode();
+        return Objects.hash(nodes);
     }
 }
