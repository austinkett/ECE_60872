diff --git a/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java
index ea6d69842ebd..f5f3c2cdff5c 100644
--- a/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/core/CompletionFieldMapper.java
@@ -49,6 +49,7 @@
 import java.util.Set;
 
 import static org.elasticsearch.index.mapper.MapperBuilders.completionField;
+import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;
 
 /**
  *
@@ -160,6 +161,8 @@ public CompletionFieldMapper build(Mapper.BuilderContext context) {
                     builder.preservePositionIncrements(Boolean.parseBoolean(fieldNode.toString()));
                 } else if (Fields.MAX_INPUT_LENGTH.match(fieldName)) {
                     builder.maxInputLength(Integer.parseInt(fieldNode.toString()));
+                } else if ("fields".equals(fieldName) || "path".equals(fieldName)) {
+                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);
                 } else {
                     throw new MapperParsingException("Unknown field [" + fieldName + "]");
                 }
@@ -224,6 +227,7 @@ public void parse(ParseContext context) throws IOException {
 
         if (token == XContentParser.Token.VALUE_STRING) {
             inputs.add(parser.text());
+            multiFields.parse(this, context);
         } else {
             String currentFieldName = null;
             while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
@@ -355,6 +359,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         builder.field(Fields.PRESERVE_SEPARATORS.getPreferredName(), this.preserveSeparators);
         builder.field(Fields.PRESERVE_POSITION_INCREMENTS.getPreferredName(), this.preservePositionIncrements);
         builder.field(Fields.MAX_INPUT_LENGTH.getPreferredName(), this.maxInputLength);
+        multiFields.toXContent(builder, params);
         return builder.endObject();
     }
 
diff --git a/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java
index b6c6d57834c6..5cf42a325999 100644
--- a/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/geo/GeoPointFieldMapper.java
@@ -58,6 +58,7 @@
 
 import static org.elasticsearch.index.mapper.MapperBuilders.*;
 import static org.elasticsearch.index.mapper.core.TypeParsers.parseField;
+import static org.elasticsearch.index.mapper.core.TypeParsers.parseMultiField;
 import static org.elasticsearch.index.mapper.core.TypeParsers.parsePathType;
 
 /**
@@ -196,7 +197,10 @@ public GeoPointFieldMapper build(BuilderContext context) {
             // store them as a single token.
             fieldType.setTokenized(false);
 
-            return new GeoPointFieldMapper(buildNames(context), fieldType, docValues, indexAnalyzer, searchAnalyzer, postingsProvider, docValuesProvider, similarity, fieldDataSettings, context.indexSettings(), origPathType, enableLatLon, enableGeoHash, enableGeohashPrefix, precisionStep, geoHashPrecision, latMapper, lonMapper, geohashMapper, validateLon, validateLat, normalizeLon, normalizeLat);
+            return new GeoPointFieldMapper(buildNames(context), fieldType, docValues, indexAnalyzer, searchAnalyzer, postingsProvider, docValuesProvider,
+                    similarity, fieldDataSettings, context.indexSettings(), origPathType, enableLatLon, enableGeoHash, enableGeohashPrefix, precisionStep,
+                    geoHashPrecision, latMapper, lonMapper, geohashMapper, validateLon, validateLat, normalizeLon, normalizeLat
+            , multiFieldsBuilder.build(this, context));
         }
     }
 
@@ -237,6 +241,8 @@ public GeoPointFieldMapper build(BuilderContext context) {
                     builder.normalizeLat = XContentMapValues.nodeBooleanValue(fieldNode);
                 } else if (fieldName.equals("normalize_lon")) {
                     builder.normalizeLon = XContentMapValues.nodeBooleanValue(fieldNode);
+                } else {
+                    parseMultiField(builder, name, node, parserContext, fieldName, fieldNode);
                 }
             }
             return builder;
@@ -399,8 +405,8 @@ public GeoPointFieldMapper(FieldMapper.Names names, FieldType fieldType, Boolean
             ContentPath.Type pathType, boolean enableLatLon, boolean enableGeoHash, boolean enableGeohashPrefix, Integer precisionStep, int geoHashPrecision,
             DoubleFieldMapper latMapper, DoubleFieldMapper lonMapper, StringFieldMapper geohashMapper,
             boolean validateLon, boolean validateLat,
-            boolean normalizeLon, boolean normalizeLat) {
-        super(names, 1f, fieldType, docValues, null, indexAnalyzer, postingsFormat, docValuesFormat, similarity, null, fieldDataSettings, indexSettings);
+            boolean normalizeLon, boolean normalizeLat, MultiFields multiFields) {
+        super(names, 1f, fieldType, docValues, null, indexAnalyzer, postingsFormat, docValuesFormat, similarity, null, fieldDataSettings, indexSettings, multiFields, null);
         this.pathType = pathType;
         this.enableLatLon = enableLatLon;
         this.enableGeoHash = enableGeoHash || enableGeohashPrefix; // implicitly enable geohashes if geohash_prefix is set
@@ -620,10 +626,12 @@ private void parse(ParseContext context, GeoPoint point, String geohash) throws
                 field.add(point.lat(), point.lon());
             }
         }
+        multiFields.parse(this, context);
     }
 
     @Override
     public void close() {
+        super.close();
         if (latMapper != null) {
             latMapper.close();
         }
diff --git a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
index ec45104b4d83..0be1024790c2 100644
--- a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
+++ b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldTests.java
@@ -27,15 +27,14 @@
 import org.elasticsearch.index.mapper.FieldMapper;
 import org.elasticsearch.index.mapper.MapperTestUtils;
 import org.elasticsearch.index.mapper.ParseContext.Document;
-import org.elasticsearch.index.mapper.core.DateFieldMapper;
-import org.elasticsearch.index.mapper.core.LongFieldMapper;
-import org.elasticsearch.index.mapper.core.StringFieldMapper;
-import org.elasticsearch.index.mapper.core.TokenCountFieldMapper;
+import org.elasticsearch.index.mapper.core.*;
+import org.elasticsearch.index.mapper.geo.GeoPointFieldMapper;
 import org.elasticsearch.test.ElasticsearchTestCase;
 import org.junit.Test;
 
 import static org.elasticsearch.common.io.Streams.copyToBytesFromClasspath;
 import static org.elasticsearch.common.io.Streams.copyToStringFromClasspath;
+import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.index.mapper.MapperBuilders.*;
 import static org.hamcrest.Matchers.*;
 
@@ -236,4 +235,174 @@ public void testConvertMultiFieldNoDefaultField() throws Exception {
         assertThat(docMapper.mappers().fullName("age.stored").mapper().fieldType().stored(), equalTo(true));
         assertThat(docMapper.mappers().fullName("age.stored").mapper().fieldType().tokenized(), equalTo(false));
     }
+
+    @Test
+    public void testConvertMultiFieldGeoPoint() throws Exception {
+        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json");
+        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);
+
+        assertThat(docMapper.mappers().fullName("a").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("a").mapper(), instanceOf(StringFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().tokenized(), equalTo(false));
+
+        assertThat(docMapper.mappers().fullName("a.b").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("a.b").mapper(), instanceOf(GeoPointFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().tokenized(), equalTo(false));
+
+        BytesReference json = jsonBuilder().startObject()
+                .field("_id", "1")
+                .field("a", "-1,-1")
+                .endObject().bytes();
+        Document doc = docMapper.parse(json).rootDoc();
+
+        IndexableField f = doc.getField("a");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("a"));
+        assertThat(f.stringValue(), equalTo("-1,-1"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getField("a.b");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("a.b"));
+        assertThat(f.stringValue(), equalTo("-1.0,-1.0"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        assertThat(docMapper.mappers().fullName("b").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("b").mapper(), instanceOf(GeoPointFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().tokenized(), equalTo(false));
+
+        assertThat(docMapper.mappers().fullName("b.a").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("b.a").mapper(), instanceOf(StringFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().tokenized(), equalTo(false));
+
+        json = jsonBuilder().startObject()
+                .field("_id", "1")
+                .field("b", "-1,-1")
+                .endObject().bytes();
+        doc = docMapper.parse(json).rootDoc();
+
+        f = doc.getField("b");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b"));
+        assertThat(f.stringValue(), equalTo("-1.0,-1.0"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getField("b.a");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b.a"));
+        assertThat(f.stringValue(), equalTo("-1,-1"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        json = jsonBuilder().startObject()
+                .field("_id", "1")
+                .startArray("b").startArray().value(-1).value(-1).endArray().startArray().value(-2).value(-2).endArray().endArray()
+                .endObject().bytes();
+        doc = docMapper.parse(json).rootDoc();
+
+        f = doc.getFields("b")[0];
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b"));
+        assertThat(f.stringValue(), equalTo("-1.0,-1.0"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getFields("b")[1];
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b"));
+        assertThat(f.stringValue(), equalTo("-2.0,-2.0"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getField("b.a");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b.a"));
+        // NOTE: "]" B/c the lat,long aren't specified as a string, we miss the actual values when parsing the multi
+        // fields. We already skipped over the coordinates values and can't get to the coordinates.
+        // This happens if coordinates are specified as array and object.
+        assertThat(f.stringValue(), equalTo("]"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+    }
+
+    @Test
+    public void testConvertMultiFieldCompletion() throws Exception {
+        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json");
+        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);
+
+        assertThat(docMapper.mappers().fullName("a").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("a").mapper(), instanceOf(StringFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("a").mapper().fieldType().tokenized(), equalTo(false));
+
+        assertThat(docMapper.mappers().fullName("a.b").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("a.b").mapper(), instanceOf(CompletionFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().tokenized(), equalTo(true));
+
+        BytesReference json = jsonBuilder().startObject()
+                .field("_id", "1")
+                .field("a", "complete me")
+                .endObject().bytes();
+        Document doc = docMapper.parse(json).rootDoc();
+
+        IndexableField f = doc.getField("a");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("a"));
+        assertThat(f.stringValue(), equalTo("complete me"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getField("a.b");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("a.b"));
+        assertThat(f.stringValue(), equalTo("complete me"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        assertThat(docMapper.mappers().fullName("b").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("b").mapper(), instanceOf(CompletionFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("b").mapper().fieldType().tokenized(), equalTo(true));
+
+        assertThat(docMapper.mappers().fullName("b.a").mapper(), notNullValue());
+        assertThat(docMapper.mappers().fullName("b.a").mapper(), instanceOf(StringFieldMapper.class));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().indexed(), equalTo(true));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().stored(), equalTo(false));
+        assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().tokenized(), equalTo(false));
+
+        json = jsonBuilder().startObject()
+                .field("_id", "1")
+                .field("b", "complete me")
+                .endObject().bytes();
+        doc = docMapper.parse(json).rootDoc();
+
+        f = doc.getField("b");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b"));
+        assertThat(f.stringValue(), equalTo("complete me"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+
+        f = doc.getField("b.a");
+        assertThat(f, notNullValue());
+        assertThat(f.name(), equalTo("b.a"));
+        assertThat(f.stringValue(), equalTo("complete me"));
+        assertThat(f.fieldType().stored(), equalTo(false));
+        assertThat(f.fieldType().indexed(), equalTo(true));
+    }
 }
diff --git a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationTests.java b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationTests.java
index 6cf83f373804..1808074defae 100644
--- a/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationTests.java
+++ b/src/test/java/org/elasticsearch/index/mapper/multifield/MultiFieldsIntegrationTests.java
@@ -20,18 +20,22 @@
 package org.elasticsearch.index.mapper.multifield;
 
 import org.elasticsearch.action.admin.indices.mapping.get.GetMappingsResponse;
+import org.elasticsearch.action.count.CountResponse;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.cluster.metadata.MappingMetaData;
+import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.common.xcontent.XContentBuilder;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.support.XContentMapValues;
-import org.elasticsearch.index.query.QueryBuilders;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.junit.Test;
 
 import java.io.IOException;
 import java.util.Map;
 
+import static org.elasticsearch.index.query.FilterBuilders.geoDistanceFilter;
+import static org.elasticsearch.index.query.QueryBuilders.constantScoreQuery;
+import static org.elasticsearch.index.query.QueryBuilders.matchQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.hamcrest.Matchers.*;
 
@@ -61,11 +65,11 @@ public void testMultiFields() throws Exception {
                 .get();
 
         SearchResponse searchResponse = client().prepareSearch("my-index")
-                .setQuery(QueryBuilders.matchQuery("title", "multi"))
+                .setQuery(matchQuery("title", "multi"))
                 .get();
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
         searchResponse = client().prepareSearch("my-index")
-                .setQuery(QueryBuilders.matchQuery("title.not_analyzed", "Multi fields"))
+                .setQuery(matchQuery("title.not_analyzed", "Multi fields"))
                 .get();
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
 
@@ -93,11 +97,148 @@ public void testMultiFields() throws Exception {
                 .get();
 
         searchResponse = client().prepareSearch("my-index")
-                .setQuery(QueryBuilders.matchQuery("title.uncased", "Multi"))
+                .setQuery(matchQuery("title.uncased", "Multi"))
                 .get();
         assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
     }
 
+    @Test
+    public void testGeoPointMultiField() throws Exception {
+        assertAcked(
+                client().admin().indices().prepareCreate("my-index")
+                        .addMapping("my-type", createMappingSource("geo_point"))
+        );
+
+        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get();
+        MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type");
+        assertThat(mappingMetaData, not(nullValue()));
+        Map<String, Object> mappingSource = mappingMetaData.sourceAsMap();
+        Map aField = ((Map) XContentMapValues.extractValue("properties.a", mappingSource));
+        assertThat(aField.size(), equalTo(2));
+        assertThat(aField.get("type").toString(), equalTo("geo_point"));
+        assertThat(aField.get("fields"), notNullValue());
+
+        Map bField = ((Map) XContentMapValues.extractValue("properties.a.fields.b", mappingSource));
+        assertThat(bField.size(), equalTo(2));
+        assertThat(bField.get("type").toString(), equalTo("string"));
+        assertThat(bField.get("index").toString(), equalTo("not_analyzed"));
+
+        client().prepareIndex("my-index", "my-type", "1").setSource("a", "51,19").setRefresh(true).get();
+        CountResponse countResponse = client().prepareCount("my-index")
+                .setQuery(constantScoreQuery(geoDistanceFilter("a").point(51, 19).distance(50, DistanceUnit.KILOMETERS)))
+                .get();
+        assertThat(countResponse.getCount(), equalTo(1l));
+        countResponse = client().prepareCount("my-index").setQuery(matchQuery("a.b", "51,19")).get();
+        assertThat(countResponse.getCount(), equalTo(1l));
+    }
+
+    @Test
+    public void testTokenCountMultiField() throws Exception {
+        assertAcked(
+                client().admin().indices().prepareCreate("my-index")
+                        .addMapping("my-type", XContentFactory.jsonBuilder().startObject().startObject("my-type")
+                                .startObject("properties")
+                                .startObject("a")
+                                .field("type", "token_count")
+                                .field("analyzer", "simple")
+                                .startObject("fields")
+                                .startObject("b")
+                                .field("type", "string")
+                                .field("index", "not_analyzed")
+                                .endObject()
+                                .endObject()
+                                .endObject()
+                                .endObject()
+                                .endObject().endObject())
+        );
+
+        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get();
+        MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type");
+        assertThat(mappingMetaData, not(nullValue()));
+        Map<String, Object> mappingSource = mappingMetaData.sourceAsMap();
+        Map aField = ((Map) XContentMapValues.extractValue("properties.a", mappingSource));
+        assertThat(aField.size(), equalTo(3));
+        assertThat(aField.get("type").toString(), equalTo("token_count"));
+        assertThat(aField.get("fields"), notNullValue());
+
+        Map bField = ((Map) XContentMapValues.extractValue("properties.a.fields.b", mappingSource));
+        assertThat(bField.size(), equalTo(2));
+        assertThat(bField.get("type").toString(), equalTo("string"));
+        assertThat(bField.get("index").toString(), equalTo("not_analyzed"));
+
+        client().prepareIndex("my-index", "my-type", "1").setSource("a", "my tokens").setRefresh(true).get();
+        CountResponse countResponse = client().prepareCount("my-index").setQuery(matchQuery("a.b", "my tokens")).get();
+        assertThat(countResponse.getCount(), equalTo(1l));
+    }
+
+    @Test
+    public void testCompletionMultiField() throws Exception {
+        assertAcked(
+                client().admin().indices().prepareCreate("my-index")
+                        .addMapping("my-type", createMappingSource("completion"))
+        );
+
+        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get();
+        MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type");
+        assertThat(mappingMetaData, not(nullValue()));
+        Map<String, Object> mappingSource = mappingMetaData.sourceAsMap();
+        Map aField = ((Map) XContentMapValues.extractValue("properties.a", mappingSource));
+        assertThat(aField.size(), equalTo(7));
+        assertThat(aField.get("type").toString(), equalTo("completion"));
+        assertThat(aField.get("fields"), notNullValue());
+
+        Map bField = ((Map) XContentMapValues.extractValue("properties.a.fields.b", mappingSource));
+        assertThat(bField.size(), equalTo(2));
+        assertThat(bField.get("type").toString(), equalTo("string"));
+        assertThat(bField.get("index").toString(), equalTo("not_analyzed"));
+
+        client().prepareIndex("my-index", "my-type", "1").setSource("a", "complete me").setRefresh(true).get();
+        CountResponse countResponse = client().prepareCount("my-index").setQuery(matchQuery("a.b", "complete me")).get();
+        assertThat(countResponse.getCount(), equalTo(1l));
+    }
+
+    @Test
+    public void testIpMultiField() throws Exception {
+        assertAcked(
+                client().admin().indices().prepareCreate("my-index")
+                        .addMapping("my-type", createMappingSource("ip"))
+        );
+
+        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get();
+        MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type");
+        assertThat(mappingMetaData, not(nullValue()));
+        Map<String, Object> mappingSource = mappingMetaData.sourceAsMap();
+        Map aField = ((Map) XContentMapValues.extractValue("properties.a", mappingSource));
+        assertThat(aField.size(), equalTo(2));
+        assertThat(aField.get("type").toString(), equalTo("ip"));
+        assertThat(aField.get("fields"), notNullValue());
+
+        Map bField = ((Map) XContentMapValues.extractValue("properties.a.fields.b", mappingSource));
+        assertThat(bField.size(), equalTo(2));
+        assertThat(bField.get("type").toString(), equalTo("string"));
+        assertThat(bField.get("index").toString(), equalTo("not_analyzed"));
+
+        client().prepareIndex("my-index", "my-type", "1").setSource("a", "127.0.0.1").setRefresh(true).get();
+        CountResponse countResponse = client().prepareCount("my-index").setQuery(matchQuery("a.b", "127.0.0.1")).get();
+        assertThat(countResponse.getCount(), equalTo(1l));
+    }
+
+    private XContentBuilder createMappingSource(String fieldType) throws IOException {
+        return XContentFactory.jsonBuilder().startObject().startObject("my-type")
+                .startObject("properties")
+                .startObject("a")
+                .field("type", fieldType)
+                .startObject("fields")
+                .startObject("b")
+                .field("type", "string")
+                .field("index", "not_analyzed")
+                .endObject()
+                .endObject()
+                .endObject()
+                .endObject()
+                .endObject().endObject();
+    }
+
     private XContentBuilder createTypeSource() throws IOException {
         if (randomBoolean()) {
             return XContentFactory.jsonBuilder().startObject().startObject("my-type")
diff --git a/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json b/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json
new file mode 100644
index 000000000000..d36e9d2d84e2
--- /dev/null
+++ b/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json
@@ -0,0 +1,30 @@
+{
+  "type":{
+    "properties":{
+      "a":{
+        "type":"multi_field",
+        "fields":{
+          "a":{
+            "type":"string",
+            "index":"not_analyzed"
+          },
+          "b":{
+            "type":"completion"
+          }
+        }
+      },
+      "b":{
+        "type":"multi_field",
+        "fields":{
+          "a":{
+            "type":"string",
+            "index":"not_analyzed"
+          },
+          "b":{
+            "type":"completion"
+          }
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json b/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json
new file mode 100644
index 000000000000..c7d11becc244
--- /dev/null
+++ b/src/test/java/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json
@@ -0,0 +1,30 @@
+{
+  "type":{
+    "properties":{
+      "a":{
+        "type":"multi_field",
+        "fields":{
+          "a":{
+            "type":"string",
+            "index":"not_analyzed"
+          },
+          "b":{
+            "type":"geo_point"
+          }
+        }
+      },
+      "b":{
+        "type":"multi_field",
+        "fields":{
+          "a":{
+            "type":"string",
+            "index":"not_analyzed"
+          },
+          "b":{
+            "type":"geo_point"
+          }
+        }
+      }
+    }
+  }
+}
\ No newline at end of file
