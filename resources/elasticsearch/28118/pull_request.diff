diff --git a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/StringTerms.java b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/StringTerms.java
index 8c7f09ebe832..11d0b40c7ce3 100644
--- a/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/StringTerms.java
+++ b/server/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/StringTerms.java
@@ -64,10 +64,18 @@ public Object getKey() {
             return getKeyAsString();
         }
 
+        // this method is needed for scripted numeric aggs
         @Override
         public Number getKeyAsNumber() {
-            // this method is needed for scripted numeric aggs
-            return Double.parseDouble(termBytes.utf8ToString());
+            /*
+             * If the term is a long greater than 2^52 then parsing as a double would lose accuracy. Therefore, we first parse as a long and
+             * if this fails then we attempt to parse the term as a double.
+             */
+            try {
+                return Long.parseLong(termBytes.utf8ToString());
+            } catch (final NumberFormatException ignored) {
+                return Double.parseDouble(termBytes.utf8ToString());
+            }
         }
 
         @Override
diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java
index a5049ef8253c..d216709791e9 100644
--- a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java
+++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/DoubleTermsIT.java
@@ -70,6 +70,7 @@
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.core.IsNull.notNullValue;
 
 @ESIntegTestCase.SuiteScopeTestCase
@@ -313,6 +314,7 @@ private void runTestFieldWithPartitionedFiltering(String field) throws Exception
             assertThat(terms.getName(), equalTo("terms"));
             for (Bucket bucket : terms.getBuckets()) {
                 assertTrue(foundTerms.add(bucket.getKeyAsNumber()));
+                assertThat(bucket.getKeyAsNumber(), instanceOf(Double.class));
             }
         }
         assertEquals(expectedCardinality, foundTerms.size());
diff --git a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java
index 61fd491b583b..bce4006fa107 100644
--- a/server/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java
+++ b/server/src/test/java/org/elasticsearch/search/aggregations/bucket/LongTermsIT.java
@@ -67,6 +67,7 @@
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertSearchResponse;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.core.IsNull.notNullValue;
 
 @ESIntegTestCase.SuiteScopeTestCase
@@ -431,6 +432,7 @@ public void testScriptSingleValue() throws Exception {
             assertThat(bucket, notNullValue());
             assertThat(key(bucket), equalTo("" + i));
             assertThat(bucket.getKeyAsNumber().intValue(), equalTo(i));
+            assertThat(bucket.getKeyAsNumber(), instanceOf(Long.class));
             assertThat(bucket.getDocCount(), equalTo(1L));
         }
     }
