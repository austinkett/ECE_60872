diff --git a/core/src/main/java/org/elasticsearch/http/netty/cors/CorsHandler.java b/core/src/main/java/org/elasticsearch/http/netty/cors/CorsHandler.java
index d9a47c746d73..5baa37c61eef 100644
--- a/core/src/main/java/org/elasticsearch/http/netty/cors/CorsHandler.java
+++ b/core/src/main/java/org/elasticsearch/http/netty/cors/CorsHandler.java
@@ -32,14 +32,15 @@
 import org.jboss.netty.handler.codec.http.HttpResponse;
 
 import java.util.HashSet;
-import java.util.Iterator;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ACCESS_CONTROL_MAX_AGE;
+import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.HOST;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.ORIGIN;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.USER_AGENT;
 import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.VARY;
@@ -57,6 +58,7 @@
 public class CorsHandler extends SimpleChannelUpstreamHandler {
 
     public static final String ANY_ORIGIN = "*";
+    private static Pattern PATTERN = Pattern.compile("^https?://");
     private final CorsConfig config;
 
     private HttpRequest request;
@@ -98,7 +100,7 @@ public static void setCorsResponseHeaders(HttpRequest request, HttpResponse resp
             final String originHeaderVal;
             if (config.isAnyOriginSupported()) {
                 originHeaderVal = ANY_ORIGIN;
-            } else if (config.isOriginAllowed(originHeader)) {
+            } else if (config.isOriginAllowed(originHeader) || isSameOrigin(originHeader, request.headers().get(HOST))) {
                 originHeaderVal = originHeader;
             } else {
                 originHeaderVal = null;
@@ -131,6 +133,17 @@ private static void forbidden(final ChannelHandlerContext ctx, final HttpRequest
             .addListener(ChannelFutureListener.CLOSE);
     }
 
+    private static boolean isSameOrigin(final String origin, final String host) {
+        if (Strings.isNullOrEmpty(host) == false) {
+            // strip protocol from origin
+            final String originDomain = PATTERN.matcher(origin).replaceFirst("");
+            if (host.equals(originDomain)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     /**
      * This is a non CORS specification feature which enables the setting of preflight
      * response headers that might be required by intermediaries.
@@ -181,6 +194,11 @@ private boolean validateOrigin() {
             return true;
         }
 
+        // if the origin is the same as the host of the request, then allow
+        if (isSameOrigin(origin, request.headers().get(HOST))) {
+            return true;
+        }
+
         return config.isOriginAllowed(origin);
     }
 
diff --git a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
index 8eccdb3c7f66..c8f09bc00d62 100644
--- a/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
+++ b/core/src/test/java/org/elasticsearch/http/netty/NettyHttpChannelTests.java
@@ -55,8 +55,6 @@
 
 public class NettyHttpChannelTests extends ESTestCase {
 
-    private static final String ORIGIN = "remote-host";
-
     private NetworkService networkService;
     private ThreadPool threadPool;
     private MockBigArrays bigArrays;
@@ -86,34 +84,70 @@ public void testCorsEnabledWithoutAllowOrigins() {
         Settings settings = Settings.builder()
                 .put(NettyHttpServerTransport.SETTING_CORS_ENABLED, true)
                 .build();
-        HttpResponse response = execRequestWithCors(settings, ORIGIN);
+        HttpResponse response = execRequestWithCors(settings, "remote-host", "request-host");
         // inspect response and validate
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), nullValue());
     }
 
+    @Test
     public void testCorsEnabledWithAllowOrigins() {
-        final String originValue = ORIGIN;
+        final String originValue = "remote-host";
         // create a http transport with CORS enabled and allow origin configured
         Settings settings = Settings.builder()
                 .put(SETTING_CORS_ENABLED, true)
                 .put(SETTING_CORS_ALLOW_ORIGIN, originValue)
                 .build();
-        HttpResponse response = execRequestWithCors(settings, originValue);
+        HttpResponse response = execRequestWithCors(settings, originValue, "request-host");
         // inspect response and validate
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
         String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
         assertThat(allowedOrigins, is(originValue));
     }
 
+    @Test
+    public void testCorsAllowOriginWithSameHost() {
+        String originValue = "remote-host";
+        String host = "remote-host";
+        // create a http transport with CORS enabled
+        Settings settings = Settings.builder()
+                                .put(NettyHttpServerTransport.SETTING_CORS_ENABLED, true)
+                                .build();
+        HttpResponse response = execRequestWithCors(settings, originValue, host);
+        // inspect response and validate
+        assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
+        String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
+        assertThat(allowedOrigins, is(originValue));
+
+        originValue = "http://" + originValue;
+        response = execRequestWithCors(settings, originValue, host);
+        assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
+        allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
+        assertThat(allowedOrigins, is(originValue));
+
+        originValue = originValue + ":5555";
+        host = host + ":5555";
+        response = execRequestWithCors(settings, originValue, host);
+        assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
+        allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
+        assertThat(allowedOrigins, is(originValue));
+
+        originValue = originValue.replace("http", "https");
+        response = execRequestWithCors(settings, originValue, host);
+        assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
+        allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
+        assertThat(allowedOrigins, is(originValue));
+    }
+
+    @Test
     public void testThatStringLiteralWorksOnMatch() {
-        final String originValue = ORIGIN;
+        final String originValue = "remote-host";
         Settings settings = Settings.builder()
                                 .put(SETTING_CORS_ENABLED, true)
                                 .put(SETTING_CORS_ALLOW_ORIGIN, originValue)
                                 .put(SETTING_CORS_ALLOW_METHODS, "get, options, post")
                                 .put(SETTING_CORS_ALLOW_CREDENTIALS, true)
                                 .build();
-        HttpResponse response = execRequestWithCors(settings, originValue);
+        HttpResponse response = execRequestWithCors(settings, originValue, "request-host");
         // inspect response and validate
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
         String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
@@ -121,13 +155,14 @@ public void testThatStringLiteralWorksOnMatch() {
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS), equalTo("true"));
     }
 
+    @Test
     public void testThatAnyOriginWorks() {
         final String originValue = CorsHandler.ANY_ORIGIN;
         Settings settings = Settings.builder()
                                 .put(SETTING_CORS_ENABLED, true)
                                 .put(SETTING_CORS_ALLOW_ORIGIN, originValue)
                                 .build();
-        HttpResponse response = execRequestWithCors(settings, originValue);
+        HttpResponse response = execRequestWithCors(settings, originValue, "request-host");
         // inspect response and validate
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue());
         String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN);
@@ -135,6 +170,7 @@ public void testThatAnyOriginWorks() {
         assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS), nullValue());
     }
 
+    @Test
     public void testHeadersSet() {
         Settings settings = Settings.builder().build();
         httpServerTransport = new NettyHttpServerTransport(settings, networkService, bigArrays);
@@ -162,12 +198,13 @@ public void testHeadersSet() {
         assertThat(response.headers().get(HttpHeaders.Names.CONTENT_TYPE), equalTo(resp.contentType()));
     }
 
-    private HttpResponse execRequestWithCors(final Settings settings, final String originValue) {
+    private HttpResponse execRequestWithCors(final Settings settings, final String originValue, final String host) {
         // construct request and send it over the transport layer
         httpServerTransport = new NettyHttpServerTransport(settings, networkService, bigArrays);
         HttpRequest httpRequest = new TestHttpRequest();
-        httpRequest.headers().add(HttpHeaders.Names.ORIGIN, ORIGIN);
+        httpRequest.headers().add(HttpHeaders.Names.ORIGIN, originValue);
         httpRequest.headers().add(HttpHeaders.Names.USER_AGENT, "Mozilla fake");
+        httpRequest.headers().add(HttpHeaders.Names.HOST, host);
         WriteCapturingChannel writeCapturingChannel = new WriteCapturingChannel();
         NettyHttpRequest request = new NettyHttpRequest(httpRequest, writeCapturingChannel);
 
