diff --git a/core-signatures.txt b/core-signatures.txt
index 0af12bd96932..950397872bd5 100644
--- a/core-signatures.txt
+++ b/core-signatures.txt
@@ -30,3 +30,6 @@ org.apache.lucene.index.IndexWriter#forceMerge(int) @ use Merges#forceMerge
 org.apache.lucene.index.IndexWriter#forceMerge(int,boolean) @ use Merges#forceMerge
 org.apache.lucene.index.IndexWriter#forceMergeDeletes() @ use Merges#forceMergeDeletes
 org.apache.lucene.index.IndexWriter#forceMergeDeletes(boolean) @ use Merges#forceMergeDeletes
+
+@defaultMessage QueryWrapperFilter is cachable by default - use Queries#wrap instead
+org.apache.lucene.search.QueryWrapperFilter#<init>(org.apache.lucene.search.Query)
diff --git a/pom.xml b/pom.xml
index fb585c2a96bd..a1d20e1a774e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -989,6 +989,7 @@
                                 <exclude>org/elasticsearch/Version.class</exclude>
                                 <exclude>org/apache/lucene/queries/XTermsFilter.class</exclude>
                                 <exclude>org/elasticsearch/index/merge/Merges.class</exclude>
+				<exclude>org/elasticsearch/common/lucene/search/Queries$QueryWrapperFilterFactory.class</exclude>
                                 <!-- end excludes for valid system-out -->
                                 <!-- start excludes for Unsafe -->
                                 <exclude>org/elasticsearch/common/util/UnsafeUtils.class</exclude>
diff --git a/src/main/java/org/elasticsearch/common/lucene/search/Queries.java b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
index 3b6ff3b6cc31..87d6288dcb3d 100644
--- a/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
+++ b/src/main/java/org/elasticsearch/common/lucene/search/Queries.java
@@ -19,11 +19,9 @@
 
 package org.elasticsearch.common.lucene.search;
 
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.Filter;
-import org.apache.lucene.search.Query;
+import org.apache.lucene.search.*;
 import org.elasticsearch.common.Nullable;
+import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;
 
 import java.util.List;
 import java.util.regex.Pattern;
@@ -166,4 +164,23 @@ public static int calculateMinShouldMatch(int optionalClauseCount, String spec)
                 optionalClauseCount : (result < 0 ? 0 : result));
 
     }
+
+    public static Filter wrap(Query query) {
+        return FACTORY.wrap(query);
+    }
+
+    private static final QueryWrapperFilterFactory FACTORY = new QueryWrapperFilterFactory();
+    // NOTE: This is a separate class since we added QueryWrapperFilter as a forbidden API
+    // that way we can exclude only the inner class without excluding the entire Queries class
+    // and potentially miss a forbidden API usage!
+    private static final class QueryWrapperFilterFactory {
+
+        public Filter wrap(Query query) {
+            if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {
+                return new CustomQueryWrappingFilter(query);
+            } else {
+                return new QueryWrapperFilter(query);
+            }
+        }
+    }
 }
diff --git a/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java b/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java
index d14de5b02f44..cb81cb130270 100644
--- a/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java
+++ b/src/main/java/org/elasticsearch/index/query/FQueryFilterParser.java
@@ -21,8 +21,8 @@
 
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryWrapperFilter;
 import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.cache.filter.support.CacheKeyFilter;
 import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;
@@ -86,12 +86,7 @@ public Filter parse(QueryParseContext parseContext) throws IOException, QueryPar
         if (query == null) {
             return null;
         }
-        Filter filter;
-        if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {
-            filter = new CustomQueryWrappingFilter(query);
-        } else {
-            filter = new QueryWrapperFilter(query);
-        }
+        Filter filter = Queries.wrap(query);
         if (cache) {
             filter = parseContext.cacheFilter(filter, cacheKey);
         }
@@ -100,4 +95,4 @@ public Filter parse(QueryParseContext parseContext) throws IOException, QueryPar
         }
         return filter;
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java
index 67cf02f97c13..e4b7ad00886f 100644
--- a/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java
+++ b/src/main/java/org/elasticsearch/index/query/NestedFilterParser.java
@@ -21,11 +21,11 @@
 
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryWrapperFilter;
 import org.apache.lucene.search.join.ScoreMode;
 import org.apache.lucene.search.join.ToParentBlockJoinQuery;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.inject.Inject;
+import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.lucene.search.XConstantScoreQuery;
 import org.elasticsearch.common.lucene.search.XFilteredQuery;
 import org.elasticsearch.common.xcontent.XContentParser;
@@ -154,9 +154,9 @@ public Filter parse(QueryParseContext parseContext) throws IOException, QueryPar
             Filter nestedFilter;
             if (join) {
                 ToParentBlockJoinQuery joinQuery = new ToParentBlockJoinQuery(query, parentFilter, ScoreMode.None);
-                nestedFilter = new QueryWrapperFilter(joinQuery);
+                nestedFilter = Queries.wrap(joinQuery);
             } else {
-                nestedFilter = new QueryWrapperFilter(query);
+                nestedFilter = Queries.wrap(query);
             }
 
             if (cache) {
diff --git a/src/main/java/org/elasticsearch/index/query/QueryFilterParser.java b/src/main/java/org/elasticsearch/index/query/QueryFilterParser.java
index 57671f78a6dc..2e4d7e5174ab 100644
--- a/src/main/java/org/elasticsearch/index/query/QueryFilterParser.java
+++ b/src/main/java/org/elasticsearch/index/query/QueryFilterParser.java
@@ -21,9 +21,10 @@
 
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryWrapperFilter;
 import org.elasticsearch.common.inject.Inject;
-import org.elasticsearch.index.search.child.CustomQueryWrappingFilter;
+import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.logging.Loggers;
+import org.elasticsearch.common.lucene.search.Queries;
 
 import java.io.IOException;
 
@@ -33,6 +34,7 @@
 public class QueryFilterParser implements FilterParser {
 
     public static final String NAME = "query";
+    ESLogger logger = Loggers.getLogger(getClass());
 
     @Inject
     public QueryFilterParser() {
@@ -49,10 +51,6 @@ public Filter parse(QueryParseContext parseContext) throws IOException, QueryPar
         if (query == null) {
             return null;
         }
-        if (CustomQueryWrappingFilter.shouldUseCustomQueryWrappingFilter(query)) {
-            return new CustomQueryWrappingFilter(query);
-        } else {
-            return new QueryWrapperFilter(query);
-        }
+        return Queries.wrap(query);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/org/elasticsearch/index/query/QueryParseContext.java b/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
index 0a0579be6584..d92fc1571cbb 100644
--- a/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
+++ b/src/main/java/org/elasticsearch/index/query/QueryParseContext.java
@@ -25,12 +25,12 @@
 import org.apache.lucene.queryparser.classic.QueryParserSettings;
 import org.apache.lucene.search.Filter;
 import org.apache.lucene.search.Query;
-import org.apache.lucene.search.QueryWrapperFilter;
 import org.apache.lucene.search.similarities.Similarity;
 import org.elasticsearch.cache.recycler.CacheRecycler;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.ParseField;
 import org.elasticsearch.common.lucene.search.NoCacheFilter;
+import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.Index;
 import org.elasticsearch.index.analysis.AnalysisService;
@@ -185,7 +185,7 @@ public void addNamedFilter(String name, Filter filter) {
     }
 
     public void addNamedQuery(String name, Query query) {
-        namedFilters.put(name, new QueryWrapperFilter(query));
+        namedFilters.put(name, Queries.wrap(query));
     }
 
     public ImmutableMap<String, Filter> copyNamedFilters() {
diff --git a/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java
index c7549b9cc420..53ee54eb8f4a 100644
--- a/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java
+++ b/src/main/java/org/elasticsearch/index/search/child/ChildrenQuery.java
@@ -137,7 +137,6 @@ public void extractTerms(Set<Term> terms) {
     @Override
     public Weight createWeight(IndexSearcher searcher) throws IOException {
         SearchContext searchContext = SearchContext.current();
-
         final Query childQuery;
         if (rewrittenChildQuery == null) {
             childQuery = rewrittenChildQuery = searcher.rewrite(originalChildQuery);
@@ -154,27 +153,36 @@ public Weight createWeight(IndexSearcher searcher) throws IOException {
         switch (scoreType) {
             case MAX:
                 MaxCollector maxCollector = new MaxCollector(parentChildIndexFieldData, parentType, searchContext);
-                indexSearcher.search(childQuery, maxCollector);
-                parentIds = maxCollector.parentIds;
-                scores = maxCollector.scores;
-                occurrences = null;
-                Releasables.release(maxCollector.parentIdsIndex);
+                try {
+                    indexSearcher.search(childQuery, maxCollector);
+                    parentIds = maxCollector.parentIds;
+                    scores = maxCollector.scores;
+                    occurrences = null;
+                } finally {
+                    Releasables.release(maxCollector.parentIdsIndex);
+                }
                 break;
             case SUM:
                 SumCollector sumCollector = new SumCollector(parentChildIndexFieldData, parentType, searchContext);
-                indexSearcher.search(childQuery, sumCollector);
-                parentIds = sumCollector.parentIds;
-                scores = sumCollector.scores;
-                occurrences = null;
-                Releasables.release(sumCollector.parentIdsIndex);
+                try {
+                    indexSearcher.search(childQuery, sumCollector);
+                    parentIds = sumCollector.parentIds;
+                    scores = sumCollector.scores;
+                    occurrences = null;
+                } finally {
+                    Releasables.release(sumCollector.parentIdsIndex);
+                }
                 break;
             case AVG:
                 AvgCollector avgCollector = new AvgCollector(parentChildIndexFieldData, parentType, searchContext);
-                indexSearcher.search(childQuery, avgCollector);
-                parentIds = avgCollector.parentIds;
-                scores = avgCollector.scores;
-                occurrences = avgCollector.occurrences;
-                Releasables.release(avgCollector.parentIdsIndex);
+                try {
+                    indexSearcher.search(childQuery, avgCollector);
+                    parentIds = avgCollector.parentIds;
+                    scores = avgCollector.scores;
+                    occurrences = avgCollector.occurrences;
+                } finally {
+                    Releasables.release(avgCollector.parentIdsIndex);
+                }
                 break;
             default:
                 throw new RuntimeException("Are we missing a score type here? -- " + scoreType);
diff --git a/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java b/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java
index 00ccf5e72307..f8069e288b68 100644
--- a/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java
+++ b/src/main/java/org/elasticsearch/index/search/child/ParentQuery.java
@@ -124,26 +124,32 @@ public void extractTerms(Set<Term> terms) {
     public Weight createWeight(IndexSearcher searcher) throws IOException {
         SearchContext searchContext = SearchContext.current();
         ParentIdAndScoreCollector collector = new ParentIdAndScoreCollector(searchContext, parentChildIndexFieldData, parentType);
-
-        final Query parentQuery;
-        if (rewrittenParentQuery == null) {
-            parentQuery = rewrittenParentQuery = searcher.rewrite(originalParentQuery);
-        } else {
-            assert rewriteIndexReader == searcher.getIndexReader() : "not equal, rewriteIndexReader=" + rewriteIndexReader + " searcher.getIndexReader()=" + searcher.getIndexReader();
-            parentQuery = rewrittenParentQuery;
-        }
-        IndexSearcher indexSearcher = new IndexSearcher(searcher.getIndexReader());
-        indexSearcher.setSimilarity(searcher.getSimilarity());
-        indexSearcher.search(parentQuery, collector);
-        FloatArray scores = collector.scores;
-        BytesRefHash parentIds = collector.parentIds;
-
-        if (parentIds.size() == 0) {
-            Releasables.release(parentIds, scores);
-            return Queries.newMatchNoDocsQuery().createWeight(searcher);
+        ChildWeight childWeight;
+        boolean releaseCollectorResource = true;
+        try {
+            final Query parentQuery;
+            if (rewrittenParentQuery == null) {
+                parentQuery = rewrittenParentQuery = searcher.rewrite(originalParentQuery);
+            } else {
+                assert rewriteIndexReader == searcher.getIndexReader() : "not equal, rewriteIndexReader=" + rewriteIndexReader + " searcher.getIndexReader()=" + searcher.getIndexReader();
+                parentQuery = rewrittenParentQuery;
+            }
+            IndexSearcher indexSearcher = new IndexSearcher(searcher.getIndexReader());
+            indexSearcher.setSimilarity(searcher.getSimilarity());
+            indexSearcher.search(parentQuery, collector);
+            FloatArray scores = collector.scores;
+            BytesRefHash parentIds = collector.parentIds;
+            if (parentIds.size() == 0) {
+                return Queries.newMatchNoDocsQuery().createWeight(searcher);
+            }
+            childWeight = new ChildWeight(searchContext, parentQuery.createWeight(searcher), childrenFilter, parentIds, scores);
+            releaseCollectorResource = false;
+        } finally {
+            if (releaseCollectorResource) {
+                // either if we run into an exception or if we return early
+                Releasables.release(collector.parentIds, collector.scores);
+            }
         }
-
-        ChildWeight childWeight = new ChildWeight(searchContext, parentQuery.createWeight(searcher), childrenFilter, parentIds, scores);
         searchContext.addReleasable(childWeight);
         return childWeight;
     }
diff --git a/src/main/java/org/elasticsearch/search/facet/query/QueryFacetExecutor.java b/src/main/java/org/elasticsearch/search/facet/query/QueryFacetExecutor.java
index b2cffdf808d6..1a3bcc74591b 100644
--- a/src/main/java/org/elasticsearch/search/facet/query/QueryFacetExecutor.java
+++ b/src/main/java/org/elasticsearch/search/facet/query/QueryFacetExecutor.java
@@ -51,7 +51,7 @@ public QueryFacetExecutor(Query query) {
         if (possibleFilter != null) {
             this.filter = possibleFilter;
         } else {
-            this.filter = new QueryWrapperFilter(query);
+            this.filter = Queries.wrap(query);
         }
     }
 
diff --git a/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java
index 4a687d517374..a4f837f06c02 100644
--- a/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java
+++ b/src/test/java/org/elasticsearch/search/child/SimpleChildQuerySearchTests.java
@@ -301,19 +301,26 @@ public void testCachingBug_withFqueryFilter() throws Exception {
                 .addMapping("parent")
                 .addMapping("child", "_parent", "type=parent"));
         ensureGreen();
-
+        List<IndexRequestBuilder> builders = new ArrayList<IndexRequestBuilder>();
         // index simple data
         for (int i = 0; i < 10; i++) {
-            client().prepareIndex("test", "parent", Integer.toString(i)).setSource("p_field", i).get();
-        }
-        for (int i = 0; i < 10; i++) {
-            client().prepareIndex("test", "child", Integer.toString(i)).setSource("c_field", i).setParent("" + 0).get();
+            builders.add(client().prepareIndex("test", "parent", Integer.toString(i)).setSource("p_field", i));
         }
-        for (int i = 0; i < 10; i++) {
-            client().prepareIndex("test", "child", Integer.toString(i + 10)).setSource("c_field", i + 10).setParent(Integer.toString(i))
-                    .get();
+        indexRandom(randomBoolean(), builders);
+        builders.clear();
+        for (int j = 0; j < 2; j++) {
+            for (int i = 0; i < 10; i++) {
+                builders.add(client().prepareIndex("test", "child", Integer.toString(i)).setSource("c_field", i).setParent("" + 0));
+            }
+            for (int i = 0; i < 10; i++) {
+                builders.add(client().prepareIndex("test", "child", Integer.toString(i + 10)).setSource("c_field", i + 10).setParent(Integer.toString(i)));
+            }
+
+            if (randomBoolean()) {
+                break; // randomly break out and dont' have deletes / updates
+            }
         }
-        flushAndRefresh();
+        indexRandom(true, builders);
 
         for (int i = 1; i <= 10; i++) {
             logger.info("Round {}", i);
