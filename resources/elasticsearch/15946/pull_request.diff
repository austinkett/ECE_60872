diff --git a/core/src/main/java/org/elasticsearch/rest/RestResponse.java b/core/src/main/java/org/elasticsearch/rest/RestResponse.java
index 7946785bc972..1d3719c9428e 100644
--- a/core/src/main/java/org/elasticsearch/rest/RestResponse.java
+++ b/core/src/main/java/org/elasticsearch/rest/RestResponse.java
@@ -22,11 +22,14 @@
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.bytes.BytesReference;
+import org.elasticsearch.rest.support.RestUtils;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 
 /**
@@ -64,7 +67,9 @@ public void copyHeaders(ElasticsearchException ex) {
                 values = new ArrayList<>();
                 customHeaders.put(key, values);
             }
-            values.addAll(ex.getHeader(key));
+            for (String value : ex.getHeader(key)) {
+                addHeader(key, value);
+            }
         }
     }
 
@@ -80,7 +85,7 @@ public void addHeader(String name, String value) {
             header = new ArrayList<>();
             customHeaders.put(name, header);
         }
-        header.add(value);
+        header.add(RestUtils.encodeHeader(value));
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/rest/support/RestUtils.java b/core/src/main/java/org/elasticsearch/rest/support/RestUtils.java
index 56bb18d5e6ed..687bb5cf2d4f 100644
--- a/core/src/main/java/org/elasticsearch/rest/support/RestUtils.java
+++ b/core/src/main/java/org/elasticsearch/rest/support/RestUtils.java
@@ -22,6 +22,9 @@
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.path.PathTrie;
 
+import java.io.CharArrayWriter;
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
@@ -32,6 +35,9 @@
  */
 public class RestUtils {
 
+    // cannot instantiate
+    private RestUtils() { }
+
     public static final PathTrie.Decoder REST_DECODER = new PathTrie.Decoder() {
         @Override
         public String decode(String value) {
@@ -57,7 +63,7 @@ public static void decodeQueryString(String s, int fromIndex, Map<String, String
         if (fromIndex >= s.length()) {
             return;
         }
-        
+
         int queryStringLength = s.contains("#") ? s.indexOf("#") : s.length();
 
         String name = null;
@@ -238,4 +244,44 @@ public static Pattern checkCorsSettingForRegex(String corsSetting) {
 
         return null;
     }
+
+    /**
+     * URL encode an HTTP response header value.
+     *
+     * This URL encodes CRLF characters to prevent HTTP response
+     * splitting attacks.
+     *
+     * @param value The string to encode (can be empty).
+     * @return The encoded string, or {@code value} if there is
+     *         nothing to encode.  If the string to encode is
+     *         {@code null}, returns an empty string.
+     */
+    public static String encodeHeader(String value) {
+        if (value == null) {
+            return null;
+        }
+        final int length = value.length();
+        boolean needsEncoding = false;
+        for (int i = 0; i < length; i++) {
+            if (value.charAt(i) == '\r' || value.charAt(i) == '\n') {
+                needsEncoding = true;
+                break;
+            }
+        }
+        if (needsEncoding) {
+            CharArrayWriter writer = new CharArrayWriter();
+            for (int i = 0; i < length; i++) {
+                char c = value.charAt(i);
+                if (c == '\r') {
+                    writer.append("%0D");
+                } else if (c == '\n') {
+                    writer.append("%0A");
+                } else {
+                    writer.append(c);
+                }
+            }
+            return writer.toString();
+        }
+        return value;
+    }
 }
diff --git a/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java b/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
index 0a40da3403d9..a73a30f7b82c 100644
--- a/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/BytesRestResponseTests.java
@@ -34,6 +34,7 @@
 
 import static org.hamcrest.Matchers.contains;
 import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.notNullValue;
 
@@ -146,6 +147,26 @@ public void testConvert() throws IOException {
         assertTrue(stackTrace.contains("Caused by: ParsingException[foobar]"));
     }
 
+    public void testHeadersURLEncoded() throws Exception {
+        BytesRestResponse response = new BytesRestResponse(RestStatus.OK);
+        response.addHeader("empty", "");
+        response.addHeader("with-space", " abc");
+        response.addHeader("with-crlf", "\r\n");
+        response.addHeader("complicated", "\r\n \n \n <svg+onload=alert(1)>/bla/1");
+
+        response.getHeaders().forEach( (k,v) -> {
+            if (k.equals("empty")) {
+                assertThat(v.get(0), equalTo(""));
+            } else if (k.equals("with-space")) {
+                assertThat(v.get(0), equalTo(" abc"));
+            } else if (k.equals("with-crlf")) {
+                assertThat(v.get(0), equalTo("%0D%0A"));
+            } else if (k.equals("complicated")) {
+                assertThat(v.get(0), equalTo("%0D%0A %0A %0A <svg+onload=alert(1)>/bla/1"));
+            }
+        });
+    }
+
     public static class WithHeadersException extends ElasticsearchException {
 
         WithHeadersException() {
diff --git a/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java b/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
index 065b99ea5aee..b02a0ce834cc 100644
--- a/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/util/RestUtilsTests.java
@@ -145,6 +145,47 @@ public void testCrazyURL() {
         assertThat(params.size(), equalTo(1));
     }
 
+    public void testResponseHeaderURLEncodingNotNeeded() {
+        assertURLEncodingEquals(null);
+        assertURLEncodingEquals("");
+        assertURLEncodingEquals(" ");
+        assertURLEncodingEquals("abc");
+        assertURLEncodingEquals("123");
+        assertURLEncodingEquals("a1");
+        assertURLEncodingEquals("ZABC");
+        assertURLEncodingEquals("_abc");
+        assertURLEncodingEquals("-abc");
+        assertURLEncodingEquals("*abc");
+        assertURLEncodingEquals(".abc");
+        assertURLEncodingEquals(".");
+        assertURLEncodingEquals("_");
+        assertURLEncodingEquals("*");
+        assertURLEncodingEquals("-");
+    }
+
+    public void testResponseHeaderURLEncoding() {
+        String value = "\r\n";
+        String result = RestUtils.encodeHeader(value);
+        assertThat(result, equalTo("%0D%0A"));
+
+        value = "\r";
+        result = RestUtils.encodeHeader(value);
+        assertThat(result, equalTo("%0D"));
+
+        value = "\n";
+        result = RestUtils.encodeHeader(value);
+        assertThat(result, equalTo("%0A"));
+
+        value = "\r\n \n \n <svg+onload=alert(1)>/bla/1";
+        result = RestUtils.encodeHeader(value);
+        assertThat(result, equalTo("%0D%0A %0A %0A <svg+onload=alert(1)>/bla/1"));
+    }
+
+    private void assertURLEncodingEquals(final String value) {
+        final String result = RestUtils.encodeHeader(value);
+        assertThat(result, equalTo(value));
+    }
+
     private void assertCorsSettingRegexIsNull(String settingsValue) {
         assertThat(RestUtils.checkCorsSettingForRegex(settingsValue), is(nullValue()));
     }
