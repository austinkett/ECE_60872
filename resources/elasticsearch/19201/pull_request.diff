diff --git a/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java
index 2d73df76f07e..5860f88f79e0 100644
--- a/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java
+++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisRegistry.java
@@ -262,7 +262,6 @@ private void registerBuiltInTokenFilters(Map<String, AnalysisModule.AnalysisProv
     }
 
     private void registerBuiltInAnalyzer(Map<String, AnalysisModule.AnalysisProvider<AnalyzerProvider>> analyzers) {
-        analyzers.put("default", StandardAnalyzerProvider::new);
         analyzers.put("standard", StandardAnalyzerProvider::new);
         analyzers.put("standard_html_strip", StandardHtmlStripAnalyzerProvider::new);
         analyzers.put("simple", SimpleAnalyzerProvider::new);
diff --git a/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
index b9146df8c96e..98ae791028fa 100644
--- a/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
+++ b/core/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
@@ -58,16 +58,6 @@ public AnalysisService(IndexSettings indexSettings,
         this.tokenFilters = unmodifiableMap(tokenFilterFactoryFactories);
         analyzerProviders = new HashMap<>(analyzerProviders);
 
-        if (!analyzerProviders.containsKey("default")) {
-            analyzerProviders.put("default", new StandardAnalyzerProvider(indexSettings, null, "default", Settings.Builder.EMPTY_SETTINGS));
-        }
-        if (!analyzerProviders.containsKey("default_search")) {
-            analyzerProviders.put("default_search", analyzerProviders.get("default"));
-        }
-        if (!analyzerProviders.containsKey("default_search_quoted")) {
-            analyzerProviders.put("default_search_quoted", analyzerProviders.get("default_search"));
-        }
-
         Map<String, NamedAnalyzer> analyzers = new HashMap<>();
         for (Map.Entry<String, AnalyzerProvider> entry : analyzerProviders.entrySet()) {
             AnalyzerProvider analyzerFactory = entry.getValue();
@@ -121,6 +111,17 @@ public AnalysisService(IndexSettings indexSettings,
             }
         }
 
+        if (!analyzerProviders.containsKey("default")) {
+            AnalyzerProvider standardAnalyzerProvider = new StandardAnalyzerProvider(indexSettings, null, "default", Settings.Builder.EMPTY_SETTINGS);
+            analyzers.put("default", new NamedAnalyzer("default", standardAnalyzerProvider.scope(), standardAnalyzerProvider.get(), TextFieldMapper.Defaults.POSITION_INCREMENT_GAP));
+        }
+        if (!analyzerProviders.containsKey("default_search")) {
+            analyzers.put("default_search", analyzers.get("default"));
+        }
+        if (!analyzerProviders.containsKey("default_search_quoted")) {
+            analyzers.put("default_search_quoted", analyzers.get("default_search"));
+        }
+
         NamedAnalyzer defaultAnalyzer = analyzers.get("default");
         if (defaultAnalyzer == null) {
             throw new IllegalArgumentException("no default analyzer configured");
@@ -188,4 +189,5 @@ public CharFilterFactory charFilter(String name) {
     public TokenFilterFactory tokenFilter(String name) {
         return tokenFilters.get(name);
     }
+
 }
diff --git a/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java
index 6d5c3a8ed187..f00546ab6d4d 100644
--- a/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java
+++ b/core/src/main/java/org/elasticsearch/indices/analysis/PreBuiltAnalyzers.java
@@ -82,15 +82,6 @@ protected Analyzer create(Version version) {
         }
     },
 
-    DEFAULT(CachingStrategy.ELASTICSEARCH){
-        @Override
-        protected Analyzer create(Version version) {
-            // by calling get analyzer we are ensuring reuse of the same STANDARD analyzer for DEFAULT!
-            // this call does not create a new instance
-            return STANDARD.getAnalyzer(version);
-        }
-    },
-
     KEYWORD(CachingStrategy.ONE) {
         @Override
         protected Analyzer create(Version version) {
