diff --git a/rest-api-spec/test/percolate/17_empty.yaml b/rest-api-spec/test/percolate/17_empty.yaml
new file mode 100644
index 000000000000..0cd1ac5bb8d3
--- /dev/null
+++ b/rest-api-spec/test/percolate/17_empty.yaml
@@ -0,0 +1,31 @@
+---
+"Basic percolation tests on an empty cluster":
+
+  - do:
+      indices.create:
+        index: test_index
+
+  - do:
+      indices.refresh: {}
+
+  - do:
+      percolate:
+        index: test_index
+        type:  test_type
+        body:
+          doc:
+            foo: bar
+
+  - match: {'total': 0}
+  - match: {'matches': []}
+
+  - do:
+      count_percolate:
+        index: test_index
+        type:  test_type
+        body:
+          doc:
+            foo: bar
+
+  - is_false:  matches
+  - match: {'total': 0}
diff --git a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
index dd2edcfb83d1..787e9137d1b7 100644
--- a/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
+++ b/src/main/java/org/elasticsearch/action/percolate/PercolateResponse.java
@@ -42,7 +42,7 @@
  */
 public class PercolateResponse extends BroadcastOperationResponse implements Iterable<PercolateResponse.Match>, ToXContent {
 
-    private static final Match[] EMPTY = new Match[0];
+    public static final Match[] EMPTY = new Match[0];
 
     private long tookInMillis;
     private Match[] matches;
@@ -60,10 +60,10 @@ public PercolateResponse(int totalShards, int successfulShards, int failedShards
         this.aggregations = aggregations;
     }
 
-    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, long tookInMillis) {
+    public PercolateResponse(int totalShards, int successfulShards, int failedShards, List<ShardOperationFailedException> shardFailures, long tookInMillis, Match[] matches) {
         super(totalShards, successfulShards, failedShards, shardFailures);
         this.tookInMillis = tookInMillis;
-        this.matches = EMPTY;
+        this.matches = matches;
     }
 
     PercolateResponse() {
@@ -116,7 +116,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         RestActions.buildBroadcastShardsHeader(builder, this);
 
         builder.field(Fields.TOTAL, count);
-        if (matches.length != 0) {
+        if (matches != null) {
             builder.startArray(Fields.MATCHES);
             boolean justIds = "ids".equals(params.param("percolate_format"));
             if (justIds) {
diff --git a/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
index 0a27d598b391..f8bc3776742f 100644
--- a/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
+++ b/src/main/java/org/elasticsearch/action/percolate/TransportPercolateAction.java
@@ -155,7 +155,8 @@ public static PercolateResponse reduce(PercolateRequest request, AtomicReference
 
         if (shardResults == null) {
             long tookInMillis = System.currentTimeMillis() - request.startTime;
-            return new PercolateResponse(shardsResponses.length(), successfulShards, failedShards, shardFailures, tookInMillis);
+            PercolateResponse.Match[] matches = request.onlyCount() ? null : PercolateResponse.EMPTY;
+            return new PercolateResponse(shardsResponses.length(), successfulShards, failedShards, shardFailures, tookInMillis, matches);
         } else {
             PercolatorService.ReduceResult result = percolatorService.reduce(percolatorTypeId, shardResults);
             long tookInMillis = System.currentTimeMillis() - request.startTime;
diff --git a/src/main/java/org/elasticsearch/percolator/PercolatorService.java b/src/main/java/org/elasticsearch/percolator/PercolatorService.java
index e89498bce497..0a28aaea939a 100644
--- a/src/main/java/org/elasticsearch/percolator/PercolatorService.java
+++ b/src/main/java/org/elasticsearch/percolator/PercolatorService.java
@@ -811,7 +811,7 @@ private void queryBasedPercolating(Engine.Searcher percolatorSearcher, Percolate
 
         public ReduceResult(long count, InternalFacets reducedFacets, InternalAggregations reducedAggregations) {
             this.count = count;
-            this.matches = EMPTY;
+            this.matches = null;
             this.reducedFacets = reducedFacets;
             this.reducedAggregations = reducedAggregations;
         }
