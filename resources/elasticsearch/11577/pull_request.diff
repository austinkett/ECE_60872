diff --git a/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java b/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java
index 3fbc30c07c6b..ed7339c7282d 100644
--- a/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java
+++ b/src/main/java/org/elasticsearch/common/lucene/search/XMoreLikeThis.java
@@ -39,10 +39,7 @@
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.*;
-import org.apache.lucene.search.BooleanClause;
-import org.apache.lucene.search.BooleanQuery;
-import org.apache.lucene.search.Query;
-import org.apache.lucene.search.TermQuery;
+import org.apache.lucene.search.*;
 import org.apache.lucene.search.similarities.DefaultSimilarity;
 import org.apache.lucene.search.similarities.TFIDFSimilarity;
 import org.apache.lucene.util.BytesRef;
@@ -827,9 +824,11 @@ private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) thro
                 continue;
             }
 
-            DocsEnum docs = termsEnum.docs(null, null);
-            final int freq = docs.freq();
-
+            final DocsEnum docs = termsEnum.docs(null, null);
+            int freq = 0;
+            while(docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {
+                freq += docs.freq();
+            }
             // increment frequency
             Int cnt = termFreqMap.get(term);
             if (cnt == null) {
diff --git a/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java
index c4d77d7486c1..93b7bd146920 100644
--- a/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java
+++ b/src/main/java/org/elasticsearch/index/query/MoreLikeThisQueryParser.java
@@ -22,6 +22,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import org.apache.lucene.analysis.Analyzer;
+import org.apache.lucene.index.*;
 import org.apache.lucene.queries.TermsFilter;
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
@@ -43,10 +44,7 @@
 import org.elasticsearch.search.internal.SearchContext;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 import static org.elasticsearch.index.mapper.Uid.createUidAsBytes;
 
@@ -159,7 +157,7 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
                 } else if ("fields".equals(currentFieldName)) {
                     moreLikeFields = Lists.newLinkedList();
                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {
-                        moreLikeFields.add(parseContext.indexName(parser.text()));
+                        moreLikeFields.add(parser.text());
                     }
                 } else if (Fields.DOCUMENT_IDS.match(currentFieldName, parseContext.parseFlags())) {
                     while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) {
@@ -204,7 +202,12 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
         if (moreLikeFields.isEmpty()) {
             return null;
         }
-        mltQuery.setMoreLikeFields(moreLikeFields.toArray(Strings.EMPTY_ARRAY));
+
+        List<String> moreLikeThisIndexFields = new ArrayList<>();
+        for (String field : moreLikeFields) {
+            moreLikeThisIndexFields.add(parseContext.indexName(field));
+        }
+        mltQuery.setMoreLikeFields(moreLikeThisIndexFields.toArray(new String[moreLikeThisIndexFields.size()]));
 
         // support for named query
         if (queryName != null) {
@@ -237,6 +240,21 @@ public Query parse(QueryParseContext parseContext) throws IOException, QueryPars
             }
             // fetching the items with multi-termvectors API
             org.apache.lucene.index.Fields[] likeFields = fetchService.fetch(items);
+            for (int i = 0; i < likeFields.length; i++) {
+                final Map<String, List<String>> fieldToIndexName = new HashMap<>();
+                for (String field : likeFields[i]) {
+                    String indexName = parseContext.indexName(field);
+                    if (indexName.equals(field) == false) {
+                        if (fieldToIndexName.containsKey(indexName) == false) {
+                            fieldToIndexName.put(indexName, new ArrayList<String>());
+                        }
+                        fieldToIndexName.get(indexName).add(field);
+                    }
+                }
+                if (fieldToIndexName.isEmpty() == false) {
+                    likeFields[i] = new MappedIndexedFields(likeFields[i], fieldToIndexName);
+                }
+            }
             items.copyContextAndHeadersFrom(SearchContext.current());
             mltQuery.setLikeText(likeFields);
 
@@ -296,4 +314,50 @@ private void handleExclude(BooleanQuery boolQuery, MultiTermVectorsRequest likeI
             boolQuery.add(query, BooleanClause.Occur.MUST_NOT);
         }
     }
+
+    /**
+     * This class converts the actual path name to the index name if they happen to be different.
+     * This is needed if the "path" : "just_name" feature is used in mappings where paths like `person.name` are indexed
+     * into just the leave name of the path ie. in this case `name`. For this case we need to somehow map those names to
+     * the actual fields to get the right statistics from the index when we rewrite the MLT query otherwise it will rewrite against
+     * the full path name which is not present in the index at all in that case.
+     * his will result in an empty query and no results are returned
+     */
+    private static class MappedIndexedFields extends org.apache.lucene.index.Fields {
+        private final Map<String, List<String>> fieldToIndexName;
+        private final org.apache.lucene.index.Fields in;
+
+        MappedIndexedFields(org.apache.lucene.index.Fields in, Map<String, List<String>> fieldToIndexName) {
+            this.in = in;
+            this.fieldToIndexName = Collections.unmodifiableMap(fieldToIndexName);
+        }
+
+        @Override
+        public Iterator<String> iterator() {
+            return fieldToIndexName.keySet().iterator();
+        }
+
+        @Override
+        public Terms terms(String field) throws IOException {
+            List<String> indexNames = fieldToIndexName.get(field);
+            if (indexNames == null) {
+                return in.terms(field);
+            } if (indexNames.size() == 1) {
+                return in.terms(indexNames.get(0));
+            }else {
+                final Terms[] terms = new Terms[indexNames.size()];
+                final ReaderSlice[] slice = new ReaderSlice[indexNames.size()];
+                for (int i = 0; i < terms.length; i++) {
+                    terms[i] = in.terms(indexNames.get(i));
+                    slice[i]= new ReaderSlice(0, 1, i);
+                }
+                return new MultiTerms(terms, slice);
+             }
+        }
+
+        @Override
+        public int size() {
+            return fieldToIndexName.size();
+        }
+    }
 }
diff --git a/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java
index 2811e15d80cd..6df35f84ca96 100644
--- a/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java
+++ b/src/test/java/org/elasticsearch/mlt/MoreLikeThisActionTests.java
@@ -39,6 +39,7 @@
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.junit.Test;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -666,4 +667,105 @@ public void testMoreLikeThisMalformedArtificialDocs() throws Exception {
         assertSearchResponse(response);
         assertHitCount(response, 1);
     }
+
+
+    public void testJustPath() throws IOException, ExecutionException, InterruptedException {
+        XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1")
+                .startObject("properties")
+                    .startObject("morelikethis")
+                        .field("path", "just_name")
+                        .startObject("properties")
+                            .startObject("from")
+                                .field("type", "string")
+                                .field("path", "just_name")
+                            .endObject()
+                            .startObject("text")
+                                .field("type", "string")
+                                .field("path", "just_name")
+                            .endObject()
+                        .endObject()
+                    .endObject()
+                    .startObject("another_field")
+                        .field("path", "just_name")
+                            .startObject("properties")
+                                .startObject("text")
+                                    .field("type", "string")
+                                    .field("path", "just_name")
+                                .endObject()
+                            .endObject()
+                    .endObject()
+                .endObject().endObject();
+
+        assertAcked(prepareCreate("test")
+                .addMapping("type1", mapping));
+        ensureGreen("test");
+        indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("{ \"morelikethis\"  : { \"text\" : \"hello world\" , \"from\" : \"elasticsearch\" }, \"another_field\"  : { \"text\" : \"foo bar\" }}"),
+                client().prepareIndex("test", "type1", "2").setSource(" { \"morelikethis\" : { \"text\" : \"goodby moon\" , \"from\" : \"elasticsearch\" }, \"another_field\"  : { \"text\" : \"foo bar\" }}"));
+
+        MoreLikeThisQueryBuilder mltQuery = moreLikeThisQuery()
+                .docs((Item)new Item("test", "type1", "1").fields("morelikethis.text"))
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        SearchResponse response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 1);
+
+        mltQuery = moreLikeThisQuery()
+                .docs((Item)new Item("test", "type1", "1").fields("morelikethis.text", "another_field.text"))
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 2);
+
+        mltQuery = moreLikeThisQuery("morelikethis.text", "another_field.text")
+                .docs((Item) new Item("test", "type1", "1"))
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 2);
+
+        mltQuery = moreLikeThisQuery("morelikethis.text", "another_field.text")
+                .likeText("hello world foo bar")
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 2);
+
+        mltQuery = moreLikeThisQuery("text")
+                .likeText("hello world foo bar")
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 2);
+
+        mltQuery = moreLikeThisQuery()
+                .docs((Item)new Item("test", "type1", "1").fields("morelikethis.text", "morelikethis.from"))
+                .minTermFreq(0)
+                .minDocFreq(0)
+                .include(true)
+                .minimumShouldMatch("1%");
+        response = client().prepareSearch("test").setTypes("type1")
+                .setQuery(mltQuery).get();
+        assertSearchResponse(response);
+        assertHitCount(response, 2);
+    }
 }
