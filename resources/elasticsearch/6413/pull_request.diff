diff --git a/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java
index 7bd2feaf860e..b5e31a56feac 100644
--- a/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java
+++ b/src/main/java/org/elasticsearch/index/fielddata/ordinals/EmptyOrdinals.java
@@ -19,7 +19,6 @@
 
 package org.elasticsearch.index.fielddata.ordinals;
 
-import org.apache.lucene.util.LongsRef;
 import org.elasticsearch.ElasticsearchIllegalStateException;
 
 /**
@@ -39,7 +38,7 @@ public boolean isMultiValued() {
 
     @Override
     public long getMaxOrd() {
-        return 1;
+        return 0;
     }
 
     @Override
@@ -48,7 +47,6 @@ public Docs ordinals() {
     }
 
     public static class Docs extends Ordinals.AbstractDocs {
-        public static final LongsRef EMPTY_LONGS_REF = new LongsRef();
 
         public Docs(EmptyOrdinals parent) {
             super(parent);
diff --git a/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java
index 7ede82bf9425..1fcfc4bde71b 100644
--- a/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java
+++ b/src/main/java/org/elasticsearch/search/aggregations/metrics/cardinality/CardinalityAggregator.java
@@ -93,6 +93,10 @@ private Collector createCollector(AtomicReaderContext reader) {
         if (bytesValues instanceof BytesValues.WithOrdinals) {
             BytesValues.WithOrdinals values = (BytesValues.WithOrdinals) bytesValues;
             final long maxOrd = values.ordinals().getMaxOrd();
+            if (maxOrd == 0) {
+                return new EmptyCollector();
+            }
+
             final long ordinalsMemoryUsage = OrdinalsCollector.memoryOverhead(maxOrd);
             final long countsMemoryUsage = HyperLogLogPlusPlus.memoryUsage(precision);
             // only use ordinals if they don't increase memory usage by more than 25%
@@ -166,6 +170,24 @@ protected void doClose() {
 
     }
 
+    private static class EmptyCollector implements Collector {
+
+        @Override
+        public void collect(int doc, long bucketOrd) {
+            // no-op
+        }
+
+        @Override
+        public void postCollect() {
+            // no-op
+        }
+
+        @Override
+        public void close() throws ElasticsearchException {
+            // no-op
+        }
+    }
+
     private static class DirectCollector implements Collector {
 
         private final LongValues hashes;
diff --git a/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java b/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
index f83a17a78693..8e1c5814258a 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/metrics/CardinalityTests.java
@@ -123,6 +123,13 @@ public void setupSuiteScopeCluster() throws Exception {
         }
         indexRandom(true, builders);
         createIndex("idx_unmapped");
+
+        IndexRequestBuilder[] dummyDocsBuilder = new IndexRequestBuilder[10];
+        for (int i = 0; i < dummyDocsBuilder.length; i++) {
+            dummyDocsBuilder[i] = client().prepareIndex("idx", "type").setSource("a_field", "1");
+        }
+        indexRandom(true, dummyDocsBuilder);
+
         ensureSearchable();
     }
 
