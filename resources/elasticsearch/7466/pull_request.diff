diff --git a/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressedStreamOutput.java b/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressedStreamOutput.java
index 9fc8705faa18..944143b312b6 100644
--- a/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressedStreamOutput.java
+++ b/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressedStreamOutput.java
@@ -22,7 +22,6 @@
 import com.ning.compress.BufferRecycler;
 import com.ning.compress.lzf.ChunkEncoder;
 import com.ning.compress.lzf.LZFChunk;
-import com.ning.compress.lzf.util.ChunkEncoderFactory;
 import org.elasticsearch.common.compress.CompressedStreamOutput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 
@@ -35,12 +34,12 @@
     private final BufferRecycler recycler;
     private final ChunkEncoder encoder;
 
-    public LZFCompressedStreamOutput(StreamOutput out) throws IOException {
+    public LZFCompressedStreamOutput(StreamOutput out, ChunkEncoder encoder) throws IOException {
         super(out, LZFCompressorContext.INSTANCE);
         this.recycler = BufferRecycler.instance();
         this.uncompressed = this.recycler.allocOutputBuffer(LZFChunk.MAX_CHUNK_LEN);
         this.uncompressedLength = LZFChunk.MAX_CHUNK_LEN;
-        this.encoder = ChunkEncoderFactory.safeInstance();
+        this.encoder = encoder;
     }
 
     @Override
diff --git a/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressor.java b/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressor.java
index 7b8cf69bbe25..d333b3ef4a03 100644
--- a/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressor.java
+++ b/src/main/java/org/elasticsearch/common/compress/lzf/LZFCompressor.java
@@ -20,9 +20,11 @@
 package org.elasticsearch.common.compress.lzf;
 
 import com.ning.compress.lzf.ChunkDecoder;
+import com.ning.compress.lzf.ChunkEncoder;
 import com.ning.compress.lzf.LZFChunk;
 import com.ning.compress.lzf.LZFEncoder;
 import com.ning.compress.lzf.util.ChunkDecoderFactory;
+import com.ning.compress.lzf.util.ChunkEncoderFactory;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.util.Constants;
 import org.elasticsearch.common.bytes.BytesReference;
@@ -46,11 +48,16 @@
 
     public static final String TYPE = "lzf";
 
+    private ChunkEncoder encoder;
+
     private ChunkDecoder decoder;
 
     public LZFCompressor() {
+        this.encoder = ChunkEncoderFactory.safeInstance();
         this.decoder = ChunkDecoderFactory.safeInstance();
-        Loggers.getLogger(LZFCompressor.class).debug("using [{}] decoder", this.decoder.getClass().getSimpleName());
+        Loggers.getLogger(LZFCompressor.class).debug("using encoder [{}] and decoder[{}] ",
+                this.encoder.getClass().getSimpleName(),
+                this.decoder.getClass().getSimpleName());
     }
 
     @Override
@@ -110,7 +117,7 @@ public boolean isCompressed(IndexInput in) throws IOException {
 
     @Override
     public byte[] compress(byte[] data, int offset, int length) throws IOException {
-        return LZFEncoder.encode(data, offset, length);
+        return LZFEncoder.encode(encoder, data, offset, length);
     }
 
     @Override
@@ -120,7 +127,7 @@ public CompressedStreamInput streamInput(StreamInput in) throws IOException {
 
     @Override
     public CompressedStreamOutput streamOutput(StreamOutput out) throws IOException {
-        return new LZFCompressedStreamOutput(out);
+        return new LZFCompressedStreamOutput(out, encoder);
     }
 
     @Override
