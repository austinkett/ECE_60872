diff --git a/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
index ba49f1165a48..6b77d6dae648 100644
--- a/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
+++ b/core/src/main/java/org/elasticsearch/common/geo/GeoDistance.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.common.geo;
 
+import org.elasticsearch.Version;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Writeable;
@@ -40,7 +41,26 @@
 
     /** Creates a GeoDistance instance from an input stream */
     public static GeoDistance readFromStream(StreamInput in) throws IOException {
+        Version clientVersion = in.getVersion();
         int ord = in.readVInt();
+        // bwc client deprecation for FACTOR and SLOPPY_ARC
+        if (clientVersion.before(Version.V_5_3_3)) {
+            switch (ord) {
+                case 0: return PLANE;
+                case 1: // FACTOR uses PLANE
+                    // bwc client deprecation for FACTOR
+                    DEPRECATION_LOGGER.deprecated("[factor] is deprecated. Using [plane] instead.");
+                    return PLANE;
+                case 2: return ARC;
+                case 3: // SLOPPY_ARC uses ARC
+                    // bwc client deprecation for SLOPPY_ARC
+                    DEPRECATION_LOGGER.deprecated("[sloppy_arc] is deprecated. Using [arc] instead.");
+                    return ARC;
+                default:
+                    throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");
+            }
+        }
+
         if (ord < 0 || ord >= values().length) {
             throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");
         }
@@ -50,6 +70,20 @@ public static GeoDistance readFromStream(StreamInput in) throws IOException {
     /** Writes an instance of a GeoDistance object to an output stream */
     @Override
     public void writeTo(StreamOutput out) throws IOException {
+        Version clientVersion = out.getVersion();
+        int ord = this.ordinal();
+        if (clientVersion.before(Version.V_5_3_3)) {
+            switch (ord) {
+                case 0:
+                    out.write(0);  // write PLANE ordinal
+                    return;
+                case 1:
+                    out.write(2);  // write bwc ARC ordinal
+                    return;
+                default:
+                    throw new IOException("Unknown GeoDistance ordinal [" + ord + "]");
+            }
+        }
         out.writeVInt(this.ordinal());
     }
 
diff --git a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
index 6624a91a6c29..ae9042237ac7 100644
--- a/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
+++ b/core/src/test/java/org/elasticsearch/common/geo/GeoDistanceTests.java
@@ -19,16 +19,19 @@
 package org.elasticsearch.common.geo;
 
 import org.apache.lucene.geo.Rectangle;
+import org.elasticsearch.Version;
 import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.unit.DistanceUnit;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.test.VersionUtils;
 
 import java.io.IOException;
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.isOneOf;
 import static org.hamcrest.Matchers.lessThan;
 
 /**
@@ -67,6 +70,37 @@ public void testInvalidReadFrom() throws Exception {
         }
     }
 
+    public void testReadFromSerializationBWC() throws Exception {
+        int ordinal = randomInt(3);
+        try (BytesStreamOutput out = new BytesStreamOutput()) {
+            out.writeVInt(ordinal);
+            try (StreamInput in = out.bytes().streamInput()) {
+                // set client version (should this be done in .streamInput()?)
+                in.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.V_5_3_2));
+                GeoDistance copy = GeoDistance.readFromStream(in);
+                assertThat(copy, isOneOf(GeoDistance.PLANE, GeoDistance.ARC));
+                if (ordinal == 1) {
+                    assertWarnings("[factor] is deprecated. Using [plane] instead.");
+                } else if (ordinal == 3) {
+                    assertWarnings("[sloppy_arc] is deprecated. Using [arc] instead.");
+                }
+            }
+        }
+    }
+
+    public void testWriteToSerializationBWC() throws Exception {
+        GeoDistance geoDistance = randomFrom(GeoDistance.PLANE, GeoDistance.ARC);
+        try (BytesStreamOutput out = new BytesStreamOutput()) {
+            out.setVersion(VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.V_5_3_2));
+            geoDistance.writeTo(out);
+            try (StreamInput in = out.bytes().streamInput()) {
+                in.setVersion(out.getVersion());
+                GeoDistance copy = GeoDistance.readFromStream(in);
+                assertThat(copy, isOneOf(GeoDistance.PLANE, GeoDistance.ARC));
+            }
+        }
+    }
+
     public void testDistanceCheck() {
         // Note, is within is an approximation, so, even though 0.52 is outside 50mi, we still get "true"
         double radius = DistanceUnit.convert(50, DistanceUnit.MILES, DistanceUnit.METERS);
