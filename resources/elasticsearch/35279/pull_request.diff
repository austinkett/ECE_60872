diff --git a/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
index 424e640983dd..76e80a7d4b2e 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/JsonFieldMapper.java
@@ -360,6 +360,15 @@ public void setSplitQueriesOnWhitespace(boolean splitQueriesOnWhitespace) {
             this.splitQueriesOnWhitespace = splitQueriesOnWhitespace;
         }
 
+        @Override
+        public Object valueForDisplay(Object value) {
+            if (value == null) {
+                return null;
+            }
+            BytesRef binaryValue = (BytesRef) value;
+            return binaryValue.utf8ToString();
+        }
+
         @Override
         public Query existsQuery(QueryShardContext context) {
             return new TermQuery(new Term(FieldNamesFieldMapper.NAME, name()));
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/RootJsonFieldTypeTests.java b/server/src/test/java/org/elasticsearch/index/mapper/RootJsonFieldTypeTests.java
index c1f5c52bc3ff..06ab215a0473 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/RootJsonFieldTypeTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/RootJsonFieldTypeTests.java
@@ -45,6 +45,14 @@ protected RootJsonFieldType createDefaultFieldType() {
         return new RootJsonFieldType();
     }
 
+    public void testValueForDisplay() {
+        RootJsonFieldType ft = createDefaultFieldType();
+
+        String fieldValue = "{ \"key\": \"value\" }";
+        BytesRef storedValue = new BytesRef(fieldValue);
+        assertEquals(fieldValue, ft.valueForDisplay(storedValue));
+    }
+
     public void testTermQuery() {
         RootJsonFieldType ft = createDefaultFieldType();
         ft.setName("field");
diff --git a/server/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java b/server/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
index 1a86b3b1da28..8e1f32d3a9a3 100644
--- a/server/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
+++ b/server/src/test/java/org/elasticsearch/search/fields/SearchFieldsIT.java
@@ -1180,4 +1180,47 @@ public void testLoadMetadata() throws Exception {
         assertThat(fields.get("_routing").isMetadataField(), equalTo(true));
         assertThat(fields.get("_routing").getValue().toString(), equalTo("1"));
     }
+
+    public void testStoredJsonField() throws Exception {
+        XContentBuilder mapping = XContentFactory.jsonBuilder()
+            .startObject()
+                .startObject("_doc")
+                    .startObject("properties")
+                        .startObject("json_field")
+                            .field("type", "json")
+                            .field("store", true)
+                        .endObject()
+                    .endObject()
+                .endObject()
+            .endObject();
+        assertAcked(prepareCreate("test").addMapping("_doc", mapping));
+        ensureGreen("test");
+
+        XContentBuilder source = XContentFactory.jsonBuilder()
+            .startObject()
+                .startObject("json_field")
+                    .field("key", "value")
+                .endObject()
+            .endObject();
+        index("test", "_doc", "1", source);
+        refresh("test");
+
+        SearchResponse response = client().prepareSearch("test")
+            .addStoredField("json_field")
+            .get();
+        assertSearchResponse(response);
+        assertHitCount(response, 1);
+
+        Map<String, DocumentField> fields = response.getHits().getAt(0).getFields();
+        DocumentField field = fields.get("json_field");
+        assertEquals("json_field", field.getName());
+
+        // We make sure to pretty-print here, since the field is always stored in pretty-printed format.
+        BytesReference storedValue = BytesReference.bytes(XContentFactory.jsonBuilder()
+            .prettyPrint()
+            .startObject()
+                .field("key", "value")
+            .endObject());
+        assertEquals(storedValue.utf8ToString(), field.getValue());
+    }
 }
