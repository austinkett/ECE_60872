diff --git a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/mixed_cluster/10_basic.yml b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/mixed_cluster/10_basic.yml
index f50a3fd9ea42..2605836f8573 100644
--- a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/mixed_cluster/10_basic.yml
+++ b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/mixed_cluster/10_basic.yml
@@ -67,3 +67,9 @@
                 field3: value
   - match: { hits.total: 1 }
   - match: { hits.hits.0._id: q3 }
+
+---
+"Index with _all is available":
+  - do:
+      indices.get:
+        index: all-index
diff --git a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/old_cluster/10_basic.yml b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/old_cluster/10_basic.yml
index ffa9e0ce2a6f..9e06f767d489 100644
--- a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/old_cluster/10_basic.yml
+++ b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/old_cluster/10_basic.yml
@@ -203,3 +203,21 @@
       tasks.get:
         wait_for_completion: true
         task_id: $task
+
+---
+"Create an index with _all explicitly disabled":
+  - skip:
+      features: warnings
+  - do:
+      warnings:
+        - "[_all] is deprecated in 6.0+ and will be removed in 7.0. As a replacement, you can use [copy_to] on mapping fields to create your own catch all field."
+      indices.create:
+        index: all-index
+        body:
+          mappings:
+            type:
+              _all:
+                enabled: false
+              properties:
+                field:
+                  type: text
diff --git a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/upgraded_cluster/10_basic.yml b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/upgraded_cluster/10_basic.yml
index 39c72dfd5334..508a898e0cdb 100644
--- a/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/upgraded_cluster/10_basic.yml
+++ b/qa/rolling-upgrade/src/test/resources/rest-api-spec/test/upgraded_cluster/10_basic.yml
@@ -125,3 +125,17 @@
         wait_for_completion: true
         task_id: $task_id
   - match: { task.headers.X-Opaque-Id: "Reindexing Again" }
+
+---
+"Index with _all is available":
+  - do:
+      indices.get:
+        index: all-index
+
+  - do:
+      indices.get_mapping:
+        index: all-index
+
+  - is_true: all-index.mappings._all
+  - match: { all-index.mappings._all.enabled: false}
+
diff --git a/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java
index 67b3fe048bea..c7415391675f 100644
--- a/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java
+++ b/server/src/main/java/org/elasticsearch/action/admin/indices/mapping/get/TransportGetFieldMappingsIndexAction.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.action.admin.indices.mapping.get;
 
 import org.elasticsearch.ElasticsearchException;
+import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.indices.mapping.get.GetFieldMappingsResponse.FieldMappingMetaData;
 import org.elasticsearch.action.support.ActionFilters;
 import org.elasticsearch.action.support.single.shard.TransportSingleShardAction;
@@ -91,7 +92,8 @@ protected ShardsIterator shards(ClusterState state, InternalRequest request) {
     protected GetFieldMappingsResponse shardOperation(final GetFieldMappingsIndexRequest request, ShardId shardId) {
         assert shardId != null;
         IndexService indexService = indicesService.indexServiceSafe(shardId.getIndex());
-        Predicate<String> metadataFieldPredicate = indicesService::isMetaDataField;
+        Version indexCreatedVersion = indexService.mapperService().getIndexSettings().getIndexVersionCreated();
+        Predicate<String> metadataFieldPredicate = (f) -> indicesService.isMetaDataField(indexCreatedVersion, f);
         Predicate<String> fieldPredicate = metadataFieldPredicate.or(indicesService.getFieldFilter().apply(shardId.getIndexName()));
 
         DocumentMapper mapper = indexService.mapperService().documentMapper();
diff --git a/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java
index c46933578f16..01c21544047e 100644
--- a/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java
+++ b/server/src/main/java/org/elasticsearch/action/fieldcaps/TransportFieldCapabilitiesIndexAction.java
@@ -83,7 +83,8 @@ protected FieldCapabilitiesIndexResponse shardOperation(final FieldCapabilitiesI
         for (String field : fieldNames) {
             MappedFieldType ft = mapperService.fullName(field);
             if (ft != null) {
-                if (indicesService.isMetaDataField(field) || fieldPredicate.test(ft.name())) {
+                if (indicesService.isMetaDataField(mapperService.getIndexSettings().getIndexVersionCreated(), field)
+                        || fieldPredicate.test(ft.name())) {
                     FieldCapabilities fieldCap = new FieldCapabilities(field, ft.typeName(), ft.isSearchable(), ft.isAggregatable());
                     responseMap.put(field, fieldCap);
                 } else {
diff --git a/server/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java
new file mode 100644
index 000000000000..1427e67c5389
--- /dev/null
+++ b/server/src/main/java/org/elasticsearch/index/mapper/AllFieldMapper.java
@@ -0,0 +1,175 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.index.mapper;
+
+import org.apache.lucene.index.IndexOptions;
+import org.apache.lucene.index.IndexableField;
+import org.apache.lucene.search.MatchNoDocsQuery;
+import org.apache.lucene.search.Query;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.common.xcontent.support.XContentMapValues;
+import org.elasticsearch.index.query.QueryShardContext;
+
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Noop mapper that ensures that mappings created in 6x that explicitly disable the _all field
+ * can be restored in this version.
+ *
+ * TODO: Remove in 8
+ */
+public class AllFieldMapper extends MetadataFieldMapper {
+    public static final String NAME = "_all";
+    public static final String CONTENT_TYPE = "_all";
+
+    public static class Defaults {
+        public static final MappedFieldType FIELD_TYPE = new AllFieldType();
+
+        static {
+            FIELD_TYPE.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);
+            FIELD_TYPE.setTokenized(true);
+            FIELD_TYPE.setName(NAME);
+            FIELD_TYPE.freeze();
+        }
+    }
+
+    public static class Builder extends MetadataFieldMapper.Builder<Builder, AllFieldMapper> {
+        private boolean disableExplicit = false;
+
+        public Builder(MappedFieldType existing) {
+            super(NAME, existing == null ? Defaults.FIELD_TYPE : existing, Defaults.FIELD_TYPE);
+            builder = this;
+        }
+
+        private Builder setDisableExplicit() {
+            this.disableExplicit = true;
+            return this;
+        }
+
+        @Override
+        public AllFieldMapper build(BuilderContext context) {
+            return new AllFieldMapper(fieldType, context.indexSettings(), disableExplicit);
+        }
+    }
+
+    public static class TypeParser implements MetadataFieldMapper.TypeParser {
+        @Override
+        public MetadataFieldMapper.Builder<?,?> parse(String name, Map<String, Object> node,
+                                                 ParserContext parserContext) throws MapperParsingException {
+            Builder builder = new Builder(parserContext.mapperService().fullName(NAME));
+            for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext();) {
+                Map.Entry<String, Object> entry = iterator.next();
+                String fieldName = entry.getKey();
+                if (fieldName.equals("enabled")) {
+                    boolean enabled = XContentMapValues.nodeBooleanValue(entry.getValue(), "enabled");
+                    if (enabled) {
+                        throw new IllegalArgumentException("[_all] is disabled in this version.");
+                    }
+                    builder.setDisableExplicit();
+                    iterator.remove();
+                }
+            }
+            return builder;
+        }
+
+        @Override
+        public MetadataFieldMapper getDefault(MappedFieldType fieldType, ParserContext context) {
+            final Settings indexSettings = context.mapperService().getIndexSettings().getSettings();
+            return new AllFieldMapper(indexSettings, Defaults.FIELD_TYPE, false);
+        }
+    }
+
+    static final class AllFieldType extends StringFieldType {
+        AllFieldType() {
+        }
+
+        protected AllFieldType(AllFieldType ref) {
+            super(ref);
+        }
+
+        @Override
+        public MappedFieldType clone() {
+            return new AllFieldType(this);
+        }
+
+        @Override
+        public String typeName() {
+            return CONTENT_TYPE;
+        }
+
+        @Override
+        public Query existsQuery(QueryShardContext context) {
+            return new MatchNoDocsQuery();
+        }
+    }
+
+    private final boolean disableExplicit;
+
+    private AllFieldMapper(Settings indexSettings, MappedFieldType existing, boolean disableExplicit) {
+        this(existing.clone(), indexSettings, disableExplicit);
+    }
+
+    private AllFieldMapper(MappedFieldType fieldType, Settings indexSettings, boolean disableExplicit) {
+        super(NAME, fieldType, Defaults.FIELD_TYPE, indexSettings);
+        this.disableExplicit = disableExplicit;
+    }
+
+    @Override
+    public void preParse(ParseContext context) throws IOException {
+    }
+
+    @Override
+    public void postParse(ParseContext context) throws IOException {
+        super.parse(context);
+    }
+
+    @Override
+    public void parse(ParseContext context) throws IOException {
+        // we parse in post parse
+    }
+
+    @Override
+    protected void parseCreateField(ParseContext context, List<IndexableField> fields) throws IOException {
+        // noop mapper
+        return;
+    }
+
+    @Override
+    protected String contentType() {
+        return CONTENT_TYPE;
+    }
+
+    @Override
+    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
+        boolean includeDefaults = params.paramAsBoolean("include_defaults", false);
+        if (includeDefaults || disableExplicit) {
+            builder.startObject(CONTENT_TYPE);
+            if (disableExplicit) {
+                builder.field("enabled", false);
+            }
+            builder.endObject();
+        }
+        return builder;
+    }
+}
diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java
index 058cf68e8e1f..044e65c7ec6f 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapper.java
@@ -27,6 +27,7 @@
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.ElasticsearchGenerationException;
+import org.elasticsearch.Version;
 import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.compress.CompressedXContent;
 import org.elasticsearch.common.settings.Settings;
@@ -73,7 +74,9 @@ public Builder(RootObjectMapper.Builder builder, MapperService mapperService) {
 
             final String type = rootObjectMapper.name();
             final DocumentMapper existingMapper = mapperService.documentMapper(type);
-            final Map<String, TypeParser> metadataMapperParsers = mapperService.mapperRegistry.getMetadataMapperParsers();
+            final Version indexCreatedVersion = mapperService.getIndexSettings().getIndexVersionCreated();
+            final Map<String, TypeParser> metadataMapperParsers =
+                mapperService.mapperRegistry.getMetadataMapperParsers(indexCreatedVersion);
             for (Map.Entry<String, MetadataFieldMapper.TypeParser> entry : metadataMapperParsers.entrySet()) {
                 final String name = entry.getKey();
                 final MetadataFieldMapper existingMetadataMapper = existingMapper == null
diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java
index e388dd7ebcd0..db7954e9bd76 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentMapperParser.java
@@ -65,8 +65,8 @@ public DocumentMapperParser(IndexSettings indexSettings, MapperService mapperSer
         this.similarityService = similarityService;
         this.queryShardContextSupplier = queryShardContextSupplier;
         this.typeParsers = mapperRegistry.getMapperParsers();
-        this.rootTypeParsers = mapperRegistry.getMetadataMapperParsers();
-        indexVersionCreated = indexSettings.getIndexVersionCreated();
+        this.indexVersionCreated = indexSettings.getIndexVersionCreated();
+        this.rootTypeParsers = mapperRegistry.getMetadataMapperParsers(indexVersionCreated);
     }
 
     public Mapper.TypeParser.ParserContext parserContext(String type) {
diff --git a/server/src/main/java/org/elasticsearch/indices/IndicesService.java b/server/src/main/java/org/elasticsearch/indices/IndicesService.java
index fa42776403dc..cca63c015f1c 100644
--- a/server/src/main/java/org/elasticsearch/indices/IndicesService.java
+++ b/server/src/main/java/org/elasticsearch/indices/IndicesService.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.util.RamUsageEstimator;
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.ResourceAlreadyExistsException;
+import org.elasticsearch.Version;
 import org.elasticsearch.action.admin.indices.stats.CommonStats;
 import org.elasticsearch.action.admin.indices.stats.CommonStatsFlags;
 import org.elasticsearch.action.admin.indices.stats.CommonStatsFlags.Flag;
@@ -1382,8 +1383,8 @@ public void clearIndexShardCache(ShardId shardId, boolean queryCache, boolean fi
     /**
      * Returns true if the provided field is a registered metadata field (including ones registered via plugins), false otherwise.
      */
-    public boolean isMetaDataField(String field) {
-        return mapperRegistry.isMetaDataField(field);
+    public boolean isMetaDataField(Version indexCreatedVersion, String field) {
+        return mapperRegistry.isMetaDataField(indexCreatedVersion, field);
     }
 
     /**
diff --git a/server/src/main/java/org/elasticsearch/indices/mapper/MapperRegistry.java b/server/src/main/java/org/elasticsearch/indices/mapper/MapperRegistry.java
index 41d563c2037e..c79da36200e4 100644
--- a/server/src/main/java/org/elasticsearch/indices/mapper/MapperRegistry.java
+++ b/server/src/main/java/org/elasticsearch/indices/mapper/MapperRegistry.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.indices.mapper;
 
+import org.elasticsearch.Version;
+import org.elasticsearch.index.mapper.AllFieldMapper;
 import org.elasticsearch.index.mapper.Mapper;
 import org.elasticsearch.index.mapper.MetadataFieldMapper;
 import org.elasticsearch.plugins.MapperPlugin;
@@ -36,6 +38,7 @@
 
     private final Map<String, Mapper.TypeParser> mapperParsers;
     private final Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers;
+    private final Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers6x;
     private final Function<String, Predicate<String>> fieldFilter;
 
 
@@ -43,6 +46,11 @@ public MapperRegistry(Map<String, Mapper.TypeParser> mapperParsers,
             Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers, Function<String, Predicate<String>> fieldFilter) {
         this.mapperParsers = Collections.unmodifiableMap(new LinkedHashMap<>(mapperParsers));
         this.metadataMapperParsers = Collections.unmodifiableMap(new LinkedHashMap<>(metadataMapperParsers));
+        // add the _all field mapper for indices created in 6x
+        Map<String, MetadataFieldMapper.TypeParser> metadata6x = new LinkedHashMap<>();
+        metadata6x.put(AllFieldMapper.NAME, new AllFieldMapper.TypeParser());
+        metadata6x.putAll(metadataMapperParsers);
+        this.metadataMapperParsers6x = Collections.unmodifiableMap(metadata6x);
         this.fieldFilter = fieldFilter;
     }
 
@@ -58,15 +66,15 @@ public MapperRegistry(Map<String, Mapper.TypeParser> mapperParsers,
      * Return a map of the meta mappers that have been registered. The
      * returned map uses the name of the field as a key.
      */
-    public Map<String, MetadataFieldMapper.TypeParser> getMetadataMapperParsers() {
-        return metadataMapperParsers;
+    public Map<String, MetadataFieldMapper.TypeParser> getMetadataMapperParsers(Version indexCreatedVersion) {
+        return indexCreatedVersion.onOrAfter(Version.V_7_0_0) ? metadataMapperParsers : metadataMapperParsers6x;
     }
 
     /**
-     * Returns true if the provide field is a registered metadata field, false otherwise
+     * Returns true if the provided field is a registered metadata field, false otherwise
      */
-    public boolean isMetaDataField(String field) {
-        return getMetadataMapperParsers().containsKey(field);
+    public boolean isMetaDataField(Version indexCreatedVersion, String field) {
+        return getMetadataMapperParsers(indexCreatedVersion).containsKey(field);
     }
 
     /**
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/AllFieldMapperTests.java b/server/src/test/java/org/elasticsearch/index/mapper/AllFieldMapperTests.java
index 62f3495ee172..34200b51cb31 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/AllFieldMapperTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/AllFieldMapperTests.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.index.mapper;
 
+import org.elasticsearch.Version;
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.compress.CompressedXContent;
 import org.elasticsearch.common.settings.Settings;
@@ -26,9 +28,75 @@
 import org.elasticsearch.index.IndexService;
 import org.elasticsearch.index.mapper.MapperService.MergeReason;
 import org.elasticsearch.test.ESSingleNodeTestCase;
+import org.elasticsearch.test.VersionUtils;
+
+import static org.hamcrest.CoreMatchers.containsString;
 
 public class AllFieldMapperTests extends ESSingleNodeTestCase {
 
+    @Override
+    protected boolean forbidPrivateIndexSettings() {
+        return false;
+    }
+
+    public void testAllDisabled() throws Exception {
+        {
+            final Version version = VersionUtils.randomVersionBetween(random(),
+                Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion());
+            IndexService indexService = createIndex("test_6x",
+                Settings.builder()
+                    .put(IndexMetaData.SETTING_VERSION_CREATED, version)
+                    .build()
+            );
+            String mappingDisabled = Strings.toString(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", false)
+                .endObject().endObject()
+            );
+            indexService.mapperService().merge("_doc", new CompressedXContent(mappingDisabled), MergeReason.MAPPING_UPDATE);
+
+            String mappingEnabled = Strings.toString(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", true)
+                .endObject().endObject()
+            );
+            MapperParsingException exc = expectThrows(MapperParsingException.class,
+                () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingEnabled), MergeReason.MAPPING_UPDATE));
+            assertThat(exc.getMessage(), containsString("[_all] is disabled in this version."));
+        }
+        {
+            IndexService indexService = createIndex("test");
+            String mappingEnabled = Strings.toString(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", true)
+                .endObject().endObject()
+            );
+            MapperParsingException exc = expectThrows(MapperParsingException.class,
+                () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingEnabled), MergeReason.MAPPING_UPDATE));
+            assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all"));
+
+            String mappingDisabled = Strings.toString(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all")
+                    .field("enabled", false)
+                .endObject().endObject()
+            );
+            exc = expectThrows(MapperParsingException.class,
+                () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingDisabled), MergeReason.MAPPING_UPDATE));
+            assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all"));
+
+            String mappingAll = Strings.toString(XContentFactory.jsonBuilder().startObject()
+                .startObject("_all").endObject().endObject()
+            );
+            exc = expectThrows(MapperParsingException.class,
+                () -> indexService.mapperService().merge("_doc", new CompressedXContent(mappingAll), MergeReason.MAPPING_UPDATE));
+            assertThat(exc.getMessage(), containsString("unsupported parameters:  [_all"));
+
+            String mapping = Strings.toString(XContentFactory.jsonBuilder().startObject().endObject());
+            indexService.mapperService().merge("_doc", new CompressedXContent(mapping), MergeReason.MAPPING_UPDATE);
+            assertEquals("{\"_doc\":{}}", indexService.mapperService().documentMapper("_doc").mapping().toString());
+        }
+    }
+
     public void testUpdateDefaultSearchAnalyzer() throws Exception {
         IndexService indexService = createIndex("test", Settings.builder()
                 .put("index.analysis.analyzer.default_search.type", "custom")
diff --git a/server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java b/server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
index ad02209bf5da..a5329856630d 100644
--- a/server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
+++ b/server/src/test/java/org/elasticsearch/index/query/ExistsQueryBuilderTests.java
@@ -28,7 +28,6 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.TermQuery;
 import org.elasticsearch.Version;
-import org.elasticsearch.cluster.metadata.MetaData;
 import org.elasticsearch.search.internal.SearchContext;
 import org.elasticsearch.test.AbstractQueryTestCase;
 
@@ -55,8 +54,6 @@ protected ExistsQueryBuilder doCreateTestQueryBuilder() {
         if (randomBoolean()) {
             if (randomBoolean()) {
                 fieldPattern = fieldPattern + "*";
-            } else {
-                fieldPattern = MetaData.ALL;
             }
         }
         return new ExistsQueryBuilder(fieldPattern);
diff --git a/server/src/test/java/org/elasticsearch/indices/IndicesModuleTests.java b/server/src/test/java/org/elasticsearch/indices/IndicesModuleTests.java
index 9b88c6ab8f20..f31ac0627138 100644
--- a/server/src/test/java/org/elasticsearch/indices/IndicesModuleTests.java
+++ b/server/src/test/java/org/elasticsearch/indices/IndicesModuleTests.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.indices;
 
+import org.elasticsearch.Version;
+import org.elasticsearch.index.mapper.AllFieldMapper;
 import org.elasticsearch.index.mapper.FieldNamesFieldMapper;
 import org.elasticsearch.index.mapper.IdFieldMapper;
 import org.elasticsearch.index.mapper.IgnoredFieldMapper;
@@ -36,6 +38,7 @@
 import org.elasticsearch.indices.mapper.MapperRegistry;
 import org.elasticsearch.plugins.MapperPlugin;
 import org.elasticsearch.test.ESTestCase;
+import org.elasticsearch.test.VersionUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -87,14 +90,36 @@ public MetadataFieldMapper getDefault(MappedFieldType fieldType, ParserContext c
             RoutingFieldMapper.NAME, IndexFieldMapper.NAME, SourceFieldMapper.NAME, TypeFieldMapper.NAME,
             VersionFieldMapper.NAME, SeqNoFieldMapper.NAME, FieldNamesFieldMapper.NAME};
 
+    private static String[] EXPECTED_METADATA_FIELDS_6x = new String[]{AllFieldMapper.NAME, IgnoredFieldMapper.NAME,
+        IdFieldMapper.NAME, RoutingFieldMapper.NAME, IndexFieldMapper.NAME, SourceFieldMapper.NAME, TypeFieldMapper.NAME,
+        VersionFieldMapper.NAME, SeqNoFieldMapper.NAME, FieldNamesFieldMapper.NAME};
+
+
     public void testBuiltinMappers() {
         IndicesModule module = new IndicesModule(Collections.emptyList());
-        assertFalse(module.getMapperRegistry().getMapperParsers().isEmpty());
-        assertFalse(module.getMapperRegistry().getMetadataMapperParsers().isEmpty());
-        Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers();
-        int i = 0;
-        for (String field : metadataMapperParsers.keySet()) {
-            assertEquals(EXPECTED_METADATA_FIELDS[i++], field);
+        {
+            Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion());
+            assertFalse(module.getMapperRegistry().getMapperParsers().isEmpty());
+            assertFalse(module.getMapperRegistry().getMetadataMapperParsers(version).isEmpty());
+            Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers =
+                module.getMapperRegistry().getMetadataMapperParsers(version);
+            assertEquals(EXPECTED_METADATA_FIELDS_6x.length, metadataMapperParsers.size());
+            int i = 0;
+            for (String field : metadataMapperParsers.keySet()) {
+                assertEquals(EXPECTED_METADATA_FIELDS_6x[i++], field);
+            }
+        }
+        {
+            Version version = VersionUtils.randomVersionBetween(random(), Version.V_7_0_0, Version.CURRENT);
+            assertFalse(module.getMapperRegistry().getMapperParsers().isEmpty());
+            assertFalse(module.getMapperRegistry().getMetadataMapperParsers(version).isEmpty());
+            Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers =
+                module.getMapperRegistry().getMetadataMapperParsers(version);
+            assertEquals(EXPECTED_METADATA_FIELDS.length, metadataMapperParsers.size());
+            int i = 0;
+            for (String field : metadataMapperParsers.keySet()) {
+                assertEquals(EXPECTED_METADATA_FIELDS[i++], field);
+            }
         }
     }
 
@@ -102,11 +127,15 @@ public void testBuiltinWithPlugins() {
         IndicesModule noPluginsModule = new IndicesModule(Collections.emptyList());
         IndicesModule module = new IndicesModule(fakePlugins);
         MapperRegistry registry = module.getMapperRegistry();
+        Version version = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.V_7_0_0.minimumCompatibilityVersion());
         assertThat(registry.getMapperParsers().size(), greaterThan(noPluginsModule.getMapperRegistry().getMapperParsers().size()));
-        assertThat(registry.getMetadataMapperParsers().size(),
-                greaterThan(noPluginsModule.getMapperRegistry().getMetadataMapperParsers().size()));
-        Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers();
+        assertThat(registry.getMetadataMapperParsers(version).size(),
+                greaterThan(noPluginsModule.getMapperRegistry().getMetadataMapperParsers(version).size()));
+        Map<String, MetadataFieldMapper.TypeParser> metadataMapperParsers = module.getMapperRegistry().getMetadataMapperParsers(version);
         Iterator<String> iterator = metadataMapperParsers.keySet().iterator();
+        if (version.before(Version.V_7_0_0)) {
+            assertEquals(AllFieldMapper.NAME, iterator.next());
+        }
         assertEquals(IgnoredFieldMapper.NAME, iterator.next());
         String last = null;
         while(iterator.hasNext()) {
@@ -187,13 +216,15 @@ public void testDuplicateFieldNamesMapper() {
 
     public void testFieldNamesIsLast() {
         IndicesModule module = new IndicesModule(Collections.emptyList());
-        List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers().keySet());
+        Version version = VersionUtils.randomCompatibleVersion(random(), Version.CURRENT);
+        List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers(version).keySet());
         assertEquals(FieldNamesFieldMapper.NAME, fieldNames.get(fieldNames.size() - 1));
     }
 
     public void testFieldNamesIsLastWithPlugins() {
         IndicesModule module = new IndicesModule(fakePlugins);
-        List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers().keySet());
+        Version version = VersionUtils.randomCompatibleVersion(random(), Version.CURRENT);
+        List<String> fieldNames = new ArrayList<>(module.getMapperRegistry().getMetadataMapperParsers(version).keySet());
         assertEquals(FieldNamesFieldMapper.NAME, fieldNames.get(fieldNames.size() - 1));
     }
 
diff --git a/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java b/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
index b68ec6d0598e..60dbad99795f 100644
--- a/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
+++ b/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
@@ -68,6 +68,7 @@
 import org.elasticsearch.plugins.Plugin;
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.IndexSettingsModule;
+import org.elasticsearch.test.VersionUtils;
 import org.elasticsearch.test.hamcrest.RegexMatcher;
 
 import java.io.IOException;
@@ -515,9 +516,10 @@ public void testStatsByShardDoesNotDieFromExpectedExceptions() {
 
     public void testIsMetaDataField() {
         IndicesService indicesService = getIndicesService();
-        assertFalse(indicesService.isMetaDataField(randomAlphaOfLengthBetween(10, 15)));
+        final Version randVersion = VersionUtils.randomVersionBetween(random(), Version.V_6_0_0, Version.CURRENT);
+        assertFalse(indicesService.isMetaDataField(randVersion, randomAlphaOfLengthBetween(10, 15)));
         for (String builtIn : IndicesModule.getBuiltInMetaDataFields()) {
-            assertTrue(indicesService.isMetaDataField(builtIn));
+            assertTrue(indicesService.isMetaDataField(randVersion, builtIn));
         }
     }
 
