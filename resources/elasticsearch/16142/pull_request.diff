diff --git a/core/src/main/java/org/elasticsearch/index/translog/BaseTranslogReader.java b/core/src/main/java/org/elasticsearch/index/translog/BaseTranslogReader.java
index c98ea69f87f6..0b3af16f5eec 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/BaseTranslogReader.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/BaseTranslogReader.java
@@ -21,6 +21,10 @@
 
 import org.elasticsearch.ElasticsearchException;
 import org.elasticsearch.common.io.stream.ByteBufferStreamInput;
+import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.logging.Loggers;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.index.shard.ShardId;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -36,14 +40,17 @@
     protected final FileChannel channel;
     protected final Path path;
     protected final long firstOperationOffset;
+    protected final ESLogger logger;
+    protected final ShardId shardId;
 
-    public BaseTranslogReader(long generation, FileChannel channel, Path path, long firstOperationOffset) {
+    public BaseTranslogReader(long generation, FileChannel channel, Path path, long firstOperationOffset, ShardId shardId) {
         assert Translog.parseIdFromFileName(path) == generation : "generation missmatch. Path: " + Translog.parseIdFromFileName(path) + " but generation: " + generation;
-
+        this.shardId = shardId;
         this.generation = generation;
         this.path = path;
         this.channel = channel;
         this.firstOperationOffset = firstOperationOffset;
+        this.logger = Loggers.getLogger(getClass(), Settings.EMPTY, shardId, "tlog." + generation);
     }
 
     public long getGeneration() {
@@ -89,7 +96,7 @@ protected final int readSize(ByteBuffer reusableBuffer, long position) {
     }
 
     public Translog.Snapshot newSnapshot() {
-        return new TranslogSnapshot(generation, channel, path, firstOperationOffset, sizeInBytes(), totalOperations());
+        return new TranslogSnapshot(generation, channel, path, firstOperationOffset, sizeInBytes(), totalOperations(), shardId);
     }
 
     /**
diff --git a/core/src/main/java/org/elasticsearch/index/translog/Translog.java b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
index b2e81de044b0..ca3c0caae09e 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/Translog.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/Translog.java
@@ -265,7 +265,7 @@ TranslogReader openReader(Path path, Checkpoint checkpoint) throws IOException {
         FileChannel channel = FileChannel.open(path, StandardOpenOption.READ);
         try {
             assert Translog.parseIdFromFileName(path) == checkpoint.generation : "expected generation: " + Translog.parseIdFromFileName(path) + " but got: " + checkpoint.generation;
-            TranslogReader reader = TranslogReader.open(channel, path, checkpoint, translogUUID);
+            TranslogReader reader = TranslogReader.open(channel, path, checkpoint, translogUUID, shardId());
             channel = null;
             return reader;
         } finally {
@@ -1258,9 +1258,9 @@ void trimUnreferencedReaders() {
     void closeFilesIfNoPendingViews() throws IOException {
         try (ReleasableLock ignored = writeLock.acquire()) {
             if (closed.get() && outstandingViews.isEmpty()) {
-                logger.trace("closing files. translog is closed and there are no pending views");
                 ArrayList<Closeable> toClose = new ArrayList<>(readers);
                 toClose.add(current);
+                logger.trace("closing [{}] files. translog is closed and there are no pending views", toClose.size());
                 IOUtils.close(toClose);
             }
         }
diff --git a/core/src/main/java/org/elasticsearch/index/translog/TranslogReader.java b/core/src/main/java/org/elasticsearch/index/translog/TranslogReader.java
index ecc3822361c2..826f6b816fc5 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/TranslogReader.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogReader.java
@@ -29,6 +29,7 @@
 import org.apache.lucene.util.RamUsageEstimator;
 import org.elasticsearch.common.io.Channels;
 import org.elasticsearch.common.io.stream.InputStreamStreamInput;
+import org.elasticsearch.index.shard.ShardId;
 
 import java.io.Closeable;
 import java.io.EOFException;
@@ -54,16 +55,17 @@
      * Create a reader of translog file channel. The length parameter should be consistent with totalOperations and point
      * at the end of the last operation in this snapshot.
      */
-    public TranslogReader(long generation, FileChannel channel, Path path, long firstOperationOffset, long length, int totalOperations) {
-        super(generation, channel, path, firstOperationOffset);
+    public TranslogReader(long generation, FileChannel channel, Path path, long firstOperationOffset, long length, int totalOperations, ShardId shardId) {
+        super(generation, channel, path, firstOperationOffset, shardId);
         this.length = length;
         this.totalOperations = totalOperations;
+        this.logger.trace("reader created. path [{}]", path);
     }
 
     /**
      * Given a file, opens an {@link TranslogReader}, taking of checking and validating the file header.
      */
-    public static TranslogReader open(FileChannel channel, Path path, Checkpoint checkpoint, String translogUUID) throws IOException {
+    public static TranslogReader open(FileChannel channel, Path path, Checkpoint checkpoint, String translogUUID, ShardId shardId) throws IOException {
 
         try {
             InputStreamStreamInput headerStream = new InputStreamStreamInput(java.nio.channels.Channels.newInputStream(channel)); // don't close
@@ -116,7 +118,7 @@ public static TranslogReader open(FileChannel channel, Path path, Checkpoint che
                         if (uuidBytes.bytesEquals(ref) == false) {
                             throw new TranslogCorruptedException("expected shard UUID [" + uuidBytes + "] but got: [" + ref + "] this translog file belongs to a different translog. path:" + path);
                         }
-                        return new TranslogReader(checkpoint.generation, channel, path, ref.length + CodecUtil.headerLength(TranslogWriter.TRANSLOG_CODEC) + RamUsageEstimator.NUM_BYTES_INT, checkpoint.offset, checkpoint.numOps);
+                        return new TranslogReader(checkpoint.generation, channel, path, ref.length + CodecUtil.headerLength(TranslogWriter.TRANSLOG_CODEC) + RamUsageEstimator.NUM_BYTES_INT, checkpoint.offset, checkpoint.numOps, shardId);
                     default:
                         throw new TranslogCorruptedException("No known translog stream version: " + version + " path:" + path);
                 }
@@ -158,6 +160,7 @@ public Checkpoint getInfo() {
     @Override
     public final void close() throws IOException {
         if (closed.compareAndSet(false, true)) {
+            logger.trace("closing channel on reader close. path [{}]", path);
             channel.close();
         }
     }
diff --git a/core/src/main/java/org/elasticsearch/index/translog/TranslogSnapshot.java b/core/src/main/java/org/elasticsearch/index/translog/TranslogSnapshot.java
index 10f381f8eba9..fe968419aea0 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/TranslogSnapshot.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogSnapshot.java
@@ -19,6 +19,7 @@
 package org.elasticsearch.index.translog;
 
 import org.elasticsearch.common.io.Channels;
+import org.elasticsearch.index.shard.ShardId;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -40,8 +41,8 @@
      * Create a snapshot of translog file channel. The length parameter should be consistent with totalOperations and point
      * at the end of the last operation in this snapshot.
      */
-    public TranslogSnapshot(long generation, FileChannel channel, Path path, long firstOperationOffset, long length, int totalOperations) {
-        super(generation, channel, path, firstOperationOffset);
+    public TranslogSnapshot(long generation, FileChannel channel, Path path, long firstOperationOffset, long length, int totalOperations, ShardId shardId) {
+        super(generation, channel, path, firstOperationOffset, shardId);
         this.length = length;
         this.totalOperations = totalOperations;
         this.reusableBuffer = ByteBuffer.allocate(1024);
diff --git a/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java b/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java
index f7d0cd571e8d..607d0cfc917c 100644
--- a/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java
+++ b/core/src/main/java/org/elasticsearch/index/translog/TranslogWriter.java
@@ -48,7 +48,6 @@
     public static final int VERSION_CHECKPOINTS = 2; // since 2.0 we have checkpoints?
     public static final int VERSION = VERSION_CHECKPOINTS;
 
-    private final ShardId shardId;
     /* the offset in bytes that was written when the file was last synced*/
     private volatile long lastSyncedOffset;
     /* the number of translog operations written to this file */
@@ -64,11 +63,11 @@
 
 
     public TranslogWriter(ShardId shardId, long generation, FileChannel channel, Path path, ByteSizeValue bufferSize) throws IOException {
-        super(generation, channel, path, channel.position());
-        this.shardId = shardId;
+        super(generation, channel, path, channel.position(), shardId);
         this.outputStream = new BufferedChannelOutputStream(java.nio.channels.Channels.newOutputStream(channel), bufferSize.bytesAsInt());
         this.lastSyncedOffset = channel.position();
         totalOffset = lastSyncedOffset;
+        logger.trace("writer created. path [{}]", path);
     }
 
     static int getHeaderLength(String translogUUID) {
@@ -115,6 +114,7 @@ private synchronized final void closeWithTragicEvent(Throwable throwable) throws
         assert throwable != null : "throwable must not be null in a tragic event";
         if (tragedy == null) {
             tragedy = throwable;
+            logger.trace("closing due to a tragic exception", throwable);
         } else if (tragedy != throwable) {
             // it should be safe to call closeWithTragicEvents on multiple layers without
             // worrying about self suppression.
@@ -192,7 +192,14 @@ public synchronized TranslogReader closeIntoReader() throws IOException {
             throw e;
         }
         if (closed.compareAndSet(false, true)) {
-            return new TranslogReader(generation, channel, path, firstOperationOffset, getWrittenOffset(), operationCounter);
+            logger.trace("closing into a reader. path [{}]", path);
+            try {
+                return new TranslogReader(generation, channel, path, firstOperationOffset, getWrittenOffset(), operationCounter, shardId);
+            } catch (Throwable t) {
+                // close the channel, as we are closed and failed to create a new reader
+                IOUtils.closeWhileHandlingException(channel);
+                throw t;
+            }
         } else {
             throw new AlreadyClosedException("translog [" + getGeneration() + "] is already closed (path [" + path + "]", tragedy);
         }
@@ -275,6 +282,7 @@ protected final void ensureOpen() {
     @Override
     public final void close() throws IOException {
         if (closed.compareAndSet(false, true)) {
+            logger.trace("closing channel on writer close. path [{}]", path);
             channel.close();
         }
     }
diff --git a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
index e1935328232f..6e83e32bf446 100644
--- a/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
+++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogTests.java
@@ -1742,6 +1742,7 @@ public void testRecoverWithUnbackedNextGenAndFutureFile() throws IOException {
     public void testWithRandomException() throws IOException {
         final int runs = randomIntBetween(5, 10);
         for (int run = 0; run < runs; run++) {
+            logger.info("--> run [{}]", run);
             Path tempDir = createTempDir();
             final FailSwitch fail = new FailSwitch();
             fail.failRandomly();
@@ -1793,6 +1794,8 @@ public void testWithRandomException() throws IOException {
             } catch (TranslogException | MockDirectoryWrapper.FakeIOException ex) {
                 // failed - that's ok, we didn't even create it
             }
+
+            logger.info("--> finished writing in run [{}]", run);
             // now randomly open this failing tlog again just to make sure we can also recover from failing during recovery
             if (randomBoolean()) {
                 try {
@@ -1802,6 +1805,7 @@ public void testWithRandomException() throws IOException {
                 }
             }
 
+            logger.info("--> validating translog. run [{}]", run);
             try (Translog translog = new Translog(config)) {
                 Translog.Snapshot snapshot = translog.newSnapshot();
                 assertEquals(syncedDocs.size(), snapshot.totalOperations());
diff --git a/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java b/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
index 8ae7117d4838..5a5305ec17af 100644
--- a/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
+++ b/core/src/test/java/org/elasticsearch/index/translog/TranslogVersionTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.translog;
 
 import org.apache.lucene.util.IOUtils;
+import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ESTestCase;
 
 import java.io.IOException;
@@ -87,7 +88,7 @@ public void testTruncatedTranslog() throws Exception {
     public TranslogReader openReader(Path path, long id) throws IOException {
         FileChannel channel = FileChannel.open(path, StandardOpenOption.READ);
         try {
-            TranslogReader reader = TranslogReader.open(channel, path, new Checkpoint(Files.size(path), 1, id), null);
+            TranslogReader reader = TranslogReader.open(channel, path, new Checkpoint(Files.size(path), 1, id), null, new ShardId("test", 0));
             channel = null;
             return reader;
         } finally {
