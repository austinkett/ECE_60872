diff --git a/src/main/java/org/elasticsearch/cluster/routing/operation/plain/Preference.java b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/Preference.java
index 8330dc03a405..d4f63fcb6ce6 100644
--- a/src/main/java/org/elasticsearch/cluster/routing/operation/plain/Preference.java
+++ b/src/main/java/org/elasticsearch/cluster/routing/operation/plain/Preference.java
@@ -95,6 +95,8 @@ public static Preference parse(String preference) {
                 return PREFER_NODE;
             case "_only_node":
                 return ONLY_NODE;
+            case "_only_nodes":
+                return ONLY_NODES;
             case "_local":
                 return LOCAL;
             case "_primary":
diff --git a/src/test/java/org/elasticsearch/search/preference/SearchPreferenceTests.java b/src/test/java/org/elasticsearch/search/preference/SearchPreferenceTests.java
index 6332405fc1e5..94ef13eb2b8e 100644
--- a/src/test/java/org/elasticsearch/search/preference/SearchPreferenceTests.java
+++ b/src/test/java/org/elasticsearch/search/preference/SearchPreferenceTests.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.action.search.SearchType;
 import org.elasticsearch.client.Client;
+import org.elasticsearch.cluster.routing.operation.plain.Preference;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.junit.Test;
@@ -38,6 +39,19 @@
 
 public class SearchPreferenceTests extends ElasticsearchIntegrationTest {
 
+    @Test
+    public void testThatAllPreferencesAreParsedToValid(){
+        //list of all enums and their strings as reference
+        assertThat(Preference.parse("_shards"),equalTo(Preference.SHARDS));
+        assertThat(Preference.parse("_prefer_node"),equalTo(Preference.PREFER_NODE));
+        assertThat(Preference.parse("_local"),equalTo(Preference.LOCAL));
+        assertThat(Preference.parse("_primary"),equalTo(Preference.PRIMARY));
+        assertThat(Preference.parse("_primary_first"),equalTo(Preference.PRIMARY_FIRST));
+        assertThat(Preference.parse("_only_local"),equalTo(Preference.ONLY_LOCAL));
+        assertThat(Preference.parse("_only_node"),equalTo(Preference.ONLY_NODE));
+        assertThat(Preference.parse("_only_nodes"), equalTo(Preference.ONLY_NODES));
+    }
+
     @Test // see #2896
     public void testStopOneNodePreferenceWithRedState() throws InterruptedException, IOException {
         assertAcked(prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", cluster().numDataNodes()+2).put("index.number_of_replicas", 0)));
@@ -48,7 +62,7 @@ public void testStopOneNodePreferenceWithRedState() throws InterruptedException,
         refresh();
         internalCluster().stopRandomDataNode();
         client().admin().cluster().prepareHealth().setWaitForStatus(ClusterHealthStatus.RED).execute().actionGet();
-        String[] preferences = new String[] {"_primary", "_local", "_primary_first", "_prefer_node:somenode", "_prefer_node:server2"};
+        String[] preferences = new String[] {"_primary","_shards:1","_local", "_primary_first", "_prefer_node:somenode", "_prefer_node:server2","_only_nodes:*"};
         for (String pref : preferences) {
             SearchResponse searchResponse = client().prepareSearch().setSearchType(SearchType.COUNT).setPreference(pref).execute().actionGet();
             assertThat(RestStatus.OK, equalTo(searchResponse.status()));
@@ -95,20 +109,13 @@ public void simplePreferenceTests() throws Exception {
         client().prepareIndex("test", "type1").setSource("field1", "value1").execute().actionGet();
         refresh();
 
-        SearchResponse searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("_local").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
-        searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("_local").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
-
-        searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("_primary").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
-        searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("_primary").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
-
-        searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("1234").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
-        searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference("1234").execute().actionGet();
-        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
+        String[] preferences = new String[]{"1234", "_primary", "_local", "_shards:1", "_primary_first","_only_nodes:*"};
+        for (String pref : preferences) {
+            SearchResponse searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference(pref).execute().actionGet();
+            assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
+            searchResponse = client().prepareSearch().setQuery(matchAllQuery()).setPreference(pref).execute().actionGet();
+            assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
+        }
     }
 
     @Test (expected = ElasticsearchIllegalArgumentException.class)
