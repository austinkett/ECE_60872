diff --git a/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java
index 5d49a9981b96..738db9ccc381 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/BaseGeoPointFieldMapper.java
@@ -661,8 +661,8 @@ public FieldMapper updateFieldType(Map<String, MappedFieldType> fullNameToFieldT
         return updated;
     }
 
-    private static GeoPoint prefixCodedToGeoPoint(BytesRef val, boolean isGeoCoded) {
-        final long encoded = isGeoCoded ? prefixCodedToGeoCoded(val) : LegacyNumericUtils.prefixCodedToLong(val);
+    private static GeoPoint prefixCodedToGeoPoint(BytesRef val, boolean numericEncoded) {
+        final long encoded = numericEncoded ? LegacyNumericUtils.prefixCodedToLong(val) : prefixCodedToGeoCoded(val);
         return new GeoPoint(MortonEncoder.decodeLatitude(encoded), MortonEncoder.decodeLongitude(encoded));
     }
 
diff --git a/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java
index ea8877ead03f..d47f04a56fd7 100644
--- a/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java
+++ b/core/src/test/java/org/elasticsearch/fieldstats/FieldStatsTests.java
@@ -687,22 +687,17 @@ public static FieldStats randomFieldStats(boolean withNullMinMax) throws Unknown
         }
     }
 
-    public void testGeopoint() {
-        Version version = VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.CURRENT);
+    public void testGeopoint2x() {
+        Version version = VersionUtils.randomVersionBetween(random(), Version.V_2_0_0, Version.V_2_4_5);
         Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build();
         createIndex("test", settings, "test",
             "field_index", makeType("geo_point", true, false, false));
-        version = Version.CURRENT;
-        settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build();
-        createIndex("test5x", settings, "test",
-            "field_index", makeType("geo_point", true, false, false));
         int numDocs = random().nextInt(20);
         for (int i = 0; i <= numDocs; ++i) {
             double lat = GeoTestUtil.nextLatitude();
             double lon = GeoTestUtil.nextLongitude();
             final String src = lat + "," + lon;
             client().prepareIndex("test", "test").setSource("field_index", src).get();
-            client().prepareIndex("test5x", "test").setSource("field_index", src).get();
         }
 
         client().admin().indices().prepareRefresh().get();
@@ -714,6 +709,25 @@ public void testGeopoint() {
         // which is wildly different from V_5_0 which is point encoded. Skipping min/max in favor of testing
     }
 
+    public void testGeopoint5x() {
+        Version version = VersionUtils.randomVersionBetween(random(), Version.V_5_0_0, Version.CURRENT);
+        Settings settings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, version).build();
+        createIndex("test", settings, "test",
+            "field_index", makeType("geo_point", true, false, false));
+        int numDocs = random().nextInt(20);
+        for (int i = 0; i <= numDocs; ++i) {
+            double lat = GeoTestUtil.nextLatitude();
+            double lon = GeoTestUtil.nextLongitude();
+            final String src = lat + "," + lon;
+            client().prepareIndex("test", "test").setSource("field_index", src).get();
+        }
+
+        client().admin().indices().prepareRefresh().get();
+        FieldStatsResponse result = client().prepareFieldStats().setFields("field_index").get();
+        FieldStats stats = result.getAllFieldStats().get("field_index");
+        assertEquals(stats.getDisplayType(), "geo_point");
+    }
+
     private void assertSerialization(FieldStats stats, Version version) throws IOException {
         BytesStreamOutput output = new BytesStreamOutput();
         output.setVersion(version);
