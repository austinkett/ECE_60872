diff --git a/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
index 70219516147a..750d77604a43 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
@@ -97,6 +97,10 @@ final ParsedDocument parseDocument(SourceToParse source) throws MapperParsingExc
                 parser.close();
             }
         }
+        String remainingPath = context.path().pathAsText("");
+        if (remainingPath.isEmpty() == false) {
+            throw new IllegalStateException("found leftover path elements: " + remainingPath);
+        }
 
         reverseOrder(context);
 
@@ -553,6 +557,7 @@ private static void parseArray(ParseContext context, ObjectMapper parentMapper,
                     context.addDynamicMapper(mapper);
                     context.path().add(arrayFieldName);
                     parseObjectOrField(context, mapper);
+                    context.path().remove();
                 } else {
                     parseNonDynamicArray(context, parentMapper, lastFieldName, arrayFieldName);
                 }
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java b/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
index e4d1e306af3f..7a30df9a46df 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
@@ -178,4 +178,22 @@ public void testObjectMappingUpdate() throws Exception {
         assertTrue(barMapper instanceof ObjectMapper);
         assertNotNull(((ObjectMapper)barMapper).getMapper("baz"));
     }
+
+    public void testDynamicArrayWithTemplate() throws Exception {
+        DocumentMapperParser mapperParser = createIndex("test").mapperService().documentMapperParser();
+        String mapping = XContentFactory.jsonBuilder().startObject().startObject("type")
+            .startArray("dynamic_templates").startObject().startObject("georule")
+                .field("match", "foo*")
+                .startObject("mapping").field("type", "geo_point").endObject()
+            .endObject().endObject().endArray().endObject().endObject().string();
+        DocumentMapper mapper = mapperParser.parse("type", new CompressedXContent(mapping));
+
+        BytesReference bytes = XContentFactory.jsonBuilder()
+            .startObject().startArray("foo")
+                .startArray().value(0).value(0).endArray()
+                .startArray().value(1).value(1).endArray()
+            .endArray().endObject().bytes();
+        ParsedDocument doc = mapper.parse("test", "type", "1", bytes);
+        assertEquals(2, doc.rootDoc().getFields("foo").length);
+    }
 }
