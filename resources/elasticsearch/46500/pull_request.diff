diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadata.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadata.java
index 7c64a0c3b9bd..2c5bb95a7792 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadata.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadata.java
@@ -56,6 +56,7 @@
             v -> {
                 throw new IllegalArgumentException("ordered " + POLICIES_FIELD.getPreferredName() + " are not supported");
             }, POLICIES_FIELD);
+        PARSER.declareString(ConstructingObjectParser.constructorArg(), OPERATION_MODE_FIELD);
     }
 
     private final Map<String, SnapshotLifecyclePolicyMetadata> snapshotConfigurations;
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadataTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadataTests.java
new file mode 100644
index 000000000000..8fcb972bce2d
--- /dev/null
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/slm/SnapshotLifecycleMetadataTests.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
+ * or more contributor license agreements. Licensed under the Elastic License;
+ * you may not use this file except in compliance with the Elastic License.
+ */
+
+package org.elasticsearch.xpack.core.slm;
+
+import org.elasticsearch.common.io.stream.Writeable;
+import org.elasticsearch.common.xcontent.XContentParser;
+import org.elasticsearch.test.AbstractSerializingTestCase;
+import org.elasticsearch.xpack.core.ilm.OperationMode;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class SnapshotLifecycleMetadataTests extends AbstractSerializingTestCase<SnapshotLifecycleMetadata> {
+    @Override
+    protected SnapshotLifecycleMetadata doParseInstance(XContentParser parser) throws IOException {
+        return SnapshotLifecycleMetadata.PARSER.apply(parser, null);
+    }
+
+    @Override
+    protected SnapshotLifecycleMetadata createTestInstance() {
+        int policyCount = randomIntBetween(0, 3);
+        Map<String, SnapshotLifecyclePolicyMetadata> policies = new HashMap<>(policyCount);
+        for (int i = 0; i < policyCount; i++) {
+            String id = "policy-" + randomAlphaOfLength(3);
+            policies.put(id, SnapshotLifecyclePolicyMetadataTests.createRandomPolicyMetadata(id));
+        }
+        return new SnapshotLifecycleMetadata(policies, randomFrom(OperationMode.values()));
+    }
+
+    @Override
+    protected Writeable.Reader<SnapshotLifecycleMetadata> instanceReader() {
+        return SnapshotLifecycleMetadata::new;
+    }
+}
