diff --git a/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
index 253b27ddc96d..d84250ebcd7d 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexMetaData.java
@@ -154,7 +154,7 @@ public static State fromString(String state) {
             throw new ElasticsearchIllegalStateException("No state match for [" + state + "]");
         }
     }
-
+    public static final String INDEX_SETTING_PREFIX = "index.";
     public static final String SETTING_NUMBER_OF_SHARDS = "index.number_of_shards";
     public static final String SETTING_NUMBER_OF_REPLICAS = "index.number_of_replicas";
     public static final String SETTING_SHADOW_REPLICAS = "index.shadow_replicas";
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java
index 6198f35cd52c..582e008550d4 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/IndexTemplateMetaData.java
@@ -329,13 +329,7 @@ public static IndexTemplateMetaData fromXContent(XContentParser parser, String t
                 } else if (token == XContentParser.Token.START_OBJECT) {
                     if ("settings".equals(currentFieldName)) {
                         ImmutableSettings.Builder templateSettingsBuilder = ImmutableSettings.settingsBuilder();
-                        for (Map.Entry<String, String> entry : SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered()).entrySet()) {
-                            if (!entry.getKey().startsWith("index.")) {
-                                templateSettingsBuilder.put("index." + entry.getKey(), entry.getValue());
-                            } else {
-                                templateSettingsBuilder.put(entry.getKey(), entry.getValue());
-                            }
-                        }
+                        templateSettingsBuilder.put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
                         builder.settings(templateSettingsBuilder.build());
                     } else if ("mappings".equals(currentFieldName)) {
                         while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) {
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
index 38dfa56ea951..09864fce9080 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataCreateIndexService.java
@@ -195,13 +195,7 @@ public void validateIndexName(String index, ClusterState state) throws Elasticse
     private void createIndex(final CreateIndexClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener, final Semaphore mdLock) {
 
         ImmutableSettings.Builder updatedSettingsBuilder = ImmutableSettings.settingsBuilder();
-        for (Map.Entry<String, String> entry : request.settings().getAsMap().entrySet()) {
-            if (!entry.getKey().startsWith("index.")) {
-                updatedSettingsBuilder.put("index." + entry.getKey(), entry.getValue());
-            } else {
-                updatedSettingsBuilder.put(entry.getKey(), entry.getValue());
-            }
-        }
+        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
         request.settings(updatedSettingsBuilder.build());
 
         clusterService.submitStateUpdateTask("create-index [" + request.index() + "], cause [" + request.cause() + "]", Priority.URGENT, new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request, listener) {
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java
index 9aeaf8a54d0e..95c806f7d49f 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataIndexTemplateService.java
@@ -107,13 +107,7 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS
 
     public void putTemplate(final PutRequest request, final PutListener listener) {
         ImmutableSettings.Builder updatedSettingsBuilder = ImmutableSettings.settingsBuilder();
-        for (Map.Entry<String, String> entry : request.settings.getAsMap().entrySet()) {
-            if (!entry.getKey().startsWith("index.")) {
-                updatedSettingsBuilder.put("index." + entry.getKey(), entry.getValue());
-            } else {
-                updatedSettingsBuilder.put(entry.getKey(), entry.getValue());
-            }
-        }
+        updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
         request.settings(updatedSettingsBuilder.build());
 
         if (request.name == null) {
diff --git a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java
index 8cec52884f8c..bc7539a7ff1e 100644
--- a/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java
+++ b/src/main/java/org/elasticsearch/cluster/metadata/MetaDataUpdateSettingsService.java
@@ -168,16 +168,7 @@ public void onFailure(Throwable t) {
 
     public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) {
         ImmutableSettings.Builder updatedSettingsBuilder = ImmutableSettings.settingsBuilder();
-        for (Map.Entry<String, String> entry : request.settings().getAsMap().entrySet()) {
-            if (entry.getKey().equals("index")) {
-                continue;
-            }
-            if (!entry.getKey().startsWith("index.")) {
-                updatedSettingsBuilder.put("index." + entry.getKey(), entry.getValue());
-            } else {
-                updatedSettingsBuilder.put(entry.getKey(), entry.getValue());
-            }
-        }
+        updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
         // never allow to change the number of shards
         for (String key : updatedSettingsBuilder.internalMap().keySet()) {
             if (key.equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) {
diff --git a/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
index 4744bc90f089..eca908ddae95 100644
--- a/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
+++ b/src/main/java/org/elasticsearch/common/settings/ImmutableSettings.java
@@ -1100,6 +1100,25 @@ public boolean shouldIgnoreMissing(String placeholderName) {
             return this;
         }
 
+        /**
+         * Checks that all settings in the builder start with the specified prefix.
+         *
+         * If a setting doesn't start with the prefix, the builder appends the prefix to such setting.
+         */
+        public Builder normalizePrefix(String prefix) {
+            Map<String, String> replacements = Maps.newHashMap();
+            Iterator<Map.Entry<String, String>> iterator = map.entrySet().iterator();
+            while(iterator.hasNext()) {
+                Map.Entry<String, String> entry = iterator.next();
+                if (entry.getKey().startsWith(prefix) == false) {
+                    replacements.put(prefix + entry.getKey(), entry.getValue());
+                    iterator.remove();
+                }
+            }
+            map.putAll(replacements);
+            return this;
+        }
+
         /**
          * Builds a {@link Settings} (underlying uses {@link ImmutableSettings}) based on everything
          * set on this builder.
diff --git a/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java b/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java
index 1c119fea8c5e..06f06c02081e 100644
--- a/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java
+++ b/src/main/java/org/elasticsearch/index/settings/IndexSettingsService.java
@@ -19,6 +19,7 @@
 
 package org.elasticsearch.index.settings;
 
+import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.inject.Inject;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
@@ -44,7 +45,7 @@ public IndexSettingsService(Index index, Settings settings) {
 
     public synchronized void refreshSettings(Settings settings) {
         // this.settings include also the node settings
-        if (this.settings.getByPrefix("index.").getAsMap().equals(settings.getByPrefix("index.").getAsMap())) {
+        if (this.settings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap().equals(settings.getByPrefix(IndexMetaData.INDEX_SETTING_PREFIX).getAsMap())) {
             // nothing to update, same settings
             return;
         }
diff --git a/src/main/java/org/elasticsearch/snapshots/RestoreService.java b/src/main/java/org/elasticsearch/snapshots/RestoreService.java
index 9d0a27eba39e..7b9e99d95b50 100644
--- a/src/main/java/org/elasticsearch/snapshots/RestoreService.java
+++ b/src/main/java/org/elasticsearch/snapshots/RestoreService.java
@@ -314,6 +314,7 @@ private IndexMetaData updateIndexSettings(IndexMetaData indexMetaData, Settings
                     if (changeSettings.names().isEmpty() && ignoreSettings.length == 0) {
                         return indexMetaData;
                     }
+                    Settings normalizedChangeSettings = ImmutableSettings.settingsBuilder().put(changeSettings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();
                     IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData);
                     Map<String, String> settingsMap = newHashMap(indexMetaData.settings().getAsMap());
                     List<String> simpleMatchPatterns = newArrayList();
@@ -340,7 +341,7 @@ private IndexMetaData updateIndexSettings(IndexMetaData indexMetaData, Settings
                             }
                         }
                     }
-                    for(Map.Entry<String, String> entry : changeSettings.getAsMap().entrySet()) {
+                    for(Map.Entry<String, String> entry : normalizedChangeSettings.getAsMap().entrySet()) {
                         if (UNMODIFIABLE_SETTINGS.contains(entry.getKey())) {
                             throw new SnapshotRestoreException(snapshotId, "cannot modify setting [" + entry.getKey() + "] on restore");
                         } else {
diff --git a/src/test/java/org/elasticsearch/common/settings/ImmutableSettingsTests.java b/src/test/java/org/elasticsearch/common/settings/ImmutableSettingsTests.java
index 4da57eef92ed..4d44f6355134 100644
--- a/src/test/java/org/elasticsearch/common/settings/ImmutableSettingsTests.java
+++ b/src/test/java/org/elasticsearch/common/settings/ImmutableSettingsTests.java
@@ -324,4 +324,44 @@ public void testThatArraysAreOverriddenCorrectly() throws IOException {
         assertThat(settings.get("value.data"), is("1"));
         assertThat(settings.get("value"), is(nullValue()));
     }
+
+    @Test
+    public void testPrefixNormalization() {
+
+        Settings settings = settingsBuilder().normalizePrefix("foo.").build();
+
+        assertThat(settings.names().size(), equalTo(0));
+
+        settings = settingsBuilder()
+                .put("bar", "baz")
+                .normalizePrefix("foo.")
+                .build();
+
+        assertThat(settings.getAsMap().size(), equalTo(1));
+        assertThat(settings.get("bar"), nullValue());
+        assertThat(settings.get("foo.bar"), equalTo("baz"));
+
+
+        settings = settingsBuilder()
+                .put("bar", "baz")
+                .put("foo.test", "test")
+                .normalizePrefix("foo.")
+                .build();
+
+        assertThat(settings.getAsMap().size(), equalTo(2));
+        assertThat(settings.get("bar"), nullValue());
+        assertThat(settings.get("foo.bar"), equalTo("baz"));
+        assertThat(settings.get("foo.test"), equalTo("test"));
+
+        settings = settingsBuilder()
+                .put("foo.test", "test")
+                .normalizePrefix("foo.")
+                .build();
+
+
+        assertThat(settings.getAsMap().size(), equalTo(1));
+        assertThat(settings.get("foo.test"), equalTo("test"));
+    }
+
+
 }
diff --git a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
index 1ae81b31c525..5383661a71fe 100644
--- a/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
+++ b/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreTests.java
@@ -1557,7 +1557,7 @@ public void changeSettingsOnRestoreTest() throws Exception {
         cluster().wipeIndices("test-idx");
 
         Settings newIndexSettings = ImmutableSettings.builder()
-                .put(INDEX_REFRESH_INTERVAL, "5s")
+                .put("refresh_interval", "5s")
                 .put("index.analysis.analyzer.my_analyzer.type", "standard")
                 .build();
 
