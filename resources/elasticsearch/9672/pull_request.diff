diff --git a/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java b/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
index 7f799302352b..7db80256d0e8 100644
--- a/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
+++ b/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
@@ -33,11 +33,9 @@
 import org.elasticsearch.env.NodeEnvironment;
 import org.elasticsearch.env.ShardLock;
 import org.elasticsearch.index.Index;
-import org.elasticsearch.indices.IndicesService;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.*;
 
-import java.io.Closeable;
 import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -87,6 +85,10 @@ public void onFailure(Throwable t) {
                 @Override
                 protected void doRun() throws Exception {
                     innerNodeIndexDeleted(index, nodeId);
+                    if (nodes.localNode().isDataNode() == false) {
+                        logger.trace("[{}] not acking store deletion (not a data node)");
+                        return;
+                    }
                     lockIndexAndAck(index, nodes, nodeId, clusterState);
 
                 }
@@ -94,6 +96,10 @@ protected void doRun() throws Exception {
         } else {
             transportService.sendRequest(clusterState.nodes().masterNode(),
                     INDEX_DELETED_ACTION_NAME, new NodeIndexDeletedMessage(index, nodeId), EmptyTransportResponseHandler.INSTANCE_SAME);
+            if (nodes.localNode().isDataNode() == false) {
+                logger.trace("[{}] not acking store deletion (not a data node)");
+                return;
+            }
             threadPool.generic().execute(new AbstractRunnable() {
                 @Override
                 public void onFailure(Throwable t) {
