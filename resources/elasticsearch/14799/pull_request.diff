diff --git a/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
index 0a5ae5ca5486..4079f14abc7b 100644
--- a/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
+++ b/core/src/main/java/org/elasticsearch/cluster/action/index/NodeIndexDeletedAction.java
@@ -103,6 +103,8 @@ private void lockIndexAndAck(String index, DiscoveryNodes nodes, String nodeId,
                     INDEX_STORE_DELETED_ACTION_NAME, new NodeIndexStoreDeletedMessage(index, nodeId), EmptyTransportResponseHandler.INSTANCE_SAME);
         } catch (LockObtainFailedException exc) {
             logger.warn("[{}] failed to lock all shards for index - timed out after 30 seconds", index);
+        } catch (InterruptedException e) {
+            logger.warn("[{}] failed to lock all shards for index - interrupted", index);
         }
     }
 
diff --git a/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java
index 42022b14913f..b63cc2e31caa 100644
--- a/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java
+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java
@@ -35,9 +35,6 @@ public boolean isForceExecution() {
     public final void run() {
         try {
             doRun();
-        } catch (InterruptedException ex) {
-            Thread.interrupted();
-            onFailure(ex);
         } catch (Throwable t) {
             onFailure(t);
         } finally {
diff --git a/core/src/main/java/org/elasticsearch/indices/IndicesService.java b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
index 69832ef370e1..83ac19d0ca77 100644
--- a/core/src/main/java/org/elasticsearch/indices/IndicesService.java
+++ b/core/src/main/java/org/elasticsearch/indices/IndicesService.java
@@ -643,7 +643,7 @@ public int compareTo(PendingDelete o) {
      * @param index the index to process the pending deletes for
      * @param timeout the timeout used for processing pending deletes
      */
-    public void processPendingDeletes(Index index, IndexSettings indexSettings, TimeValue timeout) throws IOException {
+    public void processPendingDeletes(Index index, IndexSettings indexSettings, TimeValue timeout) throws IOException, InterruptedException {
         logger.debug("{} processing pending deletes", index);
         final long startTimeNS = System.nanoTime();
         final List<ShardLock> shardLocks = nodeEnv.lockAllForIndex(index, indexSettings, timeout.millis());
@@ -695,14 +695,9 @@ public void processPendingDeletes(Index index, IndexSettings indexSettings, Time
                     }
                     if (remove.isEmpty() == false) {
                         logger.warn("{} still pending deletes present for shards {} - retrying", index, remove.toString());
-                        try {
-                            Thread.sleep(sleepTime);
-                            sleepTime = Math.min(maxSleepTimeMs, sleepTime * 2); // increase the sleep time gradually
-                            logger.debug("{} schedule pending delete retry after {} ms", index, sleepTime);
-                        } catch (InterruptedException e) {
-                            Thread.interrupted();
-                            return;
-                        }
+                        Thread.sleep(sleepTime);
+                        sleepTime = Math.min(maxSleepTimeMs, sleepTime * 2); // increase the sleep time gradually
+                        logger.debug("{} schedule pending delete retry after {} ms", index, sleepTime);
                     }
                 } while ((System.nanoTime() - startTimeNS) < timeout.nanos());
             }
diff --git a/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java
index d3e2e028c92c..f095cc355efc 100644
--- a/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java
+++ b/core/src/main/java/org/elasticsearch/indices/ttl/IndicesTTLService.java
@@ -99,7 +99,7 @@ protected void doStop() {
         try {
             this.purgerThread.shutdown();
         } catch (InterruptedException e) {
-            Thread.interrupted();
+            // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway
         }
     }
 
@@ -340,7 +340,7 @@ public void await() {
             try {
                 condition.await(timeout.millis(), TimeUnit.MILLISECONDS);
             } catch (InterruptedException e) {
-                Thread.interrupted();
+                // we intentionally do not want to restore the interruption flag, we're about to shutdown anyway
             } finally {
                 lock.unlock();
             }
diff --git a/core/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java b/core/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
index 3ae0ba8f69c9..d40511480298 100644
--- a/core/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
+++ b/core/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
@@ -35,7 +35,6 @@
 import org.elasticsearch.test.ESSingleNodeTestCase;
 import org.elasticsearch.test.IndexSettingsModule;
 
-import java.io.IOException;
 import java.util.concurrent.TimeUnit;
 
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
@@ -135,7 +134,7 @@ public void testDeleteIndexStore() throws Exception {
         ensureGreen("test");
     }
 
-    public void testPendingTasks() throws IOException {
+    public void testPendingTasks() throws Exception {
         IndicesService indicesService = getIndicesService();
         IndexService test = createIndex("test");
 
diff --git a/test-framework/src/main/java/org/elasticsearch/test/CompositeTestCluster.java b/test-framework/src/main/java/org/elasticsearch/test/CompositeTestCluster.java
index 8b14ef06b065..caa414e071c1 100644
--- a/test-framework/src/main/java/org/elasticsearch/test/CompositeTestCluster.java
+++ b/test-framework/src/main/java/org/elasticsearch/test/CompositeTestCluster.java
@@ -63,19 +63,14 @@ public synchronized void afterTest() throws IOException {
     }
 
     @Override
-    public synchronized void beforeTest(Random random, double transportClientRatio) throws IOException {
+    public synchronized void beforeTest(Random random, double transportClientRatio) throws IOException, InterruptedException {
         super.beforeTest(random, transportClientRatio);
         cluster.beforeTest(random, transportClientRatio);
         Settings defaultSettings = cluster.getDefaultSettings();
         final Client client = cluster.size() > 0 ? cluster.client() : cluster.clientNodeClient();
         for (int i = 0; i < externalNodes.length; i++) {
             if (!externalNodes[i].running()) {
-                try {
-                    externalNodes[i] = externalNodes[i].start(client, defaultSettings, NODE_PREFIX + i, cluster.getClusterName(), i);
-                } catch (InterruptedException e) {
-                    Thread.interrupted();
-                    return;
-                }
+                externalNodes[i] = externalNodes[i].start(client, defaultSettings, NODE_PREFIX + i, cluster.getClusterName(), i);
             }
             externalNodes[i].reset(random.nextLong());
         }
diff --git a/test-framework/src/main/java/org/elasticsearch/test/ExternalNode.java b/test-framework/src/main/java/org/elasticsearch/test/ExternalNode.java
index 3aeb473b965b..6ab39a5b139a 100644
--- a/test-framework/src/main/java/org/elasticsearch/test/ExternalNode.java
+++ b/test-framework/src/main/java/org/elasticsearch/test/ExternalNode.java
@@ -206,7 +206,7 @@ synchronized void reset(long seed) {
         this.random.setSeed(seed);
     }
 
-    synchronized void stop() {
+    synchronized void stop() throws InterruptedException {
         if (running()) {
             try {
                 if (this.client != null) {
@@ -214,11 +214,7 @@ synchronized void stop() {
                 }
             } finally {
                 process.destroy();
-                try {
-                    process.waitFor();
-                } catch (InterruptedException e) {
-                    Thread.interrupted();
-                }
+                process.waitFor();
                 process = null;
                 nodeInfo = null;
 
@@ -233,7 +229,11 @@ synchronized boolean running() {
 
     @Override
     public void close() {
-        stop();
+        try {
+            stop();
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+        }
     }
 
     synchronized String getName() {
diff --git a/test-framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java b/test-framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java
index 88e793a2f12e..b86c86896990 100644
--- a/test-framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java
+++ b/test-framework/src/main/java/org/elasticsearch/test/InternalTestCluster.java
@@ -910,7 +910,7 @@ public Client client(Node node, String clusterName) {
     }
 
     @Override
-    public synchronized void beforeTest(Random random, double transportClientRatio) throws IOException {
+    public synchronized void beforeTest(Random random, double transportClientRatio) throws IOException, InterruptedException {
         super.beforeTest(random, transportClientRatio);
         reset(true);
     }
diff --git a/test-framework/src/main/java/org/elasticsearch/test/TestCluster.java b/test-framework/src/main/java/org/elasticsearch/test/TestCluster.java
index c0d98ff301a3..858fbab9ab50 100644
--- a/test-framework/src/main/java/org/elasticsearch/test/TestCluster.java
+++ b/test-framework/src/main/java/org/elasticsearch/test/TestCluster.java
@@ -63,7 +63,7 @@ public long seed() {
     /**
      * This method should be executed before each test to reset the cluster to its initial state.
      */
-    public void beforeTest(Random random, double transportClientRatio) throws IOException {
+    public void beforeTest(Random random, double transportClientRatio) throws IOException, InterruptedException {
         assert transportClientRatio >= 0.0 && transportClientRatio <= 1.0;
         logger.debug("Reset test cluster with transport client ratio: [{}]", transportClientRatio);
         this.transportClientRatio = transportClientRatio;
diff --git a/test-framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java b/test-framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
index 4d167d761e9c..1514e254a7fa 100644
--- a/test-framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
+++ b/test-framework/src/test/java/org/elasticsearch/test/test/InternalTestClusterTests.java
@@ -94,7 +94,7 @@ public static void assertSettings(Settings left, Settings right, boolean checkCl
         }
     }
 
-    public void testBeforeTest() throws IOException {
+    public void testBeforeTest() throws Exception {
         long clusterSeed = randomLong();
         int minNumDataNodes = randomIntBetween(0, 3);
         int maxNumDataNodes = randomIntBetween(minNumDataNodes, 4);
