diff --git a/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
index 299d40aca78a..decebd35aa62 100644
--- a/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
+++ b/core/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
@@ -389,12 +389,14 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
 
     public static class Timer implements Streamable {
         protected long startTime = 0;
+        protected long startNanoTime = 0;
         protected long time = -1;
         protected long stopTime = 0;
 
         public synchronized void start() {
             assert startTime == 0 : "already started";
-            startTime = TimeValue.nsecToMSec(System.nanoTime());
+            startTime = System.currentTimeMillis();
+            startNanoTime = System.nanoTime();
         }
 
         /** Returns start time in millis */
@@ -404,13 +406,13 @@ public synchronized long startTime() {
 
         /** Returns elapsed time in millis, or 0 if timer was not started */
         public synchronized long time() {
-            if (startTime == 0) {
+            if (startNanoTime == 0) {
                 return 0;
             }
             if (time >= 0) {
                 return time;
             }
-            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime()) - startTime);
+            return Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startNanoTime));
         }
 
         /** Returns stop time in millis */
@@ -420,13 +422,14 @@ public synchronized long stopTime() {
 
         public synchronized void stop() {
             assert stopTime == 0 : "already stopped";
-            stopTime = Math.max(TimeValue.nsecToMSec(System.nanoTime()), startTime);
-            time = stopTime - startTime;
+            stopTime = Math.max(System.currentTimeMillis(), startTime);
+            time = TimeValue.nsecToMSec(System.nanoTime() - startNanoTime);
             assert time >= 0;
         }
 
         public synchronized void reset() {
             startTime = 0;
+            startNanoTime = 0;
             time = -1;
             stopTime = 0;
         }
@@ -435,6 +438,7 @@ public synchronized void reset() {
         @Override
         public synchronized void readFrom(StreamInput in) throws IOException {
             startTime = in.readVLong();
+            startNanoTime = in.readVLong();
             stopTime = in.readVLong();
             time = in.readVLong();
         }
@@ -442,6 +446,7 @@ public synchronized void readFrom(StreamInput in) throws IOException {
         @Override
         public synchronized void writeTo(StreamOutput out) throws IOException {
             out.writeVLong(startTime);
+            out.writeVLong(startNanoTime);
             out.writeVLong(stopTime);
             // write a snapshot of current time, which is not per se the time field
             out.writeVLong(time());
diff --git a/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java
index e9f605a22ce3..d0adffc383b9 100644
--- a/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java
+++ b/core/src/test/java/org/elasticsearch/indices/recovery/RecoveryStateTest.java
@@ -154,7 +154,7 @@ public void run() {
         if (randomBoolean()) {
             timer.stop();
             assertThat(timer.stopTime(), greaterThanOrEqualTo(timer.startTime()));
-            assertThat(timer.time(), equalTo(timer.stopTime() - timer.startTime()));
+            assertThat(timer.time(), greaterThan(0l));
             lastRead = streamer.serializeDeserialize();
             assertThat(lastRead.startTime(), equalTo(timer.startTime()));
             assertThat(lastRead.time(), equalTo(timer.time()));
@@ -286,8 +286,7 @@ Index createObj() {
         if (completeRecovery) {
             assertThat(filesToRecover.size(), equalTo(0));
             index.stop();
-            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));
-            assertThat(index.time(), equalTo(index.stopTime() - index.startTime()));
+            assertThat(index.time(), greaterThanOrEqualTo(0l));
         }
 
         logger.info("testing serialized information");
diff --git a/rest-api-spec/src/main/resources/rest-api-spec/test/indices.recovery/10_basic.yaml b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.recovery/10_basic.yaml
index c37aab1cb94e..55ce29c75475 100644
--- a/rest-api-spec/src/main/resources/rest-api-spec/test/indices.recovery/10_basic.yaml
+++ b/rest-api-spec/src/main/resources/rest-api-spec/test/indices.recovery/10_basic.yaml
@@ -16,10 +16,12 @@
   - do:
       indices.recovery:
         index: [test_1]
+        human: true
 
-  - match: { test_1.shards.0.type:                                 "STORE"               }
+  - match: { test_1.shards.0.type:                                 "STORE"                 }
   - match: { test_1.shards.0.stage:                                "DONE"                  }
   - match: { test_1.shards.0.primary:                              true                    }
+  - match: { test_1.shards.0.start_time:                           /^2\d\d\d-.+/           }
   - match: { test_1.shards.0.target.ip:                            /^\d+\.\d+\.\d+\.\d+$/  }
   - gte:   { test_1.shards.0.index.files.total:                    0                       }
   - gte:   { test_1.shards.0.index.files.reused:                   0                       }
