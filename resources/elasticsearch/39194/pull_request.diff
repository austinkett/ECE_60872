diff --git a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecks.java b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecks.java
index 8142622b1f0b..e4a96924c325 100644
--- a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecks.java
+++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecks.java
@@ -31,7 +31,7 @@ static DeprecationIssue checkShardLimit(ClusterState state) {
         if (nodeCount > 0 && currentOpenShards >= maxShardsInCluster) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Number of open shards exceeds cluster soft limit",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_cluster_wide_shard_soft_limit",
                 "There are [" + currentOpenShards + "] open shards in this cluster, but the cluster is limited to [" +
                     shardsPerNode + "] per data node, for [" + maxShardsInCluster + "] maximum.");
@@ -43,8 +43,8 @@ static DeprecationIssue checkNoMasterBlock(ClusterState state) {
         if (state.metaData().settings().hasValue(NO_MASTER_BLOCK_SETTING.getKey())) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Master block setting will be renamed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
-                    "_new_name_for_literal_no_master_block_literal_setting",
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
+                    "#_new_name_for_literal_no_master_block_literal_setting",
                 "The setting discovery.zen.no_master_block will be renamed to cluster.no_master_block in 7.0. " +
                     "Please unset discovery.zen.no_master_block and set cluster.no_master_block after upgrading to 7.0.");
         }
@@ -56,7 +56,7 @@ static DeprecationIssue checkClusterName(ClusterState state) {
         if (clusterName.contains(":")) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Cluster name cannot contain ':'",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_literal_literal_is_no_longer_allowed_in_cluster_name",
                 "This cluster is named [" + clusterName + "], which contains the illegal character ':'.");
         }
@@ -87,7 +87,7 @@ static DeprecationIssue checkUserAgentPipelines(ClusterState state) {
         if (pipelinesWithDeprecatedEcsConfig.isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "User-Agent ingest plugin will use ECS-formatted output",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#ingest-user-agent-ecs-always",
                 "Ingest pipelines " + pipelinesWithDeprecatedEcsConfig + " will change to using ECS output format in 7.0");
         }
diff --git a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
index a3334d755a20..e30a9e4a985f 100644
--- a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
+++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecks.java
@@ -93,7 +93,7 @@ static DeprecationIssue delimitedPayloadFilterCheck(IndexMetaData indexMetaData)
         }
         if (issues.size() > 0) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING, "Use of 'delimited_payload_filter'.",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_literal_delimited_payload_filter_literal_renaming", issues.toString());
         }
         return null;
@@ -107,7 +107,7 @@ static DeprecationIssue oldIndicesCheck(IndexMetaData indexMetaData) {
             if (".tasks".equals(indexMetaData.getIndex().getName())) {
                 return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                     ".tasks index must be re-created",
-                    "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                    "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                         "#_indices_created_before_7_0",
                     "The .tasks index was created before version 6.0 and cannot be opened in 7.0. " +
                         "You must delete this index and allow it to be re-created by Elasticsearch. If you wish to preserve task history, "+
@@ -117,7 +117,7 @@ static DeprecationIssue oldIndicesCheck(IndexMetaData indexMetaData) {
                 || mappingCount > 2) {
                 return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                     "Index has more than one mapping type",
-                    "https://www.elastic.co/guide/en/elasticsearch/reference/master/removal-of-types.html" +
+                    "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/removal-of-types.html" +
                         "#_migrating_multi_type_indices_to_single_type",
                     "This index has more than one mapping type, which is not supported in 7.0. " +
                         "This index must be reindexed into one or more single-type indices. Mapping types in use: " +
@@ -125,7 +125,7 @@ static DeprecationIssue oldIndicesCheck(IndexMetaData indexMetaData) {
             } else {
                 return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                     "Index created before 6.0",
-                    "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                    "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                         "#_indices_created_before_7_0",
                     "This index was created using version: " + createdWith);
             }
@@ -139,7 +139,7 @@ static DeprecationIssue indexNameCheck(IndexMetaData indexMetaData) {
         if (clusterName.contains(":")) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Index name cannot contain ':'",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_literal_literal_is_no_longer_allowed_in_index_name",
                 "This index is named [" + clusterName + "], which contains the illegal character ':'.");
         }
@@ -151,7 +151,7 @@ static DeprecationIssue percolatorUnmappedFieldsAsStringCheck(IndexMetaData inde
             String settingValue = indexMetaData.getSettings().get("index.percolator.map_unmapped_fields_as_text");
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Setting index.percolator.map_unmapped_fields_as_text has been renamed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_percolator",
                 "The index setting [index.percolator.map_unmapped_fields_as_text] currently set to [" + settingValue +
                     "] been removed in favor of [index.percolator.map_unmapped_fields_as_text].");
@@ -167,7 +167,7 @@ static DeprecationIssue classicSimilarityMappingCheck(IndexMetaData indexMetaDat
         if (issues.size() > 0) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Classic similarity has been removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_the_literal_classic_literal_similarity_has_been_removed",
                 "Fields which use classic similarity: " + issues.toString());
         }
@@ -183,7 +183,7 @@ static DeprecationIssue classicSimilaritySettingsCheck(IndexMetaData indexMetaDa
         if (classicSimilarities.size() > 0) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Classic similarity has been removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_the_literal_classic_literal_similarity_has_been_removed",
                 "Custom similarities defined using classic similarity: " + classicSimilarities.toString());
         }
@@ -198,7 +198,7 @@ static DeprecationIssue nodeLeftDelayedTimeCheck(IndexMetaData indexMetaData) {
             if (parsedValue.getNanos() < 0) {
                 return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                     "Negative values for " + setting + " are deprecated and should be set to 0",
-                    "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                    "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                         "#_literal_index_unassigned_node_left_delayed_timeout_literal_may_no_longer_be_negative",
                     "The index [" + indexMetaData.getIndex().getName() + "] has [" + setting + "] set to [" + value +
                         "], but negative values are not allowed");
@@ -214,7 +214,7 @@ static DeprecationIssue shardOnStartupCheck(IndexMetaData indexMetaData) {
             if ("fix".equalsIgnoreCase(value)) {
                 return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                     "The value [fix] for setting [" + setting + "] is no longer valid",
-                    "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                    "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                         "#_literal_fix_literal_value_for_literal_index_shard_check_on_startup_literal_is_removed",
                     "The index [" + indexMetaData.getIndex().getName() + "] has the setting [" + setting + "] set to value [fix]" +
                         ", but [fix] is no longer a valid value. Valid values are true, false, and checksum");
diff --git a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecks.java b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecks.java
index 8da70a80d7e7..a9ba96be52b8 100644
--- a/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecks.java
+++ b/x-pack/plugin/deprecation/src/main/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecks.java
@@ -38,7 +38,7 @@ static DeprecationIssue httpEnabledSettingRemoved(Settings nodeSettings, Plugins
         if (nodeSettings.hasValue(NetworkModule.HTTP_ENABLED.getKey())) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "HTTP Enabled setting removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#remove-http-enabled",
                 "the HTTP Enabled setting has been removed");
         }
@@ -49,8 +49,8 @@ static DeprecationIssue noMasterBlockRenamed(Settings nodeSettings, PluginsAndMo
         if (nodeSettings.hasValue(NO_MASTER_BLOCK_SETTING.getKey())) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Master block setting renamed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
-                    "_new_name_for_literal_no_master_block_literal_setting",
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
+                    "#_new_name_for_literal_no_master_block_literal_setting",
                 "The setting discovery.zen.no_master_block will be renamed to cluster.no_master_block in 7.0. " +
                     "Please unset discovery.zen.no_master_block and set cluster.no_master_block after upgrading to 7.0.");
         }
@@ -61,7 +61,7 @@ static DeprecationIssue auditLogPrefixSettingsCheck(Settings nodeSettings, Plugi
         if (nodeSettings.getByPrefix("xpack.security.audit.logfile.prefix").isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Audit log node info settings renamed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#audit-logfile-local-node-info",
                 "the audit log is now structured JSON");
         }
@@ -74,7 +74,7 @@ static DeprecationIssue auditIndexSettingsCheck(Settings nodeSettings, PluginsAn
 
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Audit index output type removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#remove-audit-index-output",
                 "recommended replacement is the logfile audit output type");
         }
@@ -85,7 +85,7 @@ static DeprecationIssue indexThreadPoolCheck(Settings nodeSettings, PluginsAndMo
         if (nodeSettings.getByPrefix("thread_pool.index.").isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Index thread pool removed in favor of combined write thread pool",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_index_thread_pool",
                 "the write threadpool is now used for all writes");
         }
@@ -96,7 +96,7 @@ static DeprecationIssue bulkThreadPoolCheck(Settings nodeSettings, PluginsAndMod
         if (nodeSettings.getByPrefix("thread_pool.bulk.").isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Bulk thread pool renamed to write thread pool",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#write-thread-pool-fallback",
                 "the write threadpool is now used for all writes");
         }
@@ -107,7 +107,7 @@ static DeprecationIssue tribeNodeCheck(Settings nodeSettings, PluginsAndModules
         if (nodeSettings.getByPrefix("tribe.").isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Tribe Node removed in favor of Cross Cluster Search",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_tribe_node_removed",
                 "tribe node functionality has been removed in favor of cross-cluster search");
         }
@@ -118,7 +118,7 @@ static DeprecationIssue authRealmsTypeCheck(Settings nodeSettings, PluginsAndMod
         if (nodeSettings.getGroups("xpack.security.authc.realms").size() > 0) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Security realm settings structure changed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#include-realm-type-in-setting",
                 "these settings must be updated to the new format while the node is offline during the upgrade to 7.0");
         }
@@ -129,7 +129,7 @@ static DeprecationIssue httpPipeliningCheck(Settings nodeSettings, PluginsAndMod
         if (nodeSettings.hasValue(HttpTransportSettings.SETTING_PIPELINING.getKey())) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "HTTP pipelining setting removed as pipelining is now mandatory",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#remove-http-pipelining-setting",
                 "");
         }
@@ -145,7 +145,7 @@ static DeprecationIssue discoveryConfigurationCheck(Settings nodeSettings, Plugi
             && nodeSettings.hasValue(DISCOVERY_HOSTS_PROVIDER_SETTING.getKey()) == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Discovery configuration is required in production mode",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_discovery_configuration_is_required_in_production",
                 "");
         }
@@ -161,7 +161,7 @@ static DeprecationIssue watcherNotificationsSecureSettingsCheck(Settings nodeSet
             || false == nodeSettings.getByPrefix("xpack.notification.slack.account.").filter(s -> s.endsWith(".url")).isEmpty()) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Watcher notification accounts' authentication settings must be defined securely",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#watcher-notifications-account-settings",
                 "account authentication settings must use the keystore");
         }
@@ -183,7 +183,7 @@ static DeprecationIssue azureRepositoryChanges(Settings nodeSettings, PluginsAnd
         if (plugins.getPluginInfos().stream().anyMatch(pluginInfo -> "repository-azure".equals(pluginInfo.getName()))) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "Azure Repository settings changed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_azure_repository_plugin",
                 "see breaking changes list for details");
         }
@@ -195,7 +195,7 @@ static DeprecationIssue gcsRepositoryChanges(Settings nodeSettings, PluginsAndMo
 
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "GCS Repository settings changed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_google_cloud_storage_repository_plugin",
                 "see breaking changes list for details");
         }
@@ -206,7 +206,7 @@ static DeprecationIssue fileDiscoveryPluginRemoved(Settings nodeSettings, Plugin
         if (plugins.getPluginInfos().stream().anyMatch(pluginInfo -> "discovery-file".equals(pluginInfo.getName()))) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "File-based discovery is no longer a plugin and uses a different path",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_file_based_discovery_plugin",
                 "the location of the hosts file used for file-based discovery has changed to $ES_PATH_CONF/unicast_hosts.txt " +
                     "(from $ES_PATH_CONF/file-discovery/unicast_hosts.txt)");
@@ -218,7 +218,7 @@ static DeprecationIssue defaultSSLSettingsRemoved(Settings nodeSettings, Plugins
         if (nodeSettings.getByPrefix("xpack.ssl").isEmpty() == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Default TLS/SSL settings have been removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#tls-setting-fallback",
                 "each component must have TLS/SSL configured explicitly");
         }
@@ -269,7 +269,7 @@ static DeprecationIssue tlsv1ProtocolDisabled(Settings nodeSettings, PluginsAndM
         if (contexts.size() > 0) {
             return new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "TLS v1.0 has been removed from default TLS/SSL protocols",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#tls-v1-removed",
                 "These ssl contexts rely on the default TLS/SSL protocols: " + contexts);
         }
@@ -280,7 +280,7 @@ static DeprecationIssue transportSslEnabledWithoutSecurityEnabled(Settings nodeS
         if (TRANSPORT_SSL_ENABLED.get(nodeSettings) && nodeSettings.hasValue(SECURITY_ENABLED.getKey()) == false) {
             return new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "TLS/SSL in use, but security not explicitly enabled",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#trial-explicit-security",
                 "security should be explicitly enabled (with [" + SECURITY_ENABLED.getKey() +
                     "]), it will no longer be automatically enabled when transport SSL is enabled ([" +
diff --git a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecksTests.java b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecksTests.java
index 007c3edd0a85..3e8d10002650 100644
--- a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecksTests.java
+++ b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/ClusterDeprecationChecksTests.java
@@ -34,7 +34,7 @@ public void testCheckClusterName() {
         final ClusterState badClusterState = ClusterState.builder(new ClusterName(badClusterName)).build();
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL, "Cluster name cannot contain ':'",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_literal_literal_is_no_longer_allowed_in_cluster_name",
             "This cluster is named [" + badClusterName + "], which contains the illegal character ':'.");
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(CLUSTER_SETTINGS_CHECKS, c -> c.apply(badClusterState));
@@ -57,8 +57,8 @@ public void testCheckNoMasterBlock() {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Master block setting will be renamed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
-                "_new_name_for_literal_no_master_block_literal_setting",
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
+                "#_new_name_for_literal_no_master_block_literal_setting",
             "The setting discovery.zen.no_master_block will be renamed to cluster.no_master_block in 7.0. " +
                 "Please unset discovery.zen.no_master_block and set cluster.no_master_block after upgrading to 7.0.");
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(CLUSTER_SETTINGS_CHECKS, c -> c.apply(state));
@@ -91,7 +91,7 @@ public void testCheckShardLimit() {
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(CLUSTER_SETTINGS_CHECKS, c -> c.apply(state));
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Number of open shards exceeds cluster soft limit",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_cluster_wide_shard_soft_limit",
             "There are [" + currentOpenShards + "] open shards in this cluster, but the cluster is limited to [" +
                 shardsPerNode + "] per data node, for [" + maxShardsInCluster + "] maximum.");
@@ -155,7 +155,7 @@ public void testUserAgentEcsCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "User-Agent ingest plugin will use ECS-formatted output",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#ingest-user-agent-ecs-always",
             "Ingest pipelines [ecs_false, ecs_null] will change to using ECS output format in 7.0");
         assertEquals(singletonList(expected), issues);
diff --git a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
index 1bc28691a315..2543b6dfb9f1 100644
--- a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
+++ b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/IndexDeprecationChecksTests.java
@@ -37,7 +37,7 @@ public void testOldIndicesCheck() {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Index created before 6.0",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_indices_created_before_7_0",
             "This index was created using version: " + createdWith);
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(INDEX_SETTINGS_CHECKS, c -> c.apply(indexMetaData));
@@ -54,7 +54,7 @@ public void testOldTasksIndexCheck() {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             ".tasks index must be re-created",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_indices_created_before_7_0",
             "The .tasks index was created before version 6.0 and cannot be opened in 7.0. " +
                 "You must delete this index and allow it to be re-created by Elasticsearch. If you wish to preserve task history, " +
@@ -92,7 +92,7 @@ public void testMultipleTypesCheckWithDefaultMapping() throws IOException {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Index created before 6.0",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_indices_created_before_7_0",
             "This index was created using version: " + createdWith);
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(INDEX_SETTINGS_CHECKS, c -> c.apply(indexMetaData));
@@ -144,7 +144,7 @@ public void testMultipleTypesCheck() throws IOException {
         assertEquals("Index has more than one mapping type", issue.getMessage());
         assertEquals(DeprecationIssue.Level.CRITICAL, issue.getLevel());
         assertEquals(
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/removal-of-types.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/removal-of-types.html" +
                 "#_migrating_multi_type_indices_to_single_type",
             issue.getUrl());
         assertThat(issue.getDetails(), allOf(
@@ -162,7 +162,7 @@ public void testDelimitedPayloadFilterCheck() {
             .put("index.analysis.filter.my_delimited_payload_filter.encoding", "identity").build();
         IndexMetaData indexMetaData = IndexMetaData.builder("test").settings(settings).numberOfShards(1).numberOfReplicas(0).build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING, "Use of 'delimited_payload_filter'.",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_literal_delimited_payload_filter_literal_renaming",
             "[The filter [my_delimited_payload_filter] is of deprecated 'delimited_payload_filter' type. "
                 + "The filter type should be changed to 'delimited_payload'.]");
@@ -179,7 +179,7 @@ public void testIndexNameCheck(){
             .build();
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING, "Index name cannot contain ':'",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_literal_literal_is_no_longer_allowed_in_index_name",
             "This index is named [" + badIndexName + "], which contains the illegal character ':'.");
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(INDEX_SETTINGS_CHECKS, c -> c.apply(badIndex));
@@ -208,7 +208,7 @@ public void testPercolatorUnmappedFieldsAsStringCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Setting index.percolator.map_unmapped_fields_as_text has been renamed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_percolator",
             "The index setting [index.percolator.map_unmapped_fields_as_text] currently set to [" + settingValue +
                 "] been removed in favor of [index.percolator.map_unmapped_fields_as_text].");
@@ -245,7 +245,7 @@ public void testClassicSimilarityMappingCheck() throws IOException {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Classic similarity has been removed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_the_literal_classic_literal_similarity_has_been_removed",
             "Fields which use classic similarity: [[type: _doc, field: classic_sim_field]]");
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(INDEX_SETTINGS_CHECKS, c -> c.apply(index));
@@ -264,7 +264,7 @@ public void testClassicSimilaritySettingsCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Classic similarity has been removed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_the_literal_classic_literal_similarity_has_been_removed",
             "Custom similarities defined using classic similarity: [my_classic_similarity]");
         List<DeprecationIssue> issues = DeprecationChecks.filterChecks(INDEX_SETTINGS_CHECKS, c -> c.apply(index));
@@ -283,7 +283,7 @@ public void testNodeLeftDelayedTimeCheck() {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Negative values for " + setting + " are deprecated and should be set to 0",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_literal_index_unassigned_node_left_delayed_timeout_literal_may_no_longer_be_negative",
             "The index [" + indexName + "] has [" + setting + "] set to [" + negativeTimeValue +
                 "], but negative values are not allowed");
@@ -310,7 +310,7 @@ public void testShardOnStartupCheck() {
             .build();
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "The value [fix] for setting [" + setting + "] is no longer valid",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_literal_fix_literal_value_for_literal_index_shard_check_on_startup_literal_is_removed",
             "The index [" + indexName + "] has the setting [" + setting + "] set to value [fix]" +
                 ", but [fix] is no longer a valid value. Valid values are true, false, and checksum");
diff --git a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecksTests.java b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecksTests.java
index 1a407f80f2ad..a6f193b8ccca 100644
--- a/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecksTests.java
+++ b/x-pack/plugin/deprecation/src/test/java/org/elasticsearch/xpack/deprecation/NodeDeprecationChecksTests.java
@@ -79,7 +79,7 @@ private void assertNoIssue(Settings settings) {
     public void testHttpEnabledCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "HTTP Enabled setting removed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#remove-http-enabled",
             "the HTTP Enabled setting has been removed");
         assertSettingsAndIssue("http.enabled", Boolean.toString(randomBoolean()), expected);
@@ -88,8 +88,8 @@ public void testHttpEnabledCheck() {
     public void testNoMasterBlockRenamed() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Master block setting renamed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
-                "_new_name_for_literal_no_master_block_literal_setting",
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
+                "#_new_name_for_literal_no_master_block_literal_setting",
             "The setting discovery.zen.no_master_block will be renamed to cluster.no_master_block in 7.0. " +
                 "Please unset discovery.zen.no_master_block and set cluster.no_master_block after upgrading to 7.0.");
 
@@ -99,7 +99,7 @@ public void testNoMasterBlockRenamed() {
     public void testAuditLoggingPrefixSettingsCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Audit log node info settings renamed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#audit-logfile-local-node-info",
             "the audit log is now structured JSON");
         assertSettingsAndIssue("xpack.security.audit.logfile.prefix.emit_node_host_address",
@@ -110,7 +110,7 @@ public void testAuditLoggingPrefixSettingsCheck() {
 
     public void testAuditIndexSettingsCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL, "Audit index output type removed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html"
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html"
                     + "#remove-audit-index-output",
                 "recommended replacement is the logfile audit output type");
         assertSettingsAndIssue("xpack.security.audit.outputs", randomFrom("[index]", "[\"index\", \"logfile\"]"), expected);
@@ -132,7 +132,7 @@ public void testAuditIndexSettingsCheck() {
     public void testIndexThreadPoolCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Index thread pool removed in favor of combined write thread pool",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_index_thread_pool",
             "the write threadpool is now used for all writes");
         assertSettingsAndIssue("thread_pool.index.size", Integer.toString(randomIntBetween(1, 20000)), expected);
@@ -142,7 +142,7 @@ public void testIndexThreadPoolCheck() {
     public void testBulkThreadPoolCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Bulk thread pool renamed to write thread pool",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#write-thread-pool-fallback",
             "the write threadpool is now used for all writes");
         assertSettingsAndIssue("thread_pool.bulk.size", Integer.toString(randomIntBetween(1, 20000)), expected);
@@ -152,14 +152,14 @@ public void testBulkThreadPoolCheck() {
     public void testWatcherNotificationsSecureSettings() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Watcher notification accounts' authentication settings must be defined securely",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html"
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html"
                         + "#watcher-notifications-account-settings",
                 "account authentication settings must use the keystore");
         assertSettingsAndIssue("xpack.notification.email.account." + randomAlphaOfLength(4) + ".smtp.password", randomAlphaOfLength(4),
                 expected);
         expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Watcher notification accounts' authentication settings must be defined securely",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html"
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html"
                         + "#watcher-notifications-account-settings",
                 "account authentication settings must use the keystore");
         assertSettingsAndIssue("xpack.notification.jira.account." + randomAlphaOfLength(4) + ".url", randomAlphaOfLength(4), expected);
@@ -168,14 +168,14 @@ public void testWatcherNotificationsSecureSettings() {
             randomAlphaOfLength(4), expected);
         expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Watcher notification accounts' authentication settings must be defined securely",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html"
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html"
                         + "#watcher-notifications-account-settings",
                 "account authentication settings must use the keystore");
         assertSettingsAndIssue("xpack.notification.pagerduty.account." + randomAlphaOfLength(4) + ".service_api_key",
                 randomAlphaOfLength(4), expected);
         expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Watcher notification accounts' authentication settings must be defined securely",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html"
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html"
                         + "#watcher-notifications-account-settings",
                 "account authentication settings must use the keystore");
         assertSettingsAndIssue("xpack.notification.slack.account." + randomAlphaOfLength(4) + ".url", randomAlphaOfLength(4), expected);
@@ -195,7 +195,7 @@ public void testTribeNodeCheck() {
         String tribeSetting = "tribe." + randomAlphaOfLengthBetween(1, 20) + ".cluster.name";
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Tribe Node removed in favor of Cross Cluster Search",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_tribe_node_removed",
             "tribe node functionality has been removed in favor of cross-cluster search");
         assertSettingsAndIssue(tribeSetting, randomAlphaOfLength(5), expected);
@@ -206,7 +206,7 @@ public void testAuthenticationRealmTypeCheck() {
         String authRealmType = "xpack.security.authc.realms." + realm + ".type";
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Security realm settings structure changed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#include-realm-type-in-setting",
             "these settings must be updated to the new format while the node is offline during the upgrade to 7.0");
         assertSettingsAndIssue(authRealmType, randomAlphaOfLength(5), expected);
@@ -215,7 +215,7 @@ public void testAuthenticationRealmTypeCheck() {
     public void testHttpPipeliningCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "HTTP pipelining setting removed as pipelining is now mandatory",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#remove-http-pipelining-setting",
             "");
         assertSettingsAndIssue("http.pipelining", Boolean.toString(randomBoolean()), expected);
@@ -265,7 +265,7 @@ public void testDiscoveryConfigurationCheck() {
 
             DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Discovery configuration is required in production mode",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#_discovery_configuration_is_required_in_production",
                 "");
             List<DeprecationIssue> issues = DeprecationChecks.filterChecks(NODE_SETTINGS_CHECKS,
@@ -284,7 +284,7 @@ public void testAzurePluginCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "Azure Repository settings changed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_azure_repository_plugin",
             "see breaking changes list for details");
         assertSettingsAndIssue("foo", "bar", expected);
@@ -299,7 +299,7 @@ public void testGCSPluginCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "GCS Repository settings changed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_google_cloud_storage_repository_plugin",
             "see breaking changes list for details");
         assertSettingsAndIssue("foo", "bar", expected);
@@ -314,7 +314,7 @@ public void testFileDiscoveryPluginCheck() {
 
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.WARNING,
             "File-based discovery is no longer a plugin and uses a different path",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#_file_based_discovery_plugin",
             "the location of the hosts file used for file-based discovery has changed to $ES_PATH_CONF/unicast_hosts.txt " +
                 "(from $ES_PATH_CONF/file-discovery/unicast_hosts.txt)");
@@ -324,7 +324,7 @@ public void testFileDiscoveryPluginCheck() {
     public void testDefaultSSLSettingsCheck() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "Default TLS/SSL settings have been removed",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#tls-setting-fallback",
             "each component must have TLS/SSL configured explicitly");
         assertSettingsAndIssues(Settings.builder()
@@ -347,7 +347,7 @@ public void testTlsv1ProtocolDisabled() {
         DeprecationIssue[] expected = {
             new DeprecationIssue(DeprecationIssue.Level.WARNING,
                 "TLS v1.0 has been removed from default TLS/SSL protocols",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html#tls-v1-removed",
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html#tls-v1-removed",
                 "These ssl contexts rely on the default TLS/SSL protocols: [" +
                     "xpack.http.ssl, " +
                     "xpack.monitoring.exporters.ems.ssl, " +
@@ -355,7 +355,7 @@ public void testTlsv1ProtocolDisabled() {
                     "xpack.security.authc.realms.ldap1.ssl]"),
             new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
                 "Security realm settings structure changed",
-                "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+                "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                     "#include-realm-type-in-setting",
                 "these settings must be updated to the new format while the node is offline during the upgrade to 7.0")
         };
@@ -383,7 +383,7 @@ public void testTlsv1ProtocolDisabled() {
     public void testTransportSslEnabledWithoutSecurityEnabled() {
         DeprecationIssue expected = new DeprecationIssue(DeprecationIssue.Level.CRITICAL,
             "TLS/SSL in use, but security not explicitly enabled",
-            "https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes-7.0.html" +
+            "https://www.elastic.co/guide/en/elasticsearch/reference/7.0/breaking-changes-7.0.html" +
                 "#trial-explicit-security",
             "security should be explicitly enabled (with [xpack.security.enabled])," +
                 " it will no longer be automatically enabled when transport SSL is enabled ([xpack.security.transport.ssl.enabled])");
