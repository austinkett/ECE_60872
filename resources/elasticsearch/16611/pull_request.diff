diff --git a/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
index c84883fe7371..7041ca479c5f 100644
--- a/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
@@ -26,6 +26,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.join.JoinUtil;
 import org.apache.lucene.search.join.ScoreMode;
+import org.apache.lucene.search.similarities.Similarity;
 import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
@@ -262,7 +263,8 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         if (maxChildren == 0) {
             maxChildren = Integer.MAX_VALUE;
         }
-        return new LateParsingQuery(parentDocMapper.typeFilter(), innerQuery, minChildren(), maxChildren, parentType, scoreMode, parentChildIndexFieldData);
+        return new LateParsingQuery(parentDocMapper.typeFilter(), innerQuery, minChildren(), maxChildren,
+                                    parentType, scoreMode, parentChildIndexFieldData, context.getSearchSimilarity());
     }
 
     final static class LateParsingQuery extends Query {
@@ -274,8 +276,11 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         private final String parentType;
         private final ScoreMode scoreMode;
         private final ParentChildIndexFieldData parentChildIndexFieldData;
+        private final Similarity similarity;
 
-        LateParsingQuery(Query toQuery, Query innerQuery, int minChildren, int maxChildren, String parentType, ScoreMode scoreMode, ParentChildIndexFieldData parentChildIndexFieldData) {
+        LateParsingQuery(Query toQuery, Query innerQuery, int minChildren, int maxChildren,
+                         String parentType, ScoreMode scoreMode, ParentChildIndexFieldData parentChildIndexFieldData,
+                         Similarity similarity) {
             this.toQuery = toQuery;
             this.innerQuery = innerQuery;
             this.minChildren = minChildren;
@@ -283,6 +288,7 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
             this.parentType = parentType;
             this.scoreMode = scoreMode;
             this.parentChildIndexFieldData = parentChildIndexFieldData;
+            this.similarity = similarity;
         }
 
         @Override
@@ -295,6 +301,7 @@ public Query rewrite(IndexReader reader) throws IOException {
                 String joinField = ParentFieldMapper.joinField(parentType);
                 IndexSearcher indexSearcher = new IndexSearcher(reader);
                 indexSearcher.setQueryCache(null);
+                indexSearcher.setSimilarity(similarity);
                 IndexParentChildFieldData indexParentChildFieldData = parentChildIndexFieldData.loadGlobal((DirectoryReader) reader);
                 MultiDocValues.OrdinalMap ordinalMap = ParentChildIndexFieldData.getOrdinalMap(indexParentChildFieldData, parentType);
                 return JoinUtil.createJoinQuery(joinField, innerQuery, toQuery, indexSearcher, scoreMode, ordinalMap, minChildren, maxChildren);
diff --git a/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
index 173d6aa00c69..963bfbebadbd 100644
--- a/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
@@ -195,7 +195,14 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         // wrap the query with type query
         innerQuery = Queries.filtered(innerQuery, parentDocMapper.typeFilter());
         Query childrenFilter = Queries.not(parentTypeQuery);
-        return new HasChildQueryBuilder.LateParsingQuery(childrenFilter, innerQuery, HasChildQueryBuilder.DEFAULT_MIN_CHILDREN, HasChildQueryBuilder.DEFAULT_MAX_CHILDREN, type, score ? ScoreMode.Max : ScoreMode.None, parentChildIndexFieldData);
+        return new HasChildQueryBuilder.LateParsingQuery(childrenFilter,
+                                                         innerQuery,
+                                                         HasChildQueryBuilder.DEFAULT_MIN_CHILDREN,
+                                                         HasChildQueryBuilder.DEFAULT_MAX_CHILDREN,
+                                                         type,
+                                                         score ? ScoreMode.Max : ScoreMode.None,
+                                                         parentChildIndexFieldData,
+                                                         context.getSearchSimilarity());
     }
 
     @Override
diff --git a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
index 67420bdf3b51..6fa654c9c7ab 100644
--- a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
@@ -51,6 +51,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -1926,4 +1927,51 @@ public void testHasChildInnerQueryType() {
                 QueryBuilders.hasChildQuery("child-type", new IdsQueryBuilder().addIds("child-id"))).get();
         assertSearchHits(searchResponse, "parent-id");
     }
+
+    // Tests #16550
+    public void testHasChildWithNonDefaultGlobalSimilarity() {
+      assertAcked(prepareCreate("test").setSettings(settingsBuilder().put(indexSettings())
+          .put("index.similarity.default.type", "BM25"))
+          .addMapping("parent")
+          .addMapping("child", "_parent", "type=parent", "c_field", "type=string"));
+      ensureGreen();
+
+      verifyNonDefaultSimilarity();
+    }
+
+    // Tests #16550
+    public void testHasChildWithNonDefaultFieldSimilarity() {
+      assertAcked(prepareCreate("test")
+          .addMapping("parent")
+          .addMapping("child", "_parent", "type=parent", "c_field", "type=string,similarity=BM25"));
+      ensureGreen();
+
+      verifyNonDefaultSimilarity();
+    }
+
+    // Tests #16550
+    private void verifyNonDefaultSimilarity() {
+      client().prepareIndex("test", "parent", "p1").setSource("p_field", "p_value1").get();
+      client().prepareIndex("test", "child", "c1").setSource("c_field", "c_value").setParent("p1").get();
+      client().prepareIndex("test", "child", "c2").setSource("c_field", "c_value").setParent("p1").get();
+      refresh();
+
+      // baseline: sum of scores of matching child docs outside of has_child query
+      SearchResponse searchResponse = client().prepareSearch("test")
+          .setTypes("child")
+          .setQuery(matchQuery("c_field", "c_value"))
+          .get();
+      assertSearchHits(searchResponse, "c1", "c2");
+      Float childSum = (float) Arrays.asList(searchResponse.getHits().getHits())
+          .stream()
+          .mapToDouble(hit -> hit.getScore())
+          .sum();
+
+      // compare baseline to has_child with 'total' score_mode
+      searchResponse = client().prepareSearch("test")
+          .setQuery(hasChildQuery("child", matchQuery("c_field", "c_value")).scoreMode(ScoreMode.Total))
+          .get();
+      assertSearchHits(searchResponse, "p1");
+      assertThat(searchResponse.getHits().hits()[0].score(), equalTo(childSum));
+    }
 }
