diff --git a/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java b/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java
index 15aca20e23af..d679d2dd943a 100644
--- a/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java
+++ b/src/main/java/org/elasticsearch/common/geo/GeoHashUtils.java
@@ -159,15 +159,13 @@ private final static String neighbor(String geohash, int level, int dx, int dy)
             final int nx = ((level % 2) == 1) ? (x + dx) : (x + dy);
             final int ny = ((level % 2) == 1) ? (y + dy) : (y + dx);
 
-            // define grid limits for current level
-            final int xLimit = ((level % 2) == 0) ? 7 : 3;
-            final int yLimit = ((level % 2) == 0) ? 3 : 7;
-
             // if the defined neighbor has the same parent a the current cell
             // encode the cell directly. Otherwise find the cell next to this
             // cell recursively. Since encoding wraps around within a cell
             // it can be encoded here.
-            if (nx >= 0 && nx <= xLimit && ny >= 0 && ny <= yLimit) {
+            // xLimit and YLimit must always be respectively 7 and 3
+            // since x and y semantics are swapping on each level.
+            if (nx >= 0 && nx <= 7 && ny >= 0 && ny <= 3) {
                 return geohash.substring(0, level - 1) + encode(nx, ny);
             } else {
                 String neighbor = neighbor(geohash, level - 1, dx, dy);
diff --git a/src/test/java/org/elasticsearch/index/search/geo/GeoHashUtilsTests.java b/src/test/java/org/elasticsearch/index/search/geo/GeoHashUtilsTests.java
index 60842b51ed4c..72b86a269cfe 100644
--- a/src/test/java/org/elasticsearch/index/search/geo/GeoHashUtilsTests.java
+++ b/src/test/java/org/elasticsearch/index/search/geo/GeoHashUtilsTests.java
@@ -104,5 +104,35 @@ public void testNeighbours() {
         Collection<? super String> neighbors = new ArrayList<>();
         GeoHashUtils.addNeighbors(geohash, neighbors );
         assertEquals(expectedNeighbors, neighbors);
+
+        // Border odd geohash
+        geohash = "u09x";
+        expectedNeighbors = new ArrayList<>();
+        expectedNeighbors.add("u0c2");
+        expectedNeighbors.add("u0c8");
+        expectedNeighbors.add("u0cb");
+        expectedNeighbors.add("u09r");
+        expectedNeighbors.add("u09z");
+        expectedNeighbors.add("u09q");
+        expectedNeighbors.add("u09w");
+        expectedNeighbors.add("u09y");
+        neighbors = new ArrayList<>();
+        GeoHashUtils.addNeighbors(geohash, neighbors );
+        assertEquals(expectedNeighbors, neighbors);
+
+        // Border even geohash
+        geohash = "u09tv";
+        expectedNeighbors = new ArrayList<>();
+        expectedNeighbors.add("u09wh");
+        expectedNeighbors.add("u09wj");
+        expectedNeighbors.add("u09wn");
+        expectedNeighbors.add("u09tu");
+        expectedNeighbors.add("u09ty");
+        expectedNeighbors.add("u09ts");
+        expectedNeighbors.add("u09tt");
+        expectedNeighbors.add("u09tw");
+        neighbors = new ArrayList<>();
+        GeoHashUtils.addNeighbors(geohash, neighbors );
+        assertEquals(expectedNeighbors, neighbors);
     }
 }
