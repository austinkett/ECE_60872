diff --git a/core/src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java b/core/src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java
index a94c1470afdc..dc37c8276774 100644
--- a/core/src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java
+++ b/core/src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java
@@ -141,7 +141,6 @@ public void sendResponse(final Throwable error) throws IOException {
         BytesReference bytes = stream.bytes();
         ChannelBuffer buffer = bytes.toChannelBuffer();
         NettyHeader.writeHeader(buffer, requestId, status, version);
-        channel.write(buffer);
         ChannelFuture future = channel.write(buffer);
         ChannelFutureListener onResponseSentListener = new ChannelFutureListener() {
             @Override
diff --git a/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java b/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
index fec55f4051c0..cb786f9bed0a 100644
--- a/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
+++ b/core/src/test/java/org/elasticsearch/test/transport/MockTransportService.java
@@ -579,6 +579,9 @@ public void receivedResponse(long requestId, DiscoveryNode sourceNode, String ac
 
         public void requestSent(DiscoveryNode node, long requestId, String action, TransportRequestOptions options) {
         }
+
+        public void unresolvedResponse(long requestId) {
+        }
     }
 
     public void addTracer(Tracer tracer) {
@@ -644,6 +647,14 @@ protected void traceRequestSent(DiscoveryNode node, long requestId, String actio
                 tracer.requestSent(node, requestId, action, options);
             }
         }
+
+        @Override
+        protected void traceUnresolvedResponse(long requestId) {
+            super.traceUnresolvedResponse(requestId);
+            for (Tracer tracer : activeTracers) {
+                tracer.unresolvedResponse(requestId);
+            }
+        }
     }
 
 
diff --git a/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java b/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
index 900b1f34e61e..06eb58c7ebec 100644
--- a/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
+++ b/core/src/test/java/org/elasticsearch/transport/AbstractSimpleTransportTestCase.java
@@ -32,11 +32,14 @@
 import org.elasticsearch.test.junit.annotations.TestLogging;
 import org.elasticsearch.test.transport.MockTransportService;
 import org.elasticsearch.threadpool.ThreadPool;
+import org.hamcrest.collection.IsEmptyCollection;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 import java.io.IOException;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
@@ -579,6 +582,76 @@ public void handleException(TransportException exp) {
         doneLatch.countDown();
     }
 
+    @Test
+    public void testNoUnresolvedResponses() throws InterruptedException {
+        TransportRequestHandler<StringMessageRequest> handler = new TransportRequestHandler<StringMessageRequest>() {
+            @Override
+            public void messageReceived(StringMessageRequest request, TransportChannel channel) throws Exception {
+                channel.sendResponse(new StringMessageResponse(""));
+            }
+        };
+
+        TransportRequestHandler<StringMessageRequest> handlerWithError = new TransportRequestHandler<StringMessageRequest>() {
+            @Override
+            public void messageReceived(StringMessageRequest request, TransportChannel channel) throws Exception {
+                channel.sendResponse(new RuntimeException(""));
+            }
+        };
+
+        final Semaphore requestCompleted = new Semaphore(0);
+        TransportResponseHandler<StringMessageResponse> noopResponseHandler = new BaseTransportResponseHandler<StringMessageResponse>() {
+
+            @Override
+            public StringMessageResponse newInstance() {
+                return new StringMessageResponse();
+            }
+
+            @Override
+            public void handleResponse(StringMessageResponse response) {
+                requestCompleted.release();
+            }
+
+            @Override
+            public void handleException(TransportException exp) {
+                requestCompleted.release();
+            }
+
+            @Override
+            public String executor() {
+                return ThreadPool.Names.SAME;
+            }
+        };
+
+        final AtomicReference<Set<Long>> unresolvedResponses = new AtomicReference<>();
+        unresolvedResponses.set(new HashSet<Long>());
+        MockTransportService.Tracer tracer = new MockTransportService.Tracer() {
+            final Set<Long> requests = new HashSet<>();
+
+            @Override
+            public void receivedResponse(long requestId, DiscoveryNode sourceNode, String action) {
+                assertTrue(requests.add(requestId));
+                super.receivedResponse(requestId, sourceNode, action);
+            }
+
+            @Override
+            public void unresolvedResponse(long requestId) {
+                if (requests.contains(requestId)) {
+                    unresolvedResponses.get().add(requestId);
+                }
+            }
+        };
+        serviceA.addTracer(tracer);
+
+        serviceB.registerRequestHandler("test", StringMessageRequest.class, ThreadPool.Names.SAME, handler);
+        serviceB.registerRequestHandler("testError", StringMessageRequest.class, ThreadPool.Names.SAME, handlerWithError);
+        serviceA.sendRequest(nodeB, "test", new StringMessageRequest("", 10), TransportRequestOptions.EMPTY, noopResponseHandler);
+        serviceA.sendRequest(nodeB, "testError", new StringMessageRequest("", 10), TransportRequestOptions.EMPTY, noopResponseHandler);
+
+        requestCompleted.acquire();
+
+        assertThat(unresolvedResponses.get(), IsEmptyCollection.emptyCollectionOf(Long.class));
+    }
+
 
     @TestLogging(value = "test. transport.tracer:TRACE")
     public void testTracerLog() throws InterruptedException {
