diff --git a/src/main/java/org/elasticsearch/index/mapper/ParseContext.java b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java
index 69d82a88704a..25234e5afd34 100644
--- a/src/main/java/org/elasticsearch/index/mapper/ParseContext.java
+++ b/src/main/java/org/elasticsearch/index/mapper/ParseContext.java
@@ -156,6 +156,7 @@ public BytesRef getBinaryValue(String name) {
     private boolean mappingsModified = false;
     private boolean withinNewMapper = false;
     private boolean withinCopyTo = false;
+    private boolean withinMultiFields = false;
 
     private boolean externalValueSet;
 
@@ -237,6 +238,14 @@ public boolean isWithinCopyTo() {
         return withinCopyTo;
     }
 
+    public void setWithinMultiFields() {
+        this.withinMultiFields = true;
+    }
+
+    public void clearWithinMultiFields() {
+        this.withinMultiFields = false;
+    }
+
     public String index() {
         return this.index;
     }
@@ -360,6 +369,9 @@ private boolean includeInAll(Boolean specificIncludeInAll, boolean indexed) {
         if (withinCopyTo) {
             return false;
         }
+        if (withinMultiFields) {
+            return false;
+        }
         if (!docMapper.allFieldMapper().enabled()) {
             return false;
         }
diff --git a/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
index 8dd163bf0f39..ba3ea228e975 100644
--- a/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
+++ b/src/main/java/org/elasticsearch/index/mapper/core/AbstractFieldMapper.java
@@ -911,6 +911,8 @@ public void parse(AbstractFieldMapper mainField, ParseContext context) throws IO
                 return;
             }
 
+            context.setWithinMultiFields();
+
             ContentPath.Type origPathType = context.path().pathType();
             context.path().pathType(pathType);
 
@@ -920,6 +922,8 @@ public void parse(AbstractFieldMapper mainField, ParseContext context) throws IO
             }
             context.path().remove();
             context.path().pathType(origPathType);
+
+            context.clearWithinMultiFields();
         }
 
         // No need for locking, because locking is taken care of in ObjectMapper#merge and DocumentMapper#merge
diff --git a/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
index 96c94c0dd915..9b20ef73350f 100644
--- a/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
+++ b/src/test/java/org/elasticsearch/index/mapper/all/SimpleAllMapperTests.java
@@ -31,6 +31,7 @@
 import org.elasticsearch.common.lucene.all.AllTokenStream;
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentType;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.FieldMapper;
@@ -40,6 +41,7 @@
 import org.hamcrest.Matchers;
 import org.junit.Test;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -280,4 +282,24 @@ public void testRandom() throws Exception {
         }
 
     }
+
+    @Test
+    public void testMultiField() throws IOException {
+        String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/all/multifield-mapping.json");
+        DocumentMapper docMapper = MapperTestUtils.newParser().parse(mapping);
+
+        XContentBuilder builder = XContentFactory.jsonBuilder();
+        builder.startObject()
+                .field("_id", "1")
+                .field("foo")
+                    .startObject()
+                        .field("bar", "Elasticsearch rules!")
+                    .endObject()
+                .endObject();
+
+        Document doc = docMapper.parse(builder.bytes()).rootDoc();
+        AllField field = (AllField) doc.getField("_all");
+        AllEntries allEntries = ((AllTokenStream) field.tokenStream(docMapper.mappers().indexAnalyzer())).allEntries();
+        assertThat(allEntries.fields(), empty());
+    }
 }
diff --git a/src/test/java/org/elasticsearch/index/mapper/all/multifield-mapping.json b/src/test/java/org/elasticsearch/index/mapper/all/multifield-mapping.json
new file mode 100644
index 000000000000..5a0ad92afad5
--- /dev/null
+++ b/src/test/java/org/elasticsearch/index/mapper/all/multifield-mapping.json
@@ -0,0 +1,23 @@
+{
+    "test": {
+        "properties": {
+            "foo": {
+                "type": "nested",
+                "include_in_all": false,
+                "properties": {
+                    "bar": {
+                        "type": "string",
+                        "index": "not_analyzed",
+                        "include_in_all": false,
+                        "fields": {
+                            "lower": {
+                                "analyzer": "standard",
+                                "type": "string"
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
