diff --git a/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java b/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
index cfcdee61d69a..b035e567c235 100644
--- a/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
+++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryState.java
@@ -662,7 +662,7 @@ public void readFrom(StreamInput in) throws IOException {
             if (in.getVersion().onOrAfter(Version.V_1_5_0)) {
                 reused = in.readBoolean();
             } else {
-                reused = recovered > 0;
+                reused = recovered <= 0;
             }
         }
 
@@ -682,7 +682,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
             builder.field(Fields.NAME, name);
             builder.byteSizeField(Fields.LENGTH_IN_BYTES, Fields.LENGTH, length);
             builder.field(Fields.REUSED, reused);
-            builder.byteSizeField(Fields.RECOVERED_IN_BYTES, Fields.RECOVERED, length);
+            builder.byteSizeField(Fields.RECOVERED_IN_BYTES, Fields.RECOVERED, recovered);
             builder.endObject();
             return builder;
         }
diff --git a/src/test/java/org/elasticsearch/gateway/local/RecoveryBackwardsCompatibilityTests.java b/src/test/java/org/elasticsearch/gateway/local/RecoveryBackwardsCompatibilityTests.java
index 6ce038ea515f..c824e1feef3a 100644
--- a/src/test/java/org/elasticsearch/gateway/local/RecoveryBackwardsCompatibilityTests.java
+++ b/src/test/java/org/elasticsearch/gateway/local/RecoveryBackwardsCompatibilityTests.java
@@ -29,11 +29,15 @@
 import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.common.xcontent.ToXContent;
+import org.elasticsearch.common.xcontent.XContentHelper;
 import org.elasticsearch.indices.recovery.RecoveryState;
 import org.elasticsearch.test.ElasticsearchBackwardsCompatIntegrationTest;
 import org.elasticsearch.test.ElasticsearchIntegrationTest;
 import org.junit.Test;
 
+import java.util.HashMap;
+
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertAcked;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.Matchers.*;
@@ -93,33 +97,38 @@ public void testReusePeerRecovery() throws Exception {
         assertHitCount(countResponse, numDocs);
 
         RecoveryResponse recoveryResponse = client().admin().indices().prepareRecoveries("test").setDetailed(true).get();
+        HashMap<String, String> map = new HashMap<>();
+        map.put("details", "true");
+        final ToXContent.Params params = new ToXContent.MapParams(map);
         for (ShardRecoveryResponse response : recoveryResponse.shardResponses().get("test")) {
             RecoveryState recoveryState = response.recoveryState();
+
+            final String recoverStateAsJSON = XContentHelper.toString(recoveryState, params);
             if (!recoveryState.getPrimary()) {
                 RecoveryState.Index index = recoveryState.getIndex();
                 if (compatibilityVersion().onOrAfter(Version.V_1_2_0)) {
-                    assertThat(index.toString(), index.recoveredBytes(), equalTo(0l));
-                    assertThat(index.toString(), index.reusedBytes(), greaterThan(0l));
-                    assertThat(index.toString(), index.reusedBytes(), equalTo(index.totalBytes()));
-                    assertThat(index.toString(), index.recoveredFileCount(), equalTo(0));
-                    assertThat(index.toString(), index.reusedFileCount(), equalTo(index.totalFileCount()));
-                    assertThat(index.toString(), index.reusedFileCount(), greaterThan(0));
-                    assertThat(index.toString(), index.recoveredBytesPercent(), equalTo(100.f));
-                    assertThat(index.toString(), index.recoveredFilesPercent(), equalTo(100.f));
-                    assertThat(index.toString(), index.reusedBytes(), greaterThan(index.recoveredBytes()));
+                    assertThat(recoverStateAsJSON, index.recoveredBytes(), equalTo(0l));
+                    assertThat(recoverStateAsJSON, index.reusedBytes(), greaterThan(0l));
+                    assertThat(recoverStateAsJSON, index.reusedBytes(), equalTo(index.totalBytes()));
+                    assertThat(recoverStateAsJSON, index.recoveredFileCount(), equalTo(0));
+                    assertThat(recoverStateAsJSON, index.reusedFileCount(), equalTo(index.totalFileCount()));
+                    assertThat(recoverStateAsJSON, index.reusedFileCount(), greaterThan(0));
+                    assertThat(recoverStateAsJSON, index.recoveredBytesPercent(), equalTo(100.f));
+                    assertThat(recoverStateAsJSON, index.recoveredFilesPercent(), equalTo(100.f));
+                    assertThat(recoverStateAsJSON, index.reusedBytes(), greaterThan(index.recoveredBytes()));
                 } else {
                     /* We added checksums on 1.3 but they were available on 1.2 already since this uses Lucene 4.8.
                      * yet in this test we upgrade the entire cluster and therefor the 1.3 nodes try to read the checksum
                      * from the files even if they haven't been written with ES 1.3. Due to that we don't have to recover
                      * the segments files if we are on 1.2 or above...*/
-                    assertThat(index.toString(), index.recoveredBytes(), greaterThan(0l));
-                    assertThat(index.toString(), index.recoveredFileCount(), greaterThan(0));
-                    assertThat(index.toString(), index.reusedBytes(), greaterThan(0l));
-                    assertThat(index.toString(), index.recoveredBytesPercent(), greaterThan(0.0f));
-                    assertThat(index.toString(), index.recoveredBytesPercent(), equalTo(100.f));
-                    assertThat(index.toString(), index.recoveredFilesPercent(), equalTo(100.f));
-                    assertThat(index.toString(), index.reusedBytes(), greaterThan(index.recoveredBytes()));
-                    assertThat(index.toString(), index.recoveredBytes(), lessThan(index.totalBytes()));
+                    assertThat(recoverStateAsJSON, index.recoveredBytes(), greaterThan(0l));
+                    assertThat(recoverStateAsJSON, index.recoveredFileCount(), greaterThan(0));
+                    assertThat(recoverStateAsJSON, index.reusedBytes(), greaterThan(0l));
+                    assertThat(recoverStateAsJSON, index.recoveredBytesPercent(), greaterThan(0.0f));
+                    assertThat(recoverStateAsJSON, index.recoveredBytesPercent(), equalTo(100.f));
+                    assertThat(recoverStateAsJSON, index.recoveredFilesPercent(), equalTo(100.f));
+                    assertThat(recoverStateAsJSON, index.reusedBytes(), greaterThan(index.recoveredBytes()));
+                    assertThat(recoverStateAsJSON, index.recoveredBytes(), lessThan(index.totalBytes()));
                 }
                 // TODO upgrade via optimize?
             }
