diff --git a/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java
index 766fc80ba560..b33bc2336c95 100644
--- a/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java
+++ b/test/framework/src/main/java/org/elasticsearch/test/VersionUtils.java
@@ -20,25 +20,26 @@
 package org.elasticsearch.test;
 
 import org.elasticsearch.Version;
-import org.elasticsearch.common.Booleans;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.collect.Tuple;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Optional;
 import java.util.Random;
+import java.util.SortedSet;
+import java.util.TreeSet;
 import java.util.stream.Collectors;
 
-import static java.util.Collections.singletonList;
 import static java.util.Collections.unmodifiableList;
 
 /** Utilities for selecting versions in tests */
 public class VersionUtils {
+    // this will need to be set to false once the branch has no BWC candidates (ie, its 2 major releases behind a released version)
+    private static final boolean isReleasableBranch = true;
+
     /**
      * Sort versions that have backwards compatibility guarantees from
      * those that don't. Doesn't actually check whether or not the versions
@@ -46,77 +47,42 @@
      * this which it does in {@code :core:verifyVersions}. So long as the
      * rules here match up with the rules in gradle then this should
      * produce sensible results.
+     *
      * @return a tuple containing versions with backwards compatibility
      * guarantees in v1 and versions without the guranteees in v2
      */
     static Tuple<List<Version>, List<Version>> resolveReleasedVersions(Version current, Class<?> versionClass) {
-        List<Version> versions = Version.getDeclaredVersions(versionClass);
+        TreeSet<Version> releasedVersions = new TreeSet<>(Version.getDeclaredVersions(versionClass));
+        List<Version> unreleasedVersions = new ArrayList<>();
 
-        Version last = versions.remove(versions.size() - 1);
-        assert last.equals(current) : "The highest version must be the current one "
-            + "but was [" + last + "] and current was [" + current + "]";
+        assert releasedVersions.last().equals(current) : "The highest version must be the current one "
+            + "but was [" + releasedVersions.last() + "] and current was [" + current + "]";
 
-        if (current.revision != 0) {
-            /* If we are in a stable branch there should be no unreleased version constants
-             * because we don't expect to release any new versions in older branches. If there
-             * are extra constants then gradle will yell about it. */
-            return new Tuple<>(unmodifiableList(versions), singletonList(current));
-        }
+        List<Version> releaseCandidates = getReleaseCandidates(current, releasedVersions);
 
-        /* If we are on a patch release then we know that at least the version before the
-         * current one is unreleased. If it is released then gradle would be complaining. */
-        int unreleasedIndex = versions.size() - 1;
-        while (true) {
-            if (unreleasedIndex < 0) {
-                throw new IllegalArgumentException("Couldn't find first non-alpha release");
-            }
-            /* We don't support backwards compatibility for alphas, betas, and rcs. But
-             * they were released so we add them to the released list. Usually this doesn't
-             * matter to consumers, but consumers that do care should filter non-release
-             * versions. */
-            if (versions.get(unreleasedIndex).isRelease()) {
-                break;
+        releasedVersions.removeAll(releaseCandidates);
+        releasedVersions.remove(current);
+
+        if (isReleasableBranch) {
+            if (isReleased(current)) {
+                // if the minor has been released then it only has a maintenance version
+                // go back 1 version to get the last supported snapshot version of the line, which is a maint bugfix
+                Version highestMinor = getHighestPreviousMinor(current.major, releasedVersions);
+                releasedVersions.remove(highestMinor);
+                unreleasedVersions.add(highestMinor);
+            } else {
+                List<Version> unreleased = getUnreleasedVersions(current, releasedVersions);
+                releasedVersions.removeAll(unreleased);
+                unreleasedVersions.addAll(unreleased);
             }
-            unreleasedIndex--;
         }
 
-        Version unreleased = versions.remove(unreleasedIndex);
-        if (unreleased.revision == 0) {
-            /*
-             * If the last unreleased version is itself a patch release then Gradle enforces that there is yet another unreleased version
-             * before that. However, we have to skip alpha/betas/RCs too (e.g., consider when the version constants are ..., 5.6.3, 5.6.4,
-             * 6.0.0-alpha1, ..., 6.0.0-rc1, 6.0.0-rc2, 6.0.0, 6.1.0 on the 6.x branch. In this case, we will have pruned 6.0.0 and 6.1.0 as
-             * unreleased versions, but we also need to prune 5.6.4. At this point though, unreleasedIndex will be pointing to 6.0.0-rc2, so
-             * we have to skip backwards until we find a non-alpha/beta/RC again. Then we can prune that version as an unreleased version
-             * too.
-             */
-            do {
-                unreleasedIndex--;
-            } while (versions.get(unreleasedIndex).isRelease() == false);
-            Version earlierUnreleased = versions.remove(unreleasedIndex);
-
-            // This earlierUnreleased is either the snapshot on the minor branch lower, or its possible its a staged release. If it is a
-            // staged release, remove it and return it in unreleased as well.
-            if (earlierUnreleased.revision == 0) {
-                unreleasedIndex--;
-                Version actualUnreleasedPreviousMinor = versions.remove(unreleasedIndex);
-                return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(actualUnreleasedPreviousMinor,
-                    earlierUnreleased, unreleased, current)));
-            }
+        // re-add the Alpha/Beta/RC
+        releasedVersions.addAll(releaseCandidates);
+        unreleasedVersions.add(current);
 
-            return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierUnreleased, unreleased, current)));
-        } else if (unreleased.major == current.major) {
-            // need to remove one more of the last major's minor set
-            do {
-                unreleasedIndex--;
-            } while (unreleasedIndex > 0 && versions.get(unreleasedIndex).major == current.major);
-            if (unreleasedIndex > 0) {
-                // some of the test cases return very small lists, so its possible this is just the end of the list, if so, dont include it
-                Version earlierMajorsMinor = versions.remove(unreleasedIndex);
-                return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(earlierMajorsMinor, unreleased, current)));
-            }
-        }
-        return new Tuple<>(unmodifiableList(versions), unmodifiableList(Arrays.asList(unreleased, current)));
+        Collections.sort(unreleasedVersions);
+        return new Tuple<>(new ArrayList<>(releasedVersions), unreleasedVersions);
     }
 
     private static final List<Version> RELEASED_VERSIONS;
@@ -191,23 +157,31 @@ public static Version getPreviousMinorVersion() {
         throw new IllegalArgumentException("couldn't find any released versions of the minor before [" + Version.CURRENT + "]");
     }
 
-    /** Returns the oldest released {@link Version} */
+    /**
+     * Returns the oldest released {@link Version}
+     */
     public static Version getFirstVersion() {
         return RELEASED_VERSIONS.get(0);
     }
 
-    /** Returns a random {@link Version} from all available versions. */
+    /**
+     * Returns a random {@link Version} from all available versions.
+     */
     public static Version randomVersion(Random random) {
         return ALL_VERSIONS.get(random.nextInt(ALL_VERSIONS.size()));
     }
 
-    /** Returns a random {@link Version} from all available versions, that is compatible with the given version. */
+    /**
+     * Returns a random {@link Version} from all available versions, that is compatible with the given version.
+     */
     public static Version randomCompatibleVersion(Random random, Version version) {
         final List<Version> compatible = ALL_VERSIONS.stream().filter(version::isCompatible).collect(Collectors.toList());
         return compatible.get(random.nextInt(compatible.size()));
     }
 
-    /** Returns a random {@link Version} between <code>minVersion</code> and <code>maxVersion</code> (inclusive). */
+    /**
+     * Returns a random {@link Version} between <code>minVersion</code> and <code>maxVersion</code> (inclusive).
+     */
     public static Version randomVersionBetween(Random random, @Nullable Version minVersion, @Nullable Version maxVersion) {
         int minVersionIndex = 0;
         if (minVersion != null) {
@@ -230,14 +204,18 @@ public static Version randomVersionBetween(Random random, @Nullable Version minV
         }
     }
 
-    /** returns the first future incompatible version */
+    /**
+     * returns the first future incompatible version
+     */
     public static Version incompatibleFutureVersion(Version version) {
         final Optional<Version> opt = ALL_VERSIONS.stream().filter(version::before).filter(v -> v.isCompatible(version) == false).findAny();
         assert opt.isPresent() : "no future incompatible version for " + version;
         return opt.get();
     }
 
-    /** Returns the maximum {@link Version} that is compatible with the given version. */
+    /**
+     * Returns the maximum {@link Version} that is compatible with the given version.
+     */
     public static Version maxCompatibleVersion(Version version) {
         final List<Version> compatible = ALL_VERSIONS.stream().filter(version::isCompatible).filter(version::onOrBefore)
             .collect(Collectors.toList());
@@ -245,4 +223,123 @@ public static Version maxCompatibleVersion(Version version) {
         return compatible.get(compatible.size() - 1);
     }
 
+    static Version generateVersion(int major, int minor, int revision) {
+        return Version.fromString(String.format(Locale.ROOT, "%s.%s.%s", major, minor, revision));
+    }
+
+    /**
+     * Uses basic logic about our releases to determine if this version has been previously released
+     */
+    private static boolean isReleased(Version version) {
+        return version.revision > 0;
+    }
+
+    /**
+     * Validates that the count of non suffixed (alpha/beta/rc) versions in a given major to major+1 is greater than 1.
+     * This means that there is more than just a major.0.0 or major.0.0-alpha in a branch to signify it has been prevously released.
+     */
+    static boolean isMajorReleased(Version version, TreeSet<Version> items) {
+        return getMajorSet(version.major, items)
+            .stream()
+            .map(v -> v.isRelease())
+            .count() > 1;
+    }
+
+    /**
+     * Gets the largest version previous major version based on the nextMajorVersion passed in.
+     * If you have a list [5.0.2, 5.1.2, 6.0.1, 6.1.1] and pass in 6 for the nextMajorVersion, it will return you 5.1.2
+     */
+    static Version getHighestPreviousMinor(int majorVersion, TreeSet<Version> items) {
+        return items.headSet(generateVersion(majorVersion, 0, 0)).last();
+    }
+
+    /**
+     * Gets the entire set of major.minor.* given those parameters.
+     */
+    static SortedSet<Version> getMinorSetForMajor(int major, int minor, TreeSet<Version> items) {
+        return items
+            .tailSet(generateVersion(major, minor, 0))
+            .headSet(generateVersion(major, minor + 1, 0));
+    }
+
+    /**
+     * Gets the entire set of major.* to the currentVersion
+     */
+    static SortedSet<Version> getMajorSet(int major, TreeSet<Version> items) {
+        return items
+            .tailSet(generateVersion(major, 0, 0))
+            .headSet(generateVersion(major + 1, 0, 0));
+    }
+
+    /**
+     * Gets the tip of each minor set and puts it in a list.
+     * <p>
+     * examples:
+     * [1.0.0, 1.1.0, 1.1.1, 1.2.0, 1.3.1] will return [1.0.0, 1.1.1, 1.2.0, 1.3.1]
+     * [1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4] will return [1.0.4]
+     */
+    static List<Version> getMinorTips(int major, TreeSet<Version> items) {
+        SortedSet<Version> majorSet = getMajorSet(major, items);
+        List<Version> minorList = new ArrayList<>();
+        for (int minor = majorSet.last().minor; minor >= 0; minor--) {
+            SortedSet<Version> minorSetInMajor = getMinorSetForMajor(major, minor, items);
+            if (minorSetInMajor.isEmpty() == false) {
+                minorList.add(minorSetInMajor.last());
+            }
+        }
+        return minorList;
+    }
+
+    static List<Version> getReleaseCandidates(Version current, TreeSet<Version> versions) {
+        List<Version> releaseCandidates = new ArrayList<>();
+        for (Version version : versions) {
+            if (version.isRelease() == false && isMajorReleased(version, versions)) {
+                // remove the Alpha/Beta/RC temporarily for already released versions
+                releaseCandidates.add(version);
+            } else if (version.isRelease() == false
+                && version.major == current.major
+                && version.minor == current.minor
+                && version.revision == current.revision
+                && version.build != current.build) {
+                // remove the Alpha/Beta/RC temporarily for the current version
+                releaseCandidates.add(version);
+            }
+        }
+        return releaseCandidates;
+    }
+
+    static List<Version> getUnreleasedVersions(Version current, TreeSet<Version> versions) {
+        List<Version> unreleasedVersions = new ArrayList<>();
+        int calculateTipMajor;
+        int numUnreleased;
+        // a current with a minor equal to zero means it is on a nonreleased major version
+        if (current.minor == 0) {
+            calculateTipMajor = current.major - 1;
+            numUnreleased = 2;
+        } else {
+            calculateTipMajor = current.major;
+            numUnreleased = 1;
+        }
+
+        for (Version version: getMinorTips(calculateTipMajor, versions)) {
+            if (isReleased(version)) {
+                // found a released version, this is the last possible version we care about in the major
+                unreleasedVersions.add(version);
+                break;
+            }
+            if (unreleasedVersions.size() < numUnreleased) {
+                unreleasedVersions.add(version);
+            } else {
+                throw new IllegalArgumentException(
+                    "more than " + numUnreleased + " snapshot versions existed in the major set of " + calculateTipMajor);
+            }
+        }
+
+        if (current.minor != 0) {
+            unreleasedVersions.add(getHighestPreviousMinor(calculateTipMajor, versions));
+        }
+
+        return unreleasedVersions;
+    }
+
 }
diff --git a/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java b/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java
index 3c8b349792b7..3ba3b1bcc59c 100644
--- a/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java
+++ b/test/framework/src/test/java/org/elasticsearch/test/VersionUtilsTests.java
@@ -24,9 +24,10 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 import static java.util.stream.Collectors.toCollection;
 import static java.util.stream.Collectors.toList;
@@ -107,11 +108,13 @@ public void testRandomVersionBetween() {
     }
 
     public static class TestReleaseBranch {
-        public static final Version V_5_3_0 = Version.fromString("5.3.0");
-        public static final Version V_5_3_1 = Version.fromString("5.3.1");
-        public static final Version V_5_3_2 = Version.fromString("5.3.2");
-        public static final Version V_5_4_0 = Version.fromString("5.4.0");
-        public static final Version V_5_4_1 = Version.fromString("5.4.1");
+        public static final Version V_4_0_0 = Version.fromString("4.0.0");
+        public static final Version V_4_0_1 = Version.fromString("4.0.1");
+        public static final Version V_5_3_0 = Version.fromString("5.0.0");
+        public static final Version V_5_3_1 = Version.fromString("5.0.1");
+        public static final Version V_5_3_2 = Version.fromString("5.0.2");
+        public static final Version V_5_4_0 = Version.fromString("5.1.0");
+        public static final Version V_5_4_1 = Version.fromString("5.1.1");
         public static final Version CURRENT = V_5_4_1;
     }
     public void testResolveReleasedVersionsForReleaseBranch() {
@@ -120,19 +123,24 @@ public void testResolveReleasedVersionsForReleaseBranch() {
         List<Version> unreleased = t.v2();
 
         assertThat(released, equalTo(Arrays.asList(
+            TestReleaseBranch.V_4_0_0,
             TestReleaseBranch.V_5_3_0,
             TestReleaseBranch.V_5_3_1,
             TestReleaseBranch.V_5_3_2,
             TestReleaseBranch.V_5_4_0)));
-        assertThat(unreleased, equalTo(Collections.singletonList(TestReleaseBranch.V_5_4_1)));
+        assertThat(unreleased, equalTo(Arrays.asList(
+            TestReleaseBranch.V_4_0_1,
+            TestReleaseBranch.V_5_4_1)));
     }
 
     public static class TestStableBranch {
-        public static final Version V_5_3_0 = Version.fromString("5.3.0");
-        public static final Version V_5_3_1 = Version.fromString("5.3.1");
-        public static final Version V_5_3_2 = Version.fromString("5.3.2");
-        public static final Version V_5_4_0 = Version.fromString("5.4.0");
-        public static final Version CURRENT = V_5_4_0;
+        public static final Version V_4_0_0 = Version.fromString("4.0.0");
+        public static final Version V_4_0_1 = Version.fromString("4.0.1");
+        public static final Version V_5_0_0 = Version.fromString("5.0.0");
+        public static final Version V_5_0_1 = Version.fromString("5.0.1");
+        public static final Version V_5_0_2 = Version.fromString("5.0.2");
+        public static final Version V_5_1_0 = Version.fromString("5.1.0");
+        public static final Version CURRENT = V_5_1_0;
     }
     public void testResolveReleasedVersionsForUnreleasedStableBranch() {
         Tuple<List<Version>, List<Version>> t = VersionUtils.resolveReleasedVersions(TestStableBranch.CURRENT,
@@ -141,14 +149,18 @@ public void testResolveReleasedVersionsForUnreleasedStableBranch() {
         List<Version> unreleased = t.v2();
 
         assertThat(released, equalTo(Arrays.asList(
-            TestStableBranch.V_5_3_0,
-            TestStableBranch.V_5_3_1)));
+            TestStableBranch.V_4_0_0,
+            TestStableBranch.V_5_0_0,
+            TestStableBranch.V_5_0_1)));
         assertThat(unreleased, equalTo(Arrays.asList(
-            TestStableBranch.V_5_3_2,
-            TestStableBranch.V_5_4_0)));
+            TestStableBranch.V_4_0_1,
+            TestStableBranch.V_5_0_2,
+            TestStableBranch.V_5_1_0)));
     }
 
     public static class TestStableBranchBehindStableBranch {
+        public static final Version V_4_0_0 = Version.fromString("4.0.0");
+        public static final Version V_4_0_1 = Version.fromString("4.0.1");
         public static final Version V_5_3_0 = Version.fromString("5.3.0");
         public static final Version V_5_3_1 = Version.fromString("5.3.1");
         public static final Version V_5_3_2 = Version.fromString("5.3.2");
@@ -163,9 +175,11 @@ public void testResolveReleasedVersionsForStableBranchBehindStableBranch() {
         List<Version> unreleased = t.v2();
 
         assertThat(released, equalTo(Arrays.asList(
+            TestStableBranchBehindStableBranch.V_4_0_0,
             TestStableBranchBehindStableBranch.V_5_3_0,
             TestStableBranchBehindStableBranch.V_5_3_1)));
         assertThat(unreleased, equalTo(Arrays.asList(
+            TestStableBranchBehindStableBranch.V_4_0_1,
             TestStableBranchBehindStableBranch.V_5_3_2,
             TestStableBranchBehindStableBranch.V_5_4_0,
             TestStableBranchBehindStableBranch.V_5_5_0)));
@@ -221,13 +235,13 @@ public void testResolveReleasedVersionsAtNewMajorRelease() {
         assertThat(released, equalTo(Arrays.asList(
             TestNewMajorRelease.V_5_6_0,
             TestNewMajorRelease.V_5_6_1,
-            TestNewMajorRelease.V_5_6_2,
             TestNewMajorRelease.V_6_0_0_alpha1,
             TestNewMajorRelease.V_6_0_0_alpha2,
             TestNewMajorRelease.V_6_0_0_beta1,
             TestNewMajorRelease.V_6_0_0_beta2,
             TestNewMajorRelease.V_6_0_0)));
         assertThat(unreleased, equalTo(Arrays.asList(
+            TestNewMajorRelease.V_5_6_2,
             TestNewMajorRelease.V_6_0_1)));
     }
 
@@ -306,6 +320,8 @@ public void testResolveReleasedVersionsAtNewMinorBranchIn6x() {
     }
 
     public static class TestIncorrectCurrentVersion {
+        public static final Version V_4_0_0 = Version.fromString("4.0.0");
+        public static final Version V_4_0_1 = Version.fromString("4.0.1");
         public static final Version V_5_3_0 = Version.fromString("5.3.0");
         public static final Version V_5_3_1 = Version.fromString("5.3.1");
         public static final Version V_5_4_0 = Version.fromString("5.4.0");
@@ -323,6 +339,44 @@ public void testIncorrectCurrentVersion() {
         assertThat(message, containsString(previousVersion.toString()));
     }
 
+    public void testIsMajorReleased() {
+        TreeSet<Version> versions = new TreeSet<>(VersionUtils.allReleasedVersions());
+        assertTrue(VersionUtils.isMajorReleased(VersionUtils.generateVersion(6, 0, 0), versions));
+        assertFalse(VersionUtils.isMajorReleased(VersionUtils.generateVersion(versions.last().major + 1, 0, 0), versions));
+        assertFalse(VersionUtils.isMajorReleased(VersionUtils.generateVersion(6, 0, 0), new TreeSet<>()));
+    }
+
+    public void testGetHighestPreviousMinor() {
+        TreeSet<Version> versions = new TreeSet<>(VersionUtils.allReleasedVersions());
+        int majorVersion = 6;
+        Version highestPreviousMinor = VersionUtils.getHighestPreviousMinor(majorVersion, versions);
+        Version shouldBeVersion = null;
+        for (Version version: VersionUtils.allReleasedVersions()) {
+            if (highestPreviousMinor.compareTo(version) >= 0) {
+                shouldBeVersion = version;
+            } else {
+                break;
+            }
+        }
+        assertThat(highestPreviousMinor, equalTo(shouldBeVersion));
+    }
+
+    public void testGetMinorSetForMajor() {
+        TreeSet<Version> versions = new TreeSet<>(VersionUtils.allReleasedVersions());
+        int majorVersion = 6;
+        int minorVersion = 2;
+        SortedSet<Version> minorSet = VersionUtils.getMinorSetForMajor(majorVersion, minorVersion, versions);
+        SortedSet<Version> expectedSet = new TreeSet<>();
+
+        for (Version version: VersionUtils.allReleasedVersions()) {
+            if (version.major == majorVersion && version.minor == minorVersion) {
+                expectedSet.add(version);
+            }
+        }
+
+        assertThat(minorSet, equalTo(expectedSet));
+    }
+
     /**
      * Tests that {@link Version#minimumCompatibilityVersion()} and {@link VersionUtils#allReleasedVersions()}
      * agree with the list of wire and index compatible versions we build in gradle.
