diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/Locate.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/Locate.java
index d6e2f80b025c..e33511cfbfd4 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/Locate.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/Locate.java
@@ -62,20 +62,10 @@ protected TypeResolution resolveType() {
 
     @Override
     protected ProcessorDefinition makeProcessorDefinition() {
-        LocateFunctionProcessorDefinition processorDefinition;
-        if (start == null) {
-            processorDefinition = new LocateFunctionProcessorDefinition(location(), this,
-                    ProcessorDefinitions.toProcessorDefinition(pattern),
-                    ProcessorDefinitions.toProcessorDefinition(source));
-        }
-        else {
-            processorDefinition = new LocateFunctionProcessorDefinition(location(), this,
-                    ProcessorDefinitions.toProcessorDefinition(pattern),
-                    ProcessorDefinitions.toProcessorDefinition(source),
-                    ProcessorDefinitions.toProcessorDefinition(start));
-        }
-        
-        return processorDefinition;
+        return new LocateFunctionProcessorDefinition(location(), this,
+            ProcessorDefinitions.toProcessorDefinition(pattern),
+            ProcessorDefinitions.toProcessorDefinition(source),
+            start == null ? null : ProcessorDefinitions.toProcessorDefinition(start));
     }
 
     @Override
diff --git a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinition.java b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinition.java
index 84b0c4457b17..190205118527 100644
--- a/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinition.java
+++ b/x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinition.java
@@ -21,20 +21,12 @@
 
     public LocateFunctionProcessorDefinition(Location location, Expression expression, ProcessorDefinition pattern,
             ProcessorDefinition source, ProcessorDefinition start) {
-        super(location, expression, Arrays.asList(pattern, source, start));
+        super(location, expression, start == null ? Arrays.asList(pattern, source) : Arrays.asList(pattern, source, start));
         this.pattern = pattern;
         this.source = source;
         this.start = start;
     }
 
-    public LocateFunctionProcessorDefinition(Location location, Expression expression, ProcessorDefinition pattern,
-            ProcessorDefinition source) {
-        super(location, expression, Arrays.asList(pattern, source));
-        this.pattern = pattern;
-        this.source = source;
-        this.start = null;
-    }
-
     @Override
     public final ProcessorDefinition replaceChildren(List<ProcessorDefinition> newChildren) {
         int childrenSize = newChildren.size();
@@ -68,9 +60,6 @@ public boolean resolved() {
 
     protected ProcessorDefinition replaceChildren(ProcessorDefinition newPattern, ProcessorDefinition newSource,
             ProcessorDefinition newStart) {
-        if (newStart == null) {
-            return new LocateFunctionProcessorDefinition(location(), expression(), newPattern, newSource);
-        }
         return new LocateFunctionProcessorDefinition(location(), expression(), newPattern, newSource, newStart);
     }
 
diff --git a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinitionTests.java b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinitionTests.java
index 6d86e807be24..4815c9c9528b 100644
--- a/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinitionTests.java
+++ b/x-pack/plugin/sql/src/test/java/org/elasticsearch/xpack/sql/expression/function/scalar/string/LocateFunctionProcessorDefinitionTests.java
@@ -38,50 +38,34 @@ public static LocateFunctionProcessorDefinition randomLocateFunctionProcessorDef
         return (LocateFunctionProcessorDefinition) (new Locate(randomLocation(), 
                             randomStringLiteral(), 
                             randomStringLiteral(),
-                            frequently() ? randomIntLiteral() : null)
+                            randomFrom(true, false) ? randomIntLiteral() : null)
                 .makeProcessorDefinition());
     }
 
-    @AwaitsFix(bugUrl = "https://github.com/elastic/elasticsearch/issues/32554")
     @Override
     public void testTransform() {
         // test transforming only the properties (location, expression), 
         // skipping the children (the two parameters of the binary function) which are tested separately
         LocateFunctionProcessorDefinition b1 = randomInstance();
         Expression newExpression = randomValueOtherThan(b1.expression(), () -> randomLocateFunctionExpression());
-        LocateFunctionProcessorDefinition newB;
-        if (b1.start() == null) {
-            newB = new LocateFunctionProcessorDefinition(
-                    b1.location(), 
-                    newExpression,
-                    b1.pattern(), 
-                    b1.source());
-        } else {
-            newB = new LocateFunctionProcessorDefinition(
-                b1.location(), 
-                newExpression,
-                b1.pattern(), 
-                b1.source(),
-                b1.start());
-        }
+        LocateFunctionProcessorDefinition newB = new LocateFunctionProcessorDefinition(
+            b1.location(), 
+            newExpression,
+            b1.pattern(), 
+            b1.source(),
+            b1.start());
+
         assertEquals(newB, b1.transformPropertiesOnly(v -> Objects.equals(v, b1.expression()) ? newExpression : v, Expression.class));
         
         LocateFunctionProcessorDefinition b2 = randomInstance();
         Location newLoc = randomValueOtherThan(b2.location(), () -> randomLocation());
-        if (b2.start() == null) {
-            newB = new LocateFunctionProcessorDefinition(
-                    newLoc, 
-                    b2.expression(),
-                    b2.pattern(), 
-                    b2.source());
-        } else {
-            newB = new LocateFunctionProcessorDefinition(
-                    newLoc, 
-                    b2.expression(),
-                    b2.pattern(), 
-                    b2.source(),
-                    b2.start());
-        }
+        newB = new LocateFunctionProcessorDefinition(
+                newLoc, 
+                b2.expression(),
+                b2.pattern(), 
+                b2.source(),
+                b2.start());
+
         assertEquals(newB, 
                 b2.transformPropertiesOnly(v -> Objects.equals(v, b2.location()) ? newLoc : v, Location.class));
     }
@@ -93,15 +77,9 @@ public void testReplaceChildren() {
         ProcessorDefinition newSource = toProcessorDefinition((Expression) randomValueOtherThan(b.source(), () -> randomStringLiteral()));
         ProcessorDefinition newStart;
         
-        LocateFunctionProcessorDefinition newB;
-        if (b.start() == null) {
-            newB = new LocateFunctionProcessorDefinition(b.location(), b.expression(), b.pattern(), b.source());
-            newStart = null;
-        }
-        else {
-            newB = new LocateFunctionProcessorDefinition(b.location(), b.expression(), b.pattern(), b.source(), b.start());
-            newStart = toProcessorDefinition((Expression) randomValueOtherThan(b.start(), () -> randomIntLiteral()));
-        }
+        LocateFunctionProcessorDefinition newB = new LocateFunctionProcessorDefinition(
+                b.location(), b.expression(), b.pattern(), b.source(), b.start());
+        newStart = toProcessorDefinition((Expression) randomValueOtherThan(b.start(), () -> randomIntLiteral()));
         LocateFunctionProcessorDefinition transformed = null;
         
         // generate all the combinations of possible children modifications and test all of them
@@ -132,7 +110,8 @@ protected LocateFunctionProcessorDefinition mutate(LocateFunctionProcessorDefini
                             comb.get(0) ? toProcessorDefinition((Expression) randomValueOtherThan(f.pattern(),
                                     () -> randomStringLiteral())) : f.pattern(),
                             comb.get(1) ? toProcessorDefinition((Expression) randomValueOtherThan(f.source(),
-                                    () -> randomStringLiteral())) : f.source()));
+                                    () -> randomStringLiteral())) : f.source(),
+                                    null));
                 }
             }
         } else {
@@ -155,13 +134,7 @@ protected LocateFunctionProcessorDefinition mutate(LocateFunctionProcessorDefini
 
     @Override
     protected LocateFunctionProcessorDefinition copy(LocateFunctionProcessorDefinition instance) {
-        return instance.start() == null ?
-                new LocateFunctionProcessorDefinition(instance.location(),
-                        instance.expression(),
-                        instance.pattern(),
-                        instance.source())
-                :
-                new LocateFunctionProcessorDefinition(instance.location(),
+        return new LocateFunctionProcessorDefinition(instance.location(),
                         instance.expression(),
                         instance.pattern(),
                         instance.source(),
