diff --git a/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java b/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java
index c082859a0edf..22fb11a06d50 100644
--- a/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java
+++ b/core/src/main/java/org/elasticsearch/search/highlight/HighlightBuilder.java
@@ -227,9 +227,9 @@ public HighlightBuilder order(String order) {
     }
 
     /**
-     * Set to true to cause a field to be highlighted only if a query matches that field. 
-     * Default is false meaning that terms are highlighted on all requested fields regardless 
-     * if the query matches specifically on them. 
+     * Set to true to cause a field to be highlighted only if a query matches that field.
+     * Default is false meaning that terms are highlighted on all requested fields regardless
+     * if the query matches specifically on them.
      */
     public HighlightBuilder requireFieldMatch(boolean requireFieldMatch) {
         this.requireFieldMatch = requireFieldMatch;
@@ -237,7 +237,7 @@ public HighlightBuilder requireFieldMatch(boolean requireFieldMatch) {
     }
 
     /**
-     * When using the highlighterType <tt>fast-vector-highlighter</tt> this setting 
+     * When using the highlighterType <tt>fast-vector-highlighter</tt> this setting
      * controls how far to look for boundary characters, and defaults to 20.
      */
     public HighlightBuilder boundaryMaxScan(Integer boundaryMaxScan) {
@@ -246,8 +246,8 @@ public HighlightBuilder boundaryMaxScan(Integer boundaryMaxScan) {
     }
 
     /**
-     * When using the highlighterType <tt>fast-vector-highlighter</tt> this setting 
-     * defines what constitutes a boundary for highlighting. It’s a single string with 
+     * When using the highlighterType <tt>fast-vector-highlighter</tt> this setting
+     * defines what constitutes a boundary for highlighting. It’s a single string with
      * each boundary character defined in it. It defaults to .,!? \t\n
      */
     public HighlightBuilder boundaryChars(char[] boundaryChars) {
@@ -258,7 +258,7 @@ public HighlightBuilder boundaryChars(char[] boundaryChars) {
     /**
      * Set type of highlighter to use. Supported types
      * are <tt>highlighter</tt>, <tt>fast-vector-highlighter</tt> and <tt>postings-highlighter</tt>.
-     * The default option selected is dependent on the mappings defined for your index. 
+     * The default option selected is dependent on the mappings defined for your index.
      * Details of the different highlighter types are covered in the reference guide.
      */
     public HighlightBuilder highlighterType(String highlighterType) {
@@ -365,7 +365,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
             builder.field("boundary_max_scan", boundaryMaxScan);
         }
         if (boundaryChars != null) {
-            builder.field("boundary_chars", boundaryChars);
+            builder.field("boundary_chars", new String(boundaryChars));
         }
         if (highlighterType != null) {
             builder.field("type", highlighterType);
@@ -427,7 +427,7 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
                     builder.field("boundary_max_scan", field.boundaryMaxScan);
                 }
                 if (field.boundaryChars != null) {
-                    builder.field("boundary_chars", field.boundaryChars);
+                    builder.field("boundary_chars", new String(field.boundaryChars));
                 }
                 if (field.highlighterType != null) {
                     builder.field("type", field.highlighterType);
diff --git a/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
index 305fc60cdafb..589ab780dc27 100644
--- a/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/highlight/HighlighterSearchIT.java
@@ -21,6 +21,7 @@
 import com.carrotsearch.randomizedtesting.generators.RandomPicks;
 import com.google.common.base.Joiner;
 import com.google.common.collect.Iterables;
+
 import org.elasticsearch.action.index.IndexRequestBuilder;
 import org.elasticsearch.action.search.SearchRequestBuilder;
 import org.elasticsearch.action.search.SearchResponse;
@@ -793,9 +794,8 @@ public void testFastVectorHighlighter() throws Exception {
         assertAcked(prepareCreate("test").addMapping("type1", type1TermVectorMapping()));
         ensureGreen();
 
-        client().prepareIndex("test", "type1")
-                .setSource("field1", "this is a test", "field2", "The quick brown fox jumps over the lazy dog").get();
-        refresh();
+        indexRandom(true, client().prepareIndex("test", "type1")
+                .setSource("field1", "this is a test", "field2", "The quick brown fox jumps over the lazy dog"));
 
         logger.info("--> highlighting and searching on field1");
         SearchSourceBuilder source = searchSource()
@@ -813,7 +813,6 @@ public void testFastVectorHighlighter() throws Exception {
 
         searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();
 
-        // LUCENE 3.1 UPGRADE: Caused adding the space at the end...
         assertHighlight(searchResponse, 0, "field1", 0, 1, equalTo("this is a <xxx>test</xxx>"));
 
         logger.info("--> searching on _all, highlighting on field2");
@@ -823,7 +822,6 @@ public void testFastVectorHighlighter() throws Exception {
 
         searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();
 
-        // LUCENE 3.1 UPGRADE: Caused adding the space at the end...
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <xxx>quick</xxx> brown fox jumps over the lazy dog"));
 
         logger.info("--> searching on _all, highlighting on field2");
@@ -833,8 +831,25 @@ public void testFastVectorHighlighter() throws Exception {
 
         searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();
 
-        // LUCENE 3.1 UPGRADE: Caused adding the space at the end...
         assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <xxx>quick</xxx> brown fox jumps over the lazy dog"));
+
+        logger.info("--> searching with boundary characters");
+        source = searchSource()
+                .query(matchQuery("field2", "quick"))
+                .highlight(highlight().field("field2", 30, 1).boundaryChars(new char[] {' '}));
+
+        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();
+
+        assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over"));
+
+        logger.info("--> searching with boundary characters on field");
+        source = searchSource()
+                .query(matchQuery("field2", "quick"))
+                .highlight(highlight().field(new Field("field2").fragmentSize(30).numOfFragments(1).boundaryChars(new char[] {' '})));
+        searchResponse = client().prepareSearch("test").setSource(source.buildAsBytes()).get();
+
+        assertHighlight(searchResponse, 0, "field2", 0, 1, equalTo("The <em>quick</em> brown fox jumps over"));
+
     }
 
     /**
