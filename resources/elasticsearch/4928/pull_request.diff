diff --git a/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java
index 1cbe26ef811f..7f69e97d60a2 100644
--- a/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java
+++ b/src/main/java/org/elasticsearch/monitor/jvm/HotThreads.java
@@ -130,6 +130,7 @@ private String innerDetect() throws Exception {
             }
             // sort by delta CPU time on thread.
             List<MyThreadInfo> hotties = new ArrayList<MyThreadInfo>(threadInfos.values());
+            final int busiestThreads = Math.min(this.busiestThreads, hotties.size());
             // skip that for now
             CollectionUtil.introSort(hotties, new Comparator<MyThreadInfo>() {
                 public int compare(MyThreadInfo o1, MyThreadInfo o2) {
diff --git a/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java b/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java
index 377d433ae686..215553dcd466 100644
--- a/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java
+++ b/src/test/java/org/elasticsearch/action/admin/HotThreadsTest.java
@@ -29,6 +29,7 @@
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.elasticsearch.index.query.FilterBuilders.andFilter;
 import static org.elasticsearch.index.query.FilterBuilders.notFilter;
@@ -37,6 +38,7 @@
 import static org.elasticsearch.index.query.QueryBuilders.termQuery;
 import static org.elasticsearch.test.hamcrest.ElasticsearchAssertions.assertHitCount;
 import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 
 /**
@@ -50,7 +52,7 @@ public void testHotThreadsDontFail() throws ExecutionException, InterruptedExcep
          */
         createIndex("test");
         final int iters = atLeast(2);
-
+        final AtomicBoolean hasErrors = new AtomicBoolean(false);
         for (int i = 0; i < iters; i++) {
             final String type;
             NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads();
@@ -59,7 +61,7 @@ public void testHotThreadsDontFail() throws ExecutionException, InterruptedExcep
                 nodesHotThreadsRequestBuilder.setInterval(timeValue);
             }
             if (randomBoolean()) {
-                nodesHotThreadsRequestBuilder.setThreads(randomIntBetween(1, 100));
+                nodesHotThreadsRequestBuilder.setThreads(rarely() ? randomIntBetween(500, 5000) : randomIntBetween(1, 500));
             }
             if (randomBoolean()) {
                 switch (randomIntBetween(0, 2)) {
@@ -82,6 +84,7 @@ public void testHotThreadsDontFail() throws ExecutionException, InterruptedExcep
             nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() {
                 @Override
                 public void onResponse(NodesHotThreadsResponse nodeHotThreads) {
+                    boolean success = false;
                     try {
                         assertThat(nodeHotThreads, notNullValue());
                         Map<String,NodeHotThreads> nodesMap = nodeHotThreads.getNodesMap();
@@ -90,7 +93,11 @@ public void onResponse(NodesHotThreadsResponse nodeHotThreads) {
                             assertNotNull(ht.getHotThreads());
                             //logger.info(ht.getHotThreads());
                         }
+                        success = true;
                     } finally {
+                        if (!success) {
+                            hasErrors.set(true);
+                        }
                         latch.countDown();
                     }
                 }
@@ -98,6 +105,7 @@ public void onResponse(NodesHotThreadsResponse nodeHotThreads) {
                 @Override
                 public void onFailure(Throwable e) {
                     logger.error("FAILED", e);
+                    hasErrors.set(true);
                     latch.countDown();
                     fail();
                 }
@@ -120,6 +128,7 @@ public void onFailure(Throwable e) {
                         3l);
             }
             latch.await();
+            assertThat(hasErrors.get(), is(false));
         }
     }
 }
