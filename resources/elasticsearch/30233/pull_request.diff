diff --git a/server/src/main/java/org/elasticsearch/common/path/PathTrie.java b/server/src/main/java/org/elasticsearch/common/path/PathTrie.java
index 15553c9f24e7..8336448a4abd 100644
--- a/server/src/main/java/org/elasticsearch/common/path/PathTrie.java
+++ b/server/src/main/java/org/elasticsearch/common/path/PathTrie.java
@@ -19,6 +19,8 @@
 
 package org.elasticsearch.common.path;
 
+import org.elasticsearch.rest.RestUtils;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.EnumSet;
@@ -209,7 +211,7 @@ public T retrieve(String[] path, int index, Map<String, String> params, TrieMatc
             if (index >= path.length)
                 return null;
 
-            String token = path[index];
+            String token = RestUtils.decodePathComponent(path[index]);
             TrieNode node = children.get(token);
             boolean usedWildcard;
 
diff --git a/server/src/main/java/org/elasticsearch/rest/RestUtils.java b/server/src/main/java/org/elasticsearch/rest/RestUtils.java
index e2be316cf92b..5aa6858d5216 100644
--- a/server/src/main/java/org/elasticsearch/rest/RestUtils.java
+++ b/server/src/main/java/org/elasticsearch/rest/RestUtils.java
@@ -33,10 +33,61 @@
     public static final PathTrie.Decoder REST_DECODER = new PathTrie.Decoder() {
         @Override
         public String decode(String value) {
-            return RestUtils.decodeComponent(value);
+            return decodePathComponent(value);
         }
     };
 
+    /**
+     * Assumes a path component that is in its encoded form, that is percent and two hex digits need to be
+     * decoded.
+     * @param raw the raw component
+     * @return The decoded raw component.
+     */
+    // https://tools.ietf.org/html/rfc3986#section-3.3
+    public static String decodePathComponent(final String raw) {
+        final StringBuilder b = new StringBuilder();
+
+        int hex = -1;
+        DecodePathComponentMode mode = DecodePathComponentMode.CHARACTER;
+
+        for(char c : raw.toCharArray()) {
+            switch(mode){
+                case CHARACTER:
+                    if('%' == c ){
+                        hex = 0;
+                        mode = DecodePathComponentMode.FIRST_HEX_DIGIT;
+                    }
+                    break;
+                case FIRST_HEX_DIGIT:
+                    final int hi = Character.digit(c, 16);
+                    if(hi >= 0) {
+                        hex = hi;
+                        mode = DecodePathComponentMode.SECOND_HEX_DIGIT;
+                    }
+                    break;
+                case SECOND_HEX_DIGIT:
+                    final int lo = Character.digit(c, 16);
+                    if(lo >= 0) {
+                        c = (char)(hex * 16 + lo);
+                        b.setLength(b.length() - 2);
+                    }
+                    mode = DecodePathComponentMode.CHARACTER;
+                    break;
+                default:
+                    throw new UnsupportedOperationException("Unknown mode=" + mode);
+            }
+            b.append(c);
+        }
+
+        return b.toString();
+    }
+
+    private enum DecodePathComponentMode {
+        CHARACTER,
+        FIRST_HEX_DIGIT,
+        SECOND_HEX_DIGIT;
+    }
+
     public static void decodeQueryString(String s, int fromIndex, Map<String, String> params) {
         if (fromIndex < 0) {
             return;
diff --git a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java
index f36638a43909..60126d1cdac9 100644
--- a/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java
+++ b/server/src/test/java/org/elasticsearch/rest/RestControllerTests.java
@@ -313,26 +313,18 @@ public void testDispatchDoesNotRequireContentTypeForRequestsWithoutContent() {
 
     public void testDispatchFailsWithPlainText() {
         String content = randomAlphaOfLengthBetween(1, BREAKER_LIMIT.bytesAsInt());
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray(content), null).withPath("/foo")
-            .withHeaders(Collections.singletonMap("Content-Type", Collections.singletonList("text/plain"))).build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.NOT_ACCEPTABLE);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
-            @Override
-            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
-                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
-            }
-        });
-
-        assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
-        assertTrue(channel.getSendResponseCalled());
+            .withHeaders(contentTypeHeader("text/plain"))
+            .build();
+        registerHandlerThenMakeRequestAndCheckHandled(request,  RestStatus.NOT_ACCEPTABLE, "/foo");
     }
 
     public void testDispatchUnsupportedContentType() {
         FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray("{}"), null).withPath("/")
-            .withHeaders(Collections.singletonMap("Content-Type", Collections.singletonList("application/x-www-form-urlencoded"))).build();
+            .withHeaders(contentTypeHeader("application/x-www-form-urlencoded"))
+            .build();
         AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.NOT_ACCEPTABLE);
 
         assertFalse(channel.getSendResponseCalled());
@@ -343,101 +335,75 @@ public void testDispatchUnsupportedContentType() {
     public void testDispatchWorksWithNewlineDelimitedJson() {
         final String mimeType = "application/x-ndjson";
         String content = randomAlphaOfLengthBetween(1, BREAKER_LIMIT.bytesAsInt());
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray(content), null).withPath("/foo")
-            .withHeaders(Collections.singletonMap("Content-Type", Collections.singletonList(mimeType))).build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
-            @Override
-            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
-                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
-            }
-
-            @Override
-            public boolean supportsContentStream() {
-                return true;
-            }
-        });
-
-        assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
-        assertTrue(channel.getSendResponseCalled());
+            .withHeaders(contentTypeHeader(mimeType))
+            .build();
+        registerHandlerThenMakeRequestAndCheckHandled(request, RestStatus.OK, "/foo");
     }
 
     public void testDispatchWithContentStream() {
         final String mimeType = randomFrom("application/json", "application/smile");
         String content = randomAlphaOfLengthBetween(1, BREAKER_LIMIT.bytesAsInt());
         final List<String> contentTypeHeader = Collections.singletonList(mimeType);
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray(content), RestRequest.parseContentType(contentTypeHeader)).withPath("/foo")
-            .withHeaders(Collections.singletonMap("Content-Type", contentTypeHeader)).build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.OK);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
-            @Override
-            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
-                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
-            }
-
-            @Override
-            public boolean supportsContentStream() {
-                return true;
-            }
-        });
+            .withHeaders(contentTypeHeader(mimeType))
+            .build();
 
-        assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
-        assertTrue(channel.getSendResponseCalled());
+        registerHandlerThenMakeRequestAndCheckHandled(request, RestStatus.OK, "/foo");
     }
 
     public void testDispatchWithContentStreamNoContentType() {
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray("{}"), null).withPath("/foo").build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.NOT_ACCEPTABLE);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
-            @Override
-            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
-                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
-            }
-
-            @Override
-            public boolean supportsContentStream() {
-                return true;
-            }
-        });
-
-        assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
-        assertTrue(channel.getSendResponseCalled());
+        registerHandlerThenMakeRequestAndCheckHandled(request, RestStatus.NOT_ACCEPTABLE, "/foo");
     }
 
     public void testNonStreamingXContentCausesErrorResponse() throws IOException {
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
                 .withContent(BytesReference.bytes(YamlXContent.contentBuilder().startObject().endObject()),
                         XContentType.YAML).withPath("/foo").build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.NOT_ACCEPTABLE);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
-            @Override
-            public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
-                channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
-            }
-
-            @Override
-            public boolean supportsContentStream() {
-                return true;
-            }
-        });
-        assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
-        assertTrue(channel.getSendResponseCalled());
+        registerHandlerThenMakeRequestAndCheckHandled(request, RestStatus.NOT_ACCEPTABLE, "/foo");
     }
 
     public void testUnknownContentWithContentStream() {
-        FakeRestRequest fakeRestRequest = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
             .withContent(new BytesArray("aaaabbbbb"), null).withPath("/foo")
-            .withHeaders(Collections.singletonMap("Content-Type", Collections.singletonList("foo/bar")))
+            .withHeaders(contentTypeHeader("foo/bar"))
             .build();
-        AssertingChannel channel = new AssertingChannel(fakeRestRequest, true, RestStatus.NOT_ACCEPTABLE);
-        restController.registerHandler(RestRequest.Method.GET, "/foo", new RestHandler() {
+        registerHandlerThenMakeRequestAndCheckHandled(request, RestStatus.NOT_ACCEPTABLE, "/foo");
+    }
+
+    // https://github.com/elastic/elasticsearch/issues/5341
+    public void testDispatchPathIncludesPlus_issue5341() {
+        final String path = "/before+after";
+
+        String content = randomAlphaOfLengthBetween(1, BREAKER_LIMIT.bytesAsInt());
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+            .withContent(new BytesArray(content), null).withPath(path)
+            .withHeaders(contentTypeHeader("text/plain"))
+            .build();
+        registerHandlerThenMakeRequestAndCheckHandled(request,  RestStatus.NOT_ACCEPTABLE, path);
+    }
+
+    public void testDispatchPathEncoded_issue5341() {
+        // in this test we register the handler with a unencoded path, but the request contains
+        // the equivalent path but in encoded form.
+
+        String content = randomAlphaOfLengthBetween(1, BREAKER_LIMIT.bytesAsInt());
+        FakeRestRequest request = new FakeRestRequest.Builder(NamedXContentRegistry.EMPTY)
+            .withContent(new BytesArray(content), null).withPath("/before%5Fafter")
+            .withHeaders(contentTypeHeader("text/plain"))
+            .build();
+        registerHandlerThenMakeRequestAndCheckHandled(request,  RestStatus.NOT_ACCEPTABLE,  "/before_after");
+    }
+
+    private void registerHandlerThenMakeRequestAndCheckHandled(final FakeRestRequest request,
+                                                               final RestStatus status,
+                                                               final String handlerPath) {
+        AssertingChannel channel = new AssertingChannel(request, true, status);
+        restController.registerHandler(RestRequest.Method.GET, handlerPath, new RestHandler() {
             @Override
             public void handleRequest(RestRequest request, RestChannel channel, NodeClient client) throws Exception {
                 channel.sendResponse(new BytesRestResponse(RestStatus.OK, BytesRestResponse.TEXT_CONTENT_TYPE, BytesArray.EMPTY));
@@ -449,7 +415,7 @@ public boolean supportsContentStream() {
             }
         });
         assertFalse(channel.getSendResponseCalled());
-        restController.dispatchRequest(fakeRestRequest, channel, new ThreadContext(Settings.EMPTY));
+        restController.dispatchRequest(request, channel, new ThreadContext(Settings.EMPTY));
         assertTrue(channel.getSendResponseCalled());
     }
 
@@ -473,6 +439,10 @@ public void testDispatchBadRequestUnknownCause() {
         assertThat(channel.getRestResponse().content().utf8ToString(), containsString("unknown cause"));
     }
 
+    private Map<String, List<String>> contentTypeHeader(final String value) {
+        return Collections.singletonMap("Content-Type", Collections.singletonList(value));
+    }
+
     private static final class TestHttpServerTransport extends AbstractLifecycleComponent implements
         HttpServerTransport {
 
diff --git a/server/src/test/java/org/elasticsearch/rest/RestUtilsTests.java b/server/src/test/java/org/elasticsearch/rest/RestUtilsTests.java
index 578abb3a391f..5ffca20503b8 100644
--- a/server/src/test/java/org/elasticsearch/rest/RestUtilsTests.java
+++ b/server/src/test/java/org/elasticsearch/rest/RestUtilsTests.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.rest;
 
 import org.elasticsearch.test.ESTestCase;
+import org.junit.Assert;
 
 import java.util.HashMap;
 import java.util.Locale;
@@ -36,6 +37,50 @@ static char randomDelimiter() {
         return randomBoolean() ? '&' : ';';
     }
 
+    public void testDecodeComponentPathPlain() {
+        decodePathComponentAndCheck("abc");
+    }
+
+    public void testDecodeComponentPathSlash() {
+        // path components shouldnt have slashes but if they did let it thru
+        decodePathComponentAndCheck("/abc");
+    }
+
+    public void testDecodeComponentPathEncoded() {
+        decodePathComponentAndCheck("abc%2Bxyz", "abc+xyz");
+    }
+
+    public void testDecodeComponentPathEncoded2() {
+        decodePathComponentAndCheck("abc%31xyz", "abc1xyz");
+    }
+
+    public void testDecodeComponentPathEncoded3() {
+        decodePathComponentAndCheck("abc%41xyz", "abcAxyz");
+    }
+
+    public void testDecodeComponentPathIncompleteHex() {
+        decodePathComponentAndCheck("abc%5xyz");
+    }
+
+    public void testDecodeComponentPathInvalidHex() {
+        decodePathComponentAndCheck("abc%Qxyz");
+    }
+
+    // https://github.com/elastic/elasticsearch/issues/5341
+    public void testDecodeComponentPathPlus() {
+        decodePathComponentAndCheck("/abc+xyz");
+    }
+
+    private void decodePathComponentAndCheck(final String in) {
+        decodePathComponentAndCheck(in, in);
+    }
+
+    private void decodePathComponentAndCheck(final String in, final String expected) {
+        Assert.assertEquals("RestUtils.decodePathComponent \"" + in + "\"",
+            expected,
+            RestUtils.decodePathComponent(in));
+    }
+
     public void testDecodeQueryString() {
         Map<String, String> params = new HashMap<>();
 
