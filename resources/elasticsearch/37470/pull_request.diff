diff --git a/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java
index ff9dea8fe45a..d9fcb01df4ce 100644
--- a/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java
+++ b/server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java
@@ -303,6 +303,14 @@ boolean isRemoteClusterRegistered(String clusterName) {
         return remoteClusters.containsKey(clusterName);
     }
 
+    /**
+     * Returns the registered remote cluster names.
+     */
+    public Set<String> getRegisteredRemoteClusterNames() {
+        // remoteClusters is unmodifiable so its key set will be unmodifiable too
+        return remoteClusters.keySet();
+    }
+
     public void collectSearchShards(IndicesOptions indicesOptions, String preference, String routing,
                                     Map<String, OriginalIndices> remoteIndicesByCluster,
                                     ActionListener<Map<String, ClusterSearchShardsResponse>> listener) {
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java
index b50d38c73c82..7d5a3b5e9a53 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java
@@ -11,6 +11,7 @@
 import org.elasticsearch.action.ActionListener;
 import org.elasticsearch.action.support.ContextPreservingActionListener;
 import org.elasticsearch.client.Client;
+import org.elasticsearch.cluster.metadata.ClusterNameExpressionResolver;
 import org.elasticsearch.common.util.concurrent.ThreadContext;
 import org.elasticsearch.protocol.xpack.XPackInfoRequest;
 import org.elasticsearch.protocol.xpack.XPackInfoResponse;
@@ -22,6 +23,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
@@ -119,6 +121,7 @@ private LicenseCheck(final RemoteClusterLicenseInfo remoteClusterLicenseInfo) {
 
     }
 
+    private static final ClusterNameExpressionResolver clusterNameExpressionResolver = new ClusterNameExpressionResolver();
     private final Client client;
     private final Predicate<License.OperationMode> predicate;
 
@@ -243,16 +246,20 @@ public static boolean containsRemoteIndex(final List<String> indices) {
 
     /**
      * Extract the list of remote cluster aliases from the list of index names. Remote index names are of the form
-     * {@code cluster_alias:index_name} and the cluster_alias is extracted for each index name that represents a remote index.
+     * {@code cluster_alias:index_name} and the cluster_alias is extracted (and expanded if it is a wildcard) for
+     * each index name that represents a remote index.
      *
-     * @param indices the collection of index names
+     * @param remoteClusters the aliases for remote clusters
+     * @param indices        the collection of index names
      * @return the remote cluster names
      */
-    public static List<String> remoteClusterAliases(final List<String> indices) {
+    public static List<String> remoteClusterAliases(final Set<String> remoteClusters, final List<String> indices) {
         return indices.stream()
                 .filter(RemoteClusterLicenseChecker::isRemoteIndex)
                 .map(index -> index.substring(0, index.indexOf(RemoteClusterAware.REMOTE_CLUSTER_INDEX_SEPARATOR)))
                 .distinct()
+                .flatMap(clusterExpression -> clusterNameExpressionResolver.resolveClusterNames(remoteClusters, clusterExpression).stream())
+                .distinct()
                 .collect(Collectors.toList());
     }
 
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java
index 24a6960da483..0f512a69f92d 100644
--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/license/RemoteClusterLicenseCheckerTests.java
@@ -12,6 +12,7 @@
 import org.elasticsearch.client.Client;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.util.concurrent.ThreadContext;
+import org.elasticsearch.common.util.set.Sets;
 import org.elasticsearch.protocol.xpack.XPackInfoResponse;
 import org.elasticsearch.protocol.xpack.license.LicenseStatus;
 import org.elasticsearch.test.ESTestCase;
@@ -23,6 +24,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
@@ -80,24 +82,49 @@ public void testRemoteIndices() {
     }
 
     public void testNoRemoteClusterAliases() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
         final List<String> indices = Arrays.asList("local-index1", "local-index2");
-        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(indices), empty());
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), empty());
     }
 
     public void testOneRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
         final List<String> indices = Arrays.asList("local-index1", "remote-cluster1:remote-index1");
-        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(indices), contains("remote-cluster1"));
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), contains("remote-cluster1"));
     }
 
     public void testMoreThanOneRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
         final List<String> indices = Arrays.asList("remote-cluster1:remote-index1", "local-index1", "remote-cluster2:remote-index1");
-        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(indices), contains("remote-cluster1", "remote-cluster2"));
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),
+                containsInAnyOrder("remote-cluster1", "remote-cluster2"));
     }
 
     public void testDuplicateRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
         final List<String> indices = Arrays.asList(
                 "remote-cluster1:remote-index1", "local-index1", "remote-cluster2:index1", "remote-cluster2:remote-index2");
-        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(indices), contains("remote-cluster1", "remote-cluster2"));
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),
+                containsInAnyOrder("remote-cluster1", "remote-cluster2"));
+    }
+
+    public void testSimpleWildcardRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
+        final List<String> indices = Arrays.asList("*:remote-index1", "local-index1");
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices),
+                containsInAnyOrder("remote-cluster1", "remote-cluster2"));
+    }
+
+    public void testPartialWildcardRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
+        final List<String> indices = Arrays.asList("*2:remote-index1", "local-index1");
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), contains("remote-cluster2"));
+    }
+
+    public void testNonMatchingWildcardRemoteClusterAlias() {
+        final Set<String> remoteClusters = Sets.newHashSet("remote-cluster1", "remote-cluster2");
+        final List<String> indices = Arrays.asList("*3:remote-index1", "local-index1");
+        assertThat(RemoteClusterLicenseChecker.remoteClusterAliases(remoteClusters, indices), empty());
     }
 
     public void testCheckRemoteClusterLicensesGivenCompatibleLicenses() {
diff --git a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java
index 5867948bbad6..f81fcfbfb1d2 100644
--- a/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java
+++ b/x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java
@@ -174,7 +174,9 @@ public void onFailure(Exception e) {
                     final RemoteClusterLicenseChecker remoteClusterLicenseChecker =
                             new RemoteClusterLicenseChecker(client, XPackLicenseState::isMachineLearningAllowedForOperationMode);
                     remoteClusterLicenseChecker.checkRemoteClusterLicenses(
-                            RemoteClusterLicenseChecker.remoteClusterAliases(params.getDatafeedIndices()),
+                            RemoteClusterLicenseChecker.remoteClusterAliases(
+                                    transportService.getRemoteClusterService().getRegisteredRemoteClusterNames(),
+                                    params.getDatafeedIndices()),
                             ActionListener.wrap(
                                     response -> {
                                         if (response.isSuccess() == false) {
@@ -311,7 +313,8 @@ private ElasticsearchStatusException createUnlicensedError(
 
     private ElasticsearchStatusException createUnknownLicenseError(
             final String datafeedId, final List<String> remoteIndices, final Exception cause) {
-        final int numberOfRemoteClusters = RemoteClusterLicenseChecker.remoteClusterAliases(remoteIndices).size();
+        final int numberOfRemoteClusters = RemoteClusterLicenseChecker.remoteClusterAliases(
+                transportService.getRemoteClusterService().getRegisteredRemoteClusterNames(), remoteIndices).size();
         assert numberOfRemoteClusters > 0;
         final String remoteClusterQualifier = numberOfRemoteClusters == 1 ? "a remote cluster" : "remote clusters";
         final String licenseTypeQualifier = numberOfRemoteClusters == 1 ? "" : "s";
