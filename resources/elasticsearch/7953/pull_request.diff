diff --git a/src/main/java/org/elasticsearch/script/ScriptService.java b/src/main/java/org/elasticsearch/script/ScriptService.java
index b35b85e20335..4f1b0e73f893 100644
--- a/src/main/java/org/elasticsearch/script/ScriptService.java
+++ b/src/main/java/org/elasticsearch/script/ScriptService.java
@@ -537,8 +537,10 @@ public void onFileCreated(File file) {
         @Override
         public void onFileDeleted(File file) {
             Tuple<String, String> scriptNameExt = scriptNameExt(file);
-            logger.info("removing script file [{}]", file.getAbsolutePath());
-            staticCache.remove(scriptNameExt.v1());
+            if (scriptNameExt != null) {
+                logger.info("removing script file [{}]", file.getAbsolutePath());
+                staticCache.remove(scriptNameExt.v1());
+            }
         }
 
         @Override
diff --git a/src/main/java/org/elasticsearch/watcher/FileWatcher.java b/src/main/java/org/elasticsearch/watcher/FileWatcher.java
index da8490746b34..d20a1f1a9d8f 100644
--- a/src/main/java/org/elasticsearch/watcher/FileWatcher.java
+++ b/src/main/java/org/elasticsearch/watcher/FileWatcher.java
@@ -18,6 +18,9 @@
  */
 package org.elasticsearch.watcher;
 
+import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.logging.Loggers;
+
 import java.io.File;
 import java.util.Arrays;
 
@@ -30,6 +33,8 @@
 
     private FileObserver rootFileObserver;
 
+    private static final ESLogger logger = Loggers.getLogger(FileWatcher.class);
+
     /**
      * Creates new file watcher on the given directory
      */
@@ -228,32 +233,49 @@ private void deleteChild(int child) {
 
         private void onFileCreated(boolean initial) {
             for (FileChangesListener listener : listeners()) {
-                if (initial) {
-                    listener.onFileInit(file);
-                } else {
-                    listener.onFileCreated(file);
+                try {
+                    if (initial) {
+                        listener.onFileInit(file);
+                    } else {
+                        listener.onFileCreated(file);
+                    }
+                } catch (Throwable t) {
+                    logger.warn("cannot notify file changes listener", t);
                 }
             }
         }
 
         private void onFileDeleted() {
             for (FileChangesListener listener : listeners()) {
-                listener.onFileDeleted(file);
+                try {
+                    listener.onFileDeleted(file);
+                } catch (Throwable t) {
+                    logger.warn("cannot notify file changes listener", t);
+                }
             }
         }
 
         private void onFileChanged() {
             for (FileChangesListener listener : listeners()) {
-                listener.onFileChanged(file);
+                try {
+                    listener.onFileChanged(file);
+                } catch (Throwable t) {
+                    logger.warn("cannot notify file changes listener", t);
+                }
+
             }
         }
 
         private void onDirectoryCreated(boolean initial) {
             for (FileChangesListener listener : listeners()) {
-                if (initial) {
-                    listener.onDirectoryInit(file);
-                } else {
-                    listener.onDirectoryCreated(file);
+                try {
+                    if (initial) {
+                        listener.onDirectoryInit(file);
+                    } else {
+                        listener.onDirectoryCreated(file);
+                    }
+                } catch (Throwable t) {
+                    logger.warn("cannot notify file changes listener", t);
                 }
             }
             children = listChildren(initial);
@@ -265,7 +287,11 @@ private void onDirectoryDeleted() {
                 deleteChild(child);
             }
             for (FileChangesListener listener : listeners()) {
-                listener.onDirectoryDeleted(file);
+                try {
+                    listener.onDirectoryDeleted(file);
+                } catch (Throwable t) {
+                    logger.warn("cannot notify file changes listener", t);
+                }
             }
         }
 
diff --git a/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java b/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java
index 9814d84fd812..663b9ff21685 100644
--- a/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java
+++ b/src/main/java/org/elasticsearch/watcher/ResourceWatcherService.java
@@ -137,6 +137,26 @@ protected void doClose() throws ElasticsearchException {
         }
     }
 
+    public void notifyNow() {
+        notifyNow(Frequency.MEDIUM);
+    }
+
+    public void notifyNow(Frequency frequency) {
+        switch (frequency) {
+            case LOW:
+                lowMonitor.run();
+                break;
+            case MEDIUM:
+                mediumMonitor.run();
+                break;
+            case HIGH:
+                highMonitor.run();
+                break;
+            default:
+                throw new ElasticsearchIllegalArgumentException("Unknown frequency [" + frequency + "]");
+        }
+    }
+
     static class ResourceMonitor implements Runnable {
 
         final TimeValue interval;
@@ -155,7 +175,7 @@ private ResourceMonitor(TimeValue interval, Frequency frequency) {
         }
 
         @Override
-        public void run() {
+        public synchronized void run() {
             for(ResourceWatcher watcher : watchers) {
                 watcher.checkAndNotify();
             }
diff --git a/src/test/java/org/elasticsearch/script/ScriptServiceTests.java b/src/test/java/org/elasticsearch/script/ScriptServiceTests.java
new file mode 100644
index 000000000000..6dee370e416b
--- /dev/null
+++ b/src/test/java/org/elasticsearch/script/ScriptServiceTests.java
@@ -0,0 +1,137 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.elasticsearch.script;
+
+import com.carrotsearch.ant.tasks.junit4.dependencies.com.google.common.collect.ImmutableSet;
+import org.elasticsearch.ElasticsearchIllegalArgumentException;
+import org.elasticsearch.common.Nullable;
+import org.elasticsearch.common.io.Streams;
+import org.elasticsearch.common.settings.Settings;
+import org.elasticsearch.env.Environment;
+import org.elasticsearch.search.lookup.SearchLookup;
+import org.elasticsearch.test.ElasticsearchTestCase;
+import org.elasticsearch.watcher.ResourceWatcherService;
+import org.junit.Test;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Map;
+
+import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.equalTo;
+
+/**
+ *
+ */
+public class ScriptServiceTests extends ElasticsearchTestCase {
+
+    @Test
+    public void testScriptsWithoutExtensions() throws IOException {
+        File homeFolder = newTempDir();
+        File genericConfigFolder = newTempDir();
+
+        Settings settings = settingsBuilder()
+                .put("path.conf", genericConfigFolder)
+                .put("path.home", homeFolder)
+                .build();
+        Environment environment = new Environment(settings);
+
+        ResourceWatcherService resourceWatcherService = new ResourceWatcherService(settings, null);
+
+        logger.info("--> setup script service");
+        ScriptService scriptService = new ScriptService(settings, environment, ImmutableSet.of(new TestEngineService()), resourceWatcherService);
+        File scriptsFile = new File(genericConfigFolder, "scripts");
+        assertThat(scriptsFile.mkdir(), equalTo(true));
+        resourceWatcherService.notifyNow();
+
+        logger.info("--> setup two test files one with extension and another without");
+        File testFileNoExt = new File(scriptsFile, "test_no_ext");
+        File testFileWithExt = new File(scriptsFile, "test_script.tst");
+        Streams.copy("test_file_no_ext".getBytes("UTF-8"), testFileNoExt);
+        Streams.copy("test_file".getBytes("UTF-8"), testFileWithExt);
+        resourceWatcherService.notifyNow();
+
+        logger.info("--> verify that file with extension was correctly processed");
+        CompiledScript compiledScript = scriptService.compile("test", "test_script", ScriptService.ScriptType.FILE);
+        assertThat(compiledScript.compiled(), equalTo((Object) "compiled_test_file"));
+
+        logger.info("--> delete both files");
+        assertThat(testFileNoExt.delete(), equalTo(true));
+        assertThat(testFileWithExt.delete(), equalTo(true));
+        resourceWatcherService.notifyNow();
+
+        logger.info("--> verify that file with extension was correctly removed");
+        try {
+            scriptService.compile("test", "test_script", ScriptService.ScriptType.FILE);
+            fail("the script test_script should no longe exist");
+        } catch (ElasticsearchIllegalArgumentException ex) {
+            assertThat(ex.getMessage(), containsString("Unable to find on disk script test_script"));
+        }
+    }
+
+    public static class TestEngineService implements ScriptEngineService {
+
+        @Override
+        public String[] types() {
+            return new String[] {"test"};
+        }
+
+        @Override
+        public String[] extensions() {
+            return new String[] {"test", "tst"};
+        }
+
+        @Override
+        public boolean sandboxed() {
+            return false;
+        }
+
+        @Override
+        public Object compile(String script) {
+            return "compiled_" + script;
+        }
+
+        @Override
+        public ExecutableScript executable(final Object compiledScript, @Nullable Map<String, Object> vars) {
+            return null;
+        }
+
+        @Override
+        public SearchScript search(Object compiledScript, SearchLookup lookup, @Nullable Map<String, Object> vars) {
+            return null;
+        }
+
+        @Override
+        public Object execute(Object compiledScript, Map<String, Object> vars) {
+            return null;
+        }
+
+        @Override
+        public Object unwrap(Object value) {
+            return null;
+        }
+
+        @Override
+        public void close() {
+
+        }
+    }
+
+}
