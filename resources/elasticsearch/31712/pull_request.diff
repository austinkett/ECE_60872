diff --git a/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
index 48d41863336d..cc9d5d5bd119 100644
--- a/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
+++ b/test/framework/src/main/java/org/elasticsearch/test/ESTestCase.java
@@ -677,7 +677,11 @@ public static String randomRealisticUnicodeOfCodepointLength(int codePoints) {
     }
 
     public static <T> T[] randomArray(int maxArraySize, IntFunction<T[]> arrayConstructor, Supplier<T> valueConstructor) {
-        final int size = randomInt(maxArraySize);
+        return randomArray(0, maxArraySize, arrayConstructor, valueConstructor);
+    }
+
+    public static <T> T[] randomArray(int minArraySize, int maxArraySize, IntFunction<T[]> arrayConstructor, Supplier<T> valueConstructor) {
+        final int size = randomIntBetween(minArraySize, maxArraySize);
         final T[] array = arrayConstructor.apply(size);
         for (int i = 0; i < array.length; i++) {
             array[i] = valueConstructor.get();
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequest.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequest.java
index 29b64d488356..a7e5f37650ea 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequest.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequest.java
@@ -5,6 +5,7 @@
  */
 package org.elasticsearch.xpack.core.security.action.role;
 
+import org.elasticsearch.Version;
 import org.elasticsearch.action.ActionRequest;
 import org.elasticsearch.action.ActionRequestValidationException;
 import org.elasticsearch.action.support.WriteRequest;
@@ -151,6 +152,9 @@ public void readFrom(StreamInput in) throws IOException {
         for (int i = 0; i < indicesSize; i++) {
             indicesPrivileges.add(RoleDescriptor.IndicesPrivileges.createFrom(in));
         }
+        if (in.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {
+            applicationPrivileges = in.readList(RoleDescriptor.ApplicationResourcePrivileges::createFrom);
+        }
         runAs = in.readStringArray();
         refreshPolicy = RefreshPolicy.readFrom(in);
         metadata = in.readMap();
@@ -165,6 +169,9 @@ public void writeTo(StreamOutput out) throws IOException {
         for (RoleDescriptor.IndicesPrivileges index : indicesPrivileges) {
             index.writeTo(out);
         }
+        if (out.getVersion().onOrAfter(Version.V_7_0_0_alpha1)) {
+            out.writeStreamableList(applicationPrivileges);
+        }
         out.writeStringArray(runAs);
         refreshPolicy.writeTo(out);
         out.writeMap(metadata);
diff --git a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java
index 88bef7b66fa8..f1ba4ca33181 100644
--- a/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java
+++ b/x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/authz/RoleDescriptor.java
@@ -36,6 +36,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * A holder for a Role that contains user-readable information about the Role
@@ -835,8 +836,9 @@ public boolean equals(Object o) {
 
             ApplicationResourcePrivileges that = (ApplicationResourcePrivileges) o;
 
-            return Arrays.equals(this.resources, that.resources)
-                    && Arrays.equals(this.privileges, that.privileges);
+            return Objects.equals(this.application, that.application)
+                && Arrays.equals(this.resources, that.resources)
+                && Arrays.equals(this.privileges, that.privileges);
         }
 
         @Override
diff --git a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequestTests.java b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequestTests.java
index 0e974a082781..2b816c2fb147 100644
--- a/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequestTests.java
+++ b/x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/security/action/role/PutRoleRequestTests.java
@@ -6,10 +6,21 @@
 package org.elasticsearch.xpack.core.security.action.role;
 
 import org.elasticsearch.action.ActionRequestValidationException;
+import org.elasticsearch.action.support.WriteRequest;
+import org.elasticsearch.common.Strings;
+import org.elasticsearch.common.io.stream.BytesStreamOutput;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.xpack.core.security.authz.RoleDescriptor.ApplicationResourcePrivileges;
 
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+import java.util.function.Supplier;
+
 import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasItem;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
@@ -30,6 +41,18 @@ public void testValidationOfApplicationPrivileges() {
             buildRequestWithApplicationPrivilege("%*", new String[]{"all"}, new String[]{"*"}));
     }
 
+    public void testSerialization() throws IOException {
+        final PutRoleRequest original = buildRandomRequest();
+
+        final BytesStreamOutput out = new BytesStreamOutput();
+        original.writeTo(out);
+
+        final PutRoleRequest copy = new PutRoleRequest();
+        copy.readFrom(out.bytes().streamInput());
+
+        assertThat(copy.roleDescriptor(), equalTo(original.roleDescriptor()));
+    }
+
     private void assertSuccessfulValidation(PutRoleRequest request) {
         final ActionRequestValidationException exception = request.validate();
         assertThat(exception, nullValue());
@@ -52,4 +75,46 @@ private PutRoleRequest buildRequestWithApplicationPrivilege(String appName, Stri
         request.addApplicationPrivileges(new ApplicationResourcePrivileges[]{privilege});
         return request;
     }
+
+    private PutRoleRequest buildRandomRequest() {
+
+        final PutRoleRequest request = new PutRoleRequest();
+        request.name(randomAlphaOfLengthBetween(4, 9));
+
+        request.cluster(randomSubsetOf(Arrays.asList("monitor", "manage", "all", "manage_security", "manage_ml", "monitor_watcher"))
+            .toArray(Strings.EMPTY_ARRAY));
+
+        for (int i = randomIntBetween(0, 4); i > 0; i--) {
+            request.addIndex(
+                generateRandomStringArray(randomIntBetween(1, 3), randomIntBetween(3, 8), false, false),
+                randomSubsetOf(randomIntBetween(1, 2), "read", "write", "index", "all").toArray(Strings.EMPTY_ARRAY),
+                generateRandomStringArray(randomIntBetween(1, 3), randomIntBetween(3, 8), true),
+                generateRandomStringArray(randomIntBetween(1, 3), randomIntBetween(3, 8), true),
+                null
+            );
+        }
+
+        final Supplier<String> stringWithInitialLowercase = ()
+            -> randomAlphaOfLength(1).toLowerCase(Locale.ROOT) + randomAlphaOfLengthBetween(3, 12);
+        final ApplicationResourcePrivileges[] applicationPrivileges = new ApplicationResourcePrivileges[randomIntBetween(0, 5)];
+        for (int i = 0; i < applicationPrivileges.length; i++) {
+            applicationPrivileges[i] = ApplicationResourcePrivileges.builder()
+                .application(stringWithInitialLowercase.get())
+                .privileges(randomArray(1, 3, String[]::new, stringWithInitialLowercase))
+                .resources(generateRandomStringArray(5, randomIntBetween(3, 8), false, false))
+                .build();
+        }
+        request.addApplicationPrivileges(applicationPrivileges);
+
+        request.runAs(generateRandomStringArray(4, 3, false, true));
+
+        final Map<String, Object> metadata = new HashMap<>();
+        for (String key : generateRandomStringArray(3, 5, false, true)) {
+            metadata.put(key, randomFrom(Boolean.TRUE, Boolean.FALSE, 1, 2, randomAlphaOfLengthBetween(2, 9)));
+        }
+        request.metadata(metadata);
+
+        request.setRefreshPolicy(randomFrom(WriteRequest.RefreshPolicy.values()));
+        return request;
+    }
 }
