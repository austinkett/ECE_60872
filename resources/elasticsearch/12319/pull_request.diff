diff --git a/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java
index c4ed23752356..3bd4b8c8cd9a 100644
--- a/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java
+++ b/core/src/main/java/org/elasticsearch/common/util/concurrent/PrioritizedEsThreadPoolExecutor.java
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Queue;
 import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
@@ -105,6 +106,7 @@ public void execute(Runnable command, final ScheduledExecutorService timer, fina
         } else if (!(command instanceof PrioritizedFutureTask)) { // it might be a callable wrapper...
             command = new TieBreakingPrioritizedRunnable(command, Priority.NORMAL, insertionOrder.incrementAndGet());
         }
+        super.execute(command);
         if (timeout.nanos() >= 0) {
             if (command instanceof TieBreakingPrioritizedRunnable) {
                 ((TieBreakingPrioritizedRunnable) command).scheduleTimeout(timer, timeoutCallback, timeout);
@@ -114,7 +116,6 @@ public void execute(Runnable command, final ScheduledExecutorService timer, fina
                 throw new UnsupportedOperationException("Execute with timeout is not supported for future tasks");
             }
         }
-        super.execute(command);
     }
 
     @Override
@@ -161,7 +162,8 @@ public Pending(Object task, Priority priority, long insertionOrder, boolean exec
 
         private Runnable runnable;
         private final long insertionOrder;
-        private ScheduledFuture<?> timeoutFuture;
+        private volatile ScheduledFuture<?> timeoutFuture;
+        private volatile boolean started = false;
 
         TieBreakingPrioritizedRunnable(PrioritizedRunnable runnable, long insertionOrder) {
             this(runnable, runnable.priority(), insertionOrder);
@@ -175,6 +177,7 @@ public Pending(Object task, Priority priority, long insertionOrder, boolean exec
 
         @Override
         public void run() {
+            started = true;
             FutureUtils.cancel(timeoutFuture);
             runAndClean(runnable);
         }
@@ -197,6 +200,10 @@ public void run() {
                     }
                 }
             }, timeValue.nanos(), TimeUnit.NANOSECONDS);
+            if (started) {
+                // if the actual action already it might have missed the setting of the future. Clean it ourselves.
+                FutureUtils.cancel(timeoutFuture);
+            }
         }
 
         /**
diff --git a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
index 38477eda6709..b74a016460f4 100644
--- a/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
+++ b/core/src/test/java/org/elasticsearch/common/util/concurrent/PrioritizedExecutorsTests.java
@@ -253,7 +253,7 @@ public void testTimeoutCleanup() throws Exception {
                              public void run() {
                                  invoked.countDown();
                              }
-                         }, timer, TimeValue.timeValueMillis(1000), new Runnable() {
+                         }, timer, TimeValue.timeValueHours(1), new Runnable() {
                     @Override
                     public void run() {
                         // We should never get here
