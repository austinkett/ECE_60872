diff --git a/docs/reference/analysis/analyzers/custom-analyzer.asciidoc b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc
index a7cf7136a838..bdc03a0998be 100644
--- a/docs/reference/analysis/analyzers/custom-analyzer.asciidoc
+++ b/docs/reference/analysis/analyzers/custom-analyzer.asciidoc
@@ -5,6 +5,7 @@ An analyzer of type `custom` that allows to combine a `Tokenizer` with
 zero or more `Token Filters`, and zero or more `Char Filters`. The
 custom analyzer accepts a logical/registered name of the tokenizer to
 use, and a list of logical/registered names of token filters.
+The name of the custom analyzer must not start with "_".
 
 The following are settings that can be set for a `custom` analyzer type:
 
diff --git a/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java b/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
index e1c23ceb2f8c..1cc37b8cda8f 100644
--- a/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
+++ b/src/main/java/org/elasticsearch/index/analysis/AnalysisService.java
@@ -251,6 +251,11 @@ public AnalysisService(Index index, @IndexSettings Settings indexSettings, @Null
         defaultSearchAnalyzer = analyzers.containsKey("default_search") ? analyzers.get("default_search") : analyzers.get("default");
         defaultSearchQuoteAnalyzer = analyzers.containsKey("default_search_quote") ? analyzers.get("default_search_quote") : defaultSearchAnalyzer;
 
+        for (Map.Entry<String, NamedAnalyzer> analyzer : analyzers.entrySet()) {
+            if (analyzer.getKey().startsWith("_")) {
+                throw new IllegalArgumentException("analyzer name must not start with '_'. got \"" + analyzer.getKey() + "\"");
+            }
+        }
         this.analyzers = ImmutableMap.copyOf(analyzers);
     }
 
diff --git a/src/test/java/org/elasticsearch/index/analysis/AnalysisModuleTests.java b/src/test/java/org/elasticsearch/index/analysis/AnalysisModuleTests.java
index a1db68ab0397..886c3b289a6a 100644
--- a/src/test/java/org/elasticsearch/index/analysis/AnalysisModuleTests.java
+++ b/src/test/java/org/elasticsearch/index/analysis/AnalysisModuleTests.java
@@ -31,6 +31,7 @@
 import org.elasticsearch.cluster.metadata.IndexMetaData;
 import org.elasticsearch.common.inject.Injector;
 import org.elasticsearch.common.inject.ModulesBuilder;
+import org.elasticsearch.common.inject.ProvisionException;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.settings.SettingsModule;
 import org.elasticsearch.env.Environment;
@@ -94,7 +95,7 @@ public void testSimpleConfigurationYaml() {
         Settings settings = loadFromClasspath("org/elasticsearch/index/analysis/test1.yml");
         testSimpleConfiguration(settings);
     }
-    
+
     @Test
     public void testDefaultFactoryTokenFilters() throws IOException {
         assertTokenFilter("keyword_repeat", KeywordRepeatFilter.class);
@@ -238,4 +239,36 @@ private Path generateWordList(String[] words) throws Exception {
         return wordListFile;
     }
 
+    @Test
+    public void testUnderscoreInAnalyzerName() {
+        Settings settings = Settings.builder()
+                .put("index.analysis.analyzer._invalid_name.tokenizer", "keyword")
+                .put("path.home", createTempDir().toString())
+                .put(IndexMetaData.SETTING_VERSION_CREATED, "1")
+                .build();
+        try {
+            getAnalysisService(settings);
+            fail("This should fail with IllegalArgumentException because the analyzers name starts with _");
+        } catch (ProvisionException e) {
+            assertTrue(e.getCause() instanceof IllegalArgumentException);
+            assertThat(e.getCause().getMessage(), equalTo("analyzer name must not start with _. got \"_invalid_name\""));
+        }
+    }
+
+    @Test
+    public void testUnderscoreInAnalyzerNameAlias() {
+        Settings settings = Settings.builder()
+                .put("index.analysis.analyzer.valid_name.tokenizer", "keyword")
+                .put("index.analysis.analyzer.valid_name.alias", "_invalid_name")
+                .put("path.home", createTempDir().toString())
+                .put(IndexMetaData.SETTING_VERSION_CREATED, "1")
+                .build();
+        try {
+            getAnalysisService(settings);
+            fail("This should fail with IllegalArgumentException because the analyzers alias starts with _");
+        } catch (ProvisionException e) {
+            assertTrue(e.getCause() instanceof IllegalArgumentException);
+            assertThat(e.getCause().getMessage(), equalTo("analyzer name must not start with _. got \"_invalid_name\""));
+        }
+    }
 }
