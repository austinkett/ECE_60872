diff --git a/src/main/java/org/elasticsearch/discovery/DiscoveryException.java b/src/main/java/org/elasticsearch/discovery/zen/NotMasterException.java
similarity index 58%
rename from src/main/java/org/elasticsearch/discovery/DiscoveryException.java
rename to src/main/java/org/elasticsearch/discovery/zen/NotMasterException.java
index 51c9b87ea7f4..40f5f56dc801 100644
--- a/src/main/java/org/elasticsearch/discovery/DiscoveryException.java
+++ b/src/main/java/org/elasticsearch/discovery/zen/NotMasterException.java
@@ -16,21 +16,31 @@
  * specific language governing permissions and limitations
  * under the License.
  */
+package org.elasticsearch.discovery.zen;
 
-package org.elasticsearch.discovery;
+import org.elasticsearch.ElasticsearchIllegalStateException;
 
-import org.elasticsearch.ElasticsearchException;
 
 /**
- *
+ * Thrown when a node join request or a master ping reaches a node which is not
+ * currently acting as a master.
  */
-public class DiscoveryException extends ElasticsearchException {
+public class NotMasterException extends ElasticsearchIllegalStateException {
+
+    public NotMasterException() {
+        super(null);
+    }
+
+    public NotMasterException(String msg) {
+        super(msg);
+    }
 
-    public DiscoveryException(String message) {
-        super(message);
+    public NotMasterException(String msg, Throwable cause) {
+        super(msg, cause);
     }
 
-    public DiscoveryException(String message, Throwable cause) {
-        super(message, cause);
+    @Override
+    public Throwable fillInStackTrace() {
+        return null;
     }
 }
diff --git a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
index 8c81086bf46f..0be1d6c089bf 100644
--- a/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
+++ b/src/main/java/org/elasticsearch/discovery/zen/ZenDiscovery.java
@@ -475,7 +475,7 @@ private boolean joinElectedMaster(DiscoveryNode masterNode) {
                 return true;
             } catch (Throwable t) {
                 Throwable unwrap = ExceptionsHelper.unwrapCause(t);
-                if (unwrap instanceof ElasticsearchIllegalStateException) {
+                if (unwrap instanceof NotMasterException) {
                     if (++joinAttempt == this.joinRetryAttempts) {
                         logger.info("failed to send join request to master [{}], reason [{}], tried [{}] times", masterNode, ExceptionsHelper.detailedMessage(t), joinAttempt);
                         return false;
@@ -917,7 +917,7 @@ public ClusterState execute(ClusterState currentState) {
                 public void onNoLongerMaster(String source) {
                     // we are rejected, so drain all pending task (execute never run)
                     processJoinRequests.drainTo(drainedJoinRequests);
-                    Exception e = new ElasticsearchIllegalStateException("Node [" + clusterService.localNode() + "] not master for join request from [" + node + "]");
+                    Exception e = new NotMasterException("Node [" + clusterService.localNode() + "] not master for join request from [" + node + "]");
                     innerOnFailure(e);
                 }
 
diff --git a/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java b/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
index 314a03dc4166..ab437d7390e0 100644
--- a/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
+++ b/src/main/java/org/elasticsearch/discovery/zen/fd/MasterFaultDetection.java
@@ -33,6 +33,7 @@
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
+import org.elasticsearch.discovery.zen.NotMasterException;
 import org.elasticsearch.threadpool.ThreadPool;
 import org.elasticsearch.transport.*;
 
@@ -255,11 +256,11 @@ public void handleException(TransportException exp) {
                                     if (exp instanceof ConnectTransportException || exp.getCause() instanceof ConnectTransportException) {
                                         handleTransportDisconnect(masterToPing);
                                         return;
-                                    } else if (exp.getCause() instanceof NoLongerMasterException) {
+                                    } else if (exp.getCause() instanceof NotMasterException) {
                                         logger.debug("[master] pinging a master {} that is no longer a master", masterNode);
                                         notifyMasterFailure(masterToPing, "no longer master");
                                         return;
-                                    } else if (exp.getCause() instanceof NotMasterException) {
+                                    } else if (exp.getCause() instanceof ThisIsNotTheMasterYouAreLookingForException) {
                                         logger.debug("[master] pinging a master {} that is not the master", masterNode);
                                         notifyMasterFailure(masterToPing, "not master");
                                         return;
@@ -292,20 +293,14 @@ public String executor() {
         }
     }
 
-    static class NoLongerMasterException extends ElasticsearchIllegalStateException {
-        @Override
-        public Throwable fillInStackTrace() {
-            return null;
-        }
-    }
-
-    static class NotMasterException extends ElasticsearchIllegalStateException {
+    /** Thrown when a ping reaches the wrong node */
+    static class ThisIsNotTheMasterYouAreLookingForException extends ElasticsearchIllegalStateException {
 
-        NotMasterException(String msg) {
+        ThisIsNotTheMasterYouAreLookingForException(String msg) {
             super(msg);
         }
 
-        NotMasterException() {
+        ThisIsNotTheMasterYouAreLookingForException() {
         }
 
         @Override
@@ -334,13 +329,13 @@ public void messageReceived(final MasterPingRequest request, final TransportChan
             // check if we are really the same master as the one we seemed to be think we are
             // this can happen if the master got "kill -9" and then another node started using the same port
             if (!request.masterNodeId.equals(nodes.localNodeId())) {
-                throw new NotMasterException();
+                throw new ThisIsNotTheMasterYouAreLookingForException();
             }
 
             // ping from nodes of version < 1.4.0 will have the clustername set to null
             if (request.clusterName != null && !request.clusterName.equals(clusterName)) {
                 logger.trace("master fault detection ping request is targeted for a different [{}] cluster then us [{}]", request.clusterName, clusterName);
-                throw new NotMasterException("master fault detection ping request is targeted for a different [" + request.clusterName + "] cluster then us [" + clusterName + "]");
+                throw new ThisIsNotTheMasterYouAreLookingForException("master fault detection ping request is targeted for a different [" + request.clusterName + "] cluster then us [" + clusterName + "]");
             }
 
             // when we are elected as master or when a node joins, we use a cluster state update thread
@@ -360,7 +355,7 @@ public ClusterState execute(ClusterState currentState) throws Exception {
                         // if we are no longer master, fail...
                         DiscoveryNodes nodes = currentState.nodes();
                         if (!nodes.localNodeMaster()) {
-                            throw new NoLongerMasterException();
+                            throw new NotMasterException();
                         }
                         if (!nodes.nodeExists(request.nodeId)) {
                             throw new NodeDoesNotExistOnMasterException();
diff --git a/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingException.java b/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingException.java
deleted file mode 100644
index 02d87ccef07e..000000000000
--- a/src/main/java/org/elasticsearch/discovery/zen/ping/ZenPingException.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Licensed to Elasticsearch under one or more contributor
- * license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright
- * ownership. Elasticsearch licenses this file to you under
- * the Apache License, Version 2.0 (the "License"); you may
- * not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package org.elasticsearch.discovery.zen.ping;
-
-import org.elasticsearch.discovery.DiscoveryException;
-
-/**
- *
- */
-public class ZenPingException extends DiscoveryException {
-
-    public ZenPingException(String message) {
-        super(message);
-    }
-
-    public ZenPingException(String message, Throwable cause) {
-        super(message, cause);
-    }
-}
