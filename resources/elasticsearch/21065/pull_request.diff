diff --git a/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java
index 008d7de52553..a85c9a224674 100644
--- a/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java
+++ b/core/src/main/java/org/elasticsearch/index/query/IndexQueryParserService.java
@@ -20,6 +20,7 @@
 package org.elasticsearch.index.query;
 
 import com.google.common.collect.ImmutableMap;
+
 import org.apache.lucene.search.Query;
 import org.apache.lucene.util.CloseableThreadLocal;
 import org.elasticsearch.Version;
@@ -232,6 +233,7 @@ public ParsedQuery parse(QueryParseContext context, XContentParser parser) {
     @Nullable
     public ParsedQuery parseInnerFilter(XContentParser parser) throws IOException {
         QueryParseContext context = cache.get();
+        XContentParser originalParser = context.parser();
         context.reset(parser);
         try {
             Query filter = context.parseInnerFilter();
@@ -240,18 +242,19 @@ public ParsedQuery parseInnerFilter(XContentParser parser) throws IOException {
             }
             return new ParsedQuery(filter, context.copyNamedQueries());
         } finally {
-            context.reset(null);
+            context.reset(originalParser);
         }
     }
 
     @Nullable
     public Query parseInnerQuery(XContentParser parser) throws IOException {
         QueryParseContext context = cache.get();
+        XContentParser originalParser = context.parser();
         context.reset(parser);
         try {
             return context.parseInnerQuery();
         } finally {
-            context.reset(null);
+            context.reset(originalParser);
         }
     }
 
@@ -314,6 +317,7 @@ public ParsedQuery parseQuery(BytesReference source) {
     }
 
     private ParsedQuery innerParse(QueryParseContext parseContext, XContentParser parser) throws IOException, QueryParsingException {
+        XContentParser originalParser = parseContext.parser();
         parseContext.reset(parser);
         try {
             parseContext.parseFieldMatcher(parseFieldMatcher);
@@ -323,7 +327,7 @@ private ParsedQuery innerParse(QueryParseContext parseContext, XContentParser pa
             }
             return new ParsedQuery(query, parseContext.copyNamedQueries());
         } finally {
-            parseContext.reset(null);
+            parseContext.reset(originalParser);
         }
     }
 
diff --git a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
index 6ac6a7a59a2e..55b307a99efb 100644
--- a/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
+++ b/core/src/test/java/org/elasticsearch/search/child/ChildQuerySearchIT.java
@@ -34,6 +34,7 @@
 import org.elasticsearch.index.query.IdsQueryBuilder;
 import org.elasticsearch.index.query.QueryBuilder;
 import org.elasticsearch.index.query.QueryBuilders;
+import org.elasticsearch.index.query.support.QueryInnerHitBuilder;
 import org.elasticsearch.index.search.child.ScoreType;
 import org.elasticsearch.rest.RestStatus;
 import org.elasticsearch.search.SearchHit;
@@ -833,6 +834,32 @@ public void testHasChildAndHasParentFilter_withFilter() throws Exception {
         assertThat(searchResponse.getHits().hits()[0].id(), equalTo("2"));
     }
 
+    @Test
+    public void testHasChildInnerHitsHighlighting() throws Exception {
+        assertAcked(prepareCreate("test")
+                .addMapping("parent")
+                .addMapping("child", "_parent", "type=parent"));
+        ensureGreen();
+
+        client().prepareIndex("test", "parent", "1").setSource("p_field", 1).get();
+        client().prepareIndex("test", "child", "2").setParent("1").setSource("c_field", "foo bar").get();
+        client().admin().indices().prepareFlush("test").get();
+
+        SearchResponse searchResponse = client().prepareSearch("test")
+                .setQuery(hasChildQuery("child", matchQuery("c_field", "foo")).innerHit(
+                        new QueryInnerHitBuilder()
+                                .addHighlightedField(
+                                        new HighlightBuilder.Field("c_field").highlightQuery(QueryBuilders.matchQuery("c_field", "bar")))
+                        )).get();
+        assertNoFailures(searchResponse);
+        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));
+        assertThat(searchResponse.getHits().hits()[0].id(), equalTo("1"));
+        SearchHit[] searchHits = searchResponse.getHits().hits()[0].getInnerHits().get("child").hits();
+        assertThat(searchHits.length, equalTo(1));
+        assertThat(searchHits[0].getHighlightFields().get("c_field").getFragments().length, equalTo(1));
+        assertThat(searchHits[0].getHighlightFields().get("c_field").getFragments()[0].string(), equalTo("foo <em>bar</em>"));
+    }
+
     @Test
     public void testHasChildAndHasParentWrappedInAQueryFilter() throws Exception {
         assertAcked(prepareCreate("test")
