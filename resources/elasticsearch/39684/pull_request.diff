diff --git a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java
index aebb02146562..90a821ed4b68 100644
--- a/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java
+++ b/x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java
@@ -471,8 +471,9 @@ private void validateApiKeyExpiration(Map<String, Object> source, ApiKeyCredenti
             final Map<String, Object> metadata = (Map<String, Object>) creator.get("metadata");
             final Map<String, Object> roleDescriptors = (Map<String, Object>) source.get("role_descriptors");
             final Map<String, Object> limitedByRoleDescriptors = (Map<String, Object>) source.get("limited_by_role_descriptors");
-            final String[] roleNames = (roleDescriptors != null) ? roleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)
-                : limitedByRoleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY);
+            final String[] roleNames = (roleDescriptors != null && roleDescriptors.isEmpty() == false)
+                    ? roleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY)
+                    : limitedByRoleDescriptors.keySet().toArray(Strings.EMPTY_ARRAY);
             final User apiKeyUser = new User(principal, roleNames, null, null, metadata, true);
             final Map<String, Object> authResultMetadata = new HashMap<>();
             authResultMetadata.put(API_KEY_ROLE_DESCRIPTORS_KEY, roleDescriptors);
diff --git a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java
index e49942c73330..0455c2cdc024 100644
--- a/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java
+++ b/x-pack/plugin/security/src/test/java/org/elasticsearch/xpack/security/authc/ApiKeyIntegTests.java
@@ -31,6 +31,9 @@
 import org.elasticsearch.xpack.core.security.action.GetApiKeyResponse;
 import org.elasticsearch.xpack.core.security.action.InvalidateApiKeyRequest;
 import org.elasticsearch.xpack.core.security.action.InvalidateApiKeyResponse;
+import org.elasticsearch.xpack.core.security.action.user.AuthenticateAction;
+import org.elasticsearch.xpack.core.security.action.user.AuthenticateRequest;
+import org.elasticsearch.xpack.core.security.action.user.AuthenticateResponse;
 import org.elasticsearch.xpack.core.security.authc.support.UsernamePasswordToken;
 import org.elasticsearch.xpack.core.security.authz.RoleDescriptor;
 import org.elasticsearch.xpack.core.security.client.SecurityClient;
@@ -52,6 +55,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
+import static org.hamcrest.Matchers.arrayContaining;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
@@ -143,6 +147,31 @@ public void testCreateApiKey() {
         assertThat(e.status(), is(RestStatus.FORBIDDEN));
     }
 
+    public void testAuthenticateActionForApiKey() throws InterruptedException, ExecutionException {
+        final Client client = client().filterWithHeader(Collections.singletonMap("Authorization",
+            UsernamePasswordToken.basicAuthHeaderValue(SecuritySettingsSource.TEST_SUPERUSER,
+                SecuritySettingsSourceField.TEST_PASSWORD_SECURE_STRING)));
+        final SecurityClient securityClient = new SecurityClient(client);
+        final CreateApiKeyResponse response = securityClient.prepareCreateApiKey()
+            .setName("test key")
+            .get();
+
+        assertEquals("test key", response.getName());
+        assertNotNull(response.getId());
+        assertNotNull(response.getKey());
+
+        final String base64ApiKeyKeyValue = Base64.getEncoder()
+                .encodeToString((response.getId() + ":" + response.getKey().toString()).getBytes(StandardCharsets.UTF_8));
+        final PlainActionFuture<AuthenticateResponse> future = new PlainActionFuture<AuthenticateResponse>();
+        client().filterWithHeader(Collections.singletonMap("Authorization", "ApiKey " + base64ApiKeyKeyValue))
+                .execute(AuthenticateAction.INSTANCE, new AuthenticateRequest(response.getId()), future);
+        final AuthenticateResponse authenticateResponse = future.get();
+        assertThat(authenticateResponse.authentication().getUser().roles(), arrayContaining("superuser"));
+        assertThat(authenticateResponse.authentication().getAuthenticatedBy().getName(), is("_es_api_key"));
+        assertThat(authenticateResponse.authentication().getAuthenticatedBy().getType(), is("_es_api_key"));
+        assertThat(authenticateResponse.authentication().getUser().enabled(), is(true));
+    }
+
     public void testCreateApiKeyFailsWhenApiKeyWithSameNameAlreadyExists() throws InterruptedException, ExecutionException {
         String keyName = randomAlphaOfLength(5);
         List<CreateApiKeyResponse> responses = new ArrayList<>();
