diff --git a/core/src/main/java/org/elasticsearch/index/mapper/StringFieldMapper.java b/core/src/main/java/org/elasticsearch/index/mapper/StringFieldMapper.java
index d290ef0fb51f..8ce1eb952bab 100644
--- a/core/src/main/java/org/elasticsearch/index/mapper/StringFieldMapper.java
+++ b/core/src/main/java/org/elasticsearch/index/mapper/StringFieldMapper.java
@@ -88,6 +88,8 @@
 
     public static class Builder extends FieldMapper.Builder<Builder, StringFieldMapper> {
 
+        private final DeprecationLogger deprecationLogger;
+
         protected String nullValue = Defaults.NULL_VALUE;
 
         /**
@@ -102,6 +104,8 @@
         public Builder(String name) {
             super(name, Defaults.FIELD_TYPE, Defaults.FIELD_TYPE);
             builder = this;
+            Logger logger = Loggers.getLogger(getClass());
+            this.deprecationLogger = new DeprecationLogger(logger);
         }
 
         @Override
@@ -169,12 +173,18 @@ public StringFieldMapper build(BuilderContext context) {
             }
             if (positionIncrementGap != POSITION_INCREMENT_GAP_USE_ANALYZER) {
                 if (fieldType.indexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {
-                    throw new IllegalArgumentException("Cannot set position_increment_gap on field ["
-                        + name + "] without positions enabled");
+                    if (context.indexCreatedVersion().onOrAfter(Version.V_5_0_0_alpha1)) {
+                        throw new IllegalArgumentException("Cannot set position_increment_gap on field ["
+                                + name + "] without positions enabled");
+                    } else {
+                        deprecationLogger.deprecated("setting position_increment_gap on field [{}] without positions enabled " +
+                                        "is deprecated and will be ignored", name);
+                    }
+                } else {
+                    fieldType.setIndexAnalyzer(new NamedAnalyzer(fieldType.indexAnalyzer(), positionIncrementGap));
+                    fieldType.setSearchAnalyzer(new NamedAnalyzer(fieldType.searchAnalyzer(), positionIncrementGap));
+                    fieldType.setSearchQuoteAnalyzer(new NamedAnalyzer(fieldType.searchQuoteAnalyzer(), positionIncrementGap));
                 }
-                fieldType.setIndexAnalyzer(new NamedAnalyzer(fieldType.indexAnalyzer(), positionIncrementGap));
-                fieldType.setSearchAnalyzer(new NamedAnalyzer(fieldType.searchAnalyzer(), positionIncrementGap));
-                fieldType.setSearchQuoteAnalyzer(new NamedAnalyzer(fieldType.searchQuoteAnalyzer(), positionIncrementGap));
             }
             setupFieldType(context);
             return new StringFieldMapper(
diff --git a/core/src/test/java/org/elasticsearch/index/mapper/LegacyStringMappingTests.java b/core/src/test/java/org/elasticsearch/index/mapper/LegacyStringMappingTests.java
index 3c07ec4b90c8..4a706ea77c35 100644
--- a/core/src/test/java/org/elasticsearch/index/mapper/LegacyStringMappingTests.java
+++ b/core/src/test/java/org/elasticsearch/index/mapper/LegacyStringMappingTests.java
@@ -731,9 +731,8 @@ public void testNonAnalyzedFieldPositionIncrement() throws IOException {
                 .field("position_increment_gap", 10)
                 .endObject().endObject().endObject().endObject().string();
 
-            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,
-                () -> parser.parse("type", new CompressedXContent(mapping)));
-            assertEquals("Cannot set position_increment_gap on field [field] without positions enabled", e.getMessage());
+            // allowed in index created before 5.0
+            parser.parse("type", new CompressedXContent(mapping));
         }
     }
 
@@ -746,9 +745,8 @@ public void testAnalyzedFieldPositionIncrementWithoutPositions() throws IOExcept
                 .field("position_increment_gap", 10)
                 .endObject().endObject().endObject().endObject().string();
 
-            IllegalArgumentException e = expectThrows(IllegalArgumentException.class,
-                () -> parser.parse("type", new CompressedXContent(mapping)));
-            assertEquals("Cannot set position_increment_gap on field [field] without positions enabled", e.getMessage());
+            // allowed in index created before 5.0
+            parser.parse("type", new CompressedXContent(mapping));
         }
     }
 
