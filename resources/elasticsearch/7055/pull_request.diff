diff --git a/core-signatures.txt b/core-signatures.txt
index 8f44a762cefe..d6c6166b9ef3 100644
--- a/core-signatures.txt
+++ b/core-signatures.txt
@@ -66,3 +66,6 @@ java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)
 java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[])
 java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[], int, int)
 java.nio.channels.FileChannel#read(java.nio.ByteBuffer, long)
+
+@defaultMessage Use Lucene.parseLenient instead it strips off minor version
+org.apache.lucene.util.Version#parseLeniently(java.lang.String)
diff --git a/pom.xml b/pom.xml
index ff4cccd15abd..ddf0b4ed10b7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1169,6 +1169,9 @@
                                 <!-- start exclude for Channels utility class -->
                                 <exclude>org/elasticsearch/common/io/Channels.class</exclude>
                                 <!-- end exclude for Channels -->
+                                <!-- start exclude for Lucene utility class -->
+                                <exclude>org/elasticsearch/common/lucene/Lucene$LenientParser.class</exclude>
+                                <!-- end exclude for Lucene -->
                             </excludes>
                             <bundledSignatures>
                                 <!-- This will automatically choose the right signatures based on 'targetVersion': -->
diff --git a/src/main/java/org/elasticsearch/common/lucene/Lucene.java b/src/main/java/org/elasticsearch/common/lucene/Lucene.java
index 839dbb414f63..524f0a00bb47 100644
--- a/src/main/java/org/elasticsearch/common/lucene/Lucene.java
+++ b/src/main/java/org/elasticsearch/common/lucene/Lucene.java
@@ -33,6 +33,7 @@
 import org.elasticsearch.ElasticsearchIllegalArgumentException;
 import org.elasticsearch.ExceptionsHelper;
 import org.elasticsearch.common.Nullable;
+import org.elasticsearch.common.Strings;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.logging.ESLogger;
@@ -40,8 +41,10 @@
 import org.elasticsearch.index.analysis.NamedAnalyzer;
 import org.elasticsearch.index.fielddata.IndexFieldData;
 
-import static org.elasticsearch.common.lucene.search.NoopCollector.NOOP_COLLECTOR;
 import java.io.IOException;
+import java.util.Locale;
+
+import static org.elasticsearch.common.lucene.search.NoopCollector.NOOP_COLLECTOR;
 
 /**
  *
@@ -537,4 +540,27 @@ public static final boolean indexExists(final Directory directory) throws IOExce
     public static boolean isCorruptionException(Throwable t) {
         return ExceptionsHelper.unwrap(t, CorruptIndexException.class) != null;
     }
+
+    /**
+     * Parses the version string lenient and returns the the default value if the given string is null or emtpy
+     */
+    public static Version parseVersionLenient(String toParse, Version defaultValue) {
+        return LenientParser.parse(toParse, defaultValue);
+    }
+
+    private static final class LenientParser {
+        public static Version parse(String toParse, Version defaultValue) {
+            if (Strings.hasLength(toParse)) {
+                try {
+                    return Version.parseLeniently(toParse);
+                } catch (IllegalArgumentException e) {
+                    final String parsedMatchVersion = toParse
+                            .toUpperCase(Locale.ROOT)
+                            .replaceFirst("^(\\d+)\\.(\\d+).(\\d+)$", "LUCENE_$1_$2");
+                    return Version.valueOf(parsedMatchVersion);
+                }
+            }
+            return defaultValue;
+        }
+    }
 }
diff --git a/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java
index 1e2a53474df6..e50a674ad865 100644
--- a/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java
+++ b/src/main/java/org/elasticsearch/index/snapshots/blobstore/BlobStoreIndexShardSnapshot.java
@@ -24,6 +24,7 @@
 import org.elasticsearch.ElasticsearchParseException;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.ParseField;
+import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.unit.ByteSizeValue;
 import org.elasticsearch.common.xcontent.ToXContent;
 import org.elasticsearch.common.xcontent.XContentBuilder;
@@ -255,7 +256,7 @@ public static FileInfo fromXContent(XContentParser parser) throws IOException {
                             } else if ("part_size".equals(currentFieldName)) {
                                 partSize = new ByteSizeValue(parser.longValue());
                             } else if ("written_by".equals(currentFieldName)) {
-                                writtenBy = Version.parseLeniently(parser.text());
+                                writtenBy = Lucene.parseVersionLenient(parser.text(), null);
                             } else {
                                 throw new ElasticsearchParseException("unknown parameter [" + currentFieldName + "]");
                             }
diff --git a/src/main/java/org/elasticsearch/index/store/Store.java b/src/main/java/org/elasticsearch/index/store/Store.java
index 8bcc1039f070..7b82e1c3024b 100644
--- a/src/main/java/org/elasticsearch/index/store/Store.java
+++ b/src/main/java/org/elasticsearch/index/store/Store.java
@@ -448,7 +448,7 @@ public String toString() {
                 Version maxVersion = Version.LUCENE_3_0; // we don't know which version was used to write so we take the max version.
                 Set<String> added = new HashSet<>();
                 for (SegmentCommitInfo info : segmentCommitInfos) {
-                    final Version version = Version.parseLeniently(info.info.getVersion());
+                    final Version version = Lucene.parseVersionLenient(info.info.getVersion(), Version.LUCENE_3_0);
                     if (version.onOrAfter(maxVersion)) {
                         maxVersion = version;
                     }
diff --git a/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java b/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java
index 46dedb76f827..3875c20be2a5 100644
--- a/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java
+++ b/src/main/java/org/elasticsearch/index/store/StoreFileMetaData.java
@@ -19,12 +19,12 @@
 
 package org.elasticsearch.index.store;
 
-import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.Version;
 import org.elasticsearch.common.Nullable;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.io.stream.Streamable;
+import org.elasticsearch.common.lucene.Lucene;
 
 import java.io.IOException;
 
@@ -102,7 +102,7 @@ public void readFrom(StreamInput in) throws IOException {
         checksum = in.readOptionalString();
         if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_3_0)) {
             String versionString = in.readOptionalString();
-            writtenBy = versionString == null ? null : Version.parseLeniently(versionString);
+            writtenBy = Lucene.parseVersionLenient(versionString, null);
         }
     }
 
diff --git a/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java
index 7130897aed65..b521b867604c 100644
--- a/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java
+++ b/src/main/java/org/elasticsearch/indices/recovery/RecoveryFileChunkRequest.java
@@ -21,10 +21,10 @@
 
 import org.apache.lucene.util.Version;
 import org.elasticsearch.common.Nullable;
-import org.elasticsearch.common.bytes.BytesArray;
 import org.elasticsearch.common.bytes.BytesReference;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
+import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.index.store.StoreFileMetaData;
 import org.elasticsearch.transport.TransportRequest;
@@ -101,7 +101,7 @@ public void readFrom(StreamInput in) throws IOException {
         Version writtenBy = null;
         if (in.getVersion().onOrAfter(org.elasticsearch.Version.V_1_3_0)) {
             String versionString = in.readOptionalString();
-            writtenBy = versionString == null ? null : Version.parseLeniently(versionString);
+            writtenBy = Lucene.parseVersionLenient(versionString, null);
         }
         metaData = new StoreFileMetaData(name, length, checksum, writtenBy);
     }
diff --git a/src/main/java/org/elasticsearch/plugins/PluginsService.java b/src/main/java/org/elasticsearch/plugins/PluginsService.java
index 887f54d6aa4b..b1f3fabd6758 100644
--- a/src/main/java/org/elasticsearch/plugins/PluginsService.java
+++ b/src/main/java/org/elasticsearch/plugins/PluginsService.java
@@ -33,6 +33,7 @@
 import org.elasticsearch.common.component.LifecycleComponent;
 import org.elasticsearch.common.inject.Module;
 import org.elasticsearch.common.logging.ESLogger;
+import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.unit.TimeValue;
@@ -571,7 +572,7 @@ public static boolean checkLuceneCompatibility(Class<? extends Plugin> pluginCla
                 String parts[] = luceneVersion.split("\\.");
 
                 // Should fail if the running node is too old!
-                org.apache.lucene.util.Version luceneExpectedVersion = org.apache.lucene.util.Version.parseLeniently(parts[0]+"."+parts[1]);
+                org.apache.lucene.util.Version luceneExpectedVersion = Lucene.parseVersionLenient(parts[0] + "." + parts[1], null);
 
                 if (Version.CURRENT.luceneVersion.equals(luceneExpectedVersion)) {
                     logger.debug("starting analysis plugin for Lucene [{}].", luceneExpectedVersion);
diff --git a/src/test/java/org/elasticsearch/VersionTests.java b/src/test/java/org/elasticsearch/VersionTests.java
index 547ae3d99702..c84ec986ed19 100644
--- a/src/test/java/org/elasticsearch/VersionTests.java
+++ b/src/test/java/org/elasticsearch/VersionTests.java
@@ -20,10 +20,14 @@
 package org.elasticsearch;
 
 import org.elasticsearch.cluster.metadata.IndexMetaData;
+import org.elasticsearch.common.lucene.Lucene;
 import org.elasticsearch.common.settings.ImmutableSettings;
 import org.elasticsearch.test.ElasticsearchTestCase;
+import org.hamcrest.Matchers;
 import org.junit.Test;
 
+import java.util.Locale;
+
 import static org.elasticsearch.Version.V_0_20_0;
 import static org.elasticsearch.Version.V_0_90_0;
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -114,4 +118,19 @@ public void testMinCompatVersion() {
         assertThat(Version.V_1_0_0_RC2.minimumCompatibilityVersion(), equalTo(Version.V_1_0_0_RC2));
     }
 
+    @Test
+    public void parseLenient() {
+        int numIters = randomIntBetween(10, 100);
+        for (int i = 0; i < numIters; i++) {
+            Version version = randomVersion(getRandom());
+            org.apache.lucene.util.Version luceneVersion = version.luceneVersion;
+            String string = luceneVersion.name().toUpperCase(Locale.ROOT)
+                    .replaceFirst("^LUCENE_(\\d+)_(\\d+)$", "$1.$2");
+            if (randomBoolean()) {
+                string = string + "." + randomIntBetween(0, 100);
+            }
+            assertThat(luceneVersion, Matchers.equalTo(Lucene.parseVersionLenient(string, null)));
+        }
+    }
+
 }
\ No newline at end of file
