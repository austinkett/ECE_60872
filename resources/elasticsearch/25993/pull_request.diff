diff --git a/core/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java b/core/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
index 9d13b5a361a8..763fd6b516c5 100644
--- a/core/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
+++ b/core/src/main/java/org/elasticsearch/index/search/QueryStringQueryParser.java
@@ -47,7 +47,6 @@
 import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.regex.Regex;
 import org.elasticsearch.common.unit.Fuzziness;
-import org.elasticsearch.index.analysis.ShingleTokenFilterFactory;
 import org.elasticsearch.index.mapper.AllFieldMapper;
 import org.elasticsearch.index.mapper.DateFieldMapper;
 import org.elasticsearch.index.mapper.DocumentMapper;
@@ -683,6 +682,9 @@ private Query getPossiblyAnalyzedPrefixQuery(String field, String termStr) throw
     private Query existsQuery(String fieldName) {
         final FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType =
             (FieldNamesFieldMapper.FieldNamesFieldType) context.getMapperService().fullName(FieldNamesFieldMapper.NAME);
+        if (fieldNamesFieldType == null) {
+            return new MatchNoDocsQuery("No mappings yet");
+        }
         if (fieldNamesFieldType.isEnabled() == false) {
             // The field_names_field is disabled so we switch to a wildcard query that matches all terms
             return new WildcardQuery(new Term(fieldName, "*"));
diff --git a/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
index 8e64cf828ba1..cb014ee8c10a 100644
--- a/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
+++ b/core/src/test/java/org/elasticsearch/index/query/QueryStringQueryBuilderTests.java
@@ -779,12 +779,15 @@ public void testToQueryTextParsing() throws IOException {
     }
 
     public void testExistsFieldQuery() throws Exception {
-        assumeTrue("test runs only when at least a type is registered", getCurrentTypes().length > 0);
-
         QueryShardContext context = createShardContext();
         QueryStringQueryBuilder queryBuilder = new QueryStringQueryBuilder("foo:*");
         Query query = queryBuilder.toQuery(context);
-        Query expected = new ConstantScoreQuery(new TermQuery(new Term("_field_names", "foo")));
+        Query expected;
+        if (getCurrentTypes().length > 0) {
+            expected = new ConstantScoreQuery(new TermQuery(new Term("_field_names", "foo")));
+        } else {
+            expected = new MatchNoDocsQuery();
+        }
         assertThat(query, equalTo(expected));
 
         queryBuilder = new QueryStringQueryBuilder("_all:*");
@@ -804,6 +807,7 @@ public void testExistsFieldQuery() throws Exception {
     }
 
     public void testDisabledFieldNamesField() throws Exception {
+        assumeTrue("No types", getCurrentTypes().length > 0);
         QueryShardContext context = createShardContext();
         context.getMapperService().merge("doc",
             new CompressedXContent(
@@ -811,16 +815,20 @@ public void testDisabledFieldNamesField() throws Exception {
                     "foo", "type=text",
                     "_field_names", "enabled=false").string()),
             MapperService.MergeReason.MAPPING_UPDATE, true);
-        QueryStringQueryBuilder queryBuilder = new QueryStringQueryBuilder("foo:*");
-        Query query = queryBuilder.toQuery(context);
-        Query expected = new WildcardQuery(new Term("foo", "*"));
-        assertThat(query, equalTo(expected));
-        context.getMapperService().merge("doc",
-            new CompressedXContent(
-                PutMappingRequest.buildFromSimplifiedDef("doc",
-                    "foo", "type=text",
-                    "_field_names", "enabled=true").string()),
-            MapperService.MergeReason.MAPPING_UPDATE, true);
+        try {
+            QueryStringQueryBuilder queryBuilder = new QueryStringQueryBuilder("foo:*");
+            Query query = queryBuilder.toQuery(context);
+            Query expected = new WildcardQuery(new Term("foo", "*"));
+            assertThat(query, equalTo(expected));
+        } finally {
+            // restore mappings as they were before
+            context.getMapperService().merge("doc",
+                new CompressedXContent(
+                    PutMappingRequest.buildFromSimplifiedDef("doc",
+                        "foo", "type=text",
+                        "_field_names", "enabled=true").string()),
+                MapperService.MergeReason.MAPPING_UPDATE, true);
+        }
     }
 
 
diff --git a/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java b/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java
index c6b7a81a8c29..bf73f0187a0a 100644
--- a/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java
+++ b/test/framework/src/main/java/org/elasticsearch/test/AbstractQueryTestCase.java
@@ -166,7 +166,7 @@ protected static Index getIndex() {
     }
 
     protected static String[] getCurrentTypes() {
-        return currentTypes == null ? Strings.EMPTY_ARRAY : currentTypes;
+        return currentTypes;
     }
 
     protected Collection<Class<? extends Plugin>> getPlugins() {
@@ -186,7 +186,14 @@ public static void beforeClass() {
         index = new Index(randomAlphaOfLengthBetween(1, 10), "_na_");
 
         // Set a single type in the index
-        currentTypes = new String[] { "doc" };
+        switch (random().nextInt(3)) {
+        case 0:
+            currentTypes = new String[0]; // no types
+            break;
+        default:
+            currentTypes = new String[] { "doc" };
+            break;
+        }
         randomTypes = getRandomTypes();
     }
 
