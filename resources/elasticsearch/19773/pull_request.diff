diff --git a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java
index 9bfeaecd78bf..34daee1d14d6 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/CancelTasksResponse.java
@@ -22,6 +22,7 @@
 import org.elasticsearch.action.FailedNodeException;
 import org.elasticsearch.action.TaskOperationFailure;
 import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;
+import org.elasticsearch.cluster.node.DiscoveryNodes;
 import org.elasticsearch.tasks.TaskInfo;
 
 import java.util.List;
@@ -34,9 +35,13 @@
     public CancelTasksResponse() {
     }
 
+    public CancelTasksResponse(DiscoveryNodes discoveryNodes) {
+        super(discoveryNodes);
+    }
+
     public CancelTasksResponse(List<TaskInfo> tasks, List<TaskOperationFailure> taskFailures, List<? extends FailedNodeException>
-        nodeFailures) {
-        super(tasks, taskFailures, nodeFailures);
+        nodeFailures, DiscoveryNodes discoveryNodes) {
+        super(tasks, taskFailures, nodeFailures, discoveryNodes);
     }
 
 }
diff --git a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java
index 6d5936db67a2..195cdd86f5cf 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/cancel/TransportCancelTasksAction.java
@@ -66,7 +66,8 @@ public TransportCancelTasksAction(Settings settings, ThreadPool threadPool, Clus
                                       TransportService transportService, ActionFilters actionFilters, IndexNameExpressionResolver
                                           indexNameExpressionResolver) {
         super(settings, CancelTasksAction.NAME, threadPool, clusterService, transportService, actionFilters,
-            indexNameExpressionResolver, CancelTasksRequest::new, CancelTasksResponse::new, ThreadPool.Names.MANAGEMENT);
+            indexNameExpressionResolver, CancelTasksRequest::new, () -> new CancelTasksResponse(clusterService.state().nodes()),
+            ThreadPool.Names.MANAGEMENT);
         transportService.registerRequestHandler(BAN_PARENT_ACTION_NAME, BanParentTaskRequest::new, ThreadPool.Names.SAME, new
             BanParentRequestHandler());
     }
@@ -74,7 +75,7 @@ public TransportCancelTasksAction(Settings settings, ThreadPool threadPool, Clus
     @Override
     protected CancelTasksResponse newResponse(CancelTasksRequest request, List<TaskInfo> tasks, List<TaskOperationFailure>
         taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {
-        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);
+        return new CancelTasksResponse(tasks, taskOperationFailures, failedNodeExceptions, clusterService.state().nodes());
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java
index 390e4c6dda7d..ae6f0d0855f8 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/ListTasksResponse.java
@@ -51,15 +51,21 @@
 
     private List<TaskGroup> groups;
 
-    private DiscoveryNodes discoveryNodes;
+    private final DiscoveryNodes discoveryNodes;
 
     public ListTasksResponse() {
+        this(null, null, null, null);
+    }
+
+    public ListTasksResponse(DiscoveryNodes discoveryNodes) {
+        this(null, null, null, discoveryNodes);
     }
 
     public ListTasksResponse(List<TaskInfo> tasks, List<TaskOperationFailure> taskFailures,
-            List<? extends FailedNodeException> nodeFailures) {
+            List<? extends FailedNodeException> nodeFailures, DiscoveryNodes discoveryNodes) {
         super(taskFailures, nodeFailures);
         this.tasks = tasks == null ? Collections.emptyList() : Collections.unmodifiableList(new ArrayList<>(tasks));
+        this.discoveryNodes = discoveryNodes;
     }
 
     @Override
@@ -123,15 +129,6 @@ private void buildTaskGroups() {
         return tasks;
     }
 
-    /**
-     * Set a reference to the {@linkplain DiscoveryNodes}. Used for calling {@link #toXContent(XContentBuilder, ToXContent.Params)} with
-     * {@code group_by=nodes}.
-     */
-    public void setDiscoveryNodes(DiscoveryNodes discoveryNodes) {
-        //WTF is this? Why isn't this set by default;
-        this.discoveryNodes = discoveryNodes;
-    }
-
     @Override
     public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {
         if (getTaskFailures() != null && getTaskFailures().size() > 0) {
@@ -155,9 +152,6 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
         }
         String groupBy = params.param("group_by", "nodes");
         if ("nodes".equals(groupBy)) {
-            if (discoveryNodes == null) {
-                throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");
-            }
             builder.startObject("nodes");
             for (Map.Entry<String, List<TaskInfo>> entry : getPerNodeTasks().entrySet()) {
                 DiscoveryNode node = discoveryNodes.get(entry.getKey());
@@ -205,6 +199,6 @@ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws
 
     @Override
     public String toString() {
-        return Strings.toString(this);
+        return Strings.toString(this, true);
     }
 }
diff --git a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java
index 261588003465..a1f84f87f9d8 100644
--- a/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java
+++ b/core/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java
@@ -57,13 +57,14 @@ public static long waitForCompletionTimeout(TimeValue timeout) {
     public TransportListTasksAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,
             TransportService transportService, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {
         super(settings, ListTasksAction.NAME, threadPool, clusterService, transportService, actionFilters,
-                indexNameExpressionResolver, ListTasksRequest::new, ListTasksResponse::new, ThreadPool.Names.MANAGEMENT);
+            indexNameExpressionResolver, ListTasksRequest::new, () -> new ListTasksResponse(clusterService.state().nodes()),
+            ThreadPool.Names.MANAGEMENT);
     }
 
     @Override
     protected ListTasksResponse newResponse(ListTasksRequest request, List<TaskInfo> tasks,
             List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {
-        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);
+        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions, clusterService.state().nodes());
     }
 
     @Override
diff --git a/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestListTasksAction.java b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestListTasksAction.java
index 4d9f9bd6fa7b..ff28d6331bbb 100644
--- a/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestListTasksAction.java
+++ b/core/src/main/java/org/elasticsearch/rest/action/admin/cluster/RestListTasksAction.java
@@ -81,7 +81,6 @@ public void handleRequest(final RestRequest request, final RestChannel channel,
         return new ActionListener<T>() {
             @Override
             public void onResponse(T response) {
-                response.setDiscoveryNodes(clusterService.state().nodes());
                 channelListener.onResponse(response);
             }
 
diff --git a/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java
index 955957abfb62..17ca7e7268bd 100644
--- a/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java
+++ b/core/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java
@@ -736,12 +736,6 @@ public void testTasksToXContentGrouping() throws Exception {
         ListTasksResponse response = testNodes[0].transportListTasksAction.execute(listTasksRequest).get();
         assertEquals(testNodes.length + 1, response.getTasks().size());
 
-        // First group by node
-        DiscoveryNodes.Builder discoNodes = DiscoveryNodes.builder();
-        for (TestNode testNode : this.testNodes) {
-            discoNodes.add(testNode.discoveryNode);
-        }
-        response.setDiscoveryNodes(discoNodes.build());
         Map<String, Object> byNodes = serialize(response, new ToXContent.MapParams(Collections.singletonMap("group_by", "nodes")));
         byNodes = (Map<String, Object>) byNodes.get("nodes");
         // One element on the top level
diff --git a/core/src/test/java/org/elasticsearch/tasks/ListTasksResponseTests.java b/core/src/test/java/org/elasticsearch/tasks/ListTasksResponseTests.java
new file mode 100644
index 000000000000..433f3bdd16a0
--- /dev/null
+++ b/core/src/test/java/org/elasticsearch/tasks/ListTasksResponseTests.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to Elasticsearch under one or more contributor
+ * license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright
+ * ownership. Elasticsearch licenses this file to you under
+ * the Apache License, Version 2.0 (the "License"); you may
+ * not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.elasticsearch.tasks;
+
+import org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksResponse;
+import org.elasticsearch.cluster.node.DiscoveryNodes;
+import org.elasticsearch.test.ESTestCase;
+import org.hamcrest.Matchers;
+
+import java.util.Collections;
+
+public class ListTasksResponseTests extends ESTestCase {
+
+    public void testToStringNoTask() {
+        ListTasksResponse tasksResponse = new ListTasksResponse();
+        String string = tasksResponse.toString();
+        assertThat(string, Matchers.containsString("nodes"));
+    }
+
+    public void testToString() {
+        TaskInfo info = new TaskInfo(
+            new TaskId("node1", 1), "dummy-type", "dummy-action", "dummy-description", null, 0, 1, true, new TaskId("node1", 0));
+
+        DiscoveryNodes nodes = DiscoveryNodes.builder().build();
+        ListTasksResponse tasksResponse = new ListTasksResponse(Collections.singletonList(info), Collections.emptyList(),
+            Collections.emptyList(), nodes);
+
+        String string = tasksResponse.toString();
+        assertThat(string, Matchers.containsString("\"type\":\"dummy-type\""));
+    }
+}
diff --git a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportRethrottleAction.java b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportRethrottleAction.java
index 0ef55fd58ff7..408204c801e3 100644
--- a/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportRethrottleAction.java
+++ b/modules/reindex/src/main/java/org/elasticsearch/index/reindex/TransportRethrottleAction.java
@@ -41,7 +41,8 @@
     public TransportRethrottleAction(Settings settings, ThreadPool threadPool, ClusterService clusterService,
             TransportService transportService, ActionFilters actionFilters, IndexNameExpressionResolver indexNameExpressionResolver) {
         super(settings, RethrottleAction.NAME, threadPool, clusterService, transportService, actionFilters,
-                indexNameExpressionResolver, RethrottleRequest::new, ListTasksResponse::new, ThreadPool.Names.MANAGEMENT);
+                indexNameExpressionResolver, RethrottleRequest::new, () -> new ListTasksResponse(clusterService.state().nodes()),
+            ThreadPool.Names.MANAGEMENT);
     }
 
     @Override
@@ -59,7 +60,7 @@ protected TaskInfo readTaskResponse(StreamInput in) throws IOException {
     @Override
     protected ListTasksResponse newResponse(RethrottleRequest request, List<TaskInfo> tasks,
             List<TaskOperationFailure> taskOperationFailures, List<FailedNodeException> failedNodeExceptions) {
-        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions);
+        return new ListTasksResponse(tasks, taskOperationFailures, failedNodeExceptions, clusterService.state().nodes());
     }
 
     @Override
