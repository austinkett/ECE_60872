diff --git a/core/src/main/java/org/elasticsearch/search/fetch/subphase/InnerHitsContext.java b/core/src/main/java/org/elasticsearch/search/fetch/subphase/InnerHitsContext.java
index 44a6b13fd403..e118f26866a9 100644
--- a/core/src/main/java/org/elasticsearch/search/fetch/subphase/InnerHitsContext.java
+++ b/core/src/main/java/org/elasticsearch/search/fetch/subphase/InnerHitsContext.java
@@ -59,8 +59,6 @@
 import java.util.Map;
 import java.util.Objects;
 
-/**
- */
 public final class InnerHitsContext {
 
     private final Map<String, BaseInnerHits> innerHits;
@@ -110,6 +108,10 @@ public InnerHitsContext innerHits() {
         public void setChildInnerHits(Map<String, InnerHitsContext.BaseInnerHits> childInnerHits) {
             this.childInnerHits = new InnerHitsContext(childInnerHits);
         }
+
+        boolean doCountOnly() {
+            return from() < 0 || from() >= size() || size() <= 0;
+        }
     }
 
     public static final class NestedInnerHits extends BaseInnerHits {
@@ -135,7 +137,7 @@ public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContex
             Query childFilter = childObjectMapper.nestedTypeFilter();
             Query q = Queries.filtered(query(), new NestedChildrenQuery(parentFilter, childFilter, hitContext));
 
-            if (size() == 0) {
+            if (doCountOnly()) {
                 return new TopDocs(context.searcher().count(q), Lucene.EMPTY_SCORE_DOCS, 0);
             } else {
                 int topN = Math.min(from() + size(), context.searcher().getIndexReader().maxDoc());
@@ -310,7 +312,7 @@ public TopDocs topDocs(SearchContext context, FetchSubPhase.HitContext hitContex
                 // Only include docs that have this inner hits type
                 .add(documentMapper.typeFilter(), Occur.FILTER)
                 .build();
-            if (size() == 0) {
+            if (doCountOnly()) {
                 final int count = context.searcher().count(q);
                 return new TopDocs(count, Lucene.EMPTY_SCORE_DOCS, 0);
             } else {
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
index 1e43ffe532e3..27857b0f3d02 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/InnerHitsIT.java
@@ -179,6 +179,35 @@ public void testSimpleNested() throws Exception {
         assertThat(innerHits.getAt(0).explanation().toString(), containsString("weight(comments.message:fox in"));
         assertThat(innerHits.getAt(0).getFields().get("comments.message").getValue().toString(), equalTo("eat"));
         assertThat(innerHits.getAt(0).getFields().get("script").getValue().toString(), equalTo("5"));
+
+        response = client().prepareSearch("articles")
+                .setQuery(nestedQuery("comments", matchQuery("comments.message", "elephant"), ScoreMode.Avg)
+                        .innerHit(new InnerHitBuilder().setName("comment").setFrom(2).setSize(3))
+                ).get();
+        assertNoFailures(response);
+        assertHitCount(response, 1);
+        assertSearchHit(response, 1, hasId("2"));
+        assertThat(response.getHits().getAt(0).getShard(), notNullValue());
+        assertThat(response.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = response.getHits().getAt(0).getInnerHits().get("comment");
+        assertThat(innerHits.totalHits(), equalTo(3L));
+        assertThat(innerHits.getHits().length, equalTo(1));
+        assertThat(innerHits.getAt(0).getId(), equalTo("2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("comments"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(2));
+
+        response = client().prepareSearch("articles")
+                .setQuery(nestedQuery("comments", matchQuery("comments.message", "elephant"), ScoreMode.Avg)
+                        .innerHit(new InnerHitBuilder().setName("comment").setFrom(3).setSize(3))
+                ).get();
+        assertNoFailures(response);
+        assertHitCount(response, 1);
+        assertSearchHit(response, 1, hasId("2"));
+        assertThat(response.getHits().getAt(0).getShard(), notNullValue());
+        assertThat(response.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = response.getHits().getAt(0).getInnerHits().get("comment");
+        assertThat(innerHits.totalHits(), equalTo(3L));
+        assertThat(innerHits.getHits().length, equalTo(0));
     }
 
     public void testRandomNested() throws Exception {
diff --git a/core/src/test/java/org/elasticsearch/search/fetch/subphase/NestedChildrenFilterTests.java b/core/src/test/java/org/elasticsearch/search/fetch/subphase/NestedChildrenFilterTests.java
index 440d90bdba4b..c4c180ab8580 100644
--- a/core/src/test/java/org/elasticsearch/search/fetch/subphase/NestedChildrenFilterTests.java
+++ b/core/src/test/java/org/elasticsearch/search/fetch/subphase/NestedChildrenFilterTests.java
@@ -46,8 +46,6 @@
 
 import static org.hamcrest.Matchers.equalTo;
 
-/**
- */
 public class NestedChildrenFilterTests extends ESTestCase {
     public void testNestedChildrenFilter() throws Exception {
         int numParentDocs = scaledRandomIntBetween(0, 32);
