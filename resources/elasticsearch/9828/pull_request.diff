diff --git a/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java b/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java
index 87c639a43498..2c25b036c0c0 100644
--- a/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java
+++ b/src/main/java/org/elasticsearch/common/rounding/TimeZoneRounding.java
@@ -169,8 +169,10 @@ public long valueForKey(long time) {
         @Override
         public long nextRoundingValue(long time) {
             long currentWithoutPostZone = postTz.convertLocalToUTC(time, true);
-            long nextWithoutPostZone = durationField.add(currentWithoutPostZone, 1);
-            return postTz.convertUTCToLocal(nextWithoutPostZone);
+            // we also need to correct for preTz because rounding takes place in local time zone
+            long local = preTz.convertUTCToLocal(currentWithoutPostZone);
+            long nextLocal = durationField.add(local, 1);
+            return postTz.convertUTCToLocal(preTz.convertLocalToUTC((nextLocal), true));
         }
 
         @Override
diff --git a/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java b/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
index 8ddeb23d64be..e9bfe27ecbaf 100644
--- a/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
+++ b/src/test/java/org/elasticsearch/common/rounding/TimeZoneRoundingTests.java
@@ -155,15 +155,28 @@ public void testPreZoneAdjustLargeInterval() {
 
     @Test
     public void testAmbiguousHoursAfterDSTSwitch() {
-        Rounding tzRounding;
-
-        tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID("Asia/Jerusalem")).build();
+        Rounding tzRounding = TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).preZone(DateTimeZone.forID("Asia/Jerusalem")).build();
         // Both timestamps "2014-10-25T22:30:00Z" and "2014-10-25T23:30:00Z" are "2014-10-26T01:30:00" in local time because
         // of DST switch between them. This test checks that they are both returned to their correct UTC time after rounding.
         assertThat(tzRounding.round(time("2014-10-25T22:30:00", DateTimeZone.UTC)), equalTo(time("2014-10-25T22:00:00", DateTimeZone.UTC)));
         assertThat(tzRounding.round(time("2014-10-25T23:30:00", DateTimeZone.UTC)), equalTo(time("2014-10-25T23:00:00", DateTimeZone.UTC)));
     }
 
+    @Test
+    public void testNextRoundingValueCornerCase8209() {
+        Rounding tzRounding = TimeZoneRounding.builder(DateTimeUnit.MONTH_OF_YEAR).preZone(DateTimeZone.forID("+01:00")).
+                preZoneAdjustLargeInterval(true).build();
+        long roundedValue = tzRounding.round(time("2014-01-01T00:00:00Z", DateTimeZone.UTC));
+        assertThat(roundedValue, equalTo(time("2013-12-31T23:00:00.000Z", DateTimeZone.UTC)));
+        roundedValue = tzRounding.nextRoundingValue(roundedValue);
+        assertThat(roundedValue, equalTo(time("2014-01-31T23:00:00.000Z", DateTimeZone.UTC)));
+        roundedValue = tzRounding.nextRoundingValue(roundedValue);
+        assertThat(roundedValue, equalTo(time("2014-02-28T23:00:00.000Z", DateTimeZone.UTC)));
+        roundedValue = tzRounding.nextRoundingValue(roundedValue);
+        assertThat(roundedValue, equalTo(time("2014-03-31T23:00:00.000Z", DateTimeZone.UTC)));
+        roundedValue = tzRounding.nextRoundingValue(roundedValue);
+        assertThat(roundedValue, equalTo(time("2014-04-30T23:00:00.000Z", DateTimeZone.UTC)));
+    }
 
     private long utc(String time) {
         return time(time, DateTimeZone.UTC);
diff --git a/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
index 574908f78310..bacef1fb97f1 100644
--- a/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
+++ b/src/test/java/org/elasticsearch/search/aggregations/bucket/DateHistogramTests.java
@@ -1303,6 +1303,31 @@ public void testIssue7673() throws InterruptedException, ExecutionException {
         assertThat(histo.getBuckets().get(2).getDocCount(), equalTo(1L));
     }
 
+    public void testIssue8209() throws InterruptedException, ExecutionException {
+        assertAcked(client().admin().indices().prepareCreate("test8209").addMapping("type", "d", "type=date").get());
+        indexRandom(true,
+                client().prepareIndex("test8209", "type").setSource("d", "2014-01-01T0:00:00Z"),
+                client().prepareIndex("test8209", "type").setSource("d", "2014-04-01T0:00:00Z"),
+                client().prepareIndex("test8209", "type").setSource("d", "2014-04-30T0:00:00Z"));
+        ensureSearchable("test8209");
+        SearchResponse response = client().prepareSearch("test8209")
+                .addAggregation(dateHistogram("histo").field("d").interval(DateHistogram.Interval.MONTH).preZone("+01:00")
+                .minDocCount(0)
+                .preZoneAdjustLargeInterval(true))
+                .execute().actionGet();
+        assertSearchResponse(response);
+        Histogram histo = response.getAggregations().get("histo");
+        assertThat(histo.getBuckets().size(), equalTo(4));
+        assertThat(histo.getBuckets().get(0).getKey(), equalTo("2013-12-31T23:00:00.000Z"));
+        assertThat(histo.getBuckets().get(0).getDocCount(), equalTo(1L));
+        assertThat(histo.getBuckets().get(1).getKey(), equalTo("2014-01-31T23:00:00.000Z"));
+        assertThat(histo.getBuckets().get(1).getDocCount(), equalTo(0L));
+        assertThat(histo.getBuckets().get(2).getKey(), equalTo("2014-02-28T23:00:00.000Z"));
+        assertThat(histo.getBuckets().get(2).getDocCount(), equalTo(0L));
+        assertThat(histo.getBuckets().get(3).getKey(), equalTo("2014-03-31T23:00:00.000Z"));
+        assertThat(histo.getBuckets().get(3).getDocCount(), equalTo(2L));
+    }
+
     /**
      * see issue #9634, negative interval in date_histogram should raise exception
      */
