diff --git a/core/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java
index d06d0957dd6d..8038d1c70f5f 100644
--- a/core/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java
+++ b/core/src/main/java/org/elasticsearch/http/netty/NettyHttpRequest.java
@@ -29,7 +29,9 @@
 
 import java.net.SocketAddress;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 
 /**
  *
@@ -41,6 +43,7 @@
     private final Map<String, String> params;
     private final String rawPath;
     private final BytesReference content;
+    private final Set<String> consumedParams;
 
     public NettyHttpRequest(org.jboss.netty.handler.codec.http.HttpRequest request, Channel channel) {
         this.request = request;
@@ -60,6 +63,8 @@ public NettyHttpRequest(org.jboss.netty.handler.codec.http.HttpRequest request,
             this.rawPath = uri.substring(0, pathEndPos);
             RestUtils.decodeQueryString(uri, pathEndPos + 1, params);
         }
+
+        this.consumedParams = new HashSet<>(params().size());
     }
 
     public org.jboss.netty.handler.codec.http.HttpRequest request() {
@@ -107,6 +112,11 @@ public String rawPath() {
         return params;
     }
 
+    @Override
+    public boolean allParamsConsumed() {
+        return this.consumedParams.containsAll(this.params().keySet());
+    }
+
     @Override
     public boolean hasContent() {
         return content.length() > 0;
@@ -160,11 +170,13 @@ public boolean hasParam(String key) {
 
     @Override
     public String param(String key) {
+        this.consumedParams.add(key);
         return params.get(key);
     }
 
     @Override
     public String param(String key, String defaultValue) {
+        this.consumedParams.add(key);
         String value = params.get(key);
         if (value == null) {
             return defaultValue;
diff --git a/core/src/main/java/org/elasticsearch/rest/RestController.java b/core/src/main/java/org/elasticsearch/rest/RestController.java
index d0a46d29f654..6c08f847bbbb 100644
--- a/core/src/main/java/org/elasticsearch/rest/RestController.java
+++ b/core/src/main/java/org/elasticsearch/rest/RestController.java
@@ -25,6 +25,7 @@
 import org.elasticsearch.common.path.PathTrie;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.xcontent.XContentBuilder;
+import org.elasticsearch.http.HttpException;
 import org.elasticsearch.rest.support.RestUtils;
 
 import java.io.IOException;
@@ -209,7 +210,13 @@ boolean checkRequestParameters(final RestRequest request, final RestChannel chan
     void executeHandler(RestRequest request, RestChannel channel) throws Exception {
         final RestHandler handler = getHandler(request);
         if (handler != null) {
-            handler.handleRequest(request, channel);
+                handler.handleRequest(request, channel);
+
+            //Just validate params to READ operations
+            if(RestRequest.Method.GET.equals(request.method()) && !request.allParamsConsumed()){
+                channel.sendResponse(new BytesRestResponse(BAD_REQUEST, "There are wrong parameters"));
+            }
+
         } else {
             if (request.method() == RestRequest.Method.OPTIONS) {
                 // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added)
diff --git a/core/src/main/java/org/elasticsearch/rest/RestRequest.java b/core/src/main/java/org/elasticsearch/rest/RestRequest.java
index 81f6052db5c7..7b981d565cec 100644
--- a/core/src/main/java/org/elasticsearch/rest/RestRequest.java
+++ b/core/src/main/java/org/elasticsearch/rest/RestRequest.java
@@ -88,6 +88,8 @@ public SocketAddress getLocalAddress() {
 
     public abstract Map<String, String> params();
 
+    public abstract boolean allParamsConsumed();
+
     public float paramAsFloat(String key, float defaultValue) {
         String sValue = param(key);
         if (sValue == null) {
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggegator.java b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java
similarity index 91%
rename from core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggegator.java
rename to core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java
index 5cc7ddb5dda9..6e648cb50e26 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggegator.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsAggregator.java
@@ -43,7 +43,7 @@
 /**
  *
  */
-public class StatsAggegator extends NumericMetricsAggregator.MultiValue {
+public class StatsAggregator extends NumericMetricsAggregator.MultiValue {
 
     final ValuesSource.Numeric valuesSource;
     final ValueFormatter formatter;
@@ -54,10 +54,10 @@
     DoubleArray maxes;
 
 
-    public StatsAggegator(String name, ValuesSource.Numeric valuesSource, ValueFormatter formatter,
- AggregationContext context,
-            Aggregator parent, List<PipelineAggregator> pipelineAggregators,
-            Map<String, Object> metaData) throws IOException {
+    public StatsAggregator(String name, ValuesSource.Numeric valuesSource, ValueFormatter formatter,
+                           AggregationContext context,
+                           Aggregator parent, List<PipelineAggregator> pipelineAggregators,
+                           Map<String, Object> metaData) throws IOException {
         super(name, context, parent, pipelineAggregators, metaData);
         this.valuesSource = valuesSource;
         if (valuesSource != null) {
@@ -164,14 +164,14 @@ public Factory(String name, ValuesSourceConfig<ValuesSource.Numeric> valuesSourc
         @Override
         protected Aggregator createUnmapped(AggregationContext aggregationContext, Aggregator parent,
                 List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData) throws IOException {
-            return new StatsAggegator(name, null, config.formatter(), aggregationContext, parent, pipelineAggregators, metaData);
+            return new StatsAggregator(name, null, config.formatter(), aggregationContext, parent, pipelineAggregators, metaData);
         }
 
         @Override
         protected Aggregator doCreateInternal(ValuesSource.Numeric valuesSource, AggregationContext aggregationContext, Aggregator parent,
                 boolean collectsFromSingleBucket, List<PipelineAggregator> pipelineAggregators, Map<String, Object> metaData)
                 throws IOException {
-            return new StatsAggegator(name, valuesSource, config.formatter(), aggregationContext, parent, pipelineAggregators, metaData);
+            return new StatsAggregator(name, valuesSource, config.formatter(), aggregationContext, parent, pipelineAggregators, metaData);
         }
     }
 
diff --git a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsParser.java b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsParser.java
index 5ec9b2a59a7a..86c85e40ce58 100644
--- a/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsParser.java
+++ b/core/src/main/java/org/elasticsearch/search/aggregations/metrics/stats/StatsParser.java
@@ -34,6 +34,6 @@ public StatsParser() {
 
     @Override
     protected AggregatorFactory createFactory(String aggregationName, ValuesSourceConfig<ValuesSource.Numeric> config) {
-        return new StatsAggegator.Factory(aggregationName, config);
+        return new StatsAggregator.Factory(aggregationName, config);
     }
 }
diff --git a/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java b/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
index 8e60b28f376c..02ed8e77369c 100644
--- a/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
+++ b/core/src/test/java/org/elasticsearch/rest/RestRequestTests.java
@@ -94,6 +94,11 @@ public String param(String key) {
             return null;
         }
 
+        @Override
+        public boolean allParamsConsumed() {
+            return true;
+        }
+
         @Override
         public Map<String, String> params() {
             return null;
diff --git a/test-framework/src/main/java/org/elasticsearch/test/rest/FakeRestRequest.java b/test-framework/src/main/java/org/elasticsearch/test/rest/FakeRestRequest.java
index a24869b40bdf..4d0f84377b64 100644
--- a/test-framework/src/main/java/org/elasticsearch/test/rest/FakeRestRequest.java
+++ b/test-framework/src/main/java/org/elasticsearch/test/rest/FakeRestRequest.java
@@ -23,7 +23,9 @@
 import org.elasticsearch.rest.RestRequest;
 
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 
 public class FakeRestRequest extends RestRequest {
 
@@ -31,6 +33,8 @@
 
     private final Map<String, String> params;
 
+    private final Set<String> consumedParams;
+
     public FakeRestRequest() {
         this(new HashMap<String, String>(), new HashMap<String, String>());
     }
@@ -41,6 +45,7 @@ public FakeRestRequest(Map<String, String> headers, Map<String, String> context)
             putInContext(entry.getKey(), entry.getValue());
         }
         this.params = new HashMap<>();
+        this.consumedParams = new HashSet<>(params().size());
     }
 
     @Override
@@ -85,11 +90,13 @@ public boolean hasParam(String key) {
 
     @Override
     public String param(String key) {
+        this.consumedParams.add(key);
         return params.get(key);
     }
 
     @Override
     public String param(String key, String defaultValue) {
+        this.consumedParams.add(key);
         String value = params.get(key);
         if (value == null) {
             return defaultValue;
@@ -97,6 +104,12 @@ public String param(String key, String defaultValue) {
         return value;
     }
 
+    @Override
+    public boolean allParamsConsumed() {
+        return this.consumedParams.containsAll(this.params().keySet());
+    }
+
+
     @Override
     public Map<String, String> params() {
         return params;
