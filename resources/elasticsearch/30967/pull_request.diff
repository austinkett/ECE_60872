diff --git a/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java
index b5e15f1a0265..9e2063adb144 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/TextFieldMapper.java
@@ -288,18 +288,6 @@ public String toString() {
             return super.toString() + ",prefixChars=" + minChars + ":" + maxChars;
         }
 
-        @Override
-        public void checkCompatibility(MappedFieldType other, List<String> conflicts) {
-            super.checkCompatibility(other, conflicts);
-            PrefixFieldType otherFieldType = (PrefixFieldType) other;
-            if (otherFieldType.minChars != this.minChars) {
-                conflicts.add("mapper [" + name() + "] has different min_chars values");
-            }
-            if (otherFieldType.maxChars != this.maxChars) {
-                conflicts.add("mapper [" + name() + "] has different max_chars values");
-            }
-        }
-
         @Override
         public Query existsQuery(QueryShardContext context) {
             throw new UnsupportedOperationException();
@@ -479,6 +467,25 @@ public Query existsQuery(QueryShardContext context) {
             }
             return new PagedBytesIndexFieldData.Builder(fielddataMinFrequency, fielddataMaxFrequency, fielddataMinSegmentSize);
         }
+
+        @Override
+        public void checkCompatibility(MappedFieldType other, List<String> conflicts) {
+            super.checkCompatibility(other, conflicts);
+            TextFieldType tft = (TextFieldType) other;
+            if (Objects.equals(this.prefixFieldType, tft.prefixFieldType) == false) {
+                if (this.prefixFieldType == null) {
+                    conflicts.add("mapper [" + name()
+                        + "] has different [index_prefixes] settings, cannot change from disabled to enabled");
+                }
+                else if (tft.prefixFieldType == null) {
+                    conflicts.add("mapper [" + name()
+                        + "] has different [index_prefixes] settings, cannot change from enabled to disabled");
+                }
+                else {
+                    conflicts.add("mapper [" + name() + "] has different [index_prefixes] settings");
+                }
+            }
+        }
     }
 
     private int positionIncrementGap;
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java
index d9ebca3a3a1a..772762997fad 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldMapperTests.java
@@ -734,25 +734,6 @@ public void testIndexPrefixMapping() throws IOException {
             Query q6 = mapper.mappers().getMapper("field").fieldType().prefixQuery("goings",
                 CONSTANT_SCORE_REWRITE, queryShardContext);
             assertThat(q6, instanceOf(PrefixQuery.class));
-
-            indexService.mapperService().merge("type", json, MergeReason.MAPPING_UPDATE);
-
-            String badUpdate = Strings.toString(XContentFactory.jsonBuilder().startObject().startObject("type")
-                .startObject("properties").startObject("field")
-                .field("type", "text")
-                .field("analyzer", "english")
-                .startObject("index_prefixes")
-                .field("min_chars", 1)
-                .field("max_chars", 10)
-                .endObject()
-                .endObject().endObject()
-                .endObject().endObject());
-
-            IllegalArgumentException e = expectThrows(IllegalArgumentException.class, () -> {
-                indexService.mapperService()
-                    .merge("type", new CompressedXContent(badUpdate), MergeReason.MAPPING_UPDATE);
-            });
-            assertThat(e.getMessage(), containsString("mapper [field._index_prefix] has different min_chars values"));
         }
 
         {
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java
index 815e946e023d..d0eacfad4405 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/TextFieldTypeTests.java
@@ -18,23 +18,20 @@
  */
 package org.elasticsearch.index.mapper;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.apache.lucene.document.LongPoint;
 import org.apache.lucene.index.IndexOptions;
 import org.apache.lucene.index.Term;
-import org.apache.lucene.search.TermInSetQuery;
 import org.apache.lucene.search.FuzzyQuery;
 import org.apache.lucene.search.RegexpQuery;
+import org.apache.lucene.search.TermInSetQuery;
 import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.util.BytesRef;
 import org.elasticsearch.common.unit.Fuzziness;
-import org.elasticsearch.index.mapper.MappedFieldType;
-import org.elasticsearch.index.mapper.TextFieldMapper;
 import org.junit.Before;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 public class TextFieldTypeTests extends FieldTypeTestCase {
     @Override
     protected MappedFieldType createDefaultFieldType() {
@@ -71,7 +68,7 @@ public void modify(MappedFieldType ft) {
                 tft.setFielddataMinSegmentSize(1000);
             }
         });
-        addModifier(new Modifier("index_prefixes", true) {
+        addModifier(new Modifier("index_prefixes", false) {
             @Override
             public void modify(MappedFieldType ft) {
                 TextFieldMapper.TextFieldType tft = (TextFieldMapper.TextFieldType)ft;
