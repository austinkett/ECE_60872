diff --git a/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
index 3589215d5f88..037ded6fc387 100644
--- a/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/HasChildQueryBuilder.java
@@ -26,6 +26,7 @@
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.join.JoinUtil;
 import org.apache.lucene.search.join.ScoreMode;
+import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.lucene.search.Queries;
@@ -40,7 +41,9 @@
 import org.elasticsearch.search.fetch.innerhits.InnerHitsSubSearchContext;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.Locale;
+import java.util.Map;
 import java.util.Objects;
 
 /**
@@ -205,13 +208,7 @@ public String getWriteableName() {
 
     @Override
     protected Query doToQuery(QueryShardContext context) throws IOException {
-        String[] previousTypes = QueryShardContext.setTypesWithPrevious(type);
-        Query innerQuery;
-        try {
-            innerQuery = query.toQuery(context);
-        } finally {
-            QueryShardContext.setTypes(previousTypes);
-        }
+        Query innerQuery = processInnerQuery(context, query, type, queryInnerHits);
         if (innerQuery == null) {
             return null;
         }
@@ -223,21 +220,8 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         if (parentFieldMapper.active() == false) {
             throw new QueryShardException(context, "[" + NAME + "] _parent field has no parent type configured");
         }
-        if (queryInnerHits != null) {
-            try (XContentParser parser = queryInnerHits.getXcontentParser()) {
-                XContentParser.Token token = parser.nextToken();
-                if (token != XContentParser.Token.START_OBJECT) {
-                    throw new IllegalStateException("start object expected but was: [" + token + "]");
-                }
-                InnerHitsSubSearchContext innerHits = context.getInnerHitsContext(parser);
-                if (innerHits != null) {
-                    ParsedQuery parsedQuery = new ParsedQuery(innerQuery, context.copyNamedQueries());
-                    InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, context.getMapperService(), childDocMapper);
-                    String name = innerHits.getName() != null ? innerHits.getName() : type;
-                    context.addInnerHits(name, parentChildInnerHits);
-                }
-            }
-        }
+
+        processInnerHits(queryInnerHits, context, innerQuery, type, childDocMapper);
 
         String parentType = parentFieldMapper.type();
         DocumentMapper parentDocMapper = context.getMapperService().documentMapper(parentType);
@@ -262,6 +246,44 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         return new LateParsingQuery(parentDocMapper.typeFilter(), innerQuery, minChildren(), maxChildren, parentType, scoreMode, parentChildIndexFieldData);
     }
 
+    static Query processInnerQuery(QueryShardContext context, QueryBuilder query, String type, QueryInnerHits queryInnerHits) throws IOException {
+        String[] previousTypes = QueryShardContext.setTypesWithPrevious(type);
+        boolean previous = context.hasParentQueryWithInnerHits();
+        try {
+            context.setHasParentQueryWithInnerHits(queryInnerHits != null);
+            return query.toQuery(context);
+        } finally {
+            QueryShardContext.setTypes(previousTypes);
+            context.setHasParentQueryWithInnerHits(previous);
+        }
+    }
+
+    static void processInnerHits(QueryInnerHits queryInnerHits, QueryShardContext context, Query innerQuery, String type, DocumentMapper documentMapper) throws IOException {
+        if (queryInnerHits == null) {
+            return;
+        }
+
+        try (XContentParser parser = queryInnerHits.getXcontentParser()) {
+            XContentParser.Token token = parser.nextToken();
+            if (token != XContentParser.Token.START_OBJECT) {
+                throw new IllegalStateException("start object expected but was: [" + token + "]");
+            }
+            InnerHitsSubSearchContext innerHits = context.getInnerHitsContext(parser);
+            if (innerHits != null) {
+                ParsedQuery parsedQuery = new ParsedQuery(innerQuery, context.copyNamedQueries());
+                String name = innerHits.getName() != null ? innerHits.getName() : type;
+                InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(
+                    innerHits.getSubSearchContext(), parsedQuery, context.getChildInnerHits(), context.getMapperService(), documentMapper
+                );
+                if (context.hasParentQueryWithInnerHits()) {
+                    context.setChildInnerHits(name, parentChildInnerHits);
+                } else {
+                    context.addInnerHits(name, parentChildInnerHits);
+                }
+            }
+        }
+    }
+
     final static class LateParsingQuery extends Query {
 
         private final Query toQuery;
diff --git a/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
index 0ad734ec552d..e8871eb5dce2 100644
--- a/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/HasParentQueryBuilder.java
@@ -26,13 +26,10 @@
 import org.elasticsearch.common.io.stream.StreamOutput;
 import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.xcontent.XContentBuilder;
-import org.elasticsearch.common.xcontent.XContentParser;
 import org.elasticsearch.index.fielddata.plain.ParentChildIndexFieldData;
 import org.elasticsearch.index.mapper.DocumentMapper;
 import org.elasticsearch.index.mapper.internal.ParentFieldMapper;
 import org.elasticsearch.index.query.support.QueryInnerHits;
-import org.elasticsearch.search.fetch.innerhits.InnerHitsContext;
-import org.elasticsearch.search.fetch.innerhits.InnerHitsSubSearchContext;
 
 import java.io.IOException;
 import java.util.HashSet;
@@ -118,14 +115,7 @@ public QueryInnerHits innerHit() {
 
     @Override
     protected Query doToQuery(QueryShardContext context) throws IOException {
-        Query innerQuery;
-        String[] previousTypes = QueryShardContext.setTypesWithPrevious(type);
-        try {
-            innerQuery = query.toQuery(context);
-        } finally {
-            QueryShardContext.setTypes(previousTypes);
-        }
-
+        Query innerQuery = HasChildQueryBuilder.processInnerQuery(context, query, type, innerHit);
         if (innerQuery == null) {
             return null;
         }
@@ -135,21 +125,7 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
                     + "] is not a valid type");
         }
 
-        if (innerHit != null) {
-            try (XContentParser parser = innerHit.getXcontentParser()) {
-                XContentParser.Token token = parser.nextToken();
-                if (token != XContentParser.Token.START_OBJECT) {
-                    throw new IllegalStateException("start object expected but was: [" + token + "]");
-                }
-                InnerHitsSubSearchContext innerHits = context.getInnerHitsContext(parser);
-                if (innerHits != null) {
-                    ParsedQuery parsedQuery = new ParsedQuery(innerQuery, context.copyNamedQueries());
-                    InnerHitsContext.ParentChildInnerHits parentChildInnerHits = new InnerHitsContext.ParentChildInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, context.getMapperService(), parentDocMapper);
-                    String name = innerHits.getName() != null ? innerHits.getName() : type;
-                    context.addInnerHits(name, parentChildInnerHits);
-                }
-            }
-        }
+        HasChildQueryBuilder.processInnerHits(innerHit, context, innerQuery, type, parentDocMapper);
 
         Set<String> parentTypes = new HashSet<>(5);
         parentTypes.add(parentDocMapper.type());
diff --git a/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java
index 103f957b2471..81a7df9cfe7b 100644
--- a/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java
+++ b/core/src/main/java/org/elasticsearch/index/query/NestedQueryBuilder.java
@@ -189,8 +189,10 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
         final Query childFilter;
         final ObjectMapper parentObjectMapper;
         final Query innerQuery;
+        boolean previous = context.hasParentQueryWithInnerHits();
         ObjectMapper objectMapper = context.nestedScope().getObjectMapper();
         try {
+            context.setHasParentQueryWithInnerHits(queryInnerHits != null);
             if (objectMapper == null) {
                 parentFilter = context.bitsetFilter(Queries.newNonNestedFilter());
             } else {
@@ -204,6 +206,7 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
             }
         } finally {
             context.nestedScope().previousLevel();
+            context.setHasParentQueryWithInnerHits(previous);
         }
 
         if (queryInnerHits != null) {
@@ -216,9 +219,13 @@ protected Query doToQuery(QueryShardContext context) throws IOException {
                 if (innerHits != null) {
                     ParsedQuery parsedQuery = new ParsedQuery(innerQuery, context.copyNamedQueries());
 
-                    InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, parentObjectMapper, nestedObjectMapper);
+                    InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.getSubSearchContext(), parsedQuery, context.getChildInnerHits(), parentObjectMapper, nestedObjectMapper);
                     String name = innerHits.getName() != null ? innerHits.getName() : path;
-                    context.addInnerHits(name, nestedInnerHits);
+                    if (context.hasParentQueryWithInnerHits()) {
+                        context.setChildInnerHits(name, nestedInnerHits);
+                    } else {
+                        context.addInnerHits(name, nestedInnerHits);
+                    }
                 }
             }
         }
diff --git a/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java
index 3c2ab5b0d8eb..d83b2dd2320a 100644
--- a/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java
+++ b/core/src/main/java/org/elasticsearch/index/query/QueryShardContext.java
@@ -31,6 +31,7 @@
 import org.elasticsearch.common.ParseFieldMatcher;
 import org.elasticsearch.common.ParsingException;
 import org.elasticsearch.common.bytes.BytesReference;
+import org.elasticsearch.common.collect.Tuple;
 import org.elasticsearch.common.lucene.search.Queries;
 import org.elasticsearch.common.xcontent.XContentFactory;
 import org.elasticsearch.common.xcontent.XContentParser;
@@ -109,6 +110,8 @@ public static void removeTypes() {
     private NestedScope nestedScope;
     private QueryParseContext parseContext;
     boolean isFilter; // pkg private for testing
+    private boolean hasParentQueryWithInnerHits;
+    private Map<String, InnerHitsContext.BaseInnerHits> childInnerHits;
 
     public QueryShardContext(IndexSettings indexSettings, Client client, BitsetFilterCache bitsetFilterCache, IndexFieldDataService indexFieldDataService, MapperService mapperService, SimilarityService similarityService, ScriptService scriptService,
                              final IndicesQueriesRegistry indicesQueriesRegistry) {
@@ -246,6 +249,29 @@ public void addInnerHits(String name, InnerHitsContext.BaseInnerHits context) {
         innerHitsContext.addInnerHitDefinition(name, context);
     }
 
+    public void setChildInnerHits(String name, InnerHitsContext.BaseInnerHits innerHits) {
+        this.childInnerHits = Collections.singletonMap(name, innerHits);
+    }
+
+    /**
+     * @return Any inner hits that an inner query has processed if {@link #hasParentQueryWithInnerHits()} was set
+     * to true before processing the inner query.
+     */
+    public Map<String, InnerHitsContext.BaseInnerHits>  getChildInnerHits() {
+        return childInnerHits;
+    }
+
+    /**
+     * @return Whether a parent query in the dsl has inner hits enabled
+     */
+    public boolean hasParentQueryWithInnerHits() {
+        return hasParentQueryWithInnerHits;
+    }
+
+    public void setHasParentQueryWithInnerHits(boolean hasParentQueryWithInnerHits) {
+        this.hasParentQueryWithInnerHits = hasParentQueryWithInnerHits;
+    }
+
     public Collection<String> simpleMatchToIndexNames(String pattern) {
         return mapperService.simpleMatchToIndexNames(pattern);
     }
diff --git a/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java b/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
index 1e71b8682366..a02db994eed3 100644
--- a/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
+++ b/core/src/test/java/org/elasticsearch/search/innerhits/InnerHitsIT.java
@@ -1219,4 +1219,255 @@ public void testDontExplode() throws Exception {
         assertHitCount(response, 1);
     }
 
+    public void testParentChildHierarchy() throws Exception {
+        assertAcked(prepareCreate("index1")
+            .addMapping("level1")
+            .addMapping("level2", "_parent", "type=level1")
+            .addMapping("level3", "_parent", "type=level2")
+            .addMapping("level4", "_parent", "type=level3")
+        );
+
+        client().prepareIndex("index1", "level1", "1").setSource("{}").get();
+        client().prepareIndex("index1", "level2", "2").setParent("1").setRouting("1").setSource("{}").get();
+        client().prepareIndex("index1", "level3", "3").setParent("2").setRouting("1").setSource("{}").get();
+        client().prepareIndex("index1", "level4", "4").setParent("3").setRouting("1").setSource("{}").get();
+        refresh();
+
+        SearchResponse response = client().prepareSearch("index1")
+            .setQuery(
+                hasChildQuery("level2",
+                    hasChildQuery("level3",
+                        hasChildQuery("level4", matchAllQuery()).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                    ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+            )
+            .get();
+        assertHitCount(response, 1);
+        assertThat(response.getHits().getAt(0).getId(), equalTo("1"));
+        assertThat(response.getHits().getAt(0).getType(), equalTo("level1"));
+        assertThat(response.getHits().getAt(0).getIndex(), equalTo("index1"));
+
+        assertThat(response.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        SearchHits innerHits = response.getHits().getAt(0).getInnerHits().get("level2");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("2"));
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level3");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level3"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("3"));
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level4");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level4"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("4"));
+        assertThat(innerHits.getAt(0).getInnerHits(), nullValue());
+
+        response = client().prepareSearch("index1")
+            .setQuery(
+                hasParentQuery("level3",
+                    hasParentQuery("level2",
+                        hasParentQuery("level1", matchAllQuery()).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                    ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+            )
+            .get();
+        assertHitCount(response, 1);
+        assertThat(response.getHits().getAt(0).getId(), equalTo("4"));
+        assertThat(response.getHits().getAt(0).getType(), equalTo("level4"));
+        assertThat(response.getHits().getAt(0).getIndex(), equalTo("index1"));
+
+        assertThat(response.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = response.getHits().getAt(0).getInnerHits().get("level3");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level3"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("3"));
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level2");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("2"));
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level1");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level1"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("1"));
+    }
+
+    public void testNestedHierarchy() throws Exception {
+        XContentBuilder mapping  = jsonBuilder().startObject().startObject("type").startObject("properties")
+                .startObject("level1")
+                    .field("type", "nested")
+                    .startObject("properties")
+                        .startObject("level2")
+                            .field("type", "nested")
+                            .startObject("properties")
+                                .startObject("level3")
+                                    .field("type", "nested")
+                                    .startObject("properties")
+                                        .startObject("level4")
+                                            .field("type", "nested")
+                                        .endObject()
+                                    .endObject()
+                                .endObject()
+                            .endObject()
+                        .endObject()
+                    .endObject()
+                .endObject()
+            .endObject().endObject().endObject();
+        assertAcked(prepareCreate("index")
+            .addMapping("type", mapping)
+        );
+
+        XContentBuilder source = jsonBuilder().startObject()
+            .startArray("level1")
+                .startObject()
+                    .field("field", "value1")
+                    .startArray("level2")
+                        .startObject()
+                            .field("field", "value2")
+                            .startArray("level3")
+                                .startObject()
+                                    .field("field", "value3")
+                                    .startArray("level4")
+                                        .startObject()
+                                            .field("field", "value4")
+                                        .endObject()
+                                    .endArray()
+                                .endObject()
+                            .endArray()
+                        .endObject()
+                    .endArray()
+                .endObject()
+            .endArray()
+            .endObject();
+        client().prepareIndex("index", "type", "1").setSource(source).get();
+        refresh();
+
+        SearchResponse searchResponse = client().prepareSearch("index")
+            .setQuery(
+                nestedQuery("level1",
+                    nestedQuery("level1.level2",
+                        nestedQuery("level1.level2.level3",
+                            nestedQuery("level1.level2.level3.level4", matchAllQuery()).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                        ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                    ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+            )
+            .get();
+
+        assertHitCount(searchResponse, 1);
+        assertThat(searchResponse.getHits().getAt(0).getId(), equalTo("1"));
+        assertThat(searchResponse.getHits().getAt(0).getType(), equalTo("type"));
+        assertThat(searchResponse.getHits().getAt(0).getNestedIdentity(), nullValue());
+
+        assertThat(searchResponse.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        SearchHits innerHits = searchResponse.getHits().getAt(0).getInnerHits().get("level1");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("type"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("level1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild(), nullValue());
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level1.level2");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("type"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("level1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild(), nullValue());
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level1.level2.level3");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("type"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("level1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getField().string(), equalTo("level3"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getChild(), nullValue());
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level1.level2.level3.level4");
+        assertThat(innerHits, notNullValue());
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getType(), equalTo("type"));
+        assertThat(innerHits.getAt(0).getId(), equalTo("1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("level1"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getField().string(), equalTo("level3"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getChild().getField().string(), equalTo("level4"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getChild().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getChild().getChild().getChild(), nullValue());
+    }
+
+    public void testParentChildAndNestedHierarchy() throws Exception {
+        assertAcked(prepareCreate("index")
+            .addMapping("level1")
+            .addMapping("level2", "_parent", "type=level1", "level3", "type=nested")
+        );
+
+        client().prepareIndex("index", "level1", "1").setSource("{}").get();
+        XContentBuilder source = jsonBuilder().startObject()
+            .startArray("level3")
+                .startObject()
+                    .field("field", "value")
+                .endObject()
+            .endArray()
+            .endObject();
+        client().prepareIndex("index", "level2", "2").setParent("1").setSource(source).get();
+        refresh();
+
+        SearchResponse searchResponse = client().prepareSearch("index")
+            .setQuery(
+                hasChildQuery("level2",
+                    nestedQuery("level3", matchAllQuery()).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+                ).innerHit(new QueryInnerHits(null, new InnerHitsBuilder.InnerHit()))
+            )
+            .get();
+        assertHitCount(searchResponse, 1);
+        assertThat(searchResponse.getHits().getAt(0).getId(), equalTo("1"));
+        assertThat(searchResponse.getHits().getAt(0).getType(), equalTo("level1"));
+
+        assertThat(searchResponse.getHits().getAt(0).getInnerHits().size(), equalTo(1));
+        SearchHits innerHits = searchResponse.getHits().getAt(0).getInnerHits().get("level2");
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getId(), equalTo("2"));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity(), nullValue());
+
+        assertThat(innerHits.getAt(0).getInnerHits().size(), equalTo(1));
+        innerHits = innerHits.getAt(0).getInnerHits().get("level3");
+        assertThat(innerHits.getTotalHits(), equalTo(1L));
+        assertThat(innerHits.getAt(0).getId(), equalTo("2"));
+        assertThat(innerHits.getAt(0).getType(), equalTo("level2"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(), equalTo("level3"));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(), equalTo(0));
+        assertThat(innerHits.getAt(0).getNestedIdentity().getChild(), nullValue());
+    }
+
 }
