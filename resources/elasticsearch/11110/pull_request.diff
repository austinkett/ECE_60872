diff --git a/src/main/java/org/elasticsearch/indices/store/IndicesStore.java b/src/main/java/org/elasticsearch/indices/store/IndicesStore.java
index 787f3f724b37..e9d869086dc3 100644
--- a/src/main/java/org/elasticsearch/indices/store/IndicesStore.java
+++ b/src/main/java/org/elasticsearch/indices/store/IndicesStore.java
@@ -69,6 +69,7 @@
     public static final String ACTION_SHARD_EXISTS = "internal:index/shard/exists";
 
     private static final EnumSet<IndexShardState> ACTIVE_STATES = EnumSet.of(IndexShardState.STARTED, IndexShardState.RELOCATED);
+    public static final TimeValue DEFAULT_SHARD_DELETE_TIMEOUT = new TimeValue(30, TimeUnit.SECONDS);
 
     class ApplySettings implements NodeSettingsService.Listener {
         @Override
@@ -125,7 +126,7 @@ public IndicesStore(Settings settings, NodeEnvironment nodeEnv, NodeSettingsServ
         this.rateLimitingThrottle = componentSettings.getAsBytesSize("throttle.max_bytes_per_sec", new ByteSizeValue(20, ByteSizeUnit.MB));
         rateLimiting.setMaxRate(rateLimitingThrottle);
 
-        this.deleteShardTimeout = settings.getAsTime(INDICES_STORE_DELETE_SHARD_TIMEOUT, new TimeValue(30, TimeUnit.SECONDS));
+        this.deleteShardTimeout = settings.getAsTime(INDICES_STORE_DELETE_SHARD_TIMEOUT, DEFAULT_SHARD_DELETE_TIMEOUT);
 
         logger.debug("using indices.store.throttle.type [{}], with index.store.throttle.max_bytes_per_sec [{}]", rateLimitingType, rateLimitingThrottle);
 
@@ -344,6 +345,7 @@ public String executor() {
 
         @Override
         public void messageReceived(final ShardActiveRequest request, final TransportChannel channel) throws Exception {
+            assert request.timeout != null;
             IndexShard indexShard = getShard(request);
             // make sure shard is really there before register cluster state observer
             if (indexShard == null) {
@@ -430,11 +432,11 @@ private IndexShard getShard(ShardActiveRequest request) {
         }
     }
 
-    private static class ShardActiveRequest extends TransportRequest {
-        protected TimeValue timeout = null;
-        private ClusterName clusterName;
-        private String indexUUID;
-        private ShardId shardId;
+    protected static class ShardActiveRequest extends TransportRequest {
+        protected TimeValue timeout = DEFAULT_SHARD_DELETE_TIMEOUT;
+        protected ClusterName clusterName;
+        protected String indexUUID;
+        protected ShardId shardId;
 
         ShardActiveRequest() {
         }
@@ -444,6 +446,7 @@ private IndexShard getShard(ShardActiveRequest request) {
             this.indexUUID = indexUUID;
             this.clusterName = clusterName;
             this.timeout = timeout;
+            assert timeout != null;
         }
 
         @Override
diff --git a/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java b/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
index 0cf5c2186154..1933f5fe36d8 100644
--- a/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
+++ b/src/test/java/org/elasticsearch/indices/store/IndicesStoreTests.java
@@ -29,16 +29,23 @@
 import org.elasticsearch.cluster.routing.ImmutableShardRouting;
 import org.elasticsearch.cluster.routing.IndexShardRoutingTable;
 import org.elasticsearch.cluster.routing.ShardRoutingState;
+import org.elasticsearch.common.io.stream.BytesStreamInput;
+import org.elasticsearch.common.io.stream.BytesStreamOutput;
+import org.elasticsearch.common.io.stream.StreamInput;
 import org.elasticsearch.common.transport.LocalTransportAddress;
+import org.elasticsearch.common.unit.TimeValue;
 import org.elasticsearch.index.shard.ShardId;
 import org.elasticsearch.test.ElasticsearchTestCase;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.IOException;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 
+import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 
 /**
@@ -191,4 +198,25 @@ public void testShardCanBeDeleted_relocatingNode() throws Exception {
         assertTrue(indicesStore.shardCanBeDeleted(clusterState.build(), routingTable.build()));
     }
 
+    public void testShardActiveRequestStreaming() throws IOException {
+        BytesStreamOutput out = new BytesStreamOutput();
+        Version version = randomVersion();
+        out.setVersion(version);
+        IndicesStore.ShardActiveRequest shardActiveRequest = new IndicesStore.ShardActiveRequest(new ClusterName("cluster"), "indexUUID", new ShardId("index", 0), new TimeValue(100));
+        shardActiveRequest.writeTo(out);
+        out.close();
+        StreamInput in = new BytesStreamInput(out.bytes());
+        in.setVersion(version);
+        IndicesStore.ShardActiveRequest readShardActiveRequest = new IndicesStore.ShardActiveRequest();
+        readShardActiveRequest.readFrom(in);
+        in.close();
+        if (version.onOrAfter(Version.V_1_5_0)) {
+            assertThat(shardActiveRequest.timeout, equalTo(readShardActiveRequest.timeout));
+        } else {
+            assertThat(readShardActiveRequest.timeout, equalTo(IndicesStore.DEFAULT_SHARD_DELETE_TIMEOUT));
+        }
+        assertThat(shardActiveRequest.clusterName, equalTo(readShardActiveRequest.clusterName));
+        assertThat(shardActiveRequest.indexUUID, equalTo(readShardActiveRequest.indexUUID));
+        assertThat(shardActiveRequest.shardId, equalTo(readShardActiveRequest.shardId));
+    }
 }
