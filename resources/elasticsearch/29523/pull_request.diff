diff --git a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
index 61ff4a4ff3d0..25af1668e3ca 100644
--- a/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
+++ b/server/src/main/java/org/elasticsearch/index/mapper/DocumentParser.java
@@ -171,29 +171,64 @@ private static MapperParsingException wrapInMapperParsingException(SourceToParse
         return new MapperParsingException("failed to parse", e);
     }
 
-    private static String[] splitAndValidatePath(String fullFieldPath) {
-        if (fullFieldPath.contains(".")) {
-            String[] parts = fullFieldPath.split("\\.");
+    private static String[] splitAndValidatePath(final String path, final ParseContext context) {
+        if (Strings.isEmpty(path)) {
+            throw new IllegalArgumentException(pathContainsEmptyString(makeFullPath(path, context)));
+        }
+        if(path.contains("..")) {
+            throw new IllegalArgumentException(pathContainsEmptyComponent(makeFullPath(path, context)));
+        }
+        // test before split because String.split on dot drops trailing empty in result.
+
+        if (path.contains(".")) {
+            if(path.endsWith(".")) {
+                throw new IllegalArgumentException(pathStartOrEndingWithDotAmbiguous(makeFullPath(path, context)));
+            }
+
+            String[] parts = path.split("\\.");
             for (String part : parts) {
                 if (Strings.hasText(part) == false) {
                     // check if the field name contains only whitespace
                     if (Strings.isEmpty(part) == false) {
-                        throw new IllegalArgumentException(
-                                "object field cannot contain only whitespace: ['" + fullFieldPath + "']");
+                        throw new IllegalArgumentException(pathContainsOnlyWhitespace(makeFullPath(path, context)));
                     }
-                    throw new IllegalArgumentException(
-                            "object field starting or ending with a [.] makes object resolution ambiguous: [" + fullFieldPath + "]");
+                    throw new IllegalArgumentException(pathStartOrEndingWithDotAmbiguous(makeFullPath(path, context)));
                 }
             }
             return parts;
         } else {
-            if (Strings.isEmpty(fullFieldPath)) {
-                throw new IllegalArgumentException("field name cannot be an empty string");
+            if (Strings.hasText(path) == false) {
+                throw new IllegalArgumentException(pathContainsOnlyWhitespace(makeFullPath(path, context)));
             }
-            return new String[] {fullFieldPath};
+            if(path.endsWith(".")) {
+                throw new IllegalArgumentException(pathStartOrEndingWithDotAmbiguous(makeFullPath(path, context)));
+            }
+
+            return new String[] {path};
         }
     }
 
+    private static String makeFullPath(final String path, final ParseContext context)
+    {
+        return null == context ? path : context.path().pathAsText(path);
+    }
+
+    static String pathContainsEmptyString(final String path) {
+        return "field name cannot be an empty string ['" + path + "']";
+    }
+
+    static String pathContainsEmptyComponent(final String path) {
+        return  "object field cannot contain empty component: ['" + path + "']";
+    }
+
+    static String pathContainsOnlyWhitespace(final String path){
+        return "object field cannot contain only whitespace: ['" + path + "']";
+    }
+
+    static String pathStartOrEndingWithDotAmbiguous(final String path){
+        return "object field starting or ending with a [.] makes object resolution ambiguous: [" + path + "]";
+    }
+
     /** Creates a Mapping containing any dynamically added fields, or returns null if there were no dynamic mappings. */
     static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, List<Mapper> dynamicMappers) {
         if (dynamicMappers.isEmpty()) {
@@ -206,7 +241,7 @@ static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, Li
         Iterator<Mapper> dynamicMapperItr = dynamicMappers.iterator();
         List<ObjectMapper> parentMappers = new ArrayList<>();
         Mapper firstUpdate = dynamicMapperItr.next();
-        parentMappers.add(createUpdate(mapping.root(), splitAndValidatePath(firstUpdate.name()), 0, firstUpdate));
+        parentMappers.add(createUpdate(mapping.root(), splitAndValidatePath(firstUpdate.name(), null), 0, firstUpdate));
         Mapper previousMapper = null;
         while (dynamicMapperItr.hasNext()) {
             Mapper newMapper = dynamicMapperItr.next();
@@ -218,7 +253,7 @@ static Mapping createDynamicUpdate(Mapping mapping, DocumentMapper docMapper, Li
                 continue;
             }
             previousMapper = newMapper;
-            String[] nameParts = splitAndValidatePath(newMapper.name());
+            String[] nameParts = splitAndValidatePath(newMapper.name(), null);
 
             // We first need the stack to only contain mappers in common with the previously processed mapper
             // For example, if the first mapper processed was a.b.c, and we now have a.d, the stack will contain
@@ -472,7 +507,7 @@ private static void parseObjectOrField(ParseContext context, Mapper mapper) thro
     private static void parseObject(final ParseContext context, ObjectMapper mapper, String currentFieldName) throws IOException {
         assert currentFieldName != null;
 
-        final String[] paths = splitAndValidatePath(currentFieldName);
+        final String[] paths = splitAndValidatePath(currentFieldName, context);
         Mapper objectMapper = getMapper(mapper, currentFieldName, paths);
         if (objectMapper != null) {
             context.path().add(currentFieldName);
@@ -509,7 +544,7 @@ private static void parseObject(final ParseContext context, ObjectMapper mapper,
     private static void parseArray(ParseContext context, ObjectMapper parentMapper, String lastFieldName) throws IOException {
         String arrayFieldName = lastFieldName;
 
-        final String[] paths = splitAndValidatePath(arrayFieldName);
+        final String[] paths = splitAndValidatePath(arrayFieldName, context);
         Mapper mapper = getMapper(parentMapper, lastFieldName, paths);
         if (mapper != null) {
             // There is a concrete mapper for this field already. Need to check if the mapper
@@ -580,7 +615,7 @@ private static void parseValue(final ParseContext context, ObjectMapper parentMa
             throw new MapperParsingException("object mapping [" + parentMapper.name() + "] trying to serialize a value with no field associated with it, current value [" + context.parser().textOrNull() + "]");
         }
 
-        final String[] paths = splitAndValidatePath(currentFieldName);
+        final String[] paths = splitAndValidatePath(currentFieldName, context);
         Mapper mapper = getMapper(parentMapper, currentFieldName, paths);
         if (mapper != null) {
             parseObjectOrField(context, mapper);
@@ -597,7 +632,7 @@ private static void parseValue(final ParseContext context, ObjectMapper parentMa
 
     private static void parseNullValue(ParseContext context, ObjectMapper parentMapper, String lastFieldName) throws IOException {
         // we can only handle null values if we have mappings for them
-        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName));
+        Mapper mapper = getMapper(parentMapper, lastFieldName, splitAndValidatePath(lastFieldName, context));
         if (mapper != null) {
             // TODO: passing null to an object seems bogus?
             parseObjectOrField(context, mapper);
@@ -820,13 +855,13 @@ private static void parseCopyFields(ParseContext context, List<String> copyToFie
                 } else {
                     copyToContext = context.switchDoc(targetDoc);
                 }
-                parseCopy(field, copyToContext);
+                parseCopy(field, "", copyToContext);
             }
         }
     }
 
     /** Creates an copy of the current field with given field name and boost */
-    private static void parseCopy(String field, ParseContext context) throws IOException {
+    private static void parseCopy(String field, String parentPath, ParseContext context) throws IOException {
         FieldMapper fieldMapper = context.docMapper().mappers().getMapper(field);
         if (fieldMapper != null) {
             fieldMapper.parse(context);
@@ -834,7 +869,7 @@ private static void parseCopy(String field, ParseContext context) throws IOExcep
             // The path of the dest field might be completely different from the current one so we need to reset it
             context = context.overridePath(new ContentPath(0));
 
-            final String[] paths = splitAndValidatePath(field);
+            final String[] paths = splitAndValidatePath(field, context);
             final String fieldName = paths[paths.length-1];
             Tuple<Integer, ObjectMapper> parentMapperTuple = getDynamicParentMapper(context, paths, null);
             ObjectMapper mapper = parentMapperTuple.v2();
diff --git a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
index 11f69c738e94..9baa31a5ca27 100644
--- a/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
+++ b/server/src/test/java/org/elasticsearch/index/mapper/DocumentParserTests.java
@@ -38,10 +38,7 @@
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
 
 import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;
 import static org.elasticsearch.test.StreamsUtils.copyToBytesFromClasspath;
@@ -1319,74 +1316,145 @@ public void testDynamicDateDetectionEnabledWithNoSpecialCharacters() throws IOEx
         assertThat(dateMapper, instanceOf(DateFieldMapper.class));
     }
 
-    public void testDynamicFieldsStartingAndEndingWithDot() throws Exception {
-        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startArray("top.")
-                .startObject().startArray("foo.")
-                .startObject()
-                .field("thing", "bah")
-                .endObject().endArray()
-                .endObject().endArray()
-                .endObject());
+    public void testFieldName() throws Exception {
+        checkFieldNameAndValidation("root", "branch", "leaf");
+    }
 
-        client().prepareIndex("idx", "type").setSource(bytes, XContentType.JSON).get();
+    public void testFieldNameBlank1() throws Exception {
+        checkFieldNameAndValidationFails("", "branch", "leaf", DocumentParser.pathContainsEmptyString(""));
+    }
 
-        bytes = BytesReference.bytes(XContentFactory.jsonBuilder().startObject().startArray("top.")
-                .startObject().startArray("foo.")
-                .startObject()
-                .startObject("bar.")
-                .startObject("aoeu")
-                .field("a", 1).field("b", 2)
-                .endObject()
-                .endObject()
-                .endObject()
-                .endArray().endObject().endArray()
-                .endObject());
+    public void testFieldNameBlank2() throws Exception {
+        checkFieldNameAndValidationFails("root", "", "leaf", DocumentParser.pathContainsEmptyString("root."));
+    }
 
-        try {
-            client().prepareIndex("idx", "type").setSource(bytes, XContentType.JSON).get();
-            fail("should have failed to dynamically introduce a double-dot field");
-        } catch (IllegalArgumentException e) {
-            assertThat(e.getMessage(),
-                    containsString("object field starting or ending with a [.] makes object resolution ambiguous: [top..foo..bar]"));
-        }
+    public void testFieldNameBlank3() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch", "", DocumentParser.pathContainsEmptyString("root.branch."));
     }
 
-    public void testDynamicFieldsEmptyName() throws Exception {
-        BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()
-                .startObject().startArray("top.")
-                .startObject()
-                .startObject("aoeu")
-                .field("a", 1).field(" ", 2)
-                .endObject()
-                .endObject().endArray()
-                .endObject());
+    public void testFieldNameWhitespaceOnly1() throws Exception {
+        checkFieldNameAndValidationFails(" ", "branch", "leaf", DocumentParser.pathContainsOnlyWhitespace(" "));
+    }
 
-        IllegalArgumentException emptyFieldNameException = expectThrows(IllegalArgumentException.class,
-                () -> client().prepareIndex("idx", "type").setSource(bytes, XContentType.JSON).get());
+    public void testFieldNameWhitespaceOnly2() throws Exception {
+        checkFieldNameAndValidationFails("root", " ", "leaf", DocumentParser.pathContainsOnlyWhitespace("root. "));
+    }
 
-        assertThat(emptyFieldNameException.getMessage(), containsString(
-                "object field cannot contain only whitespace: ['top.aoeu. ']"));
+    public void testFieldNameWhitespaceOnly3() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch", " ", DocumentParser.pathContainsOnlyWhitespace("root.branch. "));
     }
 
-    public void testBlankFieldNames() throws Exception {
-        final BytesReference bytes = BytesReference.bytes(XContentFactory.jsonBuilder()
-                .startObject()
-                .field("", "foo")
-                .endObject());
+    public void testFieldNameWhitespaceWithin1() throws Exception {
+        checkFieldNameAndValidation("ro ot", "branch", "leaf");
+    }
 
-        MapperParsingException err = expectThrows(MapperParsingException.class, () ->
-                client().prepareIndex("idx", "type").setSource(bytes, XContentType.JSON).get());
-        assertThat(ExceptionsHelper.detailedMessage(err), containsString("field name cannot be an empty string"));
+    public void testFieldNameWhitespaceWithin2() throws Exception {
+        checkFieldNameAndValidation("root", "bra nch", "leaf");
+    }
 
-        final BytesReference bytes2 = BytesReference.bytes(XContentFactory.jsonBuilder()
-                .startObject()
-                .startObject("foo")
-                .field("", "bar")
-                .endObject()
-                .endObject());
+    public void testFieldNameWhitespaceWithin3() throws Exception {
+        checkFieldNameAndValidation("root", "branch", "le af");
+    }
+
+    public void testFieldNameComponentOnlyDot1() throws Exception {
+        checkFieldNameAndValidationFails(".", "branch", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("."));
+    }
+
+    public void testFieldNameComponentOnlyDot2() throws Exception {
+        checkFieldNameAndValidationFails("root", ".", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("root.."));
+    }
+
+    public void testFieldNameComponentOnlyDot3() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch", ".", DocumentParser.pathStartOrEndingWithDotAmbiguous("root.branch.."));
+    }
+
+    public void testFieldNameComponentStartDot1() throws Exception {
+        checkFieldNameAndValidationFails(".root", "branch", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous(".root"));
+    }
 
-        err = expectThrows(MapperParsingException.class, () ->
-                client().prepareIndex("idx", "type").setSource(bytes2, XContentType.JSON).get());
-        assertThat(ExceptionsHelper.detailedMessage(err), containsString("field name cannot be an empty string"));
+    public void testFieldNameComponentStartDot2() throws Exception {
+        checkFieldNameAndValidationFails("root", ".branch", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("root..branch"));
+    }
+
+    public void testFieldNameComponentStartDot3() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch", ".leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("root.branch..leaf"));
+    }
+
+    public void testFieldNameComponentEndDot1() throws Exception {
+        checkFieldNameAndValidationFails("root.", "branch", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("root."));
+    }
+
+    public void testFieldNameComponentEndDot2() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch.", "leaf", DocumentParser.pathStartOrEndingWithDotAmbiguous("root.branch."));
+    }
+
+    public void testFieldNameComponentEndDot3() throws Exception {
+        checkFieldNameAndValidationFails("root", "branch", "leaf.", DocumentParser.pathStartOrEndingWithDotAmbiguous("root.branch.leaf."));
+    }
+
+    private void checkFieldNameAndValidation(final String root,
+                                                  final String branch,
+                                                  final String leaf) throws Exception {
+        checkFieldNameAndValidation0(bytesReferenceArray(root, branch, leaf));
+        checkFieldNameAndValidation0(bytesReferenceNull(root, branch, leaf));
+        checkFieldNameAndValidation0(bytesReferenceObject(root, branch, leaf));
+    }
+
+    private void checkFieldNameAndValidationFails(final String root,
+                                                  final String branch,
+                                                  final String leaf,
+                                                  final String exceptionMessageContains) throws Exception {
+        checkFieldNameAndValidationFails0(bytesReferenceArray(root, branch, leaf), exceptionMessageContains);
+        checkFieldNameAndValidationFails0(bytesReferenceNull(root, branch, leaf), exceptionMessageContains);
+        checkFieldNameAndValidationFails0(bytesReferenceObject(root, branch, leaf), exceptionMessageContains);
+    }
+
+    private void checkFieldNameAndValidationFails0(final BytesReference bytes,
+                                                  final String exceptionMessageContains) {
+        MapperParsingException thrown = expectThrows(MapperParsingException.class, () -> checkFieldNameAndValidation0(bytes));
+        assertThat(bytes.utf8ToString(), ExceptionsHelper.detailedMessage(thrown), containsString(exceptionMessageContains));
+    }
+
+    private BytesReference bytesReferenceArray(final String root,
+                                                   final String branch,
+                                                   final String leaf) throws Exception {
+        return BytesReference.bytes(XContentFactory.jsonBuilder()
+            .startObject().startArray(root)
+            .startObject().startArray(branch)
+            .startObject()
+            .field(leaf, "*value*")
+            .endObject().endArray()
+            .endObject().endArray()
+            .endObject()) ;
+    }
+
+    private BytesReference bytesReferenceNull(final String root,
+                                                  final String branch,
+                                                  final String leaf) throws Exception {
+        return BytesReference.bytes(XContentFactory.jsonBuilder()
+            .startObject()
+            .startObject(root)
+            .startObject(branch)
+            .field(leaf, (String)null)
+            .endObject()
+            .endObject()
+            .endObject());
+    }
+
+    private BytesReference bytesReferenceObject(final String root,
+                                                  final String branch,
+                                                  final String leaf) throws Exception {
+        return BytesReference.bytes(XContentFactory.jsonBuilder()
+            .startObject()
+            .startObject(root)
+            .startObject(branch)
+            .field(leaf, "*value*")
+            .endObject()
+            .endObject()
+            .endObject());
+    }
+
+    private void checkFieldNameAndValidation0(final BytesReference bytes) throws Exception {
+        client().prepareIndex("idx", "type").setSource(bytes, XContentType.JSON).get();
     }
 }
