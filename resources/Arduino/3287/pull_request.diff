diff --git a/libraries/Ethernet/src/Dhcp.cpp b/libraries/Ethernet/src/Dhcp.cpp
index 5f53db41bc..3702d73b64 100644
--- a/libraries/Ethernet/src/Dhcp.cpp
+++ b/libraries/Ethernet/src/Dhcp.cpp
@@ -14,7 +14,6 @@ int DhcpClass::beginWithDHCP(uint8_t *mac, unsigned long timeout, unsigned long
     _dhcpLeaseTime=0;
     _dhcpT1=0;
     _dhcpT2=0;
-    _lastCheck=0;
     _timeout = timeout;
     _responseTimeout = responseTimeout;
 
@@ -95,14 +94,14 @@ int DhcpClass::request_DHCP_lease(){
                 if(_dhcpLeaseTime == 0){
                     _dhcpLeaseTime = DEFAULT_LEASE;
                 }
-                //calculate T1 & T2 if we didn't get it
+                // Calculate T1 & T2 if we didn't get it
                 if(_dhcpT1 == 0){
-                    //T1 should be 50% of _dhcpLeaseTime
+                    // T1 should be 50% of _dhcpLeaseTime
                     _dhcpT1 = _dhcpLeaseTime >> 1;
                 }
                 if(_dhcpT2 == 0){
-                    //T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
-                    _dhcpT2 = _dhcpT1 << 1;
+                    // T2 should be 87.5% (7/8ths) of _dhcpLeaseTime
+                    _dhcpT2 = _dhcpLeaseTime - (_dhcpLeaseTime >> 3);
                 }
                 _renewInSec = _dhcpT1;
                 _rebindInSec = _dhcpT2;
@@ -125,6 +124,7 @@ int DhcpClass::request_DHCP_lease(){
     _dhcpUdpSocket.stop();
     _dhcpTransactionId++;
 
+    _lastCheckLeaseMillis = millis();
     return result;
 }
 
@@ -392,55 +392,45 @@ uint8_t DhcpClass::parseDHCPResponse(unsigned long responseTimeout, uint32_t& tr
     4/DHCP_CHECK_REBIND_OK: rebind success
 */
 int DhcpClass::checkLease(){
-    //this uses a signed / unsigned trick to deal with millis overflow
-    unsigned long now = millis();
-    signed long snow = (long)now;
-    int rc=DHCP_CHECK_NONE;
-    if (_lastCheck != 0){
-        signed long factor;
-        //calc how many ms past the timeout we are
-        factor = snow - (long)_secTimeout;
-        //if on or passed the timeout, reduce the counters
-        if ( factor >= 0 ){
-            //next timeout should be now plus 1000 ms minus parts of second in factor
-            _secTimeout = snow + 1000 - factor % 1000;
-            //how many seconds late are we, minimum 1
-            factor = factor / 1000 +1;
-            
-            //reduce the counters by that mouch
-            //if we can assume that the cycle time (factor) is fairly constant
-            //and if the remainder is less than cycle time * 2 
-            //do it early instead of late
-            if(_renewInSec < factor*2 )
-                _renewInSec = 0;
-            else
-                _renewInSec -= factor;
-            
-            if(_rebindInSec < factor*2 )
-                _rebindInSec = 0;
-            else
-                _rebindInSec -= factor;
-        }
-
-        //if we have a lease but should renew, do it
-        if (_dhcp_state == STATE_DHCP_LEASED && _renewInSec <=0){
-            _dhcp_state = STATE_DHCP_REREQUEST;
-            rc = 1 + request_DHCP_lease();
-        }
+    int rc = DHCP_CHECK_NONE;
 
-        //if we have a lease or is renewing but should bind, do it
-        if( (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START) && _rebindInSec <=0){
-            //this should basically restart completely
-            _dhcp_state = STATE_DHCP_START;
-            reset_DHCP_lease();
-            rc = 3 + request_DHCP_lease();
-        }
+    unsigned long now = millis();
+    unsigned long elapsed = now - _lastCheckLeaseMillis;
+
+    // if more then one sec passed, reduce the counters accordingly
+    if (elapsed >= 1000) {
+        // set the new timestamps
+        _lastCheckLeaseMillis = now - (elapsed % 1000);
+        elapsed = elapsed / 1000;
+
+        // decrease the counters by elapsed seconds
+        // we assume that the cycle time (elapsed) is fairly constant
+        // if the remainder is less than cycle time * 2 
+        // do it early instead of late
+        if (_renewInSec < elapsed * 2)
+            _renewInSec = 0;
+        else
+            _renewInSec -= elapsed;
+        
+        if (_rebindInSec < elapsed * 2)
+            _rebindInSec = 0;
+        else
+            _rebindInSec -= elapsed;
     }
-    else{
-        _secTimeout = snow + 1000;
+
+    // if we have a lease but should renew, do it
+    if (_renewInSec == 0 &&_dhcp_state == STATE_DHCP_LEASED) {
+        _dhcp_state = STATE_DHCP_REREQUEST;
+        rc = 1 + request_DHCP_lease();
     }
 
-    _lastCheck = now;
+    // if we have a lease or is renewing but should bind, do it
+    if (_rebindInSec == 0 && (_dhcp_state == STATE_DHCP_LEASED || _dhcp_state == STATE_DHCP_START)) {
+        // this should basically restart completely
+        _dhcp_state = STATE_DHCP_START;
+        reset_DHCP_lease();
+        rc = 3 + request_DHCP_lease();
+    }
     return rc;
 }
 
diff --git a/libraries/Ethernet/src/Dhcp.h b/libraries/Ethernet/src/Dhcp.h
index 1a533ef000..22900eade3 100644
--- a/libraries/Ethernet/src/Dhcp.h
+++ b/libraries/Ethernet/src/Dhcp.h
@@ -148,12 +148,11 @@ class DhcpClass {
   uint8_t  _dhcpDnsServerIp[4];
   uint32_t _dhcpLeaseTime;
   uint32_t _dhcpT1, _dhcpT2;
-  signed long _renewInSec;
-  signed long _rebindInSec;
-  signed long _lastCheck;
+  unsigned long _renewInSec;
+  unsigned long _rebindInSec;
   unsigned long _timeout;
   unsigned long _responseTimeout;
-  unsigned long _secTimeout;
+  unsigned long _lastCheckLeaseMillis;
   uint8_t _dhcp_state;
   EthernetUDP _dhcpUdpSocket;
   
