diff --git a/app/src/processing/app/Editor.java b/app/src/processing/app/Editor.java
index 9500ddd695..5a53e90bd4 100644
--- a/app/src/processing/app/Editor.java
+++ b/app/src/processing/app/Editor.java
@@ -35,7 +35,6 @@
 import java.awt.datatransfer.DataFlavor;
 import java.awt.datatransfer.Transferable;
 import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.awt.event.InputEvent;
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowAdapter;
@@ -226,8 +225,8 @@ public boolean test(SketchController sketch) {
   Runnable presentHandler;
   private Runnable runAndSaveHandler;
   private Runnable presentAndSaveHandler;
-  Runnable exportHandler;
-  private Runnable exportAppHandler;
+  private UploadHandler uploadHandler;
+  private UploadHandler uploadUsingProgrammerHandler;
   private Runnable timeoutUploadHandler;
 
   private Map<String, Tool> internalToolCache = new HashMap<String, Tool>();
@@ -983,21 +982,6 @@ private void addInternalTools(JMenu menu) {
   }
 
 
-  class SerialMenuListener implements ActionListener {
-
-    private final String serialPort;
-
-    public SerialMenuListener(String serialPort) {
-      this.serialPort = serialPort;
-    }
-
-    public void actionPerformed(ActionEvent e) {
-      selectSerialPort(serialPort);
-      base.onBoardOrPortChange();
-    }
-
-  }
-
   private void selectSerialPort(String name) {
     if(portMenu == null) {
       System.out.println(tr("serialMenu is null"));
@@ -1045,6 +1029,24 @@ private void selectSerialPort(String name) {
     //System.out.println("set to " + get("serial.port"));
   }
 
+  class BoardPortJCheckBoxMenuItem extends JCheckBoxMenuItem {
+    private BoardPort port;
+
+    public BoardPortJCheckBoxMenuItem(BoardPort port) {
+      super(port.getLabel());
+      addActionListener(e -> {
+        selectSerialPort(port.getAddress());
+        base.onBoardOrPortChange();
+      });
+      this.port = port;
+    }
+
+    @Override
+    public String toString() {
+      // This is required for serialPrompt()
+      return port.getLabel();
+    }
+  }
 
   private void populatePortMenu() {
     portMenu.removeAll();
@@ -1058,7 +1060,8 @@ private void populatePortMenu() {
     Collections.sort(ports, new Comparator<BoardPort>() {
       @Override
       public int compare(BoardPort o1, BoardPort o2) {
-        return BOARD_PROTOCOLS_ORDER.indexOf(o1.getProtocol()) - BOARD_PROTOCOLS_ORDER.indexOf(o2.getProtocol());
+        return (BOARD_PROTOCOLS_ORDER.indexOf(o1.getProtocol()) - BOARD_PROTOCOLS_ORDER.indexOf(o2.getProtocol())) * 10 +
+               o1.getAddress().compareTo(o2.getAddress());
       }
     });
 
@@ -1081,10 +1084,9 @@ public int compare(BoardPort o1, BoardPort o2) {
         portMenu.add(lastProtocolMenuItem);
       }
       String address = port.getAddress();
-      String label = port.getLabel();
 
-      JCheckBoxMenuItem item = new JCheckBoxMenuItem(label, address.equals(selectedPort));
-      item.addActionListener(new SerialMenuListener(address));
+      BoardPortJCheckBoxMenuItem item = new BoardPortJCheckBoxMenuItem(port);
+      item.setSelected(address.equals(selectedPort));
       portMenu.add(item);
     }
 
@@ -1376,8 +1378,10 @@ private void resetHandlers() {
     presentHandler = new BuildHandler(true);
     runAndSaveHandler = new BuildHandler(false, true);
     presentAndSaveHandler = new BuildHandler(true, true);
-    exportHandler = new DefaultExportHandler();
-    exportAppHandler = new DefaultExportAppHandler();
+    uploadHandler = new UploadHandler();
+    uploadHandler.setUsingProgrammer(false);
+    uploadUsingProgrammerHandler = new UploadHandler();
+    uploadUsingProgrammerHandler.setUsingProgrammer(true);
     timeoutUploadHandler = new TimeoutUploadHandler();
   }
 
@@ -1953,32 +1957,30 @@ public boolean handleSaveAs() {
 
 
   private boolean serialPrompt() {
-    int count = portMenu.getItemCount();
-    Object[] names = new Object[count];
-    for (int i = 0; i < count; i++) {
-      names[i] = portMenu.getItem(i).getText();
-    }
-
-    // FIXME: This is horribly unreadable
-    String result = (String)
-    JOptionPane.showInputDialog(this,
-     I18n.format(
-      tr("Serial port {0} not found.\n" +
-       "Retry the upload with another serial port?"),
-      PreferencesData.get("serial.port")
-     ),
-     "Serial port not found",
-     JOptionPane.PLAIN_MESSAGE,
-     null,
-     names,
-     0);
-    if (result == null) return false;
-    selectSerialPort(result);
+    List<BoardPortJCheckBoxMenuItem> items = new ArrayList<>();
+    for (int i = 0; i < portMenu.getItemCount(); i++) {
+      if (portMenu.getItem(i) instanceof BoardPortJCheckBoxMenuItem)
+        items.add((BoardPortJCheckBoxMenuItem) portMenu.getItem(i));
+    }
+
+    String port = PreferencesData.get("serial.port");
+    String title;
+    if (port == null || port.isEmpty()) {
+      title = tr("Serial port not selected.");
+    } else {
+      title = I18n.format(tr("Serial port {0} not found."), port);
+    }
+    String question = tr("Retry the upload with another serial port?");
+    BoardPortJCheckBoxMenuItem result = (BoardPortJCheckBoxMenuItem) JOptionPane
+        .showInputDialog(this, title + "\n" + question, title,
+                         JOptionPane.PLAIN_MESSAGE, null, items.toArray(), 0);
+    if (result == null)
+      return false;
+    result.doClick();
     base.onBoardOrPortChange();
     return true;
   }
 
-
   /**
    * Called by Sketch &rarr; Export.
    * Handles calling the export() function on sketch, and
@@ -2007,13 +2009,17 @@ synchronized public void handleExport(final boolean usingProgrammer) {
     avoidMultipleOperations = true;
 
     new Thread(timeoutUploadHandler).start();
-    new Thread(usingProgrammer ? exportAppHandler : exportHandler).start();
+    new Thread(usingProgrammer ? uploadUsingProgrammerHandler : uploadHandler).start();
   }
 
-  // DAM: in Arduino, this is upload
-  class DefaultExportHandler implements Runnable {
-    public void run() {
+  class UploadHandler implements Runnable {
+    boolean usingProgrammer = false;
 
+    public void setUsingProgrammer(boolean usingProgrammer) {
+      this.usingProgrammer = usingProgrammer;
+    }
+
+    public void run() {
       try {
         removeAllLineHighlights();
         if (serialMonitor != null) {
@@ -2025,14 +2031,20 @@ public void run() {
 
         uploading = true;
 
-        boolean success = sketchController.exportApplet(false);
+        boolean success = sketchController.exportApplet(usingProgrammer);
         if (success) {
           statusNotice(tr("Done uploading."));
         }
       } catch (SerialNotFoundException e) {
-        if (portMenu.getItemCount() == 0) statusError(e);
-        else if (serialPrompt()) run();
-        else statusNotice(tr("Upload canceled."));
+        if (portMenu.getItemCount() == 0) {
+          statusError(tr("Serial port not selected."));
+        } else {
+          if (serialPrompt()) {
+            run();
+          } else {
+            statusNotice(tr("Upload canceled."));
+          }
+        }
       } catch (PreferencesMapException e) {
         statusError(I18n.format(
                     tr("Error while uploading: missing '{0}' configuration parameter"),
@@ -2108,55 +2120,6 @@ private void resumeOrCloseSerialPlotter() {
    }
   }
 
-  // DAM: in Arduino, this is upload (with verbose output)
-  class DefaultExportAppHandler implements Runnable {
-    public void run() {
-
-      try {
-        if (serialMonitor != null) {
-          serialMonitor.suspend();
-        }
-        if (serialPlotter != null) {
-          serialPlotter.suspend();
-        }
-
-        uploading = true;
-
-        boolean success = sketchController.exportApplet(true);
-        if (success) {
-          statusNotice(tr("Done uploading."));
-        }
-      } catch (SerialNotFoundException e) {
-        if (portMenu.getItemCount() == 0) statusError(e);
-        else if (serialPrompt()) run();
-        else statusNotice(tr("Upload canceled."));
-      } catch (PreferencesMapException e) {
-        statusError(I18n.format(
-                    tr("Error while uploading: missing '{0}' configuration parameter"),
-                    e.getMessage()));
-      } catch (RunnerException e) {
-        //statusError("Error during upload.");
-        //e.printStackTrace();
-        status.unprogress();
-        statusError(e);
-      } catch (Exception e) {
-        e.printStackTrace();
-      } finally {
-        avoidMultipleOperations = false;
-        populatePortMenu();
-      }
-      status.unprogress();
-      uploading = false;
-      //toolbar.clear();
-      toolbar.deactivateExport();
-
-      resumeOrCloseSerialMonitor();
-      resumeOrCloseSerialPlotter();
-
-      base.onBoardOrPortChange();
-    }
-  }
-
   class TimeoutUploadHandler implements Runnable {
 
     public void run() {
@@ -2388,6 +2351,8 @@ private void handleBurnBootloader() {
           SwingUtilities.invokeLater(() -> statusError(tr("Error while burning bootloader.")));
           // error message will already be visible
         }
+      } catch (SerialNotFoundException e) {
+        SwingUtilities.invokeLater(() -> statusError(tr("Error while burning bootloader: please select a serial port.")));
       } catch (PreferencesMapException e) {
         SwingUtilities.invokeLater(() -> {
           statusError(I18n.format(
diff --git a/app/src/processing/app/EditorLineStatus.java b/app/src/processing/app/EditorLineStatus.java
index 7d4e80b657..f71dd4573f 100644
--- a/app/src/processing/app/EditorLineStatus.java
+++ b/app/src/processing/app/EditorLineStatus.java
@@ -110,11 +110,17 @@ public void paintComponent(Graphics graphics) {
     g.drawString(text, scale(6), baseline);
 
     g.setColor(messageForeground);
-    String tmp = I18n.format(tr("{0} on {1}"), name, serialport);
-    
-    Rectangle2D bounds = g.getFontMetrics().getStringBounds(tmp, null);
-    
-    g.drawString(tmp, size.width - (int) bounds.getWidth() - RESIZE_IMAGE_SIZE,
+
+    String statusText;
+    if (serialport != null && !serialport.isEmpty()) {
+      statusText = I18n.format(tr("{0} on {1}"), name, serialport);
+    } else {
+      statusText = name;
+    }
+
+    Rectangle2D bounds = g.getFontMetrics().getStringBounds(statusText, null);
+
+    g.drawString(statusText, size.width - (int) bounds.getWidth() - RESIZE_IMAGE_SIZE,
                  baseline);
 
     if (OSUtils.isMacOS()) {
diff --git a/app/src/processing/app/SketchController.java b/app/src/processing/app/SketchController.java
index 392422c592..89f1a35167 100644
--- a/app/src/processing/app/SketchController.java
+++ b/app/src/processing/app/SketchController.java
@@ -709,10 +709,6 @@ private boolean upload(String suggestedClassName, boolean usingProgrammer) throw
 
     UploaderUtils uploaderInstance = new UploaderUtils();
     Uploader uploader = uploaderInstance.getUploaderByPreferences(false);
-    if (uploader == null) {
-      editor.statusError(tr("Please select a Port before Upload"));
-      return false;
-    }
 
     EditorConsole.setCurrentEditorConsole(editor.console);
 
diff --git a/arduino-core/src/cc/arduino/Compiler.java b/arduino-core/src/cc/arduino/Compiler.java
index ad7a964b46..d1aa1f2bdc 100644
--- a/arduino-core/src/cc/arduino/Compiler.java
+++ b/arduino-core/src/cc/arduino/Compiler.java
@@ -405,7 +405,7 @@ private void runRecipe(String recipe, PreferencesMap prefs) throws RunnerExcepti
     String[] cmdArray;
     String cmd = prefs.getOrExcept(recipe);
     try {
-      cmdArray = StringReplacer.formatAndSplit(cmd, dict, true);
+      cmdArray = StringReplacer.formatAndSplit(cmd, dict);
     } catch (Exception e) {
       throw new RunnerException(e);
     }
diff --git a/arduino-core/src/cc/arduino/UploaderUtils.java b/arduino-core/src/cc/arduino/UploaderUtils.java
index 108d7c137b..875f41d767 100644
--- a/arduino-core/src/cc/arduino/UploaderUtils.java
+++ b/arduino-core/src/cc/arduino/UploaderUtils.java
@@ -35,7 +35,7 @@
 import processing.app.BaseNoGui;
 import processing.app.PreferencesData;
 import processing.app.Sketch;
-import processing.app.debug.TargetPlatform;
+import processing.app.debug.TargetBoard;
 
 import java.util.LinkedList;
 import java.util.List;
@@ -45,19 +45,14 @@
 public class UploaderUtils {
 
   public Uploader getUploaderByPreferences(boolean noUploadPort) {
-    TargetPlatform target = BaseNoGui.getTargetPlatform();
-    String board = PreferencesData.get("board");
-
     BoardPort boardPort = null;
     if (!noUploadPort) {
       String port = PreferencesData.get("serial.port");
-      if (port == null || port.isEmpty()) {
-        return null;
-      }
       boardPort = BaseNoGui.getDiscoveryManager().find(port);
     }
 
-    return new UploaderFactory().newUploader(target.getBoards().get(board), boardPort, noUploadPort);
+    TargetBoard board = BaseNoGui.getTargetBoard();
+    return new UploaderFactory().newUploader(board, boardPort, noUploadPort);
   }
 
   public boolean upload(Sketch data, Uploader uploader, String suggestedClassName, boolean usingProgrammer, boolean noUploadPort, List<String> warningsAccumulator) throws Exception {
diff --git a/arduino-core/src/cc/arduino/packages/uploaders/GenericNetworkUploader.java b/arduino-core/src/cc/arduino/packages/uploaders/GenericNetworkUploader.java
index ab7667787d..0cf2ba04be 100644
--- a/arduino-core/src/cc/arduino/packages/uploaders/GenericNetworkUploader.java
+++ b/arduino-core/src/cc/arduino/packages/uploaders/GenericNetworkUploader.java
@@ -95,7 +95,7 @@ public boolean uploadUsingPreferences(File sourcePath, String buildPath, String
       pattern = prefs.get("upload.network_pattern");
       if(pattern == null)
         pattern = prefs.getOrExcept("upload.pattern");
-      String[] cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
+      String[] cmd = StringReplacer.formatAndSplit(pattern, prefs);
       uploadResult = executeUploadCommand(cmd);
     } catch (RunnerException e) {
       throw e;
diff --git a/arduino-core/src/cc/arduino/packages/uploaders/SSHUploader.java b/arduino-core/src/cc/arduino/packages/uploaders/SSHUploader.java
index b3152a7553..cf6416c2f2 100644
--- a/arduino-core/src/cc/arduino/packages/uploaders/SSHUploader.java
+++ b/arduino-core/src/cc/arduino/packages/uploaders/SSHUploader.java
@@ -165,7 +165,7 @@ private boolean runUploadTool(SSH ssh, PreferencesMap prefs) throws Exception {
     }
 
     String pattern = prefs.getOrExcept("upload.pattern");
-    String command = StringUtils.join(StringReplacer.formatAndSplit(pattern, prefs, true), " ");
+    String command = StringUtils.join(StringReplacer.formatAndSplit(pattern, prefs), " ");
     if (verbose) {
       System.out.println(command);
     }
diff --git a/arduino-core/src/cc/arduino/packages/uploaders/SerialUploader.java b/arduino-core/src/cc/arduino/packages/uploaders/SerialUploader.java
index cd5e285c41..4a322fcbe0 100644
--- a/arduino-core/src/cc/arduino/packages/uploaders/SerialUploader.java
+++ b/arduino-core/src/cc/arduino/packages/uploaders/SerialUploader.java
@@ -41,6 +41,7 @@
 import processing.app.debug.RunnerException;
 import processing.app.debug.TargetPlatform;
 import processing.app.helpers.PreferencesMap;
+import processing.app.helpers.PreferencesMapException;
 import processing.app.helpers.StringReplacer;
 
 import java.io.File;
@@ -105,17 +106,11 @@ public boolean uploadUsingPreferences(File sourcePath, String buildPath, String
       else
         prefs.put("upload.verify", prefs.get("upload.params.noverify", ""));
 
-      boolean uploadResult;
       try {
-        String pattern = prefs.getOrExcept("upload.pattern");
-        String[] cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
-        uploadResult = executeUploadCommand(cmd);
-      } catch (Exception e) {
-        throw new RunnerException(e);
+        return runCommand("upload.pattern", prefs);
       } finally {
         BaseNoGui.getDiscoveryManager().getSerialDiscoverer().pausePolling(false);
       }
-      return uploadResult;
     }
 
     // need to do a little dance for Leonardo and derivatives:
@@ -124,13 +119,10 @@ public boolean uploadUsingPreferences(File sourcePath, String buildPath, String
     // this wait a moment for the bootloader to enumerate. On Windows, also must
     // deal with the fact that the COM port number changes from bootloader to
     // sketch.
-    String t = prefs.get("upload.use_1200bps_touch");
-    boolean doTouch = t != null && t.equals("true");
-
-    t = prefs.get("upload.wait_for_upload_port");
-    boolean waitForUploadPort = (t != null) && t.equals("true");
+    boolean doTouch = prefs.getBoolean("upload.use_1200bps_touch");
+    boolean waitForUploadPort = prefs.getBoolean("upload.wait_for_upload_port");
 
-    String userSelectedUploadPort = prefs.getOrExcept("serial.port");
+    String userSelectedUploadPort = prefs.get("serial.port", "");
     String actualUploadPort = null;
 
     if (doTouch) {
@@ -180,7 +172,7 @@ public boolean uploadUsingPreferences(File sourcePath, String buildPath, String
       Thread.sleep(100);
     }
 
-    BoardPort boardPort = BaseNoGui.getDiscoveryManager().find(PreferencesData.get("serial.port"));
+    BoardPort boardPort = BaseNoGui.getDiscoveryManager().find(PreferencesData.get("serial.port", ""));
     try {
       prefs.put("serial.port.iserial", boardPort.getPrefs().getOrExcept("iserial"));
     } catch (Exception e) {
@@ -202,13 +194,7 @@ public boolean uploadUsingPreferences(File sourcePath, String buildPath, String
 
     boolean uploadResult;
     try {
-      String pattern = prefs.getOrExcept("upload.pattern");
-      String[] cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
-      uploadResult = executeUploadCommand(cmd);
-    } catch (RunnerException e) {
-      throw e;
-    } catch (Exception e) {
-      throw new RunnerException(e);
+      uploadResult = runCommand("upload.pattern", prefs);
     } finally {
       BaseNoGui.getDiscoveryManager().getSerialDiscoverer().pausePolling(false);
     }
@@ -331,21 +317,7 @@ private boolean uploadUsingProgrammer(String buildPath, String className) throws
     else
       prefs.put("program.verify", prefs.get("program.params.noverify", ""));
 
-    try {
-      // if (prefs.get("program.disable_flushing") == null
-      // || prefs.get("program.disable_flushing").toLowerCase().equals("false"))
-      // {
-      // flushSerialBuffer();
-      // }
-
-      String pattern = prefs.getOrExcept("program.pattern");
-      String[] cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
-      return executeUploadCommand(cmd);
-    } catch (RunnerException e) {
-      throw e;
-    } catch (Exception e) {
-      throw new RunnerException(e);
-    }
+    return runCommand("program.pattern", prefs);
   }
 
   @Override
@@ -402,13 +374,27 @@ public boolean burnBootloader() throws Exception {
 
     new LoadVIDPIDSpecificPreferences().load(prefs);
 
-    String pattern = prefs.getOrExcept("erase.pattern");
-    String[] cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
-    if (!executeUploadCommand(cmd))
+    if (!runCommand("erase.pattern", prefs))
       return false;
 
-    pattern = prefs.getOrExcept("bootloader.pattern");
-    cmd = StringReplacer.formatAndSplit(pattern, prefs, true);
-    return executeUploadCommand(cmd);
+    return runCommand("bootloader.pattern", prefs);
+  }
+
+  private boolean runCommand(String patternKey, PreferencesMap prefs) throws Exception, RunnerException {
+    try {
+      String pattern = prefs.getOrExcept(patternKey);
+      StringReplacer.checkIfRequiredKeyIsMissingOrExcept("serial.port", pattern, prefs);
+      String[] cmd = StringReplacer.formatAndSplit(pattern, prefs);
+      return executeUploadCommand(cmd);
+    } catch (RunnerException e) {
+      throw e;
+    } catch (PreferencesMapException e) {
+      if (e.getMessage().equals("serial.port")) {
+        throw new SerialNotFoundException(e);
+      }
+      throw e;
+    } catch (Exception e) {
+      throw new RunnerException(e);
+    }
   }
 }
diff --git a/arduino-core/src/processing/app/debug/Sizer.java b/arduino-core/src/processing/app/debug/Sizer.java
index 4d54d8d52c..6e748a9416 100644
--- a/arduino-core/src/processing/app/debug/Sizer.java
+++ b/arduino-core/src/processing/app/debug/Sizer.java
@@ -60,7 +60,7 @@ public Sizer(PreferencesMap _prefs) {
     int r = 0;
     try {
       String pattern = prefs.get("recipe.size.pattern");
-      String cmd[] = StringReplacer.formatAndSplit(pattern, prefs, true);
+      String cmd[] = StringReplacer.formatAndSplit(pattern, prefs);
 
       exception = null;
       textSize = -1;
diff --git a/arduino-core/src/processing/app/helpers/StringReplacer.java b/arduino-core/src/processing/app/helpers/StringReplacer.java
index 159289d1d5..1e1dd9eab3 100644
--- a/arduino-core/src/processing/app/helpers/StringReplacer.java
+++ b/arduino-core/src/processing/app/helpers/StringReplacer.java
@@ -24,19 +24,57 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.UUID;
 
 public class StringReplacer {
 
-  public static String[] formatAndSplit(String src, Map<String, String> dict,
-                                        boolean recursive) throws Exception {
-    String res;
+  public static void checkIfRequiredKeyIsMissingOrExcept(String key, String src, PreferencesMap inDict) throws PreferencesMapException {
+    // If the key is not missing -> everything is OK
+    String checkedValue = inDict.get(key);
+    if (checkedValue != null && !checkedValue.isEmpty())
+      return;
+
+    PreferencesMap dict = new PreferencesMap(inDict);
+
+    // Find a random tag that is not contained in the dictionary and the src pattern
+    String tag;
+    while (true) {
+      tag = UUID.randomUUID().toString();
+      if (src.contains(tag))
+        continue;
+      if (dict.values().contains(tag))
+        continue;
+      if (dict.keySet().contains(tag))
+        continue;
+      break;
+    }
+
+    // Inject tag inside the dictionary
+    dict.put(key, tag);
 
     // Recursive replace with a max depth of 10 levels.
+    String res;
     for (int i = 0; i < 10; i++) {
       // Do a replace with dictionary
       res = StringReplacer.replaceFromMapping(src, dict);
-      if (!recursive)
+      if (res.equals(src))
         break;
+      src = res;
+    }
+
+    // If the resulting string contains the tag, then the key is required
+    if (src.contains(tag)) {
+      throw new PreferencesMapException(key);
+    }
+  }
+
+  public static String[] formatAndSplit(String src, Map<String, String> dict) throws Exception {
+    String res;
+
+    // Recursive replace with a max depth of 10 levels.
+    for (int i = 0; i < 10; i++) {
+      // Do a replace with dictionary
+      res = StringReplacer.replaceFromMapping(src, dict);
       if (res.equals(src))
         break;
       src = res;
diff --git a/build/shared/lib/preferences.txt b/build/shared/lib/preferences.txt
index 7e7fd7c381..156775c1d4 100644
--- a/build/shared/lib/preferences.txt
+++ b/build/shared/lib/preferences.txt
@@ -267,8 +267,8 @@ programmer = arduino:avrispmkii
 upload.using = bootloader
 upload.verify = true
 
-#default port is empty to prevent running AVRDUDE before Port selected (issue #7943)
-serial.port=
+# default port is not defined to prevent running AVRDUDE before Port selected (issue #7943)
+#serial.port=
 serial.databits=8
 serial.stopbits=1
 serial.parity=N
