diff --git a/modules/core/include/opencv2/core/persistence.hpp b/modules/core/include/opencv2/core/persistence.hpp
index a0f7e1e24d3..73bda78324c 100644
--- a/modules/core/include/opencv2/core/persistence.hpp
+++ b/modules/core/include/opencv2/core/persistence.hpp
@@ -526,6 +526,11 @@ class CV_EXPORTS_W_SIMPLE FileNode
      */
     CV_WRAP_AS(at) FileNode operator[](int i) const;
 
+    /** @brief Returns keys of a mapping node.
+     @returns Keys of a mapping node.
+     */
+    CV_WRAP std::vector<String> keys() const;
+
     /** @brief Returns type of the node.
      @returns Type of the node. See FileNode::Type
      */
diff --git a/modules/core/src/persistence.cpp b/modules/core/src/persistence.cpp
index f869383f84c..fa45eed9bef 100644
--- a/modules/core/src/persistence.cpp
+++ b/modules/core/src/persistence.cpp
@@ -2083,6 +2083,19 @@ FileNode FileNode::operator[](int i) const
     return *it;
 }
 
+std::vector<String> FileNode::keys() const
+{
+    CV_Assert(isMap());
+
+    std::vector<String> res;
+    res.reserve(size());
+    for (FileNodeIterator it = begin(); it != end(); ++it)
+    {
+        res.push_back((*it).name());
+    }
+    return res;
+}
+
 int FileNode::type() const
 {
     const uchar* p = ptr();
diff --git a/modules/core/test/test_io.cpp b/modules/core/test/test_io.cpp
index 8554935b9f8..3ec5f195007 100644
--- a/modules/core/test/test_io.cpp
+++ b/modules/core/test/test_io.cpp
@@ -1565,6 +1565,12 @@ TEST(Core_InputOutput, FileStorage_json_bool)
     ASSERT_EQ((int)fs["map_value"]["bool_true"], 1);
     ASSERT_EQ((std::string)fs["map_value"]["str_false"], "false");
     ASSERT_EQ((int)fs["bool_false"], 0);
+
+    std::vector<String> keys = fs["map_value"].keys();
+    ASSERT_EQ((int)keys.size(), 3);
+    ASSERT_EQ(keys[0], "int_value");
+    ASSERT_EQ(keys[1], "bool_true");
+    ASSERT_EQ(keys[2], "str_false");
     fs.release();
 }
 
