diff --git a/modules/core/misc/python/pyopencv_rotationwarper.hpp b/modules/core/misc/python/pyopencv_rotationwarper.hpp
deleted file mode 100644
index 0fac1854fb7..00000000000
--- a/modules/core/misc/python/pyopencv_rotationwarper.hpp
+++ /dev/null
@@ -1,8 +0,0 @@
-#ifdef HAVE_OPENCV_STITCHING
-
-typedef std::vector<detail::ImageFeatures> vector_ImageFeatures;
-typedef std::vector<detail::MatchesInfo> vector_MatchesInfo;
-typedef std::vector<detail::CameraParams> vector_CameraParams;
-
-
-#endif
diff --git a/modules/python/src2/cv2.cpp b/modules/python/src2/cv2.cpp
index d46b50327b0..df1608be278 100644
--- a/modules/python/src2/cv2.cpp
+++ b/modules/python/src2/cv2.cpp
@@ -1378,47 +1378,6 @@ template<> struct pyopencvVecConverter<DMatch>
     }
 };
 
-template<> struct pyopencvVecConverter<detail::ImageFeatures>
-{
-    static bool to(PyObject* obj, std::vector<detail::ImageFeatures>& value, const ArgInfo info)
-    {
-        return pyopencv_to_generic_vec(obj, value, info);
-    }
-
-    static PyObject* from(const std::vector<detail::ImageFeatures>& value)
-    {
-        return pyopencv_from_generic_vec(value);
-    }
-};
-
-template<> struct pyopencvVecConverter<detail::MatchesInfo>
-{
-    static bool to(PyObject* obj, std::vector<detail::MatchesInfo>& value, const ArgInfo info)
-    {
-        return pyopencv_to_generic_vec(obj, value, info);
-    }
-
-    static PyObject* from(const std::vector<detail::MatchesInfo>& value)
-    {
-        return pyopencv_from_generic_vec(value);
-    }
-};
-
-template<> struct pyopencvVecConverter<detail::CameraParams>
-{
-    static bool to(PyObject* obj, std::vector<detail::CameraParams>& value, const ArgInfo info)
-    {
-        return pyopencv_to_generic_vec(obj, value, info);
-    }
-
-    static PyObject* from(const std::vector<detail::CameraParams>& value)
-    {
-        return pyopencv_from_generic_vec(value);
-    }
-};
-
-
-
 template<> struct pyopencvVecConverter<String>
 {
     static bool to(PyObject* obj, std::vector<String>& value, const ArgInfo info)
diff --git a/modules/stitching/misc/python/pyopencv_stitching.hpp b/modules/stitching/misc/python/pyopencv_stitching.hpp
index 634e8dd1d52..13ebfc9c95c 100644
--- a/modules/stitching/misc/python/pyopencv_stitching.hpp
+++ b/modules/stitching/misc/python/pyopencv_stitching.hpp
@@ -3,4 +3,47 @@
 typedef Stitcher::Status Status;
 typedef Stitcher::Mode Mode;
 
+typedef std::vector<detail::ImageFeatures> vector_ImageFeatures;
+typedef std::vector<detail::MatchesInfo> vector_MatchesInfo;
+typedef std::vector<detail::CameraParams> vector_CameraParams;
+
+template<> struct pyopencvVecConverter<detail::ImageFeatures>
+{
+    static bool to(PyObject* obj, std::vector<detail::ImageFeatures>& value, const ArgInfo info)
+    {
+        return pyopencv_to_generic_vec(obj, value, info);
+    }
+
+    static PyObject* from(const std::vector<detail::ImageFeatures>& value)
+    {
+        return pyopencv_from_generic_vec(value);
+    }
+};
+
+template<> struct pyopencvVecConverter<detail::MatchesInfo>
+{
+    static bool to(PyObject* obj, std::vector<detail::MatchesInfo>& value, const ArgInfo info)
+    {
+        return pyopencv_to_generic_vec(obj, value, info);
+    }
+
+    static PyObject* from(const std::vector<detail::MatchesInfo>& value)
+    {
+        return pyopencv_from_generic_vec(value);
+    }
+};
+
+template<> struct pyopencvVecConverter<detail::CameraParams>
+{
+    static bool to(PyObject* obj, std::vector<detail::CameraParams>& value, const ArgInfo info)
+    {
+        return pyopencv_to_generic_vec(obj, value, info);
+    }
+
+    static PyObject* from(const std::vector<detail::CameraParams>& value)
+    {
+        return pyopencv_from_generic_vec(value);
+    }
+};
+
 #endif
