diff --git a/modules/python/test/test_dnn.py b/modules/python/test/test_dnn.py
index b726c298491..a1b55f4358b 100644
--- a/modules/python/test/test_dnn.py
+++ b/modules/python/test/test_dnn.py
@@ -3,7 +3,7 @@
 import cv2 as cv
 import numpy as np
 
-from tests_common import NewOpenCVTests
+from tests_common import NewOpenCVTests, unittest
 
 def normAssert(test, a, b, lInf=1e-5):
     test.assertLess(np.max(np.abs(a - b)), lInf)
@@ -95,7 +95,7 @@ def testBackendAndTarget(backend, target):
 if cv.ocl.haveOpenCL() and cv.ocl.useOpenCL():
     dnnBackendsAndTargets.append([cv.dnn.DNN_BACKEND_OPENCV, cv.dnn.DNN_TARGET_OPENCL])
     dnnBackendsAndTargets.append([cv.dnn.DNN_BACKEND_OPENCV, cv.dnn.DNN_TARGET_OPENCL_FP16])
-    if haveInfEngine:
+    if haveInfEngine:  # FIXIT Check Intel iGPU only
         dnnBackendsAndTargets.append([cv.dnn.DNN_BACKEND_INFERENCE_ENGINE, cv.dnn.DNN_TARGET_OPENCL])
         dnnBackendsAndTargets.append([cv.dnn.DNN_BACKEND_INFERENCE_ENGINE, cv.dnn.DNN_TARGET_OPENCL_FP16])
 
@@ -116,8 +116,8 @@ def printParams(backend, target):
 
 class dnn_test(NewOpenCVTests):
 
-    def find_dnn_file(self, filename):
-        return self.find_file(filename, [os.environ['OPENCV_DNN_TEST_DATA_PATH']])
+    def find_dnn_file(self, filename, required=True):
+        return self.find_file(filename, [os.environ.get('OPENCV_DNN_TEST_DATA_PATH', os.getcwd())], required=required)
 
     def test_blobFromImage(self):
         np.random.seed(324)
@@ -147,8 +147,11 @@ def test_blobFromImage(self):
 
 
     def test_face_detection(self):
-        proto = self.find_dnn_file('dnn/opencv_face_detector.prototxt')
-        model = self.find_dnn_file('dnn/opencv_face_detector.caffemodel')
+        testdata_required = bool(os.environ.get('OPENCV_DNN_TEST_REQUIRE_TESTDATA', False))
+        proto = self.find_dnn_file('dnn/opencv_face_detector.prototxt2', required=testdata_required)
+        model = self.find_dnn_file('dnn/opencv_face_detector.caffemodel', required=testdata_required)
+        if proto is None or model is None:
+            raise unittest.SkipTest("Missing DNN test files (dnn/opencv_face_detector.{prototxt/caffemodel}). Verify OPENCV_DNN_TEST_DATA_PATH configuration parameter.")
 
         img = self.get_sample('gpu/lbpcascade/er.png')
         blob = cv.dnn.blobFromImage(img, mean=(104, 177, 123), swapRB=False, crop=False)
diff --git a/modules/python/test/tests_common.py b/modules/python/test/tests_common.py
index 4e3b4ef1bfe..a938a8e2cbb 100644
--- a/modules/python/test/tests_common.py
+++ b/modules/python/test/tests_common.py
@@ -26,14 +26,15 @@ class NewOpenCVTests(unittest.TestCase):
     # github repository url
     repoUrl = 'https://raw.github.com/opencv/opencv/master'
 
-    def find_file(self, filename, searchPaths=[]):
+    def find_file(self, filename, searchPaths=[], required=True):
         searchPaths = searchPaths if searchPaths else [self.repoPath, self.extraTestDataPath]
         for path in searchPaths:
             if path is not None:
                 candidate = path + '/' + filename
                 if os.path.isfile(candidate):
                     return candidate
-        self.fail('File ' + filename + ' not found')
+        if required:
+            self.fail('File ' + filename + ' not found')
         return None
 
 
diff --git a/modules/videoio/src/cap_ffmpeg_impl.hpp b/modules/videoio/src/cap_ffmpeg_impl.hpp
index e0198be5f82..ce337ea10f9 100644
--- a/modules/videoio/src/cap_ffmpeg_impl.hpp
+++ b/modules/videoio/src/cap_ffmpeg_impl.hpp
@@ -58,6 +58,10 @@
 #  pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
+#ifndef CV_UNUSED  // Required for standalone compilation mode (OpenCV defines this in base.hpp)
+#define CV_UNUSED(name) (void)name
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
