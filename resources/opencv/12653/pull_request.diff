diff --git a/modules/core/CMakeLists.txt b/modules/core/CMakeLists.txt
index 73acbdd0223..1306c3d9dcb 100644
--- a/modules/core/CMakeLists.txt
+++ b/modules/core/CMakeLists.txt
@@ -81,10 +81,6 @@ if(HAVE_HPX)
   ocv_target_link_libraries(${the_module} LINK_PRIVATE "${HPX_LIBRARIES}")
 endif()
 
-if(HAVE_CUDA)
-  ocv_target_compile_definitions(${the_module} PUBLIC OPENCV_TRAITS_ENABLE_DEPRECATED)
-endif()
-
 ocv_add_accuracy_tests()
 ocv_add_perf_tests()
 
diff --git a/modules/core/misc/python/pyopencv_core.hpp b/modules/core/misc/python/pyopencv_cuda.hpp
similarity index 64%
rename from modules/core/misc/python/pyopencv_core.hpp
rename to modules/core/misc/python/pyopencv_cuda.hpp
index 8f7abb08da9..62d2397b903 100644
--- a/modules/core/misc/python/pyopencv_core.hpp
+++ b/modules/core/misc/python/pyopencv_cuda.hpp
@@ -7,6 +7,19 @@ typedef cuda::GpuMat::Allocator GpuMat_Allocator;
 typedef cuda::HostMem::AllocType HostMem_AllocType;
 typedef cuda::Event::CreateFlags Event_CreateFlags;
 
+template<> struct pyopencvVecConverter<cuda::GpuMat>
+{
+    static bool to(PyObject* obj, std::vector<cuda::GpuMat>& value, const ArgInfo info)
+    {
+        return pyopencv_to_generic_vec(obj, value, info);
+    }
+
+    static PyObject* from(const std::vector<cuda::GpuMat>& value)
+    {
+        return pyopencv_from_generic_vec(value);
+    }
+};
+
 CV_PY_TO_CLASS(cuda::GpuMat);
 CV_PY_TO_CLASS(cuda::Stream);
 CV_PY_TO_CLASS(cuda::Event);
