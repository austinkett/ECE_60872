diff --git a/modules/calib3d/include/opencv2/calib3d.hpp b/modules/calib3d/include/opencv2/calib3d.hpp
index 06fa957e4bb..ab126a5bd29 100644
--- a/modules/calib3d/include/opencv2/calib3d.hpp
+++ b/modules/calib3d/include/opencv2/calib3d.hpp
@@ -745,9 +745,8 @@ a 3D point expressed in the world frame into the camera frame:
         - Thus, given some data D = np.array(...) where D.shape = (N,M), in order to use a subset of
         it as, e.g., imagePoints, one must effectively copy it into a new array: imagePoints =
         np.ascontiguousarray(D[:,:2]).reshape((N,1,2))
-   -   The methods **SOLVEPNP_DLS** and **SOLVEPNP_UPNP** cannot be used as the current implementations are
-       unstable and sometimes give completely wrong results. If you pass one of these two
-       flags, **SOLVEPNP_EPNP** method will be used instead.
+   -   The method **SOLVEPNP_UPNP** cannot be used as the current implementation is
+       unstable and give completely wrong results. If you pass this flag, **SOLVEPNP_EPNP** method will be used instead.
    -   The minimum number of points is 4 in the general case. In the case of **SOLVEPNP_P3P** and **SOLVEPNP_AP3P**
        methods, it is required to use exactly 4 points (the first 3 points are used to estimate all the solutions
        of the P3P problem, the last one is used to retain the best solution that minimizes the reprojection error).
@@ -757,7 +756,7 @@ a 3D point expressed in the world frame into the camera frame:
  */
 CV_EXPORTS_W bool solvePnP( InputArray objectPoints, InputArray imagePoints,
                             InputArray cameraMatrix, InputArray distCoeffs,
-                            OutputArray rvec, OutputArray tvec,
+                            InputOutputArray rvec, InputOutputArray tvec,
                             bool useExtrinsicGuess = false, int flags = SOLVEPNP_ITERATIVE );
 
 /** @brief Finds an object pose from 3D-2D point correspondences using the RANSAC scheme.
@@ -771,10 +770,10 @@ where N is the number of points. vector\<Point2f\> can be also passed here.
 \f$(k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6 [, s_1, s_2, s_3, s_4[, \tau_x, \tau_y]]]])\f$ of
 4, 5, 8, 12 or 14 elements. If the vector is NULL/empty, the zero distortion coefficients are
 assumed.
-@param rvec Output rotation vector (see Rodrigues ) that, together with tvec , brings points from
+@param rvec Output rotation vector (see #Rodrigues ) that, together with tvec , brings points from
 the model coordinate system to the camera coordinate system.
 @param tvec Output translation vector.
-@param useExtrinsicGuess Parameter used for SOLVEPNP_ITERATIVE. If true (1), the function uses
+@param useExtrinsicGuess Parameter used for #SOLVEPNP_ITERATIVE. If true (1), the function uses
 the provided rvec and tvec values as initial approximations of the rotation and translation
 vectors, respectively, and further optimizes them.
 @param iterationsCount Number of iterations.
@@ -783,12 +782,12 @@ is the maximum allowed distance between the observed and computed point projecti
 an inlier.
 @param confidence The probability that the algorithm produces a useful result.
 @param inliers Output vector that contains indices of inliers in objectPoints and imagePoints .
-@param flags Method for solving a PnP problem (see solvePnP ).
+@param flags Method for solving a PnP problem (see #solvePnP ).
 
 The function estimates an object pose given a set of object points, their corresponding image
 projections, as well as the camera matrix and the distortion coefficients. This function finds such
 a pose that minimizes reprojection error, that is, the sum of squared distances between the observed
-projections imagePoints and the projected (using projectPoints ) objectPoints. The use of RANSAC
+projections imagePoints and the projected (using #projectPoints ) objectPoints. The use of RANSAC
 makes the function resistant to outliers.
 
 @note
@@ -804,7 +803,7 @@ makes the function resistant to outliers.
  */
 CV_EXPORTS_W bool solvePnPRansac( InputArray objectPoints, InputArray imagePoints,
                                   InputArray cameraMatrix, InputArray distCoeffs,
-                                  OutputArray rvec, OutputArray tvec,
+                                  InputOutputArray rvec, InputOutputArray tvec,
                                   bool useExtrinsicGuess = false, int iterationsCount = 100,
                                   float reprojectionError = 8.0, double confidence = 0.99,
                                   OutputArray inliers = noArray(), int flags = SOLVEPNP_ITERATIVE );
diff --git a/modules/calib3d/perf/perf_pnp.cpp b/modules/calib3d/perf/perf_pnp.cpp
index 7c7254a0df3..dd6cc1bdc1f 100644
--- a/modules/calib3d/perf/perf_pnp.cpp
+++ b/modules/calib3d/perf/perf_pnp.cpp
@@ -4,13 +4,45 @@ namespace opencv_test
 {
 using namespace perf;
 
-CV_ENUM(pnpAlgo, SOLVEPNP_ITERATIVE, SOLVEPNP_EPNP, SOLVEPNP_P3P, SOLVEPNP_DLS, SOLVEPNP_UPNP)
+CV_ENUM(pnpAlgo, SOLVEPNP_ITERATIVE, SOLVEPNP_EPNP, SOLVEPNP_P3P, SOLVEPNP_AP3P, SOLVEPNP_DLS, SOLVEPNP_UPNP)
 
 typedef tuple<int, pnpAlgo> PointsNum_Algo_t;
 typedef perf::TestBaseWithParam<PointsNum_Algo_t> PointsNum_Algo;
 
 typedef perf::TestBaseWithParam<int> PointsNum;
 
+namespace
+{
+void generate3DPointCloud(vector<Point3f>& points,
+                          Point3f pmin = Point3f(-1, -1, 5),
+                          Point3f pmax = Point3f(1, 1, 10))
+{
+    RNG rng = cv::theRNG(); // fix the seed to use "fixed" input 3D points
+
+    for (size_t i = 0; i < points.size(); i++)
+    {
+        float _x = rng.uniform(pmin.x, pmax.x);
+        float _y = rng.uniform(pmin.y, pmax.y);
+        float _z = rng.uniform(pmin.z, pmax.z);
+        points[i] = Point3f(_x, _y, _z);
+    }
+}
+
+void generatePose(Mat& rvec, Mat& tvec)
+{
+    RNG rng = cv::theRNG();
+    const double minVal = 1.0e-3;
+    const double maxVal = 1.0;
+    rvec.create(3, 1, CV_64FC1);
+    tvec.create(3, 1, CV_64FC1);
+    for (int i = 0; i < 3; i++)
+    {
+        rvec.at<double>(i,0) = rng.uniform(minVal, maxVal);
+        tvec.at<double>(i,0) = (i == 2) ? rng.uniform(minVal*10, maxVal) : rng.uniform(-maxVal, maxVal);
+    }
+}
+}
+
 PERF_TEST_P(PointsNum_Algo, solvePnP,
             testing::Combine(
                 testing::Values(5, 3*9, 7*13), //TODO: find why results on 4 points are too unstable
@@ -33,9 +65,8 @@ PERF_TEST_P(PointsNum_Algo, solvePnP,
     intrinsics.at<float> (0, 2) = 640 / 2;
     intrinsics.at<float> (1, 2) = 480 / 2;
 
-    warmup(points3d, WARMUP_RNG);
-    warmup(rvec, WARMUP_RNG);
-    warmup(tvec, WARMUP_RNG);
+    generate3DPointCloud(points3d);
+    generatePose(rvec, tvec);
 
     projectPoints(points3d, rvec, tvec, intrinsics, distortion, points2d);
 
@@ -59,13 +90,13 @@ PERF_TEST_P(PointsNum_Algo, solvePnP,
 PERF_TEST_P(PointsNum_Algo, solvePnPSmallPoints,
             testing::Combine(
                 testing::Values(5),
-                testing::Values((int)SOLVEPNP_P3P, (int)SOLVEPNP_EPNP, (int)SOLVEPNP_DLS, (int)SOLVEPNP_UPNP)
+                testing::Values((int)SOLVEPNP_P3P, (int)SOLVEPNP_AP3P, (int)SOLVEPNP_EPNP, (int)SOLVEPNP_DLS, (int)SOLVEPNP_UPNP)
                 )
             )
 {
     int pointsNum = get<0>(GetParam());
     pnpAlgo algo = get<1>(GetParam());
-    if( algo == SOLVEPNP_P3P )
+    if( algo == SOLVEPNP_P3P || algo == SOLVEPNP_AP3P )
         pointsNum = 4;
 
     vector<Point2f> points2d(pointsNum);
@@ -80,9 +111,8 @@ PERF_TEST_P(PointsNum_Algo, solvePnPSmallPoints,
     intrinsics.at<float> (0, 2) = 640 / 2;
     intrinsics.at<float> (1, 2) = 480 / 2;
 
-    warmup(points3d, WARMUP_RNG);
-    warmup(rvec, WARMUP_RNG);
-    warmup(tvec, WARMUP_RNG);
+    generate3DPointCloud(points3d);
+    generatePose(rvec, tvec);
 
     // normalize Rodrigues vector
     Mat rvec_tmp = Mat::eye(3, 3, CV_32F);
diff --git a/modules/calib3d/src/chessboard.cpp b/modules/calib3d/src/chessboard.cpp
index 86c9e037508..ef9e73edc4f 100644
--- a/modules/calib3d/src/chessboard.cpp
+++ b/modules/calib3d/src/chessboard.cpp
@@ -1250,7 +1250,7 @@ void Chessboard::Board::draw(cv::InputArray m,cv::OutputArray out,cv::InputArray
     image.copyTo(out.getMat());
 }
 
-bool Chessboard::Board::estimatePose(const cv::Size2f &real_size,cv::InputArray _K,cv::OutputArray rvec,cv::OutputArray tvec)const
+bool Chessboard::Board::estimatePose(const cv::Size2f &real_size,cv::InputArray _K,cv::InputOutputArray rvec,cv::InputOutputArray tvec)const
 {
     cv::Mat K = _K.getMat();
     CV_CheckTypeEQ(K.type(), CV_64FC1, "wrong K type");
diff --git a/modules/calib3d/src/chessboard.hpp b/modules/calib3d/src/chessboard.hpp
index 1c5cfd9b024..d0d7cc0b633 100644
--- a/modules/calib3d/src/chessboard.hpp
+++ b/modules/calib3d/src/chessboard.hpp
@@ -319,7 +319,7 @@ class Chessboard: public cv::Feature2D
                  * \brief Estimates the pose of the chessboard
                  *
                  */
-                bool estimatePose(const cv::Size2f &real_size,cv::InputArray _K,cv::OutputArray rvec,cv::OutputArray tvec)const;
+                bool estimatePose(const cv::Size2f &real_size,cv::InputArray _K,cv::InputOutputArray rvec,cv::InputOutputArray tvec)const;
 
                 /**
                  * \brief Clears all internal data of the object
diff --git a/modules/calib3d/src/ptsetreg.cpp b/modules/calib3d/src/ptsetreg.cpp
index dc2812f5f5f..7d0b4e1a7fb 100644
--- a/modules/calib3d/src/ptsetreg.cpp
+++ b/modules/calib3d/src/ptsetreg.cpp
@@ -89,8 +89,8 @@ class RANSACPointSetRegistrator : public PointSetRegistrator
         const float* errptr = err.ptr<float>();
         uchar* maskptr = mask.ptr<uchar>();
         float t = (float)(thresh*thresh);
-        int i, n = (int)err.total(), nz = 0;
-        for( i = 0; i < n; i++ )
+        int n = (int)err.total(), nz = 0;
+        for( int i = 0; i < n; i++ )
         {
             int f = errptr[i] <= t;
             maskptr[i] = (uchar)f;
@@ -156,7 +156,7 @@ class RANSACPointSetRegistrator : public PointSetRegistrator
         Mat m1 = _m1.getMat(), m2 = _m2.getMat();
         Mat err, mask, model, bestModel, ms1, ms2;
 
-        int iter, niters = MAX(maxIters, 1);
+        int niters = MAX(maxIters, 1);
         int d1 = m1.channels() > 1 ? m1.channels() : m1.cols;
         int d2 = m2.channels() > 1 ? m2.channels() : m2.cols;
         int count = m1.checkVector(d1), count2 = m2.checkVector(d2), maxGoodCount = 0;
@@ -193,9 +193,8 @@ class RANSACPointSetRegistrator : public PointSetRegistrator
             return true;
         }
 
-        for( iter = 0; iter < niters; iter++ )
+        for( int iter = 0; iter < niters; iter++ )
         {
-            int i, nmodels;
             if( count > modelPoints )
             {
                 bool found = getSubset( m1, m2, ms1, ms2, rng, 10000 );
@@ -207,13 +206,13 @@ class RANSACPointSetRegistrator : public PointSetRegistrator
                 }
             }
 
-            nmodels = cb->runKernel( ms1, ms2, model );
+            int nmodels = cb->runKernel( ms1, ms2, model );
             if( nmodels <= 0 )
                 continue;
             CV_Assert( model.rows % nmodels == 0 );
             Size modelSize(model.cols, model.rows/nmodels);
 
-            for( i = 0; i < nmodels; i++ )
+            for( int i = 0; i < nmodels; i++ )
             {
                 Mat model_i = model.rowRange( i*modelSize.height, (i+1)*modelSize.height );
                 int goodCount = findInliers( m1, m2, model_i, err, mask, threshold );
diff --git a/modules/calib3d/src/solvepnp.cpp b/modules/calib3d/src/solvepnp.cpp
index 0f76e8c4528..78d8e809c3e 100644
--- a/modules/calib3d/src/solvepnp.cpp
+++ b/modules/calib3d/src/solvepnp.cpp
@@ -82,7 +82,7 @@ void drawFrameAxes(InputOutputArray image, InputArray cameraMatrix, InputArray d
 
 bool solvePnP( InputArray _opoints, InputArray _ipoints,
                InputArray _cameraMatrix, InputArray _distCoeffs,
-               OutputArray _rvec, OutputArray _tvec, bool useExtrinsicGuess, int flags )
+               InputOutputArray _rvec, InputOutputArray _tvec, bool useExtrinsicGuess, int flags )
 {
     CV_INSTRUMENT_REGION();
 
@@ -124,7 +124,7 @@ bool solvePnP( InputArray _opoints, InputArray _ipoints,
     Mat distCoeffs = Mat_<double>(distCoeffs0);
     bool result = false;
 
-    if (flags == SOLVEPNP_EPNP || flags == SOLVEPNP_DLS || flags == SOLVEPNP_UPNP)
+    if (flags == SOLVEPNP_EPNP || flags == SOLVEPNP_UPNP) //UPnP is broken and is remaped to EPnP
     {
         Mat undistortedPoints;
         undistortPoints(ipoints, undistortedPoints, cameraMatrix, distCoeffs);
@@ -169,20 +169,19 @@ bool solvePnP( InputArray _opoints, InputArray _ipoints,
                                      &c_rvec, &c_tvec, useExtrinsicGuess );
         result = true;
     }
-    /*else if (flags == SOLVEPNP_DLS)
+    else if (flags == SOLVEPNP_DLS)
     {
         Mat undistortedPoints;
         undistortPoints(ipoints, undistortedPoints, cameraMatrix, distCoeffs);
 
         dls PnP(opoints, undistortedPoints);
 
-        Mat R, rvec = _rvec.getMat(), tvec = _tvec.getMat();
-        bool result = PnP.compute_pose(R, tvec);
+        Mat R;
+        result = PnP.compute_pose(R, tvec);
         if (result)
             Rodrigues(R, rvec);
-        return result;
     }
-    else if (flags == SOLVEPNP_UPNP)
+    /*else if (flags == SOLVEPNP_UPNP)
     {
         upnp PnP(cameraMatrix, opoints, ipoints);
 
@@ -192,7 +191,7 @@ bool solvePnP( InputArray _opoints, InputArray _ipoints,
         return true;
     }*/
     else
-        CV_Error(CV_StsBadArg, "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_EPNP or SOLVEPNP_DLS");
+        CV_Error(CV_StsBadArg, "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_AP3P, SOLVEPNP_EPNP or SOLVEPNP_DLS");
     return result;
 }
 
@@ -200,7 +199,6 @@ class PnPRansacCallback CV_FINAL : public PointSetRegistrator::Callback
 {
 
 public:
-
     PnPRansacCallback(Mat _cameraMatrix=Mat(3,3,CV_64F), Mat _distCoeffs=Mat(4,1,CV_64F), int _flags=SOLVEPNP_ITERATIVE,
             bool _useExtrinsicGuess=false, Mat _rvec=Mat(), Mat _tvec=Mat() )
         : cameraMatrix(_cameraMatrix), distCoeffs(_distCoeffs), flags(_flags), useExtrinsicGuess(_useExtrinsicGuess),
@@ -213,7 +211,7 @@ class PnPRansacCallback CV_FINAL : public PointSetRegistrator::Callback
         Mat opoints = _m1.getMat(), ipoints = _m2.getMat();
 
         bool correspondence = solvePnP( _m1, _m2, cameraMatrix, distCoeffs,
-                                            rvec, tvec, useExtrinsicGuess, flags );
+                                        rvec, tvec, useExtrinsicGuess, flags );
 
         Mat _local_model;
         hconcat(rvec, tvec, _local_model);
@@ -226,14 +224,12 @@ class PnPRansacCallback CV_FINAL : public PointSetRegistrator::Callback
     /* Post: fill _err with projection errors */
     void computeError( InputArray _m1, InputArray _m2, InputArray _model, OutputArray _err ) const CV_OVERRIDE
     {
-
         Mat opoints = _m1.getMat(), ipoints = _m2.getMat(), model = _model.getMat();
 
-        int i, count = opoints.checkVector(3);
+        int count = opoints.checkVector(3);
         Mat _rvec = model.col(0);
         Mat _tvec = model.col(1);
 
-
         Mat projpoints(count, 2, CV_32FC1);
         projectPoints(opoints, _rvec, _tvec, cameraMatrix, distCoeffs, projpoints);
 
@@ -243,12 +239,12 @@ class PnPRansacCallback CV_FINAL : public PointSetRegistrator::Callback
         _err.create(count, 1, CV_32FC1);
         float* err = _err.getMat().ptr<float>();
 
-        for ( i = 0; i < count; ++i)
+        for ( int i = 0; i < count; ++i)
+        {
             err[i] = (float)norm( Matx21f(ipoints_ptr[i] - projpoints_ptr[i]), NORM_L2SQR );
-
+        }
     }
 
-
     Mat cameraMatrix;
     Mat distCoeffs;
     int flags;
@@ -259,7 +255,7 @@ class PnPRansacCallback CV_FINAL : public PointSetRegistrator::Callback
 
 bool solvePnPRansac(InputArray _opoints, InputArray _ipoints,
                         InputArray _cameraMatrix, InputArray _distCoeffs,
-                        OutputArray _rvec, OutputArray _tvec, bool useExtrinsicGuess,
+                        InputOutputArray _rvec, InputOutputArray _tvec, bool useExtrinsicGuess,
                         int iterationsCount, float reprojectionError, double confidence,
                         OutputArray _inliers, int flags)
 {
diff --git a/modules/calib3d/test/test_solvepnp_ransac.cpp b/modules/calib3d/test/test_solvepnp_ransac.cpp
index 2359fa92828..6fa34baab56 100644
--- a/modules/calib3d/test/test_solvepnp_ransac.cpp
+++ b/modules/calib3d/test/test_solvepnp_ransac.cpp
@@ -61,8 +61,8 @@ class CV_solvePnPRansac_Test : public cvtest::BaseTest
     ~CV_solvePnPRansac_Test() {}
 protected:
     void generate3DPointCloud(vector<Point3f>& points,
-        Point3f pmin = Point3f(-1, -1, 5),
-        Point3f pmax = Point3f(1, 1, 10))
+                              Point3f pmin = Point3f(-1, -1, 5),
+                              Point3f pmax = Point3f(1, 1, 10))
     {
         RNG rng = cv::theRNG(); // fix the seed to use "fixed" input 3D points
 
@@ -104,7 +104,7 @@ class CV_solvePnPRansac_Test : public cvtest::BaseTest
         for (int i = 0; i < 3; i++)
         {
             rvec.at<double>(i,0) = rng.uniform(minVal, maxVal);
-            tvec.at<double>(i,0) = rng.uniform(minVal, maxVal/10);
+            tvec.at<double>(i,0) = (i == 2) ? rng.uniform(minVal*10, maxVal) : rng.uniform(-maxVal, maxVal);
         }
     }
 
@@ -177,12 +177,40 @@ class CV_solvePnPRansac_Test : public cvtest::BaseTest
                         method, totalTestsCount - successfulTestsCount, totalTestsCount, maxError, mode);
                     ts->set_failed_test_info(cvtest::TS::FAIL_BAD_ACCURACY);
                 }
-                cout << "mode: " << mode << ", method: " << method << " -> "
+                cout << "mode: " << printMode(mode) << ", method: " << printMethod(method) << " -> "
                      << ((double)successfulTestsCount / totalTestsCount) * 100 << "%"
                      << " (err < " << maxError << ")" << endl;
             }
         }
     }
+    std::string printMode(int mode)
+    {
+        switch (mode) {
+        case 0:
+            return "no distortion";
+        case 1:
+        default:
+            return "distorsion";
+        }
+    }
+    std::string printMethod(int method)
+    {
+        switch (method) {
+        case 0:
+            return "SOLVEPNP_ITERATIVE";
+        case 1:
+            return "SOLVEPNP_EPNP";
+        case 2:
+            return "SOLVEPNP_P3P";
+        case 3:
+            return "SOLVEPNP_DLS";
+        case 4:
+            return "SOLVEPNP_UPNP (remaped to SOLVEPNP_EPNP)";
+        case 5:
+        default:
+            return "SOLVEPNP_AP3P";
+        }
+    }
     double eps[SOLVEPNP_MAX_COUNT];
     int totalTestsCount;
     int pointsCount;
@@ -195,10 +223,11 @@ class CV_solvePnP_Test : public CV_solvePnPRansac_Test
     {
         eps[SOLVEPNP_ITERATIVE] = 1.0e-6;
         eps[SOLVEPNP_EPNP] = 1.0e-6;
-        eps[SOLVEPNP_P3P] = 2.0e-4;
+        eps[SOLVEPNP_P3P] = 5.0e-4;
         eps[SOLVEPNP_AP3P] = 1.0e-4;
-        eps[SOLVEPNP_DLS] = 1.0e-4;
-        eps[SOLVEPNP_UPNP] = 1.0e-4;
+        eps[SOLVEPNP_DLS] = 1.0e-6;
+//        eps[SOLVEPNP_UPNP] = 1.0e-4; //UPnP is broken and is remaped to EPnP
+        eps[SOLVEPNP_UPNP] = 1.0e-6;
         totalTestsCount = 1000;
     }
 
@@ -210,10 +239,6 @@ class CV_solvePnP_Test : public CV_solvePnPRansac_Test
         Mat trueRvec, trueTvec;
         Mat intrinsics, distCoeffs;
         generateCameraMatrix(intrinsics, rng);
-        if (method == SOLVEPNP_DLS)
-        {
-            intrinsics.at<double>(1,1) = intrinsics.at<double>(0,0);
-        }
         if (mode == 0)
         {
             distCoeffs = Mat::zeros(4, 1, CV_64FC1);
@@ -232,7 +257,8 @@ class CV_solvePnP_Test : public CV_solvePnPRansac_Test
                 opoints = std::vector<Point3f>(points.begin(), points.begin()+4);
                 break;
             case SOLVEPNP_UPNP:
-                opoints = std::vector<Point3f>(points.begin(), points.begin()+50);
+//                opoints = std::vector<Point3f>(points.begin(), points.begin()+50); //UPnP is broken and is remaped to EPnP
+                opoints = points;
                 break;
             default:
                 opoints = points;
@@ -367,6 +393,7 @@ TEST(Calib3d_SolvePnPRansac, concurrency)
     camera_mat.at<float>(1, 0) = 0.f;
     camera_mat.at<float>(2, 0) = 0.f;
     camera_mat.at<float>(2, 1) = 0.f;
+    camera_mat.at<float>(2, 2) = 1.f;
 
     Mat dist_coef(1, 8, CV_32F, cv::Scalar::all(0));
 
@@ -420,7 +447,7 @@ TEST(Calib3d_SolvePnPRansac, input_type)
 {
     const int numPoints = 10;
     Matx33d intrinsics(5.4794130238156129e+002, 0., 2.9835545700043139e+002, 0.,
-        5.4817724002728005e+002, 2.3062194051986233e+002, 0., 0., 1.);
+                       5.4817724002728005e+002, 2.3062194051986233e+002, 0., 0., 1.);
 
     std::vector<cv::Point3f> points3d;
     std::vector<cv::Point2f> points2d;
@@ -474,7 +501,7 @@ TEST(Calib3d_SolvePnP, double_support)
         points2d.push_back(cv::Point2d(-i, i));
         points2dF.push_back(cv::Point2d(-i, i));
     }
-    Mat R,t, RF, tF;
+    Mat R, t, RF, tF;
     vector<int> inliers;
 
     solvePnPRansac(points3dF, points2dF, intrinsics, cv::Mat(), RF, tF, true, 100, 8.f, 0.999, inliers, cv::SOLVEPNP_P3P);
@@ -524,6 +551,75 @@ TEST(Calib3d_SolvePnP, translation)
     EXPECT_TRUE(checkRange(tvec));
 }
 
+TEST(Calib3d_SolvePnP, iterativeInitialGuess)
+{
+    {
+        Matx33d intrinsics(605.4, 0.0, 317.35,
+                           0.0, 601.2, 242.63,
+                           0.0, 0.0, 1.0);
+
+        double L = 0.1;
+        vector<Point3d> p3d;
+        p3d.push_back(Point3d(-L, -L, 0.0));
+        p3d.push_back(Point3d(L, -L, 0.0));
+        p3d.push_back(Point3d(L, L, 0.0));
+        p3d.push_back(Point3d(-L, L, L/2));
+        p3d.push_back(Point3d(0, 0, -L/2));
+
+        Mat rvec_ground_truth = (Mat_<double>(3,1) << 0.3, -0.2, 0.75);
+        Mat tvec_ground_truth = (Mat_<double>(3,1) << 0.15, -0.2, 1.5);
+
+        vector<Point2d> p2d;
+        projectPoints(p3d, rvec_ground_truth, tvec_ground_truth, intrinsics, noArray(), p2d);
+
+        Mat rvec_est = (Mat_<double>(3,1) << 0.1, -0.1, 0.1);
+        Mat tvec_est = (Mat_<double>(3,1) << 0.0, -0.5, 1.0);
+
+        solvePnP(p3d, p2d, intrinsics, noArray(), rvec_est, tvec_est, true, SOLVEPNP_ITERATIVE);
+
+        std::cout << "rvec_ground_truth: " << rvec_ground_truth.t() << std::endl;
+        std::cout << "rvec_est: " << rvec_est.t() << std::endl;
+        std::cout << "tvec_ground_truth: " << tvec_ground_truth.t() << std::endl;
+        std::cout << "tvec_est: " << tvec_est.t() << std::endl;
+
+        EXPECT_LE(cvtest::norm(rvec_ground_truth, rvec_est, NORM_INF), 1e-6);
+        EXPECT_LE(cvtest::norm(tvec_ground_truth, tvec_est, NORM_INF), 1e-6);
+    }
+
+    {
+        Matx33f intrinsics(605.4f, 0.0f, 317.35f,
+                           0.0f, 601.2f, 242.63f,
+                           0.0f, 0.0f, 1.0f);
+
+        float L = 0.1f;
+        vector<Point3f> p3d;
+        p3d.push_back(Point3f(-L, -L, 0.0f));
+        p3d.push_back(Point3f(L, -L, 0.0f));
+        p3d.push_back(Point3f(L, L, 0.0f));
+        p3d.push_back(Point3f(-L, L, L/2));
+        p3d.push_back(Point3f(0, 0, -L/2));
+
+        Mat rvec_ground_truth = (Mat_<float>(3,1) << -0.75f, 0.4f, 0.34f);
+        Mat tvec_ground_truth = (Mat_<float>(3,1) << -0.15f, 0.35f, 1.58f);
+
+        vector<Point2f> p2d;
+        projectPoints(p3d, rvec_ground_truth, tvec_ground_truth, intrinsics, noArray(), p2d);
+
+        Mat rvec_est = (Mat_<float>(3,1) << -0.1f, 0.1f, 0.1f);
+        Mat tvec_est = (Mat_<float>(3,1) << 0.0f, 0.0f, 1.0f);
+
+        solvePnP(p3d, p2d, intrinsics, noArray(), rvec_est, tvec_est, true, SOLVEPNP_ITERATIVE);
+
+        std::cout << "rvec_ground_truth: " << rvec_ground_truth.t() << std::endl;
+        std::cout << "rvec_est: " << rvec_est.t() << std::endl;
+        std::cout << "tvec_ground_truth: " << tvec_ground_truth.t() << std::endl;
+        std::cout << "tvec_est: " << tvec_est.t() << std::endl;
+
+        EXPECT_LE(cvtest::norm(rvec_ground_truth, rvec_est, NORM_INF), 1e-6);
+        EXPECT_LE(cvtest::norm(tvec_ground_truth, tvec_est, NORM_INF), 1e-6);
+    }
+}
+
 TEST(Calib3d_SolvePnP, iterativeInitialGuess3pts)
 {
     {
