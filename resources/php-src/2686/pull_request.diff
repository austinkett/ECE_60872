diff --git a/ext/date/php_date.c b/ext/date/php_date.c
index 9bd3f1a7cf62..c3742cc72c99 100644
--- a/ext/date/php_date.c
+++ b/ext/date/php_date.c
@@ -2393,6 +2393,11 @@ static HashTable *date_object_get_properties_timezone(zval *object) /* {{{ */
 	return props;
 } /* }}} */
 
+static inline void date_object_update_properties_timezone(zval *object) /* {{{ */
+{
+	date_object_get_properties_timezone(object);
+} /* }}} */
+
 static inline zend_object *date_object_new_interval_ex(zend_class_entry *class_type, int init_props) /* {{{ */
 {
 	php_interval_obj *intern;
@@ -3400,6 +3405,7 @@ PHP_FUNCTION(date_timezone_get)
 		php_date_instantiate(date_ce_timezone, return_value);
 		tzobj = Z_PHPTIMEZONE_P(return_value);
 		set_timezone_from_timelib_time(tzobj, dateobj->time);
+		date_object_update_properties_timezone(return_value);
 	} else {
 		RETURN_FALSE;
 	}
@@ -3799,6 +3805,7 @@ PHP_FUNCTION(timezone_open)
 		zval_ptr_dtor(return_value);
 		RETURN_FALSE;
 	}
+	date_object_update_properties_timezone(return_value);
 }
 /* }}} */
 
@@ -3818,6 +3825,7 @@ PHP_METHOD(DateTimeZone, __construct)
 	zend_replace_error_handling(EH_THROW, NULL, &error_handling);
 	tzobj = Z_PHPTIMEZONE_P(getThis());
 	timezone_initialize(tzobj, ZSTR_VAL(tz), ZSTR_LEN(tz));
+	date_object_update_properties_timezone(getThis());
 	zend_restore_error_handling(&error_handling);
 }
 /* }}} */
@@ -3836,6 +3844,7 @@ static int php_date_timezone_initialize_from_hash(zval **return_value, php_timez
 				return FAILURE;
 			}
 			if (SUCCESS == timezone_initialize(*tzobj, Z_STRVAL_P(z_timezone), Z_STRLEN_P(z_timezone))) {
+				date_object_update_properties_timezone(*return_value);
 				return SUCCESS;
 			}
 		}
@@ -3878,7 +3887,7 @@ PHP_METHOD(DateTimeZone, __wakeup)
 
 	myht = Z_OBJPROP_P(object);
 
-	if(php_date_timezone_initialize_from_hash(&return_value, &tzobj, myht) != SUCCESS) {
+	if(php_date_timezone_initialize_from_hash(&object, &tzobj, myht) != SUCCESS) {
 		zend_throw_error(NULL, "Timezone initialization failed");
 	}
 }
diff --git a/ext/date/tests/bug68406.phpt b/ext/date/tests/bug68406.phpt
new file mode 100644
index 000000000000..a6a41c107851
--- /dev/null
+++ b/ext/date/tests/bug68406.phpt
@@ -0,0 +1,34 @@
+--TEST--
+Bug #68406 calling var_dump on a DateTimeZone object modifies it
+--INI--
+date.timezone=UTC
+--FILE--
+<?php
+
+$tz1 = new DateTimeZone('Europe/Berlin');
+$tz2 = new DateTimeZone('Europe/Berlin');
+
+$d = new DateTime('2014-12-24 13:00:00', $tz1);
+var_dump($d->getTimezone(), $tz2);
+
+if($tz2 == $d->getTimezone()) {
+    echo "yes";
+}
+else {
+    echo "no";
+}
+
+--EXPECT--
+object(DateTimeZone)#4 (2) {
+  ["timezone_type"]=>
+  int(3)
+  ["timezone"]=>
+  string(13) "Europe/Berlin"
+}
+object(DateTimeZone)#2 (2) {
+  ["timezone_type"]=>
+  int(3)
+  ["timezone"]=>
+  string(13) "Europe/Berlin"
+}
+yes
diff --git a/ext/date/tests/bug74940.phpt b/ext/date/tests/bug74940.phpt
new file mode 100644
index 000000000000..8ac403e48c4c
--- /dev/null
+++ b/ext/date/tests/bug74940.phpt
@@ -0,0 +1,30 @@
+--TEST--
+Bug #74940 DateTimeZone loose comparison always true until properties are initialized
+--INI--
+date.timezone=UTC
+--FILE--
+<?php
+
+$tz1 = new DateTimeZone('Europe/Amsterdam');
+$tz2 = new DateTimeZone('UTC');
+
+var_dump($tz1 == $tz2);
+var_dump($tz1 === $tz2);
+
+$tz3 = clone($tz1);
+$tz4 = clone($tz2);
+
+var_dump($tz1 == $tz3);
+var_dump($tz4 == $tz3);
+
+$tz5 = unserialize(serialize($tz1));
+var_dump($tz1 == $tz5);
+var_dump($tz2 == $tz5);
+--EXPECT--
+bool(false)
+bool(false)
+bool(true)
+bool(false)
+bool(true)
+bool(false)
+
