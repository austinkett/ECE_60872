diff --git a/ext/intl/intl_data.h b/ext/intl/intl_data.h
index 12e0a9924e82..74b7092fbb2e 100644
--- a/ext/intl/intl_data.h
+++ b/ext/intl/intl_data.h
@@ -45,7 +45,7 @@ typedef struct _intl_data {
 	obj = Z_##oclass##_P( object );												\
     intl_error_reset( INTL_DATA_ERROR_P(obj) );						\
 
-/* Check status by error code, if error - exit */
+/* Check status by error code, if error return false */
 #define INTL_CHECK_STATUS(err, msg)											\
     intl_error_set_code( NULL, (err) );							\
     if( U_FAILURE((err)) )													\
@@ -54,6 +54,16 @@ typedef struct _intl_data {
         RETURN_FALSE;														\
     }
 
+/* Check status by error code, if error return null */
+#define INTL_CHECK_STATUS_OR_NULL(err, msg)                     \
+    intl_error_set_code( NULL, (err) );             \
+    if( U_FAILURE((err)) )                          \
+    {                                   \
+        intl_error_set_custom_msg( NULL, msg, 0 );        \
+        RETURN_NULL();                           \
+    }
+
+
 /* Check status in object, if error return false */
 #define INTL_METHOD_CHECK_STATUS(obj, msg)											\
     intl_error_set_code( NULL, INTL_DATA_ERROR_CODE((obj)) );				\
diff --git a/ext/intl/tests/bug70451.phpt b/ext/intl/tests/bug70451.phpt
new file mode 100644
index 000000000000..75392c8dad4d
--- /dev/null
+++ b/ext/intl/tests/bug70451.phpt
@@ -0,0 +1,12 @@
+--TEST--
+Bug #70451 IntlChar::charFromName() not consistent with C library or HHVM
+--SKIPIF--
+<?php if( !extension_loaded( 'intl' ) ) print 'skip'; ?>
+--FILE--
+<?php
+var_dump(IntlChar::charFromName("RECYCLING SYMBOL FOR TYPE-1 PLASTICS"));
+var_dump(IntlChar::charFromName("sdfasdfasdfasdf"));
+?>
+--EXPECT--
+int(9843)
+NULL
diff --git a/ext/intl/tests/bug70452.phpt b/ext/intl/tests/bug70452.phpt
new file mode 100644
index 000000000000..ee1cd7053a9f
--- /dev/null
+++ b/ext/intl/tests/bug70452.phpt
@@ -0,0 +1,21 @@
+--TEST--
+Bug #70452 string IntlChar::charName() can sometimes return bool(false)
+--SKIPIF--
+<?php if( !extension_loaded( 'intl' ) ) print 'skip'; ?>
+--FILE--
+<?php
+// Rely on the default value for the second parameter
+var_dump(IntlChar::charName("A"));
+// Provide a valid option for the second parameter
+var_dump(IntlChar::charName("A", IntlChar::UNICODE_CHAR_NAME));
+// Another valid option, but with no corresponding name for that given option
+// This properly returns an empty string, as expected
+var_dump(IntlChar::charName("A", IntlChar::UNICODE_10_CHAR_NAME));
+// Provide an invalid value for the second parameter
+var_dump(IntlChar::charName("A", 12345));
+?>
+--EXPECT--
+string(22) "LATIN CAPITAL LETTER A"
+string(22) "LATIN CAPITAL LETTER A"
+string(0) ""
+NULL
diff --git a/ext/intl/uchar/uchar.c b/ext/intl/uchar/uchar.c
index 8fb09f9f8290..86ceb11b0f96 100644
--- a/ext/intl/uchar/uchar.c
+++ b/ext/intl/uchar/uchar.c
@@ -241,7 +241,7 @@ IC_METHOD(charName) {
 
 	if ((zend_parse_parameters(ZEND_NUM_ARGS(), "z|l", &zcp, &nameChoice) == FAILURE) ||
 	    (convert_cp(&cp, zcp) == FAILURE)) {
-		return;
+		RETURN_NULL();
 	}
 
 	buffer_len = u_charName(cp, (UCharNameChoice)nameChoice, NULL, 0, &error);
@@ -250,7 +250,7 @@ IC_METHOD(charName) {
 	buffer_len = u_charName(cp, (UCharNameChoice)nameChoice, ZSTR_VAL(buffer), ZSTR_LEN(buffer) + 1, &error);
 	if (U_FAILURE(error)) {
 		zend_string_free(buffer);
-		INTL_CHECK_STATUS(error, "Failure getting character name");
+		INTL_CHECK_STATUS_OR_NULL(error, "Failure getting character name");
 	}
 	RETURN_NEW_STR(buffer);
 }
@@ -269,11 +269,11 @@ IC_METHOD(charFromName) {
 	UErrorCode error = U_ZERO_ERROR;
 
 	if (zend_parse_parameters(ZEND_NUM_ARGS(), "s|l", &name, &name_len, &nameChoice) == FAILURE) {
-		return;
+		RETURN_NULL();
 	}
 
 	ret = u_charFromName((UCharNameChoice)nameChoice, name, &error);
-	INTL_CHECK_STATUS(error, NULL);
+	INTL_CHECK_STATUS_OR_NULL(error, NULL);
 	RETURN_LONG(ret);
 }
 /* }}} */
