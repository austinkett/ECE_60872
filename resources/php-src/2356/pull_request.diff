diff --git a/Zend/Zend.m4 b/Zend/Zend.m4
index bdeac672b403..6ec9ed02e12e 100644
--- a/Zend/Zend.m4
+++ b/Zend/Zend.m4
@@ -100,7 +100,8 @@ AC_FUNC_ALLOCA
 AC_CHECK_FUNCS(memcpy strdup getpid kill strtod strtol finite fpclass sigsetjmp)
 AC_ZEND_BROKEN_SPRINTF
 
-AC_CHECK_FUNCS(finite isfinite isinf isnan)
+AC_CHECK_FUNCS(finite)
+AC_CHECK_DECLS([isfinite, isnan, isinf], [], [], [[#include <math.h>]])
 
 ZEND_FP_EXCEPT
 
diff --git a/Zend/configure.in b/Zend/configure.in
index 29551d924c51..d46bef91d8cd 100644
--- a/Zend/configure.in
+++ b/Zend/configure.in
@@ -64,13 +64,13 @@ int zend_sprintf(char *buffer, const char *format, ...);
 
 /* To enable the is_nan, is_infinite and is_finite PHP functions */
 #ifdef NETWARE
-	#define HAVE_ISNAN 1
-	#define HAVE_ISINF 1
-	#define HAVE_ISFINITE 1
+	#define HAVE_DECL_ISNAN 1
+	#define HAVE_DECL_ISINF 1
+	#define HAVE_DECL_ISINFINITE 1
 #endif
 
 #ifndef zend_isnan
-#ifdef HAVE_ISNAN
+#ifdef HAVE_DECL_ISNAN
 #define zend_isnan(a) isnan(a)
 #elif defined(HAVE_FPCLASS)
 #define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
@@ -79,18 +79,18 @@ int zend_sprintf(char *buffer, const char *format, ...);
 #endif
 #endif
 
-#ifdef HAVE_ISINF
+#ifdef HAVE_DECL_ISINF
 #define zend_isinf(a) isinf(a)
 #elif defined(INFINITY)
 /* Might not work, but is required by ISO C99 */
-#define zend_isinf(a) (((a)==INFINITY)?1:0)
+#define zend_isinf(a) (((a)==INFINITY || (a)==-INFINITY)?1:0)
 #elif defined(HAVE_FPCLASS)
 #define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
 #else
 #define zend_isinf(a) 0
 #endif
 
-#if defined(HAVE_ISFINITE) || defined(isfinite)
+#if defined(HAVE_DECL_ISINFINITE) || defined(isfinite)
 #define zend_finite(a) isfinite(a)
 #elif defined(HAVE_FINITE)
 #define zend_finite(a) finite(a)
diff --git a/configure.in b/configure.in
index a61a85d0fcf1..a4c09f385f65 100644
--- a/configure.in
+++ b/configure.in
@@ -69,13 +69,13 @@ int zend_sprintf(char *buffer, const char *format, ...);
 
 /* To enable the is_nan, is_infinite and is_finite PHP functions */
 #ifdef NETWARE
-	#define HAVE_ISNAN 1
-	#define HAVE_ISINF 1
-	#define HAVE_ISFINITE 1
+	#define HAVE_DECL_ISNAN 1
+	#define HAVE_DECL_ISINF 1
+	#define HAVE_DECL_ISINFINITE 1
 #endif
 
 #ifndef zend_isnan
-#ifdef HAVE_ISNAN
+#ifdef HAVE_DECL_ISNAN
 #define zend_isnan(a) isnan(a)
 #elif defined(HAVE_FPCLASS)
 #define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
@@ -84,18 +84,18 @@ int zend_sprintf(char *buffer, const char *format, ...);
 #endif
 #endif
 
-#ifdef HAVE_ISINF
+#ifdef HAVE_DECL_ISINF
 #define zend_isinf(a) isinf(a)
 #elif defined(INFINITY)
 /* Might not work, but is required by ISO C99 */
-#define zend_isinf(a) (((a)==INFINITY)?1:0)
+#define zend_isinf(a) (((a)==INFINITY || (a)==-INFINITY)?1:0)
 #elif defined(HAVE_FPCLASS)
 #define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
 #else
 #define zend_isinf(a) 0
 #endif
 
-#if defined(HAVE_ISFINITE) || defined(isfinite)
+#if defined(HAVE_DECL_ISINFINITE) || defined(isfinite)
 #define zend_finite(a) isfinite(a)
 #elif defined(HAVE_FINITE)
 #define zend_finite(a) finite(a)
diff --git a/ext/standard/config.m4 b/ext/standard/config.m4
index ec90af92276b..ea5ce0626c31 100644
--- a/ext/standard/config.m4
+++ b/ext/standard/config.m4
@@ -420,7 +420,7 @@ AC_TRY_RUN([
 #include <math.h>
 #include <stdlib.h>
 
-#ifdef HAVE_ISNAN
+#ifdef HAVE_DECL_ISNAN
 #define zend_isnan(a) isnan(a)
 #elif defined(HAVE_FPCLASS)
 #define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
@@ -451,11 +451,11 @@ AC_TRY_RUN([
 #include <math.h>
 #include <stdlib.h>
 
-#ifdef HAVE_ISINF
+#ifdef HAVE_DECL_ISINF
 #define zend_isinf(a) isinf(a)
 #elif defined(INFINITY)
 /* Might not work, but is required by ISO C99 */
-#define zend_isinf(a) (((a)==INFINITY)?1:0)
+#define zend_isinf(a) (((a)==INFINITY || (a)==-INFINITY)?1:0)
 #elif defined(HAVE_FPCLASS)
 #define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
 #else
@@ -485,11 +485,11 @@ AC_TRY_RUN([
 #include <math.h>
 #include <stdlib.h>
 
-#ifdef HAVE_ISINF
+#ifdef HAVE_DECL_ISINF
 #define zend_isinf(a) isinf(a)
 #elif defined(INFINITY)
 /* Might not work, but is required by ISO C99 */
-#define zend_isinf(a) (((a)==INFINITY)?1:0)
+#define zend_isinf(a) (((a)==INFINITY || (a)==-INFINITY)?1:0)
 #elif defined(HAVE_FPCLASS)
 #define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
 #else
@@ -520,7 +520,7 @@ AC_TRY_RUN([
 #include <math.h>
 #include <stdlib.h>
 
-#ifdef HAVE_ISNAN
+#ifdef HAVE_DECL_ISNAN
 #define zend_isnan(a) isnan(a)
 #elif defined(HAVE_FPCLASS)
 #define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
diff --git a/ext/standard/tests/math/is_finite_variation1.phpt b/ext/standard/tests/math/is_finite_variation1.phpt
index 4f6288f5dfd1..88f893f5ee26 100644
--- a/ext/standard/tests/math/is_finite_variation1.phpt
+++ b/ext/standard/tests/math/is_finite_variation1.phpt
@@ -41,38 +41,41 @@ $inputs = array(
        12.3456789000e10,
        12.3456789000E-10,
        .5,
+       NAN,
+       INF,
+       -INF,
 
        // null data
-/*11*/ NULL,
+/*14*/ NULL,
        null,
 
        // boolean data
-/*13*/ true,
+/*16*/ true,
        false,
        TRUE,
        FALSE,
        
        // empty data
-/*17*/ "",
+/*20*/ "",
        '',
        array(),
 
        // string data
-/*20*/ "abcxyz",
+/*23*/ "abcxyz",
        'abcxyz',
        $heredoc,
        
        // object data
-/*23*/ new classA(),       
+/*26*/ new classA(),
        
        // undefined data
-/*24*/ @$undefined_var,
+/*27*/ @$undefined_var,
 
        // unset data
-/*25*/ @$unset_var,
+/*28*/ @$unset_var,
 
        // resource variable
-/*26*/ $fp
+/*29*/ $fp
 );
 
 // loop through each element of $inputs to check the behaviour of is_finite()
@@ -119,13 +122,13 @@ bool(true)
 bool(true)
 
 -- Iteration 11 --
-bool(true)
+bool(false)
 
 -- Iteration 12 --
-bool(true)
+bool(false)
 
 -- Iteration 13 --
-bool(true)
+bool(false)
 
 -- Iteration 14 --
 bool(true)
@@ -137,47 +140,56 @@ bool(true)
 bool(true)
 
 -- Iteration 17 --
+bool(true)
+
+-- Iteration 18 --
+bool(true)
+
+-- Iteration 19 --
+bool(true)
+
+-- Iteration 20 --
 
 Warning: is_finite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 18 --
+-- Iteration 21 --
 
 Warning: is_finite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 19 --
+-- Iteration 22 --
 
 Warning: is_finite() expects parameter 1 to be float, array given in %s on line %d
 NULL
 
--- Iteration 20 --
+-- Iteration 23 --
 
 Warning: is_finite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 21 --
+-- Iteration 24 --
 
 Warning: is_finite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 22 --
+-- Iteration 25 --
 
 Warning: is_finite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 23 --
+-- Iteration 26 --
 
 Warning: is_finite() expects parameter 1 to be float, object given in %s on line %d
 NULL
 
--- Iteration 24 --
+-- Iteration 27 --
 bool(true)
 
--- Iteration 25 --
+-- Iteration 28 --
 bool(true)
 
--- Iteration 26 --
+-- Iteration 29 --
 
 Warning: is_finite() expects parameter 1 to be float, resource given in %s on line %d
 NULL
diff --git a/ext/standard/tests/math/is_infinite_variation1.phpt b/ext/standard/tests/math/is_infinite_variation1.phpt
index e7228dd7c559..80c396719797 100644
--- a/ext/standard/tests/math/is_infinite_variation1.phpt
+++ b/ext/standard/tests/math/is_infinite_variation1.phpt
@@ -41,38 +41,41 @@ $inputs = array(
        12.3456789000e10,
        12.3456789000E-10,
        .5,
+       NAN,
+       INF,
+       -INF,
 
        // null data
-/*11*/ NULL,
+/*14*/ NULL,
        null,
 
        // boolean data
-/*13*/ true,
+/*16*/ true,
        false,
        TRUE,
        FALSE,
        
        // empty data
-/*17*/ "",
+/*20*/ "",
        '',
        array(),
 
        // string data
-/*20*/ "abcxyz",
+/*23*/ "abcxyz",
        'abcxyz',
        $heredoc,
        
        // object data
-/*23*/ new classA(),       
+/*26*/ new classA(),       
        
        // undefined data
-/*24*/ @$undefined_var,
+/*27*/ @$undefined_var,
 
        // unset data
-/*25*/ @$unset_var,
+/*28*/ @$unset_var,
 
        // resource variable
-/*26*/ $fp
+/*29*/ $fp
 );
 
 // loop through each element of $inputs to check the behaviour of is_infinite()
@@ -122,10 +125,10 @@ bool(false)
 bool(false)
 
 -- Iteration 12 --
-bool(false)
+bool(true)
 
 -- Iteration 13 --
-bool(false)
+bool(true)
 
 -- Iteration 14 --
 bool(false)
@@ -137,47 +140,56 @@ bool(false)
 bool(false)
 
 -- Iteration 17 --
+bool(false)
+
+-- Iteration 18 --
+bool(false)
+
+-- Iteration 19 --
+bool(false)
+
+-- Iteration 20 --
 
 Warning: is_infinite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 18 --
+-- Iteration 21 --
 
 Warning: is_infinite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 19 --
+-- Iteration 22 --
 
 Warning: is_infinite() expects parameter 1 to be float, array given in %s on line %d
 NULL
 
--- Iteration 20 --
+-- Iteration 23 --
 
 Warning: is_infinite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 21 --
+-- Iteration 24 --
 
 Warning: is_infinite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 22 --
+-- Iteration 25 --
 
 Warning: is_infinite() expects parameter 1 to be float, string given in %s on line %d
 NULL
 
--- Iteration 23 --
+-- Iteration 26 --
 
 Warning: is_infinite() expects parameter 1 to be float, object given in %s on line %d
 NULL
 
--- Iteration 24 --
+-- Iteration 27 --
 bool(false)
 
--- Iteration 25 --
+-- Iteration 28 --
 bool(false)
 
--- Iteration 26 --
+-- Iteration 29 --
 
 Warning: is_infinite() expects parameter 1 to be float, resource given in %s on line %d
 NULL
