diff --git a/ext/mysqli/tests/bug73210.phpt b/ext/mysqli/tests/bug73210.phpt
new file mode 100644
index 000000000000..a540bc62291c
--- /dev/null
+++ b/ext/mysqli/tests/bug73210.phpt
@@ -0,0 +1,43 @@
+--TEST--
+Bug #73210: Segfault with stmt read only cursor and get_result due to double closing
+--DESCRIPTION--
+Getting the result of an executed prepared statement that uses a read only
+cursor results in a segfault because the second close call tries to free the
+internal result on null. It does not matter which is the first or second close
+call since stmt gives result a pointer to the result, the one that calls it
+first is the one that frees it and the other one accesses null.
+--SKIPIF--
+<?php
+require_once __DIR__ . '/skipif.inc';
+require_once __DIR__ . '/skipifconnectfailure.inc';
+require_once __DIR__ . '/connect.inc';
+if (!$IS_MYSQLND) {
+	die('mysqlnd only');
+}
+?>
+--FILE--
+<?php
+
+require_once __DIR__ . '/connect.inc';
+
+mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
+
+$mysqli = new mysqli($host, $user, $passwd, $db, $port, $socket);
+
+$stmt = $mysqli->prepare('SELECT 1 UNION SELECT 2 UNION SELECT 3');
+$stmt->attr_set(MYSQLI_STMT_ATTR_CURSOR_TYPE, MYSQLI_CURSOR_TYPE_READ_ONLY);
+$stmt->execute();
+$result = $stmt->get_result();
+
+// order of invocation does not matter {{{
+$result->close();
+$stmt->close();
+// }}}
+
+$mysqli->close();
+
+echo 'OK';
+
+?>
+--EXPECT--
+OK
diff --git a/ext/mysqlnd/mysqlnd_result.c b/ext/mysqlnd/mysqlnd_result.c
index 513214d3fa40..5f1665dca620 100644
--- a/ext/mysqlnd/mysqlnd_result.c
+++ b/ext/mysqlnd/mysqlnd_result.c
@@ -345,7 +345,9 @@ void MYSQLND_METHOD(mysqlnd_res, free_result_internal)(MYSQLND_RES * result)
 	result->m.free_result_contents(result);
 
 	if (result->conn) {
-		result->conn->m->free_reference(result->conn);
+		if (result->conn->m) {
+			result->conn->m->free_reference(result->conn);
+		}
 		result->conn = NULL;
 	}
 
