diff --git a/ext/pdo_dblib/dblib_driver.c b/ext/pdo_dblib/dblib_driver.c
index e8c010c5630f..f66e83734ced 100644
--- a/ext/pdo_dblib/dblib_driver.c
+++ b/ext/pdo_dblib/dblib_driver.c
@@ -290,6 +290,9 @@ static int dblib_set_attr(pdo_dbh_t *dbh, zend_long attr, zval *val)
 		case PDO_DBLIB_ATTR_SKIP_EMPTY_ROWSETS:
 			H->skip_empty_rowsets = zval_is_true(val);
 			return 1;
+		case PDO_DBLIB_ATTR_DATETIME_CONVERT:
+			H->datetime_convert = zval_get_long(val);
+			return 1;
 		default:
 			return 0;
 	}
@@ -321,6 +324,10 @@ static int dblib_get_attribute(pdo_dbh_t *dbh, zend_long attr, zval *return_valu
 			ZVAL_BOOL(return_value, H->skip_empty_rowsets);
 			break;
 
+		case PDO_DBLIB_ATTR_DATETIME_CONVERT:
+			ZVAL_BOOL(return_value, H->datetime_convert);
+			break;
+
 		default:
 			return 0;
 	}
@@ -395,6 +402,7 @@ static int pdo_dblib_handle_factory(pdo_dbh_t *dbh, zval *driver_options)
 	H->assume_national_character_set_strings = 0;
 	H->stringify_uniqueidentifier = 0;
 	H->skip_empty_rowsets = 0;
+	H->datetime_convert = 0;
 
 	if (!H->login) {
 		goto cleanup;
@@ -418,6 +426,7 @@ static int pdo_dblib_handle_factory(pdo_dbh_t *dbh, zval *driver_options)
 		H->assume_national_character_set_strings = pdo_attr_lval(driver_options, PDO_ATTR_DEFAULT_STR_PARAM, 0) == PDO_PARAM_STR_NATL ? 1 : 0;
 		H->stringify_uniqueidentifier = pdo_attr_lval(driver_options, PDO_DBLIB_ATTR_STRINGIFY_UNIQUEIDENTIFIER, 0);
 		H->skip_empty_rowsets = pdo_attr_lval(driver_options, PDO_DBLIB_ATTR_SKIP_EMPTY_ROWSETS, 0);
+		H->datetime_convert = pdo_attr_lval(driver_options, PDO_DBLIB_ATTR_DATETIME_CONVERT, 0);
 	}
 
 	DBERRHANDLE(H->login, (EHANDLEFUNC) pdo_dblib_error_handler);
diff --git a/ext/pdo_dblib/dblib_stmt.c b/ext/pdo_dblib/dblib_stmt.c
index 469bd790de62..f423b3910f9a 100644
--- a/ext/pdo_dblib/dblib_stmt.c
+++ b/ext/pdo_dblib/dblib_stmt.c
@@ -330,23 +330,33 @@ static int pdo_dblib_stmt_get_col(pdo_stmt_t *stmt, int colno, char **ptr,
 				}
 				case SQLDATETIME:
 				case SQLDATETIM4: {
-					int dl;
-					DBDATEREC di;
-					DBDATEREC dt;
+					if (H->datetime_convert) {
+						tmp_data_len = 63; /* hardcoded maximum length in freetds */
+						tmp_data = emalloc(tmp_data_len);
+						tmp_data_len = dbconvert(NULL, coltype, data, data_len, SQLCHAR, tmp_data, tmp_data_len);
+						if (tmp_data_len == (unsigned int) -1) { /* in case tmp_data_len wasn't enough */
+							pdo_raise_impl_error(stmt->dbh, stmt, "HY000", "PDO_DBLIB: dbconvert() from datetime error");
+							efree(tmp_data);
+							break;
+						}
+					} else {
+						DBDATEREC di;
+						DBDATEREC dt;
 
-					dbconvert(H->link, coltype, data, -1, SQLDATETIME, (LPBYTE) &dt, -1);
-					dbdatecrack(H->link, &di, (DBDATETIME *) &dt);
+						dbconvert(H->link, coltype, data, -1, SQLDATETIME, (LPBYTE) &dt, -1);
+						dbdatecrack(H->link, &di, (DBDATETIME *) &dt);
 
-					dl = spprintf(&tmp_data, 20, "%d-%02d-%02d %02d:%02d:%02d",
+						tmp_data_len = spprintf(&tmp_data, 20, "%04d-%02d-%02d %02d:%02d:%02d",
 #if defined(PHP_DBLIB_IS_MSSQL) || defined(MSDBLIB)
 							di.year,     di.month,       di.day,        di.hour,     di.minute,     di.second
 #else
 							di.dateyear, di.datemonth+1, di.datedmonth, di.datehour, di.dateminute, di.datesecond
 #endif
-					);
+						);
+					}
 
 					zv = emalloc(sizeof(zval));
-					ZVAL_STRINGL(zv, tmp_data, dl);
+					ZVAL_STRINGL(zv, tmp_data, tmp_data_len);
 
 					efree(tmp_data);
 
diff --git a/ext/pdo_dblib/pdo_dblib.c b/ext/pdo_dblib/pdo_dblib.c
index d6a0eda07b47..98e21c9d86ce 100644
--- a/ext/pdo_dblib/pdo_dblib.c
+++ b/ext/pdo_dblib/pdo_dblib.c
@@ -196,6 +196,7 @@ PHP_MINIT_FUNCTION(pdo_dblib)
 	REGISTER_PDO_CLASS_CONST_LONG("DBLIB_ATTR_STRINGIFY_UNIQUEIDENTIFIER", (long) PDO_DBLIB_ATTR_STRINGIFY_UNIQUEIDENTIFIER);
 	REGISTER_PDO_CLASS_CONST_LONG("DBLIB_ATTR_VERSION", (long) PDO_DBLIB_ATTR_VERSION);
 	REGISTER_PDO_CLASS_CONST_LONG("DBLIB_ATTR_SKIP_EMPTY_ROWSETS", (long) PDO_DBLIB_ATTR_SKIP_EMPTY_ROWSETS);
+	REGISTER_PDO_CLASS_CONST_LONG("DBLIB_ATTR_DATETIME_CONVERT", (long) PDO_DBLIB_ATTR_DATETIME_CONVERT);
 
 	if (FAIL == dbinit()) {
 		return FAILURE;
diff --git a/ext/pdo_dblib/php_pdo_dblib_int.h b/ext/pdo_dblib/php_pdo_dblib_int.h
index 1b59dd3a3816..805435a1c2e4 100644
--- a/ext/pdo_dblib/php_pdo_dblib_int.h
+++ b/ext/pdo_dblib/php_pdo_dblib_int.h
@@ -119,6 +119,7 @@ typedef struct {
 	unsigned assume_national_character_set_strings:1;
 	unsigned stringify_uniqueidentifier:1;
 	unsigned skip_empty_rowsets:1;
+	unsigned datetime_convert:1;
 } pdo_dblib_db_handle;
 
 typedef struct {
@@ -152,6 +153,7 @@ enum {
 	PDO_DBLIB_ATTR_STRINGIFY_UNIQUEIDENTIFIER,
 	PDO_DBLIB_ATTR_VERSION,
 	PDO_DBLIB_ATTR_SKIP_EMPTY_ROWSETS,
+	PDO_DBLIB_ATTR_DATETIME_CONVERT,
 };
 
 #endif
diff --git a/ext/pdo_dblib/tests/datetime_convert.phpt b/ext/pdo_dblib/tests/datetime_convert.phpt
new file mode 100644
index 000000000000..0c0c31c5f2c8
--- /dev/null
+++ b/ext/pdo_dblib/tests/datetime_convert.phpt
@@ -0,0 +1,36 @@
+--TEST--
+PDO_DBLIB: DATETIME_CONVERT attr
+--SKIPIF--
+<?php
+if (!extension_loaded('pdo_dblib')) die('skip not loaded');
+require dirname(__FILE__) . '/config.inc';
+?>
+--FILE--
+<?php
+require dirname(__FILE__) . '/config.inc';
+$sql = "SELECT convert(datetime, '20171027 10:22:44.135') AS [d]";
+
+var_dump($db->getAttribute(PDO::DBLIB_ATTR_DATETIME_CONVERT));
+
+$stmt = $db->query($sql);
+var_dump($stmt->fetch(PDO::FETCH_ASSOC));
+$stmt->closeCursor();
+
+//this test assumes FreeTDS's default "date format" = %b %e %Y %I:%M:%S:%z%p
+$db->setAttribute(PDO::DBLIB_ATTR_DATETIME_CONVERT, 1);
+var_dump($db->getAttribute(PDO::DBLIB_ATTR_DATETIME_CONVERT));
+$stmt = $db->query($sql);
+var_dump($stmt->fetch(PDO::FETCH_ASSOC));
+$stmt->closeCursor();
+?>
+--EXPECT--
+bool(false)
+array(1) {
+  ["d"]=>
+  string(19) "2017-10-27 10:22:44"
+}
+bool(true)
+array(1) {
+  ["d"]=>
+  string(26) "Oct 27 2017 10:22:44:137AM"
+}
