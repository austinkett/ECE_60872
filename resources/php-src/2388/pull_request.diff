diff --git a/Zend/tests/bug37212.phpt b/Zend/tests/bug37212.phpt
deleted file mode 100644
index 212ef23ec7ff..000000000000
--- a/Zend/tests/bug37212.phpt
+++ /dev/null
@@ -1,55 +0,0 @@
---TEST--
-Bug #37212 (Access to protected property of common base class)
---FILE--
-<?php
-
-class A
-{
-    protected $value;
-
-    public function __construct($val)
-    {
-        $this->value = $val;
-    }
-
-    protected function getValue()
-    {
-        return $this->value;
-    }
-}
-
-class B extends A
-{
-    public function copyValue($obj)
-    {
-        $this->value = $obj->getValue();
-        $this->value = $obj->value; // value defined in common base class
-    }
-}
-class C extends A {}
-
-$B = new B("B");
-var_dump($B);
-$C = new C("C");
-var_dump($C);
-
-$B->copyValue($C);
-
-var_dump($B);
-
-?>
-===DONE===
---EXPECTF--
-object(B)#%d (1) {
-  ["value":protected]=>
-  string(1) "B"
-}
-object(C)#%d (1) {
-  ["value":protected]=>
-  string(1) "C"
-}
-object(B)#%d (1) {
-  ["value":protected]=>
-  string(1) "C"
-}
-===DONE===
diff --git a/Zend/tests/bug50892.phpt b/Zend/tests/bug50892.phpt
new file mode 100644
index 000000000000..cec9cbd85497
--- /dev/null
+++ b/Zend/tests/bug50892.phpt
@@ -0,0 +1,36 @@
+--TEST--
+Bug #50892 (Protected members of non-congruent children classes are visible)
+--FILE--
+<?php
+class foo {
+	public $public = "a";	
+	private $private = "b";
+	protected $protected = "protected";
+}
+
+class bar extends foo {
+	
+}
+
+class kid extends foo {
+	public function test() {
+		$b = new bar();
+		var_dump(get_object_vars($b));
+		var_dump($b->protected);
+	}
+}
+
+$k = new kid();
+$k->test();
+?>
+--EXPECTF--
+array(1) {
+  ["public"]=>
+  string(1) "a"
+}
+
+Fatal error: Uncaught Error: Cannot access protected property bar::$protected in %s
+Stack trace:
+#0 %s: kid->test()
+#1 {main}
+  thrown in %s
diff --git a/Zend/zend_object_handlers.c b/Zend/zend_object_handlers.c
index 4ec90ba0969c..1545f519a2c1 100644
--- a/Zend/zend_object_handlers.c
+++ b/Zend/zend_object_handlers.c
@@ -286,7 +286,7 @@ static zend_always_inline int zend_verify_property_access(zend_property_info *pr
 		} else {
 			scope = zend_get_executed_scope();
 		}
-		return zend_check_protected(property_info->ce, scope);
+		return zend_check_protected(ce, scope);
 	}
 	return 0;
 }
