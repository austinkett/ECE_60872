diff --git a/ext/session/tests/bug74892.phpt b/ext/session/tests/bug74892.phpt
new file mode 100644
index 000000000000..a4c977828a38
--- /dev/null
+++ b/ext/session/tests/bug74892.phpt
@@ -0,0 +1,23 @@
+--TEST--
+Bug #74892 Url Rewriting (trans_sid) not working on urls that start with #
+--FILE--
+<?php
+ini_set('session.use_cookies', '0');
+ini_set('session.use_only_cookies',0);
+ini_set('session.use_trans_sid',1);
+ini_set('session.trans_sid_hosts','php.net');
+session_id('sessionidhere');
+session_start();
+
+?>
+<p><a href="index.php">Click This Anchor Tag!</a></p>
+<p><a href="index.php#place">External link with anchor</a></p>
+<p><a href="http://php.net#foo">External link with anchor 2</a></p>
+<p><a href="#place">Internal link</a></p>
+===DONE===
+--EXPECT--
+<p><a href="index.php?PHPSESSID=sessionidhere">Click This Anchor Tag!</a></p>
+<p><a href="index.php?PHPSESSID=sessionidhere#place">External link with anchor</a></p>
+<p><a href="http://php.net?PHPSESSID=sessionidhere#foo">External link with anchor 2</a></p>
+<p><a href="#place">Internal link</a></p>
+===DONE===
diff --git a/ext/standard/url_scanner_ex.c b/ext/standard/url_scanner_ex.c
index 4eb989bea3d7..c50ae2af9607 100644
--- a/ext/standard/url_scanner_ex.c
+++ b/ext/standard/url_scanner_ex.c
@@ -1,4 +1,4 @@
-/* Generated by re2c 0.16 */
+/* Generated by re2c 0.15.3 */
 #line 1 "ext/standard/url_scanner_ex.re"
 /*
   +----------------------------------------------------------------------+
@@ -194,6 +194,13 @@ static inline void append_modified_url(smart_str *url, smart_str *dest, smart_st
 		return;
 	}
 
+	/* Don't modify URLs of the format "#mark" */
+	if (url_parts->fragment && '#' == ZSTR_VAL(url->s)[0]) {
+		smart_str_append_smart_str(dest, url);
+		php_url_free(url_parts);
+		return;
+	}
+
 	/* Check protocol. Only http/https is allowed. */
 	if (url_parts->scheme
 		&& strcasecmp("http", url_parts->scheme)
@@ -217,7 +224,7 @@ static inline void append_modified_url(smart_str *url, smart_str *dest, smart_st
 	 * When URL does not have path and query string add "/?".
 	 * i.e. If URL is only "?foo=bar", should not add "/?".
 	 */
-	if (!url_parts->path && !url_parts->query) {
+	if (!url_parts->path && !url_parts->query && !url_parts->fragment) {
 		/* URL is http://php.net or like */
 		smart_str_append_smart_str(dest, url);
 		smart_str_appendc(dest, '/');
@@ -513,7 +520,7 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 state_plain:
 	start = YYCURSOR;
 
-#line 517 "ext/standard/url_scanner_ex.c"
+#line 524 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -553,32 +560,30 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
 	if (yybm[0+yych] & 128) {
-		goto yy2;
+		goto yy4;
 	}
-	goto yy5;
-yy2:
+	++YYCURSOR;
+#line 526 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); STATE = STATE_TAG; goto state_tag; }
+#line 569 "ext/standard/url_scanner_ex.c"
+yy4:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
 	if (yybm[0+yych] & 128) {
-		goto yy2;
+		goto yy4;
 	}
-#line 520 "ext/standard/url_scanner_ex.re"
+#line 527 "ext/standard/url_scanner_ex.re"
 	{ passthru(STD_ARGS); goto state_plain; }
-#line 569 "ext/standard/url_scanner_ex.c"
-yy5:
-	++YYCURSOR;
-#line 519 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); STATE = STATE_TAG; goto state_tag; }
-#line 574 "ext/standard/url_scanner_ex.c"
+#line 579 "ext/standard/url_scanner_ex.c"
 }
-#line 521 "ext/standard/url_scanner_ex.re"
+#line 528 "ext/standard/url_scanner_ex.re"
 
 
 state_tag:
 	start = YYCURSOR;
 
-#line 582 "ext/standard/url_scanner_ex.c"
+#line 587 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -615,27 +620,39 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 		  0,   0,   0,   0,   0,   0,   0,   0, 
 		  0,   0,   0,   0,   0,   0,   0,   0, 
 	};
-	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
 	yych = *YYCURSOR;
-	if (yybm[0+yych] & 128) {
-		goto yy11;
+	if (yych <= '@') {
+		if (yych != ':') goto yy11;
+	} else {
+		if (yych <= 'Z') goto yy9;
+		if (yych <= '`') goto yy11;
+		if (yych >= '{') goto yy11;
 	}
+yy9:
 	++YYCURSOR;
-#line 527 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); goto state_plain_begin; }
-#line 627 "ext/standard/url_scanner_ex.c"
+	yych = *YYCURSOR;
+	goto yy14;
+yy10:
+#line 533 "ext/standard/url_scanner_ex.re"
+	{ handle_tag(STD_ARGS); /* Sets STATE */; passthru(STD_ARGS); if (STATE == STATE_PLAIN) goto state_plain; else goto state_next_arg; }
+#line 640 "ext/standard/url_scanner_ex.c"
 yy11:
 	++YYCURSOR;
+#line 534 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_plain_begin; }
+#line 645 "ext/standard/url_scanner_ex.c"
+yy13:
+	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
+yy14:
 	if (yybm[0+yych] & 128) {
-		goto yy11;
+		goto yy13;
 	}
-#line 526 "ext/standard/url_scanner_ex.re"
-	{ handle_tag(STD_ARGS); /* Sets STATE */; passthru(STD_ARGS); if (STATE == STATE_PLAIN) goto state_plain; else goto state_next_arg; }
-#line 637 "ext/standard/url_scanner_ex.c"
+	goto yy10;
 }
-#line 528 "ext/standard/url_scanner_ex.re"
+#line 535 "ext/standard/url_scanner_ex.re"
 
 
 state_next_arg_begin:
@@ -644,7 +661,7 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 state_next_arg:
 	start = YYCURSOR;
 
-#line 648 "ext/standard/url_scanner_ex.c"
+#line 665 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -683,57 +700,78 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 	};
 	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
 	yych = *YYCURSOR;
-	if (yybm[0+yych] & 128) {
-		goto yy18;
-	}
-	if (yych <= '>') {
-		if (yych == '/') goto yy21;
-		if (yych >= '>') goto yy22;
+	if (yych <= '.') {
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy25;
+			if (yych <= '\v') goto yy21;
+			goto yy25;
+		} else {
+			if (yych <= '\r') goto yy21;
+			if (yych == ' ') goto yy21;
+			goto yy25;
+		}
 	} else {
-		if (yych <= 'Z') {
-			if (yych >= 'A') goto yy24;
+		if (yych <= '@') {
+			if (yych <= '/') goto yy17;
+			if (yych == '>') goto yy19;
+			goto yy25;
 		} else {
-			if (yych <= '`') goto yy16;
-			if (yych <= 'z') goto yy24;
+			if (yych <= 'Z') goto yy23;
+			if (yych <= '`') goto yy25;
+			if (yych <= 'z') goto yy23;
+			goto yy25;
 		}
 	}
-yy16:
-	++YYCURSOR;
 yy17:
-#line 539 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); goto state_plain_begin; }
-#line 706 "ext/standard/url_scanner_ex.c"
+	++YYCURSOR;
+	if ((yych = *YYCURSOR) == '>') goto yy28;
 yy18:
+#line 546 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_plain_begin; }
+#line 732 "ext/standard/url_scanner_ex.c"
+yy19:
+	++YYCURSOR;
+yy20:
+#line 543 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); handle_form(STD_ARGS); goto state_plain_begin; }
+#line 738 "ext/standard/url_scanner_ex.c"
+yy21:
 	++YYCURSOR;
-	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
-	if (yybm[0+yych] & 128) {
-		goto yy18;
-	}
-#line 537 "ext/standard/url_scanner_ex.re"
+	goto yy27;
+yy22:
+#line 544 "ext/standard/url_scanner_ex.re"
 	{ passthru(STD_ARGS); goto state_next_arg; }
-#line 716 "ext/standard/url_scanner_ex.c"
-yy21:
+#line 746 "ext/standard/url_scanner_ex.c"
+yy23:
+	++YYCURSOR;
+#line 545 "ext/standard/url_scanner_ex.re"
+	{ --YYCURSOR; STATE = STATE_ARG; goto state_arg; }
+#line 751 "ext/standard/url_scanner_ex.c"
+yy25:
 	yych = *++YYCURSOR;
-	if (yych != '>') goto yy17;
-yy22:
+	goto yy18;
+yy26:
 	++YYCURSOR;
-#line 536 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); handle_form(STD_ARGS); goto state_plain_begin; }
-#line 724 "ext/standard/url_scanner_ex.c"
-yy24:
+	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	yych = *YYCURSOR;
+yy27:
+	if (yybm[0+yych] & 128) {
+		goto yy26;
+	}
+	goto yy22;
+yy28:
 	++YYCURSOR;
-#line 538 "ext/standard/url_scanner_ex.re"
-	{ --YYCURSOR; STATE = STATE_ARG; goto state_arg; }
-#line 729 "ext/standard/url_scanner_ex.c"
+	yych = *YYCURSOR;
+	goto yy20;
 }
-#line 540 "ext/standard/url_scanner_ex.re"
+#line 547 "ext/standard/url_scanner_ex.re"
 
 
 state_arg:
 	start = YYCURSOR;
 
-#line 737 "ext/standard/url_scanner_ex.c"
+#line 775 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -770,35 +808,42 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 		  0,   0,   0,   0,   0,   0,   0,   0, 
 		  0,   0,   0,   0,   0,   0,   0,   0, 
 	};
-	if (YYLIMIT <= YYCURSOR) YYFILL(1);
+	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
 	yych = *YYCURSOR;
-	if (yych <= '@') goto yy28;
-	if (yych <= 'Z') goto yy30;
-	if (yych <= '`') goto yy28;
-	if (yych <= 'z') goto yy30;
-yy28:
+	if (yych <= '@') goto yy33;
+	if (yych <= 'Z') goto yy31;
+	if (yych <= '`') goto yy33;
+	if (yych >= '{') goto yy33;
+yy31:
 	++YYCURSOR;
-#line 546 "ext/standard/url_scanner_ex.re"
+	yych = *YYCURSOR;
+	goto yy36;
+yy32:
+#line 552 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); handle_arg(STD_ARGS); STATE = STATE_BEFORE_VAL; goto state_before_val; }
+#line 825 "ext/standard/url_scanner_ex.c"
+yy33:
+	++YYCURSOR;
+#line 553 "ext/standard/url_scanner_ex.re"
 	{ passthru(STD_ARGS); STATE = STATE_NEXT_ARG; goto state_next_arg; }
-#line 784 "ext/standard/url_scanner_ex.c"
-yy30:
+#line 830 "ext/standard/url_scanner_ex.c"
+yy35:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
+yy36:
 	if (yybm[0+yych] & 128) {
-		goto yy30;
+		goto yy35;
 	}
-#line 545 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); handle_arg(STD_ARGS); STATE = STATE_BEFORE_VAL; goto state_before_val; }
-#line 794 "ext/standard/url_scanner_ex.c"
+	goto yy32;
 }
-#line 547 "ext/standard/url_scanner_ex.re"
+#line 554 "ext/standard/url_scanner_ex.re"
 
 
 state_before_val:
 	start = YYCURSOR;
 
-#line 802 "ext/standard/url_scanner_ex.c"
+#line 847 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -837,44 +882,54 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 	};
 	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
 	yych = *YYCURSOR;
-	if (yych == ' ') goto yy37;
-	if (yych == '=') goto yy38;
-	++YYCURSOR;
-yy36:
-#line 553 "ext/standard/url_scanner_ex.re"
-	{ --YYCURSOR; goto state_next_arg_begin; }
-#line 847 "ext/standard/url_scanner_ex.c"
-yy37:
+	if (yych == ' ') goto yy39;
+	if (yych == '=') goto yy41;
+	goto yy43;
+yy39:
 	yych = *(YYMARKER = ++YYCURSOR);
-	if (yych == ' ') goto yy41;
-	if (yych != '=') goto yy36;
-yy38:
+	if (yych == ' ') goto yy46;
+	if (yych == '=') goto yy44;
+yy40:
+#line 560 "ext/standard/url_scanner_ex.re"
+	{ --YYCURSOR; goto state_next_arg_begin; }
+#line 896 "ext/standard/url_scanner_ex.c"
+yy41:
+	++YYCURSOR;
+	yych = *YYCURSOR;
+	goto yy45;
+yy42:
+#line 559 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); STATE = STATE_VAL; goto state_val; }
+#line 904 "ext/standard/url_scanner_ex.c"
+yy43:
+	yych = *++YYCURSOR;
+	goto yy40;
+yy44:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
+yy45:
 	if (yybm[0+yych] & 128) {
-		goto yy38;
+		goto yy44;
 	}
-#line 552 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); STATE = STATE_VAL; goto state_val; }
-#line 861 "ext/standard/url_scanner_ex.c"
-yy41:
+	goto yy42;
+yy46:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
-	if (yych == ' ') goto yy41;
-	if (yych == '=') goto yy38;
+	if (yych == ' ') goto yy46;
+	if (yych == '=') goto yy44;
 	YYCURSOR = YYMARKER;
-	goto yy36;
+	goto yy40;
 }
-#line 554 "ext/standard/url_scanner_ex.re"
+#line 561 "ext/standard/url_scanner_ex.re"
 
 
 
 state_val:
 	start = YYCURSOR;
 
-#line 878 "ext/standard/url_scanner_ex.c"
+#line 933 "ext/standard/url_scanner_ex.c"
 {
 	YYCTYPE yych;
 	static const unsigned char yybm[] = {
@@ -882,7 +937,7 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 		224, 192, 192, 224, 224, 192, 224, 224, 
 		224, 224, 224, 224, 224, 224, 224, 224, 
 		224, 224, 224, 224, 224, 224, 224, 224, 
-		192, 224, 128, 224, 224, 224, 224,  64, 
+		192, 224,  64, 224, 224, 224, 224, 128, 
 		224, 224, 224, 224, 224, 224, 224, 224, 
 		224, 224, 224, 224, 224, 224, 224, 224, 
 		224, 224, 224, 224, 224, 224,   0, 224, 
@@ -913,69 +968,87 @@ static inline void xx_mainloop(url_adapt_state_ex_t *ctx, const char *newdata, s
 	};
 	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
 	yych = *YYCURSOR;
-	if (yybm[0+yych] & 32) {
-		goto yy46;
+	if (yych <= ' ') {
+		if (yych <= '\f') {
+			if (yych <= 0x08) goto yy54;
+			if (yych <= '\n') goto yy56;
+			goto yy54;
+		} else {
+			if (yych <= '\r') goto yy56;
+			if (yych <= 0x1F) goto yy54;
+			goto yy56;
+		}
+	} else {
+		if (yych <= '&') {
+			if (yych != '"') goto yy54;
+		} else {
+			if (yych <= '\'') goto yy53;
+			if (yych == '>') goto yy56;
+			goto yy54;
+		}
 	}
-	if (yych <= ' ') goto yy49;
-	if (yych <= '"') goto yy51;
-	if (yych <= '\'') goto yy52;
-	goto yy49;
-yy46:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych != '>') goto yy65;
+yy52:
+#line 570 "ext/standard/url_scanner_ex.re"
+	{ passthru(STD_ARGS); goto state_next_arg_begin; }
+#line 996 "ext/standard/url_scanner_ex.c"
+yy53:
+	yych = *(YYMARKER = ++YYCURSOR);
+	if (yych == '>') goto yy52;
+	goto yy60;
+yy54:
+	++YYCURSOR;
+	yych = *YYCURSOR;
+	goto yy58;
+yy55:
+#line 569 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 0, ' '); goto state_next_arg_begin; }
+#line 1008 "ext/standard/url_scanner_ex.c"
+yy56:
+	yych = *++YYCURSOR;
+	goto yy52;
+yy57:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
+yy58:
 	if (yybm[0+yych] & 32) {
-		goto yy46;
+		goto yy57;
 	}
-#line 562 "ext/standard/url_scanner_ex.re"
-	{ handle_val(STD_ARGS, 0, ' '); goto state_next_arg_begin; }
-#line 933 "ext/standard/url_scanner_ex.c"
-yy49:
-	++YYCURSOR;
-yy50:
-#line 563 "ext/standard/url_scanner_ex.re"
-	{ passthru(STD_ARGS); goto state_next_arg_begin; }
-#line 939 "ext/standard/url_scanner_ex.c"
-yy51:
-	yych = *(YYMARKER = ++YYCURSOR);
-	if (yych == '>') goto yy50;
-	goto yy54;
-yy52:
-	yych = *(YYMARKER = ++YYCURSOR);
-	if (yych == '>') goto yy50;
-	goto yy59;
-yy53:
+	goto yy55;
+yy59:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
-yy54:
+yy60:
 	if (yybm[0+yych] & 64) {
-		goto yy53;
+		goto yy59;
 	}
-	if (yych <= '"') goto yy56;
-yy55:
+	if (yych <= '\'') goto yy62;
+yy61:
 	YYCURSOR = YYMARKER;
-	goto yy50;
-yy56:
+	goto yy52;
+yy62:
 	++YYCURSOR;
-#line 560 "ext/standard/url_scanner_ex.re"
-	{ handle_val(STD_ARGS, 1, '"'); goto state_next_arg_begin; }
-#line 964 "ext/standard/url_scanner_ex.c"
-yy58:
+#line 568 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 1, '\''); goto state_next_arg_begin; }
+#line 1037 "ext/standard/url_scanner_ex.c"
+yy64:
 	++YYCURSOR;
 	if (YYLIMIT <= YYCURSOR) YYFILL(1);
 	yych = *YYCURSOR;
-yy59:
+yy65:
 	if (yybm[0+yych] & 128) {
-		goto yy58;
+		goto yy64;
 	}
-	if (yych >= '(') goto yy55;
+	if (yych >= '#') goto yy61;
 	++YYCURSOR;
-#line 561 "ext/standard/url_scanner_ex.re"
-	{ handle_val(STD_ARGS, 1, '\''); goto state_next_arg_begin; }
-#line 977 "ext/standard/url_scanner_ex.c"
+#line 567 "ext/standard/url_scanner_ex.re"
+	{ handle_val(STD_ARGS, 1, '"'); goto state_next_arg_begin; }
+#line 1050 "ext/standard/url_scanner_ex.c"
 }
-#line 564 "ext/standard/url_scanner_ex.re"
+#line 571 "ext/standard/url_scanner_ex.re"
 
 
 stop:
diff --git a/ext/standard/url_scanner_ex.re b/ext/standard/url_scanner_ex.re
index 51a29b5f73d1..b020b25b6c2e 100644
--- a/ext/standard/url_scanner_ex.re
+++ b/ext/standard/url_scanner_ex.re
@@ -197,6 +197,13 @@ static inline void append_modified_url(smart_str *url, smart_str *dest, smart_st
 		return;
 	}
 
+	/* Don't modify URLs of the format "#mark" */
+	if (url_parts->fragment && '#' == ZSTR_VAL(url->s)[0]) {
+		smart_str_append_smart_str(dest, url);
+		php_url_free(url_parts);
+		return;
+	}
+
 	/* Check protocol. Only http/https is allowed. */
 	if (url_parts->scheme
 		&& strcasecmp("http", url_parts->scheme)
@@ -220,13 +227,12 @@ static inline void append_modified_url(smart_str *url, smart_str *dest, smart_st
 	 * When URL does not have path and query string add "/?".
 	 * i.e. If URL is only "?foo=bar", should not add "/?".
 	 */
-	if (!url_parts->path && !url_parts->query) {
+	if (!url_parts->path && !url_parts->query && !url_parts->fragment) {
 		/* URL is http://php.net or like */
 		smart_str_append_smart_str(dest, url);
 		smart_str_appendc(dest, '/');
 		smart_str_appendc(dest, '?');
 		smart_str_append_smart_str(dest, url_app);
-		/* There should not be fragment. Just return */
 		php_url_free(url_parts);
 		return;
 	}
