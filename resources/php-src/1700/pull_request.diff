diff --git a/NEWS b/NEWS
index 932dd4a251b5..8768b7da527b 100644
--- a/NEWS
+++ b/NEWS
@@ -7,6 +7,10 @@ PHP                                                                        NEWS
     ob_start). (hugh at allthethings dot co dot nz)
   . Fixed bug #71201 (round() segfault on 64-bit builds). (Anatol)
   . Added support for new HTTP 451 code. (Julien)
+  . Fixed bug #66173 (Object/Array cast loses numeric property/element
+    accessibility). (Andrea)
+  . Fixed bug #71208 (Array/Object cast loses numeric property/element
+    accessibility). (Andrea)
 
 - SPL:
   . Fixed bug #71204 (segfault if clean spl_autoload_funcs while autoloading).
diff --git a/Zend/tests/bug66173.phpt b/Zend/tests/bug66173.phpt
new file mode 100644
index 000000000000..9a6befb1ee8b
--- /dev/null
+++ b/Zend/tests/bug66173.phpt
@@ -0,0 +1,30 @@
+--TEST--
+Bug #66173 (Object/Array cast loses numeric property/element accessibility)
+--FILE--
+<?php
+
+$obj = new StdClass;
+$obj->{0} = 1;
+$obj->{'1'} = 2;
+$obj->{"2"} = 4;
+
+$arr = (array)$obj;
+
+var_dump($arr);
+var_dump($arr[0]);
+var_dump($arr[1]);
+var_dump($arr[2]);
+
+?>
+--EXPECT--
+array(3) {
+  [0]=>
+  int(1)
+  [1]=>
+  int(2)
+  [2]=>
+  int(4)
+}
+int(1)
+int(2)
+int(4)
diff --git a/Zend/tests/bug71208.phpt b/Zend/tests/bug71208.phpt
new file mode 100644
index 000000000000..76ce9d4270d7
--- /dev/null
+++ b/Zend/tests/bug71208.phpt
@@ -0,0 +1,28 @@
+--TEST--
+Bug #71208 (Array/Object cast loses numeric property/element accessibility)
+--FILE--
+<?php
+
+$arr = [1, 2, 4];
+$obj = (object)$arr;
+
+var_dump($obj);
+var_dump($obj->{0}, $obj->{1}, $obj->{2});
+var_dump($obj->{'0'}, $obj->{'1'}, $obj->{'2'});
+
+?>
+--EXPECTF--
+object(stdClass)#1 (3) {
+  ["0"]=>
+  int(1)
+  ["1"]=>
+  int(2)
+  ["2"]=>
+  int(4)
+}
+int(1)
+int(2)
+int(4)
+int(1)
+int(2)
+int(4)
diff --git a/Zend/tests/cast_to_object.phpt b/Zend/tests/cast_to_object.phpt
index f8d4878475e4..04d68053e26f 100644
Binary files a/Zend/tests/cast_to_object.phpt and b/Zend/tests/cast_to_object.phpt differ
diff --git a/Zend/tests/object_array_cast.phpt b/Zend/tests/object_array_cast.phpt
index 1cf3dbbd9cf6..b1c12b579d7e 100644
--- a/Zend/tests/object_array_cast.phpt
+++ b/Zend/tests/object_array_cast.phpt
@@ -14,11 +14,11 @@ var_dump($obj);
 ?>
 --EXPECT--
 object(stdClass)#1 (3) {
-  [0]=>
+  ["0"]=>
   int(1)
-  [1]=>
+  ["1"]=>
   int(2)
-  [2]=>
+  ["2"]=>
   int(3)
 }
 array(3) {
@@ -38,10 +38,10 @@ array(3) {
   int(3)
 }
 object(stdClass)#1 (3) {
-  [0]=>
+  ["0"]=>
   int(1)
-  [1]=>
+  ["1"]=>
   int(2)
-  [2]=>
+  ["2"]=>
   int(3)
 }
diff --git a/Zend/tests/settype_object.phpt b/Zend/tests/settype_object.phpt
index d619dce7e3a7..7f9e5bc64b1a 100644
Binary files a/Zend/tests/settype_object.phpt and b/Zend/tests/settype_object.phpt differ
diff --git a/Zend/zend_operators.c b/Zend/zend_operators.c
index 3f4f29020eed..1f0aac34b2c8 100644
--- a/Zend/zend_operators.c
+++ b/Zend/zend_operators.c
@@ -596,24 +596,30 @@ ZEND_API void ZEND_FASTCALL convert_to_array(zval *op) /* {{{ */
 					HashTable *obj_ht = Z_OBJ_HT_P(op)->get_properties(op);
 					if (obj_ht) {
 						zval arr;
-
-						if (!Z_OBJCE_P(op)->default_properties_count && obj_ht == Z_OBJ_P(op)->properties) {
-							/* fast copy */
-							if (EXPECTED(Z_OBJ_P(op)->handlers == &std_object_handlers)) {
-								ZVAL_ARR(&arr, obj_ht);
-								if (EXPECTED(!(GC_FLAGS(Z_OBJ_P(op)->properties) & IS_ARRAY_IMMUTABLE))) {
-									GC_REFCOUNT(Z_OBJ_P(op)->properties)++;
-								}
+						zend_ulong num_key;
+						zend_string *str_key;
+						zval *zv;
+
+						/* Object property tables only have string keys, but PHP
+						 * arrays contain string and integer keys, and will
+						 * automatically coerce numeric strings to integers
+						 * when looking up values. Thus, we need to create a new
+						 * array with any numeric string keys converted into
+						 * integer keys, lest those values be inaccessible.
+						 */
+						array_init_size(&arr, zend_hash_num_elements(obj_ht));
+
+						ZEND_HASH_FOREACH_KEY_VAL(obj_ht, num_key, str_key, zv) {
+							Z_TRY_ADDREF_P(zv);
+							if (!str_key || ZEND_HANDLE_NUMERIC(str_key, num_key)) {
+								zend_hash_index_add_new(Z_ARRVAL(arr), num_key, zv);
 							} else {
-								ZVAL_ARR(&arr, zend_array_dup(obj_ht));
+								zend_hash_add_new(Z_ARRVAL(arr), str_key, zv);
 							}
-							zval_dtor(op);
-							ZVAL_COPY_VALUE(op, &arr);
-						} else {
-							ZVAL_ARR(&arr, zend_array_dup(obj_ht));
-							zval_dtor(op);
-							ZVAL_COPY_VALUE(op, &arr);
-						}
+						} ZEND_HASH_FOREACH_END();
+
+						zval_dtor(op);
+						ZVAL_COPY_VALUE(op, &arr);
 						return;
 					}
 				} else {
@@ -652,11 +658,34 @@ ZEND_API void ZEND_FASTCALL convert_to_object(zval *op) /* {{{ */
 		case IS_ARRAY:
 			{
 				HashTable *ht = Z_ARR_P(op);
-				if (Z_IMMUTABLE_P(op)) {
-					/* TODO: try not to duplicate immutable arrays as well ??? */
-					ht = zend_array_dup(ht);
+				HashTable *obj_ht = emalloc(sizeof(HashTable));
+				zend_ulong num_key;
+				zend_string *str_key;
+				zval *zv;
+
+				/* PHP arrays have string and integer keys, but object
+				 * property tables can only have string keys, and will
+				 * automatically coerce integers to strings when looking up
+				 * values. Thus, we need to create a new table with any integer
+				 * keys converted into strings, lest those values be
+				 * inaccessible.
+				 */
+				zend_hash_init(obj_ht, zend_hash_num_elements(ht), NULL, ZVAL_PTR_DTOR, 0);
+
+				ZEND_HASH_FOREACH_KEY_VAL(ht, num_key, str_key, zv) {
+					if (!str_key) {
+						str_key = zend_long_to_str(num_key);
+						zend_string_delref(str_key);
+					}
+					Z_TRY_ADDREF_P(zv);
+					zend_hash_add_new(obj_ht, str_key, zv);
+				} ZEND_HASH_FOREACH_END();
+
+				if (!Z_IMMUTABLE_P(op)) {
+					zval_ptr_dtor(op);
 				}
-				object_and_properties_init(op, zend_standard_class_def, ht);
+
+				object_and_properties_init(op, zend_standard_class_def, obj_ht);
 				break;
 			}
 		case IS_OBJECT:
diff --git a/ext/reflection/tests/bug61388.phpt b/ext/reflection/tests/bug61388.phpt
index 75c0300151c1..422ecb584dd6 100644
--- a/ext/reflection/tests/bug61388.phpt
+++ b/ext/reflection/tests/bug61388.phpt
@@ -7,10 +7,6 @@ $x[0] = 'test string 2';
 $x['test'] = 'test string 3';
 $reflObj = new ReflectionObject($x);
 print_r($reflObj->getProperties(ReflectionProperty::IS_PUBLIC));
-
-$x = (object)array("a", "oo" => "b");
-$reflObj = new ReflectionObject($x);
-print_r($reflObj->getProperties(ReflectionProperty::IS_PUBLIC));
 --EXPECT--
 Array
 (
@@ -21,12 +17,3 @@ Array
         )
 
 )
-Array
-(
-    [0] => ReflectionProperty Object
-        (
-            [name] => oo
-            [class] => stdClass
-        )
-
-)
diff --git a/ext/spl/tests/arrayObject___construct_basic7.phpt b/ext/spl/tests/arrayObject___construct_basic7.phpt
index 2474b38ce63b..dd10b5fb6b99 100644
--- a/ext/spl/tests/arrayObject___construct_basic7.phpt
+++ b/ext/spl/tests/arrayObject___construct_basic7.phpt
@@ -18,17 +18,17 @@ array(2) {
   int(1)
 }
 object(stdClass)#1 (2) {
-  [1]=>
+  ["1"]=>
   int(1)
-  [0]=>
+  ["0"]=>
   int(2)
 }
 object(ArrayObject)#2 (1) {
   ["storage":"ArrayObject":private]=>
   object(stdClass)#1 (2) {
-    [1]=>
+    ["1"]=>
     int(1)
-    [0]=>
+    ["0"]=>
     int(2)
   }
 }
diff --git a/ext/standard/tests/array/var_export.phpt b/ext/standard/tests/array/var_export.phpt
deleted file mode 100644
index 8caf40789f3a..000000000000
--- a/ext/standard/tests/array/var_export.phpt
+++ /dev/null
@@ -1,13 +0,0 @@
---TEST--
-var_export() and objects with numeric indexes properties
---FILE--
-<?php
-$a = (object) array (1, 3, "foo" => "bar");
-var_export($a);
-?>
---EXPECT--
-stdClass::__set_state(array(
-   0 => 1,
-   1 => 3,
-   'foo' => 'bar',
-))
diff --git a/ext/standard/tests/general_functions/gettype_settype_basic.phpt b/ext/standard/tests/general_functions/gettype_settype_basic.phpt
index b2762fd83a31..b082fbf5f5b5 100644
--- a/ext/standard/tests/general_functions/gettype_settype_basic.phpt
+++ b/ext/standard/tests/general_functions/gettype_settype_basic.phpt
@@ -740,11 +740,11 @@ string(5) "array"
 -- Iteration 1 --
 bool(true)
 object(stdClass)#2 (3) {
-  [0]=>
+  ["0"]=>
   int(1)
-  [1]=>
+  ["1"]=>
   int(2)
-  [2]=>
+  ["2"]=>
   int(3)
 }
 string(6) "object"
@@ -758,11 +758,11 @@ string(6) "object"
 -- Iteration 3 --
 bool(true)
 object(stdClass)#2 (3) {
-  [0]=>
+  ["0"]=>
   int(2)
-  [1]=>
+  ["1"]=>
   int(3)
-  [2]=>
+  ["2"]=>
   int(4)
 }
 string(6) "object"
diff --git a/ext/standard/tests/general_functions/type.phpt b/ext/standard/tests/general_functions/type.phpt
index eb6f0672fea0..4d9f8620f892 100644
--- a/ext/standard/tests/general_functions/type.phpt
+++ b/ext/standard/tests/general_functions/type.phpt
@@ -265,11 +265,11 @@ array(0) {
 }
 bool(true)
 object(stdClass)#%d (3) {
-  [0]=>
+  ["0"]=>
   int(1)
-  [1]=>
+  ["1"]=>
   int(2)
-  [2]=>
+  ["2"]=>
   int(3)
 }
 bool(true)
@@ -279,11 +279,11 @@ object(stdClass)#%d (1) {
 }
 bool(true)
 object(stdClass)#%d (3) {
-  [0]=>
+  ["0"]=>
   int(2)
-  [1]=>
+  ["1"]=>
   int(3)
-  [2]=>
+  ["2"]=>
   int(4)
 }
 bool(true)
