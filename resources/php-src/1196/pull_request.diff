diff --git a/Zend/zend_interfaces.c b/Zend/zend_interfaces.c
index 7f57a6abddea..650e7ecaf3bf 100644
--- a/Zend/zend_interfaces.c
+++ b/Zend/zend_interfaces.c
@@ -29,9 +29,10 @@ ZEND_API zend_class_entry *zend_ce_iterator;
 ZEND_API zend_class_entry *zend_ce_arrayaccess;
 ZEND_API zend_class_entry *zend_ce_serializable;
 
+
 /* {{{ zend_call_method
  Only returns the returned zval if retval_ptr != NULL */
-ZEND_API zval* zend_call_method(zval **object_pp, zend_class_entry *obj_ce, zend_function **fn_proxy, const char *function_name, int function_name_len, zval **retval_ptr_ptr, int param_count, zval* arg1, zval* arg2 TSRMLS_DC)
+ZEND_API zval* zend_call_method_params(zval **object_pp, zend_class_entry *obj_ce, zend_function **fn_proxy, const char *function_name, int function_name_len, zval **retval_ptr_ptr, int param_count, zval ***params TSRMLS_DC)
 {
 	int result;
 	zend_fcall_info fci;
@@ -39,11 +40,6 @@ ZEND_API zval* zend_call_method(zval **object_pp, zend_class_entry *obj_ce, zend
 	zval *retval;
 	HashTable *function_table;
 
-	zval **params[2];
-
-	params[0] = &arg1;
-	params[1] = &arg2;
-
 	fci.size = sizeof(fci);
 	/*fci.function_table = NULL; will be read form zend_class_entry of object if needed */
 	fci.object_ptr = object_pp ? *object_pp : NULL;
@@ -115,6 +111,25 @@ ZEND_API zval* zend_call_method(zval **object_pp, zend_class_entry *obj_ce, zend
 }
 /* }}} */
 
+
+/* {{{ zend_call_method
+ Only returns the returned zval if retval_ptr != NULL */
+ZEND_API zval* zend_call_method(zval **object_pp, zend_class_entry *obj_ce, zend_function **fn_proxy, const char *function_name, int function_name_len, zval **retval_ptr_ptr, int param_count, zval* arg1, zval* arg2 TSRMLS_DC)
+{
+
+	zval **params[2];
+
+	params[0] = &arg1;
+	params[1] = &arg2;
+
+	return zend_call_method_params(
+		object_pp, obj_ce, fn_proxy, function_name, function_name_len,
+		retval_ptr_ptr, param_count, params TSRMLS_CC
+	);
+
+}
+/* }}} */
+
 /* iterator interface, c-level functions used by engine */
 
 /* {{{ zend_user_it_new_iterator */
diff --git a/Zend/zend_interfaces.h b/Zend/zend_interfaces.h
index f405ce9bcd18..51ce1f98e8e8 100644
--- a/Zend/zend_interfaces.h
+++ b/Zend/zend_interfaces.h
@@ -49,6 +49,9 @@ ZEND_API zval* zend_call_method(zval **object_pp, zend_class_entry *obj_ce, zend
 #define zend_call_method_with_2_params(obj, obj_ce, fn_proxy, function_name, retval, arg1, arg2) \
 	zend_call_method(obj, obj_ce, fn_proxy, function_name, sizeof(function_name)-1, retval, 2, arg1, arg2 TSRMLS_CC)
 
+#define zend_call_method_with_params(obj, obj_ce, fn_proxy, function_name, retval, num_params, params) \
+	zend_call_method_params(obj, obj_ce, fn_proxy, function_name, sizeof(function_name)-1, retval, num_params, params TSRMLS_CC)
+
 ZEND_API void zend_user_it_rewind(zend_object_iterator *_iter TSRMLS_DC);
 ZEND_API int zend_user_it_valid(zend_object_iterator *_iter TSRMLS_DC);
 ZEND_API void zend_user_it_get_current_key(zend_object_iterator *_iter, zval *key TSRMLS_DC);
diff --git a/ext/spl/spl_directory.c b/ext/spl/spl_directory.c
index 34f0415b5334..3fe93dda4bdb 100644
--- a/ext/spl/spl_directory.c
+++ b/ext/spl/spl_directory.c
@@ -468,9 +468,14 @@ static spl_filesystem_object * spl_filesystem_object_create_type(int ht, spl_fil
 {
 	spl_filesystem_object *intern;
 	zend_bool use_include_path = 0;
-	zval *arg1, *arg2;
+	zval *arg1, *arg2, *arg3, *arg4;
 	zend_error_handling error_handling;
 
+	char    *open_mode = NULL;
+	int     open_mode_len = 0;
+	zval    *zcontext = NULL;
+	zval    **construct_params[4];
+
 	zend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);
 
 	switch (source->type) {
@@ -514,43 +519,52 @@ static spl_filesystem_object * spl_filesystem_object_create_type(int ht, spl_fil
 
 		return_value->value.obj = spl_filesystem_object_new_ex(ce, &intern TSRMLS_CC);
 		Z_TYPE_P(return_value) = IS_OBJECT;
-	
+
 		spl_filesystem_object_get_file_name(source TSRMLS_CC);
 
-		if (ce->constructor->common.scope != spl_ce_SplFileObject) {
-			MAKE_STD_ZVAL(arg1);
-			MAKE_STD_ZVAL(arg2);
-			ZVAL_STRINGL(arg1, source->file_name, source->file_name_len, 1);
+		if (ht && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|sbr!", 
+				&open_mode, &open_mode_len,
+				&use_include_path, &zcontext) == FAILURE) {
+			zend_restore_error_handling(&error_handling TSRMLS_CC);
+			intern->u.file.open_mode = NULL;
+			intern->file_name = NULL;
+			zval_dtor(return_value);
+			Z_TYPE_P(return_value) = IS_NULL;
+			return NULL;
+		}
+
+		MAKE_STD_ZVAL(arg1);
+		ZVAL_STRINGL(arg1, source->file_name, source->file_name_len, 1);
+		MAKE_STD_ZVAL(arg2);
+		if (open_mode != NULL) {
+			ZVAL_STRINGL(arg2, open_mode, open_mode_len, 1);
+		}
+		else {
 			ZVAL_STRINGL(arg2, "r", 1, 1);
-			zend_call_method_with_2_params(&return_value, ce, &ce->constructor, "__construct", NULL, arg1, arg2);
-			zval_ptr_dtor(&arg1);
-			zval_ptr_dtor(&arg2);
-		} else {
-			intern->file_name = source->file_name;
-			intern->file_name_len = source->file_name_len;
-			intern->_path = spl_filesystem_object_get_path(source, &intern->_path_len TSRMLS_CC);
-			intern->_path = estrndup(intern->_path, intern->_path_len);
-		
-			intern->u.file.open_mode = "r";
-			intern->u.file.open_mode_len = 1;
-		
-			if (ht && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "|sbr", 
-					&intern->u.file.open_mode, &intern->u.file.open_mode_len, 
-					&use_include_path, &intern->u.file.zcontext) == FAILURE) {
-				zend_restore_error_handling(&error_handling TSRMLS_CC);
-				intern->u.file.open_mode = NULL;
-				intern->file_name = NULL;
-				zval_dtor(return_value);
-				Z_TYPE_P(return_value) = IS_NULL;
-				return NULL;
-			}
-		
-			if (spl_filesystem_file_open(intern, use_include_path, 0 TSRMLS_CC) == FAILURE) {
-				zend_restore_error_handling(&error_handling TSRMLS_CC);
-				zval_dtor(return_value);
-				Z_TYPE_P(return_value) = IS_NULL;
-				return NULL;
-			}
+		}
+
+		MAKE_STD_ZVAL(arg3);
+		ZVAL_BOOL(arg3, use_include_path);
+
+		if (zcontext != NULL) {
+			arg4 = zcontext;
+		}
+		else {
+			MAKE_STD_ZVAL(arg4);
+			ZVAL_NULL(arg4);
+		}
+
+		construct_params[0] = &arg1;
+		construct_params[1] = &arg2;
+		construct_params[2] = &arg3;
+		construct_params[3] = &arg4;
+
+		zend_call_method_with_params(&return_value, ce, &ce->constructor, "__construct", NULL, 4, construct_params);
+		zval_ptr_dtor(&arg1);
+		zval_ptr_dtor(&arg2);
+		zval_ptr_dtor(&arg3);
+		if (zcontext != NULL) {
+			zval_ptr_dtor(&arg4);
 		}
 		break;
 	case SPL_FS_DIR:	
diff --git a/ext/spl/spl_heap.c b/ext/spl/spl_heap.c
index 02833074fa06..fa40ac66b19d 100644
--- a/ext/spl/spl_heap.c
+++ b/ext/spl/spl_heap.c
@@ -1039,17 +1039,23 @@ SPL_METHOD(SplHeap, rewind)
 SPL_METHOD(SplHeap, current)
 {
 	spl_heap_object *intern  = (spl_heap_object*)zend_object_store_get_object(getThis() TSRMLS_CC);
-	zval            *element = (zval *)intern->heap->elements[0];
-	
+	zval            *element;
+
 	if (zend_parse_parameters_none() == FAILURE) {
 		return;
 	}
 
-	if (!intern->heap->count || !element) {
+	if (!intern->heap->count) {
+		RETURN_NULL();
+	}
+
+	element = (zval *)intern->heap->elements[0];
+
+	if (!element) {
 		RETURN_NULL();
-	} else {
-		RETURN_ZVAL(element, 1, 0);
 	}
+
+	RETURN_ZVAL(element, 1, 0);
 }
 /* }}} */
 
diff --git a/ext/spl/tests/bug69275.phpt b/ext/spl/tests/bug69275.phpt
new file mode 100644
index 000000000000..0cfe5dbed73a
--- /dev/null
+++ b/ext/spl/tests/bug69275.phpt
@@ -0,0 +1,63 @@
+--TEST--
+SPL: Inheritance of SplFileObject, SplFileInfo misses constructor code.
+--FILE--
+<?php
+
+class TestFileObject extends \SplFileObject {
+    public function __construct($file_name, $open_mode = 'r', $use_include_path = false, $context = null) {
+        if (is_resource($context)) {
+            parent::__construct($file_name, $open_mode, $use_include_path, $context);
+        }
+        else {
+            parent::__construct($file_name, $open_mode, $use_include_path);
+        }
+    }
+}
+
+class TestFileInfo extends \SplFileInfo {
+    function __construct($file_name) {
+        parent::__construct($file_name);
+    } 
+}
+
+$filename = dirname(__FILE__) . '/foo.temp';
+
+//Test that the fileInfo to fileObject works
+$fileInfo = new SplFileInfo($filename);
+$fileInfo->setFileClass('TestFileObject');
+$fileInstance = $fileInfo->openFile('w+');
+
+if (!($fileInstance instanceof TestFileObject)) {
+    echo "Incorrect type of fileInstance ".get_class($fileInstance).PHP_EOL;
+}
+
+
+$filename2 = dirname(__FILE__) . '/foo2.temp';
+//Test that the fileObject to fileInfo works
+$fileObject = new SplFileObject($filename2, 'w+');
+$fileObject->setInfoClass('TestFileInfo');
+$fileInfo = $fileObject->getFileInfo();
+
+if (!($fileInfo instanceof TestFileInfo)) {
+echo "Incorrect type of fileInfo ".get_class($fileInstance).PHP_EOL;
+}
+
+$fsIterator = new FilesystemIterator( dirname(__FILE__), FilesystemIterator::SKIP_DOTS);
+$fsIterator->setInfoClass('TestFileInfo');
+$fsIterator->setFileClass('TestFileObject');
+foreach ($fsIterator as $fsEntry) {
+    if (!($fsEntry instanceof TestFileInfo)) {
+        echo "Incorrect type of fileInfo ".get_class($fsEntry).PHP_EOL;
+    }
+}
+
+?>
+===DONE===
+--CLEAN--
+<?php
+unlink(dirname(__FILE__) . '/foo.temp');
+unlink(dirname(__FILE__) . '/foo2.temp');
+?>
+--EXPECT--
+
+===DONE===
diff --git a/ext/spl/tests/dit_004.phpt b/ext/spl/tests/dit_004.phpt
index 4ad0e4b772ca..d71634b40956 100644
--- a/ext/spl/tests/dit_004.phpt
+++ b/ext/spl/tests/dit_004.phpt
@@ -4,21 +4,36 @@ SPL: DirectoryIterator and clone
 <?php
 $a = new DirectoryIterator(__DIR__);
 $b = clone $a;
-var_dump((string)$b == (string)$a);
+
+$bValue = (string)$b;
+$aValue = (string)$a;
+if ($aValue != $bValue) {
+	echo "aValue and bValue should be the same".PHP_EOL;
+	echo $aValue.PHP_EOL;
+	echo $bValue.PHP_EOL;
+}
+
 var_dump($a->key(), $b->key());
 $a->next();
 $a->next();
 $a->next();
 $c = clone $a;
-var_dump((string)$c == (string)$a);
+
+$cValue = (string)$c;
+$aValue = (string)$a;
+if ($aValue != $cValue) {
+	echo "aValue and cValue should be the same".PHP_EOL;
+	echo $aValue.PHP_EOL;
+	echo $cValue.PHP_EOL;
+}
+
 var_dump($a->key(), $c->key());
+
 ?>
 ===DONE===
 --EXPECTF--
-bool(true)
 int(0)
 int(0)
-bool(true)
 int(3)
 int(3)
 ===DONE===
diff --git a/ext/spl/tests/dit_005.phpt b/ext/spl/tests/dit_005.phpt
index 52a335172fbb..1d9ab7b57505 100644
--- a/ext/spl/tests/dit_005.phpt
+++ b/ext/spl/tests/dit_005.phpt
@@ -4,19 +4,44 @@ SPL: FilesystemIterator and clone
 <?php
 $a = new FileSystemIterator(__DIR__);
 $b = clone $a;
-var_dump((string)$b == (string)$a);
-var_dump($a->key() == $b->key());
+$bValue = (string)$b;
+$aValue = (string)$a;
+if ($aValue != $bValue) {
+	echo "aValue and bValue should be the same".PHP_EOL;
+	echo $aValue.PHP_EOL;
+	echo $bValue.PHP_EOL;
+}
+
+$aKey = $a->key();
+$bKey = $b->key();
+if ($aKey != $bKey) {
+	echo "aKey and bKey should be the same".PHP_EOL;
+	echo $aKey.PHP_EOL;
+	echo $bKey.PHP_EOL;
+}
+
 $a->next();
 $a->next();
 $a->next();
+
 $c = clone $a;
-var_dump((string)$c == (string)$a);
-var_dump($a->key() == $c->key());
+
+$cValue = (string)$c;
+$aValue = (string)$a;
+if ($aValue != $cValue) {
+	echo "aValue and cValue should be the same".PHP_EOL;
+	echo $aValue.PHP_EOL;
+	echo $cValue.PHP_EOL;
+}
+
+$aKey = $a->key();
+$cKey = $c->key();
+if ($aKey != $cKey) {
+	echo "aKey and cKey should be the same".PHP_EOL;
+	echo $aKey.PHP_EOL;
+	echo $cKey.PHP_EOL;
+}
 ?>
 ===DONE===
 --EXPECTF--
-bool(true)
-bool(true)
-bool(true)
-bool(true)
 ===DONE===
