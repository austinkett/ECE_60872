diff --git a/Zend/tests/bug62358.phpt b/Zend/tests/bug62358.phpt
index 35bbc33835b0..8509383d4694 100644
--- a/Zend/tests/bug62358.phpt
+++ b/Zend/tests/bug62358.phpt
@@ -23,4 +23,4 @@ class B extends A {
 }
 ?>
 --EXPECTF--
-Fatal error: Declaration of B::foo($var) must be compatible with I::foo() in %sbug62358.php on line 17
+Fatal error: Declaration of B::foo($var) must be compatible with A::foo() in %sbug62358.php on line 17
diff --git a/Zend/tests/bug73987.phpt b/Zend/tests/bug73987.phpt
new file mode 100644
index 000000000000..610b594a6442
--- /dev/null
+++ b/Zend/tests/bug73987.phpt
@@ -0,0 +1,18 @@
+--TEST--
+Bug #73987 (Method compatibility check looks to original definition and not parent - nullability interface)
+--FILE--
+<?php
+
+interface I {
+  public function example($a, $b, $c);
+}
+class A implements I {
+  public function example($a, $b = null, $c = null) { } // compatible with I::example
+}
+class B extends A {
+  public function example($a, $b, $c = null) { } // compatible with I::example
+}
+
+?>
+--EXPECTF--
+Fatal error: Declaration of B::example($a, $b, $c = NULL) must be compatible with A::example($a, $b = NULL, $c = NULL) in %s
diff --git a/Zend/tests/bug73987_1.phpt b/Zend/tests/bug73987_1.phpt
new file mode 100644
index 000000000000..010987ea5f67
--- /dev/null
+++ b/Zend/tests/bug73987_1.phpt
@@ -0,0 +1,18 @@
+--TEST--
+Bug #73987 (Method compatibility check looks to original definition and not parent - return types interface)
+--FILE--
+<?php
+
+interface I {
+  public function example();
+}
+class A implements I {
+  public function example(): int { } // compatible with I::example
+}
+class B extends A {
+  public function example(): string { } // compatible with I::example
+}
+
+?>
+--EXPECTF--
+Fatal error: Declaration of B::example(): string must be compatible with A::example(): int in %s
diff --git a/Zend/tests/bug73987_2.phpt b/Zend/tests/bug73987_2.phpt
new file mode 100644
index 000000000000..a70f1455e893
--- /dev/null
+++ b/Zend/tests/bug73987_2.phpt
@@ -0,0 +1,20 @@
+--TEST--
+Bug #73987 (Method compatibility check looks to original definition and not parent - nullabilty abstract)
+--FILE--
+<?php
+
+abstract class A {
+    abstract function example($a, $b, $c);
+}
+
+class B extends A {
+    function example($a, $b = null, $c = null) { }
+}
+
+class C extends B {
+    function example($a, $b, $c = null) { }
+}
+
+?>
+--EXPECTF--
+Fatal error: Declaration of C::example($a, $b, $c = NULL) must be compatible with B::example($a, $b = NULL, $c = NULL) in %s
diff --git a/Zend/tests/bug73987_3.phpt b/Zend/tests/bug73987_3.phpt
new file mode 100644
index 000000000000..89e4686ed6f5
--- /dev/null
+++ b/Zend/tests/bug73987_3.phpt
@@ -0,0 +1,20 @@
+--TEST--
+Bug #73987 (Method compatibility check looks to original definition and not parent - return types abstract)
+--FILE--
+<?php
+
+abstract class A {
+    abstract function example();
+}
+
+class B extends A {
+    function example(): int  { }
+}
+
+class C extends B {
+    function example(): string { }
+}
+
+?>
+--EXPECTF--
+Fatal error: Declaration of C::example(): string must be compatible with B::example(): int in %s
diff --git a/Zend/zend_inheritance.c b/Zend/zend_inheritance.c
index 9f64162e814a..f3cb81cf411c 100644
--- a/Zend/zend_inheritance.c
+++ b/Zend/zend_inheritance.c
@@ -586,13 +586,12 @@ static void do_inheritance_check_on_method(zend_function *child, zend_function *
 	} else if (!(parent->common.fn_flags & ZEND_ACC_CTOR) || (parent->common.prototype && (parent->common.prototype->common.scope->ce_flags & ZEND_ACC_INTERFACE))) {
 		/* ctors only have a prototype if it comes from an interface */
 		child->common.prototype = parent->common.prototype ? parent->common.prototype : parent;
+		/* and if that is the case, we want to check inheritance against it */
+		if (parent->common.fn_flags & ZEND_ACC_CTOR) {
+			parent = child->common.prototype;
+		}
 	}
 
-	if (child->common.prototype && (
-		child->common.prototype->common.fn_flags & ZEND_ACC_ABSTRACT
-	)) {
-		parent = child->common.prototype;
-	}
 	if (UNEXPECTED(!zend_do_perform_implementation_check(child, parent))) {
 		int error_level;
 		const char *error_verb;
