diff --git a/ext/openssl/openssl.c b/ext/openssl/openssl.c
index 9c4131f608a1..0c70b4e70fc1 100644
--- a/ext/openssl/openssl.c
+++ b/ext/openssl/openssl.c
@@ -54,6 +54,8 @@
 /* Common */
 #include <time.h>
 
+ZEND_DECLARE_MODULE_GLOBALS(openssl);
+
 #ifdef NETWARE
 #define timezone _timezone	/* timezone is called _timezone in LibC */
 #endif
@@ -482,7 +484,7 @@ zend_module_entry openssl_module_entry = {
 	PHP_MINIT(openssl),
 	PHP_MSHUTDOWN(openssl),
 	NULL,
-	NULL,
+	PHP_RSHUTDOWN(openssl),
 	PHP_MINFO(openssl),
 	NO_VERSION_YET,
 	STANDARD_MODULE_PROPERTIES
@@ -493,6 +495,11 @@ zend_module_entry openssl_module_entry = {
 ZEND_GET_MODULE(openssl)
 #endif
 
+static void php_openssl_init_globals(zend_openssl_globals *openssl_globals TSRMLS_DC)
+{
+	openssl_globals->ssl_error_glogal_context=NULL;
+}
+
 static int le_key;
 static int le_x509;
 static int le_csr;
@@ -807,6 +814,71 @@ static int add_oid_section(struct php_x509_request * req TSRMLS_DC) /* {{{ */
 
 static const EVP_CIPHER * php_openssl_get_evp_cipher_from_algo(long algo);
 
+static void php_openssl_store_errors(void)
+{
+		PHP_SSL_ERROR_QUEUE *err,*tmp;
+		char buf[512];
+		unsigned long val;
+
+		TSRMLS_FETCH();
+
+		/* Retrieve error from openssl error queue */
+		val = ERR_get_error();
+		if (val) {
+			err = emalloc(sizeof(PHP_SSL_ERROR_QUEUE));
+			err->next=NULL;
+			ERR_error_string(val, buf);
+			err->err_str=emalloc(strlen(buf)+1);
+			strcpy(err->err_str,buf);
+			ERR_clear_error();
+		}else{
+			return ;
+		}
+
+		/* initialize error context if is null */;
+		if(OPENSSL_G(ssl_error_glogal_context)==NULL) {
+			OPENSSL_G(ssl_error_glogal_context) = emalloc(sizeof(PHP_SSL_ERROR_CONTEXT));
+			OPENSSL_G(ssl_error_glogal_context)->current=NULL;
+		}
+
+		/* If error queue is empty, create the first */
+		if(OPENSSL_G(ssl_error_glogal_context)->current==NULL){
+			OPENSSL_G(ssl_error_glogal_context)->current=err;
+		}else{
+			/* Else, append error to last element */
+			tmp=OPENSSL_G(ssl_error_glogal_context)->current;
+			while(tmp->next!=NULL)
+			{
+				tmp=tmp->next;
+			}
+			tmp->next=err;
+		}
+
+}
+
+static void php_openssl_deinitialize_error_queue(void)
+{
+	PHP_SSL_ERROR_QUEUE *tmp;
+
+	TSRMLS_FETCH();
+
+	/* deinitialize error queue */
+	if(OPENSSL_G(ssl_error_glogal_context) != NULL  ){
+
+		/* Empty error */
+		while(OPENSSL_G(ssl_error_glogal_context)->current!=NULL){
+			tmp=OPENSSL_G(ssl_error_glogal_context)->current;
+			OPENSSL_G(ssl_error_glogal_context)->current=tmp->next;
+			efree(tmp->err_str);
+			efree(tmp);
+		}
+
+		efree(OPENSSL_G(ssl_error_glogal_context));
+		OPENSSL_G(ssl_error_glogal_context)=NULL;
+
+	}
+
+}
 
 static int php_openssl_parse_config(struct php_x509_request * req, zval * optional_args TSRMLS_DC) /* {{{ */
 {
@@ -1187,6 +1259,9 @@ PHP_MINIT_FUNCTION(openssl)
 	php_register_url_stream_wrapper("https", &php_stream_http_wrapper TSRMLS_CC);
 	php_register_url_stream_wrapper("ftps", &php_stream_ftp_wrapper TSRMLS_CC);
 	
+	ZEND_INIT_MODULE_GLOBALS(openssl, php_openssl_init_globals,	NULL);
+
+
 	return SUCCESS;
 }
 /* }}} */
@@ -1222,8 +1297,19 @@ PHP_MSHUTDOWN_FUNCTION(openssl)
 	/* reinstate the default tcp handler */
 	php_stream_xport_register("tcp", php_stream_generic_socket_factory TSRMLS_CC);
 
+
+	php_openssl_deinitialize_error_queue();
+
+	return SUCCESS;
+}
+
+
+PHP_RSHUTDOWN_FUNCTION(openssl)
+{
+	php_openssl_deinitialize_error_queue();
 	return SUCCESS;
 }
+
 /* }}} */
 
 /* {{{ x509 cert functions */
@@ -1412,6 +1498,7 @@ PHP_FUNCTION(openssl_x509_check_private_key)
 	}
 	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
 	if (cert == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}	
 	key = php_openssl_evp_from_zval(zkey, 0, "", 1, &keyresource TSRMLS_CC);
@@ -1518,6 +1605,7 @@ PHP_FUNCTION(openssl_x509_parse)
 	}
 	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
 	if (cert == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	array_init(return_value);
@@ -1613,6 +1701,7 @@ PHP_FUNCTION(openssl_x509_parse)
 					X509_free(cert);
 				}
 				BIO_free(bio_out);
+				php_openssl_store_errors();
 				RETURN_FALSE;
 			}
 		}
@@ -1848,6 +1937,7 @@ PHP_FUNCTION(openssl_x509_read)
 
 	if (x509 == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "supplied parameter cannot be coerced into an X509 certificate!");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 }
@@ -2720,6 +2810,7 @@ PHP_FUNCTION(openssl_csr_get_subject)
 	csr = php_openssl_csr_from_zval(zcsr, 0, &csr_resource TSRMLS_CC);
 
 	if (csr == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -2749,6 +2840,7 @@ PHP_FUNCTION(openssl_csr_get_public_key)
 	csr = php_openssl_csr_from_zval(zcsr, 0, &csr_resource TSRMLS_CC);
 
 	if (csr == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -3123,6 +3215,7 @@ PHP_FUNCTION(openssl_pkey_new)
 				}
 				EVP_PKEY_free(pkey);
 			}
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		} else if (zend_hash_find(Z_ARRVAL_P(args), "dsa", sizeof("dsa"), (void**)&data) == SUCCESS &&
 		           Z_TYPE_PP(data) == IS_ARRAY) {
@@ -3147,6 +3240,7 @@ PHP_FUNCTION(openssl_pkey_new)
 				}
 				EVP_PKEY_free(pkey);
 			}
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		} else if (zend_hash_find(Z_ARRVAL_P(args), "dh", sizeof("dh"), (void**)&data) == SUCCESS &&
 		           Z_TYPE_PP(data) == IS_ARRAY) {
@@ -3170,6 +3264,7 @@ PHP_FUNCTION(openssl_pkey_new)
 				}
 				EVP_PKEY_free(pkey);
 			}
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		}
 	} 
@@ -3211,10 +3306,12 @@ PHP_FUNCTION(openssl_pkey_export_to_file)
 
 	if (key == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "cannot get key from parameter 1");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	
 	if (php_openssl_open_base_dir_chk(filename TSRMLS_CC)) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	
@@ -3270,6 +3367,7 @@ PHP_FUNCTION(openssl_pkey_export)
 
 	if (key == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "cannot get key from parameter 1");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	
@@ -3325,6 +3423,7 @@ PHP_FUNCTION(openssl_pkey_get_public)
 	pkey = php_openssl_evp_from_zval(cert, 1, NULL, 1, &Z_LVAL_P(return_value) TSRMLS_CC);
 
 	if (pkey == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	zend_list_addref(Z_LVAL_P(return_value));
@@ -3362,6 +3461,7 @@ PHP_FUNCTION(openssl_pkey_get_private)
 	pkey = php_openssl_evp_from_zval(cert, 0, passphrase, 1, &Z_LVAL_P(return_value) TSRMLS_CC);
 
 	if (pkey == NULL) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	zend_list_addref(Z_LVAL_P(return_value));
@@ -3385,6 +3485,7 @@ PHP_FUNCTION(openssl_pkey_get_details)
 	}
 	ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, &key, -1, "OpenSSL key", le_key);
 	if (!pkey) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	out = BIO_new(BIO_s_mem());
@@ -3495,6 +3596,7 @@ PHP_FUNCTION(openssl_pbkdf2)
 	}
 
 	if (key_length <= 0) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -3506,6 +3608,7 @@ PHP_FUNCTION(openssl_pbkdf2)
 
 	if (!digest) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -3516,6 +3619,7 @@ PHP_FUNCTION(openssl_pbkdf2)
 		RETVAL_STRINGL((char *)out_buffer, key_length, 0);
 	} else {
 		efree(out_buffer);
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 }
@@ -3975,6 +4079,7 @@ PHP_FUNCTION(openssl_private_encrypt)
 
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "key param is not a valid private key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4033,6 +4138,7 @@ PHP_FUNCTION(openssl_private_decrypt)
 	pkey = php_openssl_evp_from_zval(key, 0, "", 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "key parameter is not a valid private key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4098,6 +4204,7 @@ PHP_FUNCTION(openssl_public_encrypt)
 	pkey = php_openssl_evp_from_zval(key, 1, NULL, 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "key parameter is not a valid public key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4157,6 +4264,7 @@ PHP_FUNCTION(openssl_public_decrypt)
 	pkey = php_openssl_evp_from_zval(key, 1, NULL, 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "key parameter is not a valid public key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4206,19 +4314,37 @@ PHP_FUNCTION(openssl_public_decrypt)
    Returns a description of the last error, and alters the index of the error messages. Returns false when the are no more messages */
 PHP_FUNCTION(openssl_error_string)
 {
-	char buf[512];
-	unsigned long val;
+	PHP_SSL_ERROR_QUEUE *tmp;
+	char *err_str;
 
 	if (zend_parse_parameters_none() == FAILURE) {
-		return;
+	    return;
 	}
 
-	val = ERR_get_error();
-	if (val) {
-		RETURN_STRING(ERR_error_string(val, buf), 1);
-	} else {
+	/* Return false if error queue is empty or not initialized */
+	if(OPENSSL_G(ssl_error_glogal_context) == NULL || OPENSSL_G(ssl_error_glogal_context)->current==NULL ){
 		RETURN_FALSE;
 	}
+
+	/* Get first error */
+	tmp=OPENSSL_G(ssl_error_glogal_context)->current;
+
+	/* Store error msg */
+	err_str=emalloc(strlen(tmp->err_str)+1);
+	strcpy(err_str,tmp->err_str);
+
+	/* Update references of the error queue */
+	if(tmp->next!=NULL){
+		OPENSSL_G(ssl_error_glogal_context)->current=tmp->next;
+	}else{
+		OPENSSL_G(ssl_error_glogal_context)->current=NULL;
+	}
+
+	/* Free memory of the current error */
+	efree(tmp->err_str);
+	efree(tmp);
+	RETURN_STRING(err_str,0);
+
 }
 /* }}} */
 
@@ -4244,6 +4370,7 @@ PHP_FUNCTION(openssl_sign)
 	pkey = php_openssl_evp_from_zval(key, 0, "", 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "supplied key param cannot be coerced into a private key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4256,10 +4383,12 @@ PHP_FUNCTION(openssl_sign)
 		mdtype = EVP_get_digestbyname(Z_STRVAL_P(method));
 	} else {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	if (!mdtype) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4312,16 +4441,19 @@ PHP_FUNCTION(openssl_verify)
 		mdtype = EVP_get_digestbyname(Z_STRVAL_P(method));
 	} else {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 	if (!mdtype) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
 	pkey = php_openssl_evp_from_zval(key, 1, NULL, 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "supplied key param cannot be coerced into a public key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4362,6 +4494,7 @@ PHP_FUNCTION(openssl_seal)
 	nkeys = pubkeysht ? zend_hash_num_elements(pubkeysht) : 0;
 	if (!nkeys) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Fourth argument to openssl_seal() must be a non-empty array");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4369,6 +4502,7 @@ PHP_FUNCTION(openssl_seal)
 		cipher = EVP_get_cipherbyname(method);
 		if (!cipher) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		}
 	} else {
@@ -4490,6 +4624,7 @@ PHP_FUNCTION(openssl_open)
 	pkey = php_openssl_evp_from_zval(privkey, 0, "", 0, &keyresource TSRMLS_CC);
 	if (pkey == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "unable to coerce parameter 4 into a private key");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4497,6 +4632,7 @@ PHP_FUNCTION(openssl_open)
 		cipher = EVP_get_cipherbyname(method);
 		if (!cipher) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm.");
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		}
 	} else {
@@ -4840,6 +4976,7 @@ PHP_FUNCTION(openssl_digest)
 	mdtype = EVP_get_digestbyname(method);
 	if (!mdtype) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown signature algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -4920,6 +5057,7 @@ PHP_FUNCTION(openssl_encrypt)
 	cipher_type = EVP_get_cipherbyname(method);
 	if (!cipher_type) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown cipher algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -5001,12 +5139,14 @@ PHP_FUNCTION(openssl_decrypt)
 
 	if (!method_len) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown cipher algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
 	cipher_type = EVP_get_cipherbyname(method);
 	if (!cipher_type) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown cipher algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -5014,6 +5154,7 @@ PHP_FUNCTION(openssl_decrypt)
 		base64_str = (char*)php_base64_decode((unsigned char*)data, data_len, &base64_str_len);
 		if (!base64_str) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Failed to base64 decode the input");
+			php_openssl_store_errors();
 			RETURN_FALSE;
 		}
 		data_len = base64_str_len;
@@ -5078,12 +5219,14 @@ PHP_FUNCTION(openssl_cipher_iv_length)
 
 	if (!method_len) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown cipher algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
 	cipher_type = EVP_get_cipherbyname(method);
 	if (!cipher_type) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unknown cipher algorithm");
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -5109,6 +5252,7 @@ PHP_FUNCTION(openssl_dh_compute_key)
 	}
 	ZEND_FETCH_RESOURCE(pkey, EVP_PKEY *, &key, -1, "OpenSSL key", le_key);
 	if (!pkey || EVP_PKEY_type(pkey->type) != EVP_PKEY_DH || !pkey->pkey.dh) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -5143,6 +5287,7 @@ PHP_FUNCTION(openssl_random_pseudo_bytes)
 	}
 
 	if (buffer_length <= 0) {
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 
@@ -5161,6 +5306,7 @@ PHP_FUNCTION(openssl_random_pseudo_bytes)
 		if (zstrong_result_returned) {
 			ZVAL_BOOL(zstrong_result_returned, 0);
 		}
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 #else
@@ -5169,6 +5315,7 @@ PHP_FUNCTION(openssl_random_pseudo_bytes)
 		if (zstrong_result_returned) {
 			ZVAL_BOOL(zstrong_result_returned, 0);
 		}
+		php_openssl_store_errors();
 		RETURN_FALSE;
 	}
 #endif
diff --git a/ext/openssl/php_openssl.h b/ext/openssl/php_openssl.h
index 86d83b736816..fec809fba598 100644
--- a/ext/openssl/php_openssl.h
+++ b/ext/openssl/php_openssl.h
@@ -19,6 +19,10 @@
 
 /* $Id$ */
 
+
+
+#include "zend.h"
+
 #ifndef PHP_OPENSSL_H
 #define PHP_OPENSSL_H
 /* HAVE_OPENSSL would include SSL MySQL stuff */
@@ -33,6 +37,7 @@ php_stream_transport_factory_func php_openssl_ssl_socket_factory;
 
 PHP_MINIT_FUNCTION(openssl);
 PHP_MSHUTDOWN_FUNCTION(openssl);
+PHP_RSHUTDOWN_FUNCTION(openssl);
 PHP_MINFO_FUNCTION(openssl);
 
 PHP_FUNCTION(openssl_pkey_get_private);
@@ -86,7 +91,29 @@ PHP_FUNCTION(openssl_csr_get_public_key);
 #endif
 
 #endif
+typedef struct php_ssl_error{
+	 char *err_str;
+	 struct php_ssl_error* next;
+}PHP_SSL_ERROR_QUEUE ;
+
+
+typedef struct php_ssl_error_context{
+	struct php_ssl_error* current;
+}PHP_SSL_ERROR_CONTEXT;
+
+#ifdef ZTS
+#include "TSRM.h"
+#endif
+
+ZEND_BEGIN_MODULE_GLOBALS(openssl)
+	PHP_SSL_ERROR_CONTEXT *ssl_error_glogal_context;
+ZEND_END_MODULE_GLOBALS(openssl)
 
+#ifdef ZTS
+#define OPENSSL_G(v) TSRMG(openssl_globals_id, zend_openssl_globals *, v)
+#else
+#define OPENSSL_G(v) (openssl_globals.v)
+#endif
 /*
  * Local variables:
  * tab-width: 4
diff --git a/ext/openssl/tests/bug68276.phpt b/ext/openssl/tests/bug68276.phpt
new file mode 100644
index 000000000000..b513978720f0
--- /dev/null
+++ b/ext/openssl/tests/bug68276.phpt
@@ -0,0 +1,28 @@
+--TEST--
+Fixed Bug #68276 Reproducible memory corruption: openssl extension
+--SKIPIF--
+<?php include(__DIR__."/../../../ext/pgsql/tests/skipif_ssl.inc"); ?>
+--FILE--
+<?php
+include(__DIR__."/../../../ext/pgsql/tests/config_ssl.inc");
+
+$conn = pg_connect($conn_str);
+
+openssl_pkey_get_public('a');
+
+$sql="SELECT repeat('a', 160000)";
+
+if ($r = pg_query($sql))
+        echo "OK\n";
+else
+        echo pg_last_error($conn);
+
+
+while ($msg = openssl_error_string())
+    echo $msg;
+
+
+?>
+--EXPECT--
+OK
+error:0906D06C:PEM routines:PEM_read_bio:no start line
diff --git a/ext/pgsql/tests/config_ssl.inc b/ext/pgsql/tests/config_ssl.inc
new file mode 100644
index 000000000000..54ec7cee03f5
--- /dev/null
+++ b/ext/pgsql/tests/config_ssl.inc
@@ -0,0 +1,15 @@
+<?php
+
+// These vars are used to connect db and create test table.
+// values can be set to meet your environment with the
+// environment var PGSQL_TEST_CONNSTR
+
+$conn_str = getenv('PGSQL_SSL_TEST_CONNSTR') ?: "host=localhost dbname=test port=5432 sslmode='require'";    // connection string
+
+$table_name = "php_pgsql_test";  // test table that should be exist
+$num_test_record = 1000;         // Number of records to create
+
+$table_def = "CREATE TABLE php_pgsql_test (num int, str text, bin bytea);"; // Test table 
+$field_name = "num";             // For pg_field_num()
+
+?>
diff --git a/ext/pgsql/tests/skipif_ssl.inc b/ext/pgsql/tests/skipif_ssl.inc
new file mode 100644
index 000000000000..12bcd17790d5
--- /dev/null
+++ b/ext/pgsql/tests/skipif_ssl.inc
@@ -0,0 +1,45 @@
+<?php
+// This script prints "skip" unless:
+// * the pgsql extension is built-in or loadable, AND
+// * there is a database called "test" accessible
+//   with no username/password, AND
+// * we have create/drop privileges on the entire "test"
+//   database
+
+include("config_ssl.inc");
+include("lcmess.inc");
+
+if (!extension_loaded("pgsql")) {
+    die("skip\n");
+}
+$conn = @pg_connect($conn_str);
+if (!is_resource($conn)) {
+    die("skip could not connect\n");
+}
+
+function skip_server_version($version, $op = '<')
+{
+	$pg = pg_parameter_status('server_version');
+	if (version_compare($pg, $version, $op)) {
+		die("skip Server version {$pg} is {$op} {$version}\n");
+	}
+	return $pg;
+}
+
+function skip_bytea_not_hex()
+{
+	$out = pg_escape_bytea("\xFF");
+	if (strpos($out, '377') !== false) {
+		die("skip libpq or backend < 9.0\n");
+	}
+}
+
+function skip_bytea_not_escape()
+{
+	$out = pg_escape_bytea("\xFF");
+	if (strpos($out, '377') === false) {
+		die("skip libpq or backend >= 9.0\n");
+	}
+}
+
+?>
