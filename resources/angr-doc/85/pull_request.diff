diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x04/crackme0x04 b/examples/CSCI-4968-MBE/challenges/crackme0x04/crackme0x04
new file mode 100755
index 0000000..9109e4b
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x04/crackme0x04 differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x04/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x04/solve.py
new file mode 100755
index 0000000..e162a5b
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x04/solve.py
@@ -0,0 +1,109 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+# from IPython import embed # pop iPython at the end
+
+def main():
+	proj = angr.Project('crackme0x04', load_options={"auto_load_libs": False}) 
+
+	cfg = proj.analyses.CFG()
+	FIND_ADDR = cfg.kb.functions.function(name="exit").addr
+	AVOID_ADDR = 0x080484fb # dword [esp] = str.Password_Incorrect__n ; [0x8048649:4]=0x73736150 LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
+
+	path_group = proj.factory.path_group()
+	path_group.explore(find=FIND_ADDR, avoid=AVOID_ADDR)
+
+	# embed()
+	print path_group.found[0].state.posix.dumps(1) 
+	return path_group.found[0].state.posix.dumps(0) # .lstrip('+0').rstrip('B')
+
+def test():
+	assert main() == ''
+
+if __name__ == '__main__':
+	print(repr(main()))
+
+"""
+[0x080483d0]> pdf @ main   
+            ;-- main:
+╒ (fcn) sym.main 92
+│           ; var int local_78h @ ebp-0x78
+│           ; var int arg_4h @ esp+0x4
+│           ; UNKNOWN XREF from 0x080483e8 (entry0)
+│           ; DATA XREF from 0x080483e7 (entry0)
+│           0x08048509      55             push ebp
+│           0x0804850a      89e5           ebp = esp
+│           0x0804850c      81ec88000000   esp -= 0x88
+│           0x08048512      83e4f0         esp &= 0xfffffff0
+│           0x08048515      b800000000     eax = 0
+│           0x0804851a      83c00f         eax += 0xf
+│           0x0804851d      83c00f         eax += 0xf
+│           0x08048520      c1e804         eax >>>= 4
+│           0x08048523      c1e004         eax <<<= 4
+│           0x08048526      29c4           esp -= eax
+│           0x08048528      c704245e8604.  dword [esp] = str.IOLI_Crackme_Level_0x04_n ; [0x804865e:4]=0x494c4f49 LEA str.IOLI_Crackme_Level_0x04_n ; "IOLI Crackme Level 0x04." @ 0x804865e
+│           0x0804852f      e860feffff     sym.imp.printf ()
+│           0x08048534      c70424778604.  dword [esp] = str.Password: ; [0x8048677:4]=0x73736150 LEA str.Password: ; "Password: " @ 0x8048677
+│           0x0804853b      e854feffff     sym.imp.printf ()
+│           0x08048540      8d4588         eax = [ebp - local_78h]
+│           0x08048543      89442404       dword [esp + arg_4h] = eax
+│           0x08048547      c70424828604.  dword [esp] = 0x8048682     ; [0x8048682:4]=0x7325 ; "%s" @ 0x8048682
+│           0x0804854e      e821feffff     sym.imp.scanf ()
+│           0x08048553      8d4588         eax = [ebp - local_78h]
+│           0x08048556      890424         dword [esp] = eax
+│           0x08048559      e826ffffff     sym.check ()
+│           0x0804855e      b800000000     eax = 0
+│           0x08048563      c9             
+╘           0x08048564      c3             
+[0x080483d0]> pdf @ sym.check   
+╒ (fcn) sym.check 133
+│           ; arg int arg_8h @ ebp+0x8
+│           ; arg int arg_fh @ ebp+0xf
+│           ; arg int arg_13h @ ebp+0x13
+│           ; var int arg_4h @ esp+0x4
+│           ; var int arg_8h @ esp+0x8
+│           ; CALL XREF from 0x08048559 (sym.main)
+│           0x08048484      55             push ebp
+│           0x08048485      89e5           ebp = esp
+│           0x08048487      83ec28         esp -= 0x28
+│           0x0804848a      c745f8000000.  dword [ebp - local_8h] = 0
+│           0x08048491      c745f4000000.  dword [ebp - local_ch] = 0
+│           ; JMP XREF from 0x080484f9 (sym.check)
+│       ┌─> 0x08048498      8b4508         eax = dword [ebp + arg_8h]  ; [0x8:4]=0
+│       │   0x0804849b      890424         dword [esp] = eax
+│       │   0x0804849e      e8e1feffff     sym.imp.strlen ()
+│       │   0x080484a3      3945f4         if (dword [ebp - local_ch] == eax ; [0x13:4]=256
+│      ┌──< 0x080484a6      7353           jae 0x80484fb 
+│      ││   0x080484a8      8b45f4         eax = dword [ebp - local_ch]
+│      ││   0x080484ab      034508         eax += dword [ebp + arg_8h]
+│      ││   0x080484ae      0fb600         eax = byte [eax]
+│      ││   0x080484b1      8845f3         byte [ebp - local_dh] = al
+│      ││   0x080484b4      8d45fc         eax = [ebp - local_4h]
+│      ││   0x080484b7      89442408       dword [esp + arg_8h] = eax
+│      ││   0x080484bb      c74424043886.  dword [esp + arg_4h] = 0x8048638 ; [0x8048638:4]=0x50006425 ; "%d" @ 0x8048638
+│      ││   0x080484c3      8d45f3         eax = [ebp - local_dh]
+│      ││   0x080484c6      890424         dword [esp] = eax
+│      ││   0x080484c9      e8d6feffff     sym.imp.sscanf ()
+│      ││   0x080484ce      8b55fc         edx = dword [ebp - local_4h]
+│      ││   0x080484d1      8d45f8         eax = [ebp - local_8h]
+│      ││   0x080484d4      0110           dword [eax] += edx
+│      ││   0x080484d6      837df80f       if (dword [ebp - local_8h] == 0xf ; [0xf:4]=0x3000200
+│     ┌───< 0x080484da      7518           notZero 0x80484f4)
+│     │││   0x080484dc      c704243b8604.  dword [esp] = str.Password_OK__n ; [0x804863b:4]=0x73736150 LEA str.Password_OK__n ; "Password OK!." @ 0x804863b
+│     │││   0x080484e3      e8acfeffff     sym.imp.printf ()
+│     │││   0x080484e8      c70424000000.  dword [esp] = 0
+│     │││   0x080484ef      e8c0feffff     sym.imp.exit ()
+│     └───> 0x080484f4      8d45f4         eax = [ebp - local_ch]
+│      ││   0x080484f7      ff00           dword [eax]++
+│      │└─< 0x080484f9      eb9d           goto 0x8048498
+│      └──> 0x080484fb      c70424498604.  dword [esp] = str.Password_Incorrect__n ; [0x8048649:4]=0x73736150 LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048649
+│           0x08048502      e88dfeffff     sym.imp.printf ()
+│           0x08048507      c9             
+╘           0x08048508      c3     
+"""
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x05/crackme0x05 b/examples/CSCI-4968-MBE/challenges/crackme0x05/crackme0x05
new file mode 100755
index 0000000..0e18f39
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x05/crackme0x05 differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x05/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x05/solve.py
new file mode 100755
index 0000000..c1f6c95
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x05/solve.py
@@ -0,0 +1,112 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+def main():
+	proj = angr.Project('crackme0x05', load_options={"auto_load_libs": False}) 
+
+	def correct(path):
+		try:
+			return 'Password OK' in path.state.posix.dumps(1)
+		except:
+			return False
+	def wrong(path):
+	 	try:
+	 		return 'Password Incorrect' in path.state.posix.dumps(1)
+	 	except:
+	 		return False
+
+	path_group = proj.factory.path_group()
+	path_group.explore(find=correct, avoid=wrong)
+
+	print path_group.found[0].state.posix.dumps(1) 
+	return path_group.found[0].state.posix.dumps(0) # .lstrip('+0').rstrip('B')
+
+def test():
+	assert main() == ''
+
+if __name__ == '__main__':
+	print(repr(main()))
+
+"""
+[0x080483d0]> pdf @ main
+            ;-- main:
+╒ (fcn) sym.main 92
+│           ; var int local_78h @ ebp-0x78
+│           ; var int arg_4h @ esp+0x4
+│           ; UNKNOWN XREF from 0x080483e8 (entry0)
+│           ; DATA XREF from 0x080483e7 (entry0)
+│           0x08048540      55             push ebp
+│           0x08048541      89e5           ebp = esp
+│           0x08048543      81ec88000000   esp -= 0x88
+│           0x08048549      83e4f0         esp &= 0xfffffff0
+│           0x0804854c      b800000000     eax = 0
+│           0x08048551      83c00f         eax += 0xf
+│           0x08048554      83c00f         eax += 0xf
+│           0x08048557      c1e804         eax >>>= 4
+│           0x0804855a      c1e004         eax <<<= 4
+│           0x0804855d      29c4           esp -= eax
+│           0x0804855f      c704248e8604.  dword [esp] = str.IOLI_Crackme_Level_0x05_n ; [0x804868e:4]=0x494c4f49 LEA str.IOLI_Crackme_Level_0x05_n ; "IOLI Crackme Level 0x05." @ 0x804868e
+│           0x08048566      e829feffff     sym.imp.printf ()
+│           0x0804856b      c70424a78604.  dword [esp] = str.Password: ; [0x80486a7:4]=0x73736150 LEA str.Password: ; "Password: " @ 0x80486a7
+│           0x08048572      e81dfeffff     sym.imp.printf ()
+│           0x08048577      8d4588         eax = [ebp - local_78h]
+│           0x0804857a      89442404       dword [esp + arg_4h] = eax
+│           0x0804857e      c70424b28604.  dword [esp] = 0x80486b2     ; [0x80486b2:4]=0x7325 ; "%s" @ 0x80486b2
+│           0x08048585      e8eafdffff     sym.imp.scanf ()
+│           0x0804858a      8d4588         eax = [ebp - local_78h]
+│           0x0804858d      890424         dword [esp] = eax
+│           0x08048590      e833ffffff     sym.check ()
+│           0x08048595      b800000000     eax = 0
+│           0x0804859a      c9             
+╘           0x0804859b      c3  
+[0x080483d0]> pdf @ sym.check 
+╒ (fcn) sym.check 120
+│           ; arg int arg_8h @ ebp+0x8
+│           ; arg int arg_10h @ ebp+0x10
+│           ; arg int arg_13h @ ebp+0x13
+│           ; var int arg_4h @ esp+0x4
+│           ; var int arg_8h @ esp+0x8
+│           ; CALL XREF from 0x08048590 (sym.main)
+│           0x080484c8      55             push ebp
+│           0x080484c9      89e5           ebp = esp
+│           0x080484cb      83ec28         esp -= 0x28
+│           0x080484ce      c745f8000000.  dword [ebp - local_8h] = 0
+│           0x080484d5      c745f4000000.  dword [ebp - local_ch] = 0
+│           ; JMP XREF from 0x08048530 (sym.check)
+│       ┌─> 0x080484dc      8b4508         eax = dword [ebp + arg_8h]  ; [0x8:4]=0
+│       │   0x080484df      890424         dword [esp] = eax
+│       │   0x080484e2      e89dfeffff     sym.imp.strlen ()
+│       │   0x080484e7      3945f4         if (dword [ebp - local_ch] == eax ; [0x13:4]=256
+│      ┌──< 0x080484ea      7346           jae 0x8048532 
+│      ││   0x080484ec      8b45f4         eax = dword [ebp - local_ch]
+│      ││   0x080484ef      034508         eax += dword [ebp + arg_8h]
+│      ││   0x080484f2      0fb600         eax = byte [eax]
+│      ││   0x080484f5      8845f3         byte [ebp - local_dh] = al
+│      ││   0x080484f8      8d45fc         eax = [ebp - local_4h]
+│      ││   0x080484fb      89442408       dword [esp + arg_8h] = eax
+│      ││   0x080484ff      c74424046886.  dword [esp + arg_4h] = 0x8048668 ; [0x8048668:4]=0x50006425 ; "%d" @ 0x8048668
+│      ││   0x08048507      8d45f3         eax = [ebp - local_dh]
+│      ││   0x0804850a      890424         dword [esp] = eax
+│      ││   0x0804850d      e892feffff     sym.imp.sscanf ()
+│      ││   0x08048512      8b55fc         edx = dword [ebp - local_4h]
+│      ││   0x08048515      8d45f8         eax = [ebp - local_8h]
+│      ││   0x08048518      0110           dword [eax] += edx
+│      ││   0x0804851a      837df810       if (dword [ebp - local_8h] == 0x10 ; [0x10:4]=0x30002
+│     ┌───< 0x0804851e      750b           notZero 0x804852b)
+│     │││   0x08048520      8b4508         eax = dword [ebp + arg_8h]  ; [0x8:4]=0
+│     │││   0x08048523      890424         dword [esp] = eax
+│     │││   0x08048526      e859ffffff     sym.parell ()
+│     └───> 0x0804852b      8d45f4         eax = [ebp - local_ch]
+│      ││   0x0804852e      ff00           dword [eax]++
+│      │└─< 0x08048530      ebaa           goto 0x80484dc
+│      └──> 0x08048532      c70424798604.  dword [esp] = str.Password_Incorrect__n ; [0x8048679:4]=0x73736150 LEA str.Password_Incorrect__n ; "Password Incorrect!." @ 0x8048679
+│           0x08048539      e856feffff     sym.imp.printf ()
+│           0x0804853e      c9             
+╘           0x0804853f      c3 
+"""
