diff --git a/docs/analyses.md b/docs/analyses.md
index 256892a..5b57986 100644
--- a/docs/analyses.md
+++ b/docs/analyses.md
@@ -15,6 +15,7 @@ angr comes with several built-in analyses:
 | DDG                                         | Calculates a data dependency graph, allowing one to determine what statements a given value depends on.                                   |
 | [DFG](analyses/dfg.md)                      | Constructs a *Data Flow Graph* for each basic block present in the CFG                                                                    |
 | [BackwardSlice](analyses/backward_slice.md) | Computes a backward slice of a program w.r.t. a certain target.                                                                           |
+| [Identifier](analyses/identifier.md)        | Identifies common library functions in CGC binaries. |
 | More!                                       | angr has quite a few analyses, most of which work! If you'd like to know how to use one, please submit an issue requesting documentation. |
 
 ### VFG
diff --git a/docs/analyses/identifier.md b/docs/analyses/identifier.md
new file mode 100644
index 0000000..9d3637b
--- /dev/null
+++ b/docs/analyses/identifier.md
@@ -0,0 +1,34 @@
+# Identifier
+
+
+The identifier uses test cases to identify common library functions in CGC binaries.
+It prefilters by finding some basic information about stack variables/arguments.
+The information of about stack variables can be generally useful in other projects.
+
+```python
+# get all the matches
+>>> p = angr.Project("../binaries/tests/i386/identifiable")
+>>> idfer = p.analyses.Identifier()
+# note that .run() yields results so make sure to iterate through them or call list() etc
+>>> for addr, symbol in idfer.run():
+....    print hex(addr), symbol
+....
+0x8048e60 memcmp
+0x8048ef0 memcpy
+0x8048f60 memmove
+0x8049030 memset
+0x8049320 fdprintf
+0x8049a70 sprintf
+0x8049f40 strcasecmp
+0x804a0f0 strcmp
+0x804a190 strcpy
+0x804a260 strlen
+0x804a3d0 strncmp
+0x804a620 strtol
+0x804aa00 strtol
+0x80485b0 free
+0x804aab0 free
+0x804aad0 free
+0x8048660 malloc
+0x80485b0 free
+```
\ No newline at end of file
