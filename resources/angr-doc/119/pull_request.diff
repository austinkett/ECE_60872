diff --git a/examples/codegate_2017-angrybird/angrybird b/examples/codegate_2017-angrybird/angrybird
new file mode 100755
index 0000000..0bba293
Binary files /dev/null and b/examples/codegate_2017-angrybird/angrybird differ
diff --git a/examples/codegate_2017-angrybird/solve.py b/examples/codegate_2017-angrybird/solve.py
new file mode 100755
index 0000000..fdb35fd
--- /dev/null
+++ b/examples/codegate_2017-angrybird/solve.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+# Author: David Manouchehri
+# Runtime: ~3 minutes
+
+import angr
+import string
+
+START_ADDR = 0x4007c2
+FIND_ADDR = 0x404fc1  # This is shortly after the printf.
+
+def main():
+	proj = angr.Project('angrybird', load_options={"auto_load_libs": False}) 
+	# There's a couple anti-run instructions in this binary.
+	# Yes, anti-run. That's not a typo.
+
+	# Because I'm not interested in fixing a weird binary, I'm going to skip all the beginning of the program.
+	state = proj.factory.entry_state(addr=START_ADDR)
+
+	path = proj.factory.path(state)  # Set up the first path.
+	path_group = proj.factory.path_group(path)  # Create the path group.
+
+	path_group.explore(find=FIND_ADDR)  # This will take a couple minutes. Ignore the warning message(s), it's fine.
+	found = path_group.found[-1]
+	stdin = found.state.posix.dumps(0)
+
+	# This trims off anything that's not printable.
+	flag = filter(lambda x: x in string.printable, stdin).split()[0]
+
+	# (•_•) ( •_•)>⌐■-■ (⌐■_■)
+	return flag
+
+def test():
+	assert main() == 'Im_so_cute&pretty_:)'
+
+if __name__ == '__main__':
+	print(main())
