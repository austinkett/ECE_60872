diff --git a/docs/examples.md b/docs/examples.md
index 409da59..8c1f340 100644
--- a/docs/examples.md
+++ b/docs/examples.md
@@ -298,6 +298,11 @@ Author: David Manouchehri (GitHub [@Manouchehri](https://github.com/Manouchehri)
 
 [This folder](https://github.com/angr/angr-doc/tree/master/examples/CSCI-4968-MBE/challenges) contains scripts used to solve some of the challenges with angr. At the moment it only contains the examples from the IOLI crackme suite, but eventually other solutions will be added.
 
+### CrackMe example: Android License Check
+
+Author: Bernhard Mueller (GitHub [@b-mueller](https://github.com/angr/angr-doc/tree/master/examples/))
+
+A [native binary for Android/ARM](https://github.com/b-angr/angr-doc/tree/master/examples/android_arm_license_validation) that validates a license key passed as a command line argument. It was created for the symbolic execution tutorial in the [OWASP Mobile Testing Guide](https://github.com/OWASP/owasp-mstg/).
 
 ## Exploitation Examples
 
diff --git a/examples/android_arm_license_validation/solve.py b/examples/android_arm_license_validation/solve.py
new file mode 100644
index 0000000..3e1ace4
--- /dev/null
+++ b/examples/android_arm_license_validation/solve.py
@@ -0,0 +1,50 @@
+#!/usr/bin/python
+
+'''
+Quick-and-dirty solution for the (un-obfuscated) Android License Check crackme from the Obfuscation Metrics Project.
+The full how-to can be found in the 'Android' section of the OWASP Mobile Security Testing Guide:
+
+https://github.com/OWASP/owasp-mstg/blob/master/Document/0x06a-Reverse-Engineering-and-Tampering-Android.md
+
+'''
+
+import angr
+import claripy
+import base64
+
+def main():
+    load_options = {}
+
+    # Android NDK library path:
+    # load_options['custom_ld_path'] = ['/Users/berndt/Tools/android-ndk-r10e/platforms/android-21/arch-arm/usr/lib']
+
+    b = angr.Project("./validate", load_options = load_options)
+
+    # The key validation function starts at 0x401760, so that's where we create the initial state.
+    # This speeds things up a lot because we're bypassing the Base32-encoder.
+
+    state = b.factory.blank_state(addr=0x401760)
+
+    initial_path = b.factory.path(state)
+    path_group = b.factory.path_group(state)
+
+    # 0x401840 = Product activation passed
+    # 0x401854 = Incorrect serial
+
+    path_group.explore(find=0x401840, avoid=0x401854)
+    found = path_group.found[0]
+
+    # Get the solution string from *(R11 - 0x24).
+
+    addr = found.state.memory.load(found.state.regs.r11 - 0x24, endness='Iend_LE')
+    concrete_addr = found.state.se.any_int(addr)
+    solution = found.state.se.any_str(found.state.memory.load(concrete_addr,10))
+
+    return base64.b32encode(solution)
+
+def test():
+    print "TEST MODE"
+    assert main() == 'JQAE6ACMABNAAIIA'
+
+if __name__ == '__main__':
+    print main()
diff --git a/examples/android_arm_license_validation/validate b/examples/android_arm_license_validation/validate
new file mode 100755
index 0000000..57a337d
Binary files /dev/null and b/examples/android_arm_license_validation/validate differ
diff --git a/test.py b/test.py
index 97fb93c..5ec151c 100644
--- a/test.py
+++ b/test.py
@@ -111,6 +111,7 @@ def test_defcon2016quals_baby_re_1(): exampletest_single('defcon2016quals_baby-r
 
     exampletest_single('0ctf_trace')
     exampletest_single('ais3_crackme')
+    exampletest_single('android_arm_license_validation')
     exampletest_single('asisctffinals2015_fake')
     exampletest_single('asisctffinals2015_license')
     exampletest_single('CADET_00001')
