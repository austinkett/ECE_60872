diff --git a/api-doc/source/cle.rst b/api-doc/source/cle.rst
index 491d144..f38c1ee 100644
--- a/api-doc/source/cle.rst
+++ b/api-doc/source/cle.rst
@@ -14,7 +14,6 @@ Backends
 --------
 
 .. automodule:: cle.backends
-.. automodule:: cle.backends.externs
 .. automodule:: cle.backends.symbol
 .. automodule:: cle.backends.regions
 .. automodule:: cle.backends.region
@@ -42,6 +41,9 @@ Backends
 .. automodule:: cle.backends.ihex
 .. automodule:: cle.backends.binja
 .. automodule:: cle.backends.soot
+.. automodule:: cle.backends.externs
+.. automodule:: cle.backends.externs.simdata
+.. automodule:: cle.backends.externs.simdata.common
 
 
 Relocations
diff --git a/docs/environment.md b/docs/environment.md
index 4ba899a..8f8f3db 100644
--- a/docs/environment.md
+++ b/docs/environment.md
@@ -118,3 +118,28 @@ The SimSyscallLibrary the SimOS uses is copied from the original during setup, s
 You can directly fiddle with `project.simos.syscall_library` to manipulate an individual project's syscalls.
 
 You can provide a SimOS class (not an instance) directly to the `Project` constructor via the `simos` keyword argument, so you can specify the SimOS for a project explicitly if you like.
+
+
+## SimData
+
+What about when there is an import dependency on a data object?
+This is easily resolved when the given library is actually loaded into memory - the relocation can just be resolved as normal.
+However, when the library is not loaded (for example, `auto_load_libs=False`, or perhaps some dependency is simply missing), things get tricky.
+It is not possible to guess in most cases what the value should be, or even what its size should be, so if the guest program ever dereferences a pointer to such a symbol, emulation will go off the rails.
+
+CLE will warn you when this might happen:
+
+```
+[22:26:58] [cle.backends.externs] |  WARNING: Symbol was allocated without a known size; emulation will fail if it is used non-opaquely: _rtld_global
+[22:26:58] [cle.backends.externs] |  WARNING: Symbol was allocated without a known size; emulation will fail if it is used non-opaquely: __libc_enable_secure
+[22:26:58] [cle.backends.externs] |  WARNING: Symbol was allocated without a known size; emulation will fail if it is used non-opaquely: _rtld_global_ro
+[22:26:58] [cle.backends.externs] |  WARNING: Symbol was allocated without a known size; emulation will fail if it is used non-opaquely: _dl_argv
+```
+
+If you see this message and suspect it is causing issues (i.e. the program is actually introspecting the value of these symbols), you can resolve it by implementing and registering a SimData class, which is like a SimProcedure but for data.
+Simulated data. Very cool.
+
+A SimData can effectively specify some data that must be used to provide an unresolved import symbol.
+It has a number of mechanisms to make this more useful, including the ability to specify relocations and subdependencies.
+
+Look at the [SimData class reference](http://angr.io/api-doc/cle.html#cle.backends.externs.simdata.SimData) and the [existing SimData subclasses](https://github.com/angr/cle/tree/master/cle/backends/externs/simdata) for guidelines on how to do this.
diff --git a/tests/test_apidoc.py b/tests/test_apidoc.py
index 269f6cb..206bda6 100644
--- a/tests/test_apidoc.py
+++ b/tests/test_apidoc.py
@@ -7,7 +7,7 @@ def _path(d):
 def test_api_coverage():
     missing = []
     exclude = ['angr.tablespecs', 'angr.service', 'angr.analyses.girlscout', 'pyvex.vex_ffi', 'claripy.backends.remotetasks', 'claripy.backends.backendremote', 'cle.backends.idabin']
-    exclude_prefix = ['angr.procedures', 'angr.analyses.identifier', 'angr.misc', 'angr.engines.vex', 'claripy.utils']
+    exclude_prefix = ['angr.procedures', 'angr.analyses.identifier', 'angr.misc', 'angr.engines.vex', 'claripy.utils', 'cle.backends.externs.simdata']
     for module in ['angr', 'claripy', 'cle', 'pyvex', 'archinfo']:
         docs_file = _path('api-doc/source/%s.rst' % module)
         module_dir = _path('../%s/%s' % (module, module))
