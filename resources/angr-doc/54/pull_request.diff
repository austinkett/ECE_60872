diff --git a/docs/examples.md b/docs/examples.md
index c0192b6..a1a2050 100644
--- a/docs/examples.md
+++ b/docs/examples.md
@@ -13,6 +13,14 @@ Binary, source, and script are found [here.](https://github.com/angr/angr-doc/tr
 
 ## CTF Problems
 
+### ReverseMe example: Google CTF - baby-re
+
+Script 0 author: David Manouchehri (github: [@Manouchehri](https://github.com/Manouchehri))
+
+Script runtime: 8 minutes
+
+Here is the [binary](https://github.com/angr/angr-doc/tree/master/examples/defcon2016quals_baby-re/baby-re) and the [script](https://github.com/angr/angr-doc/tree/master/examples/defcon2016quals_baby-re/solve.py).
+
 ### ReverseMe example: Google CTF - Unbreakable Enterprise Product Activation (150 points)
 
 Script 0 author: David Manouchehri (github: [@Manouchehri](https://github.com/Manouchehri))
diff --git a/examples/defcon2016quals_baby-re_0/baby-re b/examples/defcon2016quals_baby-re_0/baby-re
new file mode 100755
index 0000000..8dcd2ba
Binary files /dev/null and b/examples/defcon2016quals_baby-re_0/baby-re differ
diff --git a/examples/defcon2016quals_baby-re_0/solve.py b/examples/defcon2016quals_baby-re_0/solve.py
new file mode 100644
index 0000000..57079af
--- /dev/null
+++ b/examples/defcon2016quals_baby-re_0/solve.py
@@ -0,0 +1,43 @@
+#!/usr/bin/env python2
+
+"""
+Author: David Manouchehri <manouchehri@protonmail.com>
+DEFCON CTF Qualifier 2016
+Challenge: baby-re
+Team: hack.carleton
+Write-up: http://hack.carleton.team/2016/05/21/defcon-ctf-qualifier-2016-baby-re/
+Runtime: ~8 minutes (single threaded E5-2650L v3 @ 1.80GHz on DigitalOcean)
+
+DigitalOcean is horrible for single threaded applications, I would highly suggest using something else.
+"""
+
+import angr
+
+def main():
+	proj = angr.Project('./baby-re',  load_options={'auto_load_libs': False})
+
+	path_group = proj.factory.path_group(threads=4) # Doesn't really help to have more threads, but whatever.
+
+	# If we get to 0x402941, "Wrong" is going to be printed out, so definitely avoid that.
+	path_group.explore(find=0x40294b, avoid=0x402941) 
+	# If you use anywhere before 0x40292c, angr won't have the flag to print out yet. So don't do that.
+
+	return path_group.found[0].state.posix.dumps(1) # The flag is at the end.
+
+	"""
+	Note: There will be a bunch of warnings on your terminal that look like this.
+
+	WARNING | 2016-05-21 17:34:33,185 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.
+	WARNING | 2016-05-21 17:34:49,353 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.
+	WARNING | 2016-05-21 17:35:11,810 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.
+	WARNING | 2016-05-21 17:35:44,170 | simuvex.plugins.symbolic_memory | Concretizing symbolic length. Much sad; think about implementing.
+
+	Don't worry about these, they're not an issue for this challenge.
+	"""
+
+def test():
+	assert main() == 'Math is hard!'
+
+
+if __name__ == '__main__':
+	print(repr(main()))
