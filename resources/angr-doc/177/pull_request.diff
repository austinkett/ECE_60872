diff --git a/examples/java_crackme1/.gitignore b/examples/java_crackme1/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_crackme1/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_crackme1/compile.sh b/examples/java_crackme1/compile.sh
new file mode 100755
index 0000000..b97355c
--- /dev/null
+++ b/examples/java_crackme1/compile.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+rm crackme1.jar
+(
+cd crackme1_src
+javac -classpath . crackme1/*.java
+jar cfm ../crackme1.jar META-INF/MANIFEST.MF crackme1/*.class
+)
+
+# java -jar crackme1.jar
diff --git a/examples/java_crackme1/crackme1.jar b/examples/java_crackme1/crackme1.jar
new file mode 100644
index 0000000..04c7c9d
Binary files /dev/null and b/examples/java_crackme1/crackme1.jar differ
diff --git a/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF b/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..a259075
--- /dev/null
+++ b/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: crackme1.Class1
diff --git a/examples/java_crackme1/crackme1_src/crackme1/Class1.java b/examples/java_crackme1/crackme1_src/crackme1/Class1.java
new file mode 100644
index 0000000..24a7394
--- /dev/null
+++ b/examples/java_crackme1/crackme1_src/crackme1/Class1.java
@@ -0,0 +1,94 @@
+package crackme1;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void win(){
+        System.out.write('W');
+        System.out.flush();
+    }
+
+    public static void fail(){
+        System.out.write('L');
+        System.out.flush();
+        System.exit(-1);
+    }
+
+
+    public static void main(String[] args) {
+        int c1=0;
+        int c2=0;
+        int c3=0;
+        int c4=0;
+        int c5=0;
+        int c6=0;
+        int c7=0;
+        int c8=0;
+        int c9=0;
+        int c10=0;
+        int v1,v2,v3,v4,v5;
+
+        try {
+            // JaV$!sB4D!
+            c1 = System.in.read();
+            c2 = System.in.read();
+            c3 = System.in.read();
+            c4 = System.in.read();
+            c5 = System.in.read();
+            c6 = System.in.read();
+            c7 = System.in.read();
+            c8 = System.in.read();
+            c9 = System.in.read();
+            c10 = System.in.read();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        if(c1!='J'){
+            fail();
+        }
+
+        v1 = (c2<<8)+c3;
+        if(v1!=0x6156){
+            fail();
+        }
+
+        v2 = c4*3214+c5*3;
+        if(v2!=115803){
+            fail();
+        }
+
+        if(c6>>1!=57){
+            fail();
+        }
+        if(c6%2==0){
+            fail();
+        }
+
+        v3 = (c7<<8)+c8;
+        v4 = v3*v3 - 16938*v3 - 169480;
+        if(v4!=0){
+            fail();
+        }
+        if(v3<0){
+            fail();
+        }
+
+        if(c9>70){
+            fail();
+        }
+        if(c9<65){
+            fail();
+        }
+        if((c9-61)%5!=2){
+            fail();
+        }
+
+        v5 = c1+c2+c3+c4+c5+c6+c7+c8+c9+c10;
+        if(v5!=660){
+            fail();
+        }
+        win();
+    }
+}
diff --git a/examples/java_crackme1/test_java_crackme1.py b/examples/java_crackme1/test_java_crackme1.py
new file mode 100644
index 0000000..9eaf197
--- /dev/null
+++ b/examples/java_crackme1/test_java_crackme1.py
@@ -0,0 +1,65 @@
+
+import os
+
+from archinfo.arch_soot import SootAddressDescriptor, SootMethodDescriptor
+import angr
+import logging
+import subprocess
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+def test_java_crackme1():
+    binary_path = os.path.join(self_dir, "crackme1.jar")
+
+    proj = angr.Project(binary_path)
+    print proj.loader.main_object._classes['crackme1.Class1']
+
+    simgr = proj.factory.simgr()
+    main_method = next(proj.loader.main_object.main_methods)
+    simgr.active[0].ip = SootAddressDescriptor(SootMethodDescriptor.from_method(main_method), 0, 0)
+    simgr.explore()
+
+    terminated_paths = simgr.deadended
+    assert len(terminated_paths) > 1
+
+    winnning_paths = []
+    for pp in terminated_paths:
+        pp.state.posix.set_pos(0, 0)
+        pp.state.posix.set_pos(1, 0)
+        oo = pp.state.posix.read_from(1, 1)
+        # a winning path is printing 'W'
+        pp.state.add_constraints(oo == pp.state.se.BVV(ord('W'), 8))
+        if pp.satisfiable():
+            winnning_paths.append(pp)
+    assert len(winnning_paths) == 1
+    winning_path = winnning_paths[0]
+
+    # on the winning path, we ask for the input
+    ii = winning_path.state.posix.read_from(0, 10)
+    print ii
+    print winning_path.state.se.constraints
+
+    flags = winning_path.state.se.eval_upto(ii, 2, cast_to=str)
+    # only 1 possible solution
+    print repr(flags)
+    assert len(flags) == 1
+    flag = flags[0]
+    print repr(flag)
+    assert flag == "JaV$!sB4D!"
+
+    # verify against the real code
+    p = subprocess.Popen(["java", "-jar", "crackme1.jar"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
+    res, _ = p.communicate(flag)
+    print repr(res)
+    assert res == "W"
+
+
+def main():
+    test_java_crackme1()
+
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    main()
diff --git a/examples/java_simple3/.gitignore b/examples/java_simple3/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_simple3/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_simple3/compile.sh b/examples/java_simple3/compile.sh
new file mode 100755
index 0000000..d3ef365
--- /dev/null
+++ b/examples/java_simple3/compile.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+# cp -a   ../../../../eclipse_workspace/simple3/src/** simple3_src
+
+rm simple3.jar
+(
+cd simple3_src
+javac -classpath . simple3/*.java
+jar cfm ../simple3.jar META-INF/MANIFEST.MF simple3/*.class
+)
+
+# java -jar simple3.jar
diff --git a/examples/java_simple3/simple3.jar b/examples/java_simple3/simple3.jar
new file mode 100644
index 0000000..5966908
Binary files /dev/null and b/examples/java_simple3/simple3.jar differ
diff --git a/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF b/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..f6d58ea
--- /dev/null
+++ b/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: simple3.Class1
diff --git a/examples/java_simple3/simple3_src/simple3/Class1.java b/examples/java_simple3/simple3_src/simple3/Class1.java
new file mode 100644
index 0000000..045c09c
--- /dev/null
+++ b/examples/java_simple3/simple3_src/simple3/Class1.java
@@ -0,0 +1,32 @@
+package simple3;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void main(String[] args) {
+        int c;
+
+        try {
+            /*
+            c is just one byte or -1
+            stdin is converted using utf-8
+            For example, inserting this character:
+            http://www.unicode.org/cgi-bin/GetUnihanData.pl?codepoint=2020C
+            returns 4 integers: 240, 160, 136, 140
+            and "normal" ascii characters return 1 integer
+            */
+            c = System.in.read();
+            c++;
+            /*
+            write expects an int in the 0-255 range
+            if higer % 256 is applied to the input
+            */
+            System.out.write(c);
+            System.out.flush();
+            boolean b = System.out.checkError();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/examples/java_simple3/test_java_simple3.py b/examples/java_simple3/test_java_simple3.py
new file mode 100644
index 0000000..757923b
--- /dev/null
+++ b/examples/java_simple3/test_java_simple3.py
@@ -0,0 +1,43 @@
+
+import os
+
+from archinfo.arch_soot import SootAddressDescriptor, SootMethodDescriptor
+import angr
+import logging
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+def test_java_simple3():
+    binary_path = os.path.join(self_dir, "simple3.jar")
+
+    proj = angr.Project(binary_path)
+    print proj.loader.main_object._classes['simple3.Class1']
+
+    simgr = proj.factory.simgr()
+    main_method = next(proj.loader.main_object.main_methods)
+    simgr.active[0].ip = SootAddressDescriptor(SootMethodDescriptor.from_method(main_method), 0, 0)
+
+    simgr.explore()
+
+    pp = simgr.deadended[0]
+    pp.state.posix.set_pos(0, 0)
+    pp.state.posix.set_pos(1, 0)
+    ii = pp.state.posix.read_from(0, 1)
+    oo = pp.state.posix.read_from(1, 1)
+    pp.state.add_constraints(oo == pp.state.se.BVV(ord('c'), 8))
+
+    print ii, "-->", oo
+    cinput = chr(pp.state.se.eval(ii))
+    print repr(cinput)
+    assert cinput == "b"
+   
+    # import IPython; IPython.embed();
+
+def main():
+    test_java_simple3()
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    main()
diff --git a/examples/java_simple4/.gitignore b/examples/java_simple4/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_simple4/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_simple4/compile.sh b/examples/java_simple4/compile.sh
new file mode 100755
index 0000000..05865f0
--- /dev/null
+++ b/examples/java_simple4/compile.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+rm simple4.jar
+(
+cd simple4_src
+javac -classpath . simple4/*.java
+jar cfm ../simple4.jar META-INF/MANIFEST.MF simple4/*.class
+)
+
+# java -jar simple4.jar
diff --git a/examples/java_simple4/simple4.jar b/examples/java_simple4/simple4.jar
new file mode 100644
index 0000000..ce5957a
Binary files /dev/null and b/examples/java_simple4/simple4.jar differ
diff --git a/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF b/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..f29fe6e
--- /dev/null
+++ b/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: simple4.Class1
diff --git a/examples/java_simple4/simple4_src/simple4/Class1.java b/examples/java_simple4/simple4_src/simple4/Class1.java
new file mode 100644
index 0000000..6f5750c
--- /dev/null
+++ b/examples/java_simple4/simple4_src/simple4/Class1.java
@@ -0,0 +1,22 @@
+package simple4;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void main(String[] args) {
+        int c;
+
+        try {
+            c = System.in.read();
+            if(c=='F'){
+                System.out.write('W');
+            }else{
+                System.out.write('L');
+            }
+            System.out.flush();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/examples/java_simple4/test_java_simple4.py b/examples/java_simple4/test_java_simple4.py
new file mode 100644
index 0000000..b19473b
--- /dev/null
+++ b/examples/java_simple4/test_java_simple4.py
@@ -0,0 +1,51 @@
+
+import os
+
+from archinfo.arch_soot import SootAddressDescriptor, SootMethodDescriptor
+import angr
+import logging
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+def test_java_simple4():
+    binary_path = os.path.join(self_dir, "simple4.jar")
+
+    proj = angr.Project(binary_path)
+    print proj.loader.main_object._classes['simple4.Class1']
+
+    simgr = proj.factory.simgr()
+    main_method = next(proj.loader.main_object.main_methods)
+    simgr.active[0].ip = SootAddressDescriptor(SootMethodDescriptor.from_method(main_method), 0, 0)
+
+    simgr.explore()
+
+    paths = simgr.deadended
+    assert len(paths) == 2
+
+    winnning_paths = []
+    for pp in paths:
+        pp.state.posix.set_pos(0, 0)
+        pp.state.posix.set_pos(1, 0)
+        oo = pp.state.posix.read_from(1, 1)
+        # a winning path is printing 'W'
+        pp.state.add_constraints(oo == pp.state.se.BVV(ord('W'), 8))
+        if pp.satisfiable():
+            winnning_paths.append(pp)
+    assert len(winnning_paths) == 1
+    winning_path = winnning_paths[0]
+
+    # on the winning path, we ask for the input
+    ii = winning_path.state.posix.read_from(0, 1)
+    solution = chr(winning_path.state.se.eval(ii))
+    print repr(solution)
+    assert solution == 'F'
+
+
+def main():
+    test_java_simple4()
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    main()
