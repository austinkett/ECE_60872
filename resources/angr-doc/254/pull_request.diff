diff --git a/examples/ictf2017_javaisnotfun/bin/libnotfun.so b/examples/ictf2017_javaisnotfun/bin/libnotfun.so
new file mode 100755
index 0000000..545657e
Binary files /dev/null and b/examples/ictf2017_javaisnotfun/bin/libnotfun.so differ
diff --git a/examples/ictf2017_javaisnotfun/bin/service.jar b/examples/ictf2017_javaisnotfun/bin/service.jar
new file mode 100644
index 0000000..08182ac
Binary files /dev/null and b/examples/ictf2017_javaisnotfun/bin/service.jar differ
diff --git a/examples/ictf2017_javaisnotfun/solve.py b/examples/ictf2017_javaisnotfun/solve.py
new file mode 100644
index 0000000..4a638e7
--- /dev/null
+++ b/examples/ictf2017_javaisnotfun/solve.py
@@ -0,0 +1,194 @@
+#!/usr/bin/env python
+
+
+import angr
+import os
+from angr.procedures.java import JavaSimProcedure
+from archinfo.arch_soot import SootMethodDescriptor, SootAddressDescriptor
+from  angr.storage.file import Flags
+import claripy
+
+
+# This is a solution for the challenge javaisnotfun at ictf2017
+# You can find a writeup here (in Chinese):
+# https://ctftime.org/writeup/5964
+# This code only solve 1 round of the "challenge-response" game inside the challenge.
+# The equivalent python code to solve 1 round of the game is in the function: solve_given_numbers_python
+
+# This is an example of:
+# - How angr can solve programs written in a mix of Java and native code (communicating using the JNI interface)
+# - How to solve a challenge-response problem
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+
+fake_output_fd = None
+fake_input_fd = None
+
+
+def solve_given_numbers_python(gnumbers):
+    def scramble(c3,c4,c5):
+        m  = [2,7,3,5,2,9,6,5,8,4]
+        s1 = [3,8,1,3,9,1,2,4,2,2]
+        sh = [1,4,3,2,2,2,3,1,4,1]
+        s2 = [4,3,2,3,1,3,3,3,7,1]
+        c3 = c3 * m[c4] + s1[c4]
+        if(c5 < 5):
+            c3 = (c3<<sh[c5]) + s2[c5]
+        else:
+            c3 = (c3>>sh[c5]) + s2[c5]
+        return c3
+
+    c1, c2, c3, c4, c5 = gnumbers
+    s1 = c1+2
+    s2 = c2*3 +1
+    s3 = scramble(c3<<8,c4,c5)
+    return s1,s2,s3
+
+
+class Random_nextInt(JavaSimProcedure):
+    __provides__ = (
+        ("java.util.Random", "nextInt(int)"),
+    )
+    def run(self, _, length): # pylint: disable=W0221
+        bvs = claripy.BVS("Random.nextInt", 32)
+        cs =  claripy.And(claripy.SGE(bvs, 0), claripy.SLE(bvs, length))
+        self.state.add_constraints(cs)
+        return bvs
+
+
+class Dummy_valueOf(JavaSimProcedure):
+    __provides__ = (
+        ("java.lang.Integer", "valueOf(int)"),
+    )
+    def run(self, intv): # pylint: disable=W0221
+        return intv
+
+# When the program prints to stdout, we constraint symbolic data written to stdout
+# with whatever was printed by the concrete execution of the program
+# (which we previously stored in /fake/output)
+class Custom_Print(JavaSimProcedure):
+    __provides__ = (
+        ("NotFun", "print(java.lang.Object)"),
+    )
+    def run(self, _, obj): # pylint: disable=W0221
+        def read_line_from_file(ff):
+            #assuming that ff contains BV
+            line = b""
+            while True:
+                vv = ff.read_data(1)[0]
+                if vv.symbolic:
+                    break
+                ct = bytes(chr(vv.args[0]), 'utf-8')
+                if ct == b"\n":
+                    break
+                line += ct
+            return line
+
+        # we don't care about printed fixed strings
+        if isinstance(obj, angr.engines.soot.values.strref.SimSootValue_StringRef):
+            return
+
+        ff = self.state.posix.fd[fake_output_fd]
+        value = int(read_line_from_file(ff))
+        cs = (obj == claripy.BVV(value, 32))
+        self.state.add_constraints(cs)
+
+
+# When the program gets an Integer from stdin, we return one of the symbolic variables
+# we previously stored in /fake/input
+# (containing what the user has to insert to solve the game)
+class Custom_getInt(JavaSimProcedure):
+    __provides__ = (
+        ("NotFun", "getInt()"),
+    )
+    def run(self, _): # pylint: disable=W0221
+        return self.state.posix.fd[fake_input_fd].read_data(4)[0]
+
+
+def solve_given_numbers_angr(numbers):
+    global fake_input_fd, fake_output_fd
+
+
+    binary_path = os.path.join(self_dir, "bin/service.jar")
+    jni_options = {'jni_libs': ['libnotfun.so']}
+    project = angr.Project(binary_path, main_opts=jni_options)
+
+    # hooks
+    project.hook(SootMethodDescriptor(class_name="java.util.Random", name="nextInt", params=('int',)).address(), Random_nextInt())
+    project.hook(SootMethodDescriptor(class_name="java.lang.Integer", name="valueOf", params=('int',)).address(), Dummy_valueOf())
+    project.hook(SootMethodDescriptor(class_name="NotFun", name="print", params=('java.lang.Object',)).address(), Custom_Print())
+    project.hook(SootMethodDescriptor(class_name="NotFun", name="getInt", params=()).address(), Custom_getInt())
+
+    # set entry point to the 'game' method
+    game_method = [m for m in project.loader.main_object.classes['NotFun'].methods
+                     if m.name == "game"][0]
+    game_entry = SootMethodDescriptor.from_soot_method(game_method).address()
+    entry = project.factory.blank_state(addr=game_entry)
+    simgr = project.factory.simgr(entry)
+
+    # Create a fake file with what it is going to be printed to the user (concrete)
+    fake_output_fd = entry.posix.open(b"/fake/output", Flags.O_RDWR)
+    ff = entry.posix.fd[fake_output_fd]
+    tstr = b"".join([bytes(str(n), 'utf-8') + b"\n" for n in numbers])
+    ff.write_data(tstr, len(tstr))
+    ff.seek(0)
+
+    # Create a fake file with what the user as to insert (symbolic)
+    fake_input_fd = entry.posix.open(b"/fake/input", Flags.O_RDWR)
+    ff = entry.posix.fd[fake_input_fd]
+    solutions = [claripy.BVS("solution%d" % (i), 32) for i in range(3)]
+    for s in solutions:
+        ff.write_data(s, 4)
+    ff.seek(0)
+
+    print("="*10 + " SYMBOLIC EXECUTION STARTED")
+    while(len(simgr.active)>0):
+        simgr.step()
+        print("===== " + str(simgr))
+        print("===== " + ",".join([str(a.addr) for a in simgr.active if type(a.addr)==SootAddressDescriptor]))
+
+        # If we reach block_idx 30, it means that we solved 1 round of the game --> we stash the state
+        # If we reach the gameFail() method, it means that we failed --> we prune the state
+        simgr.move('active', 'stashed', lambda a: type(a.addr) == SootAddressDescriptor
+                   and a.addr.method == SootMethodDescriptor("NotFun", "game", ()) and a.addr.block_idx == 30)
+        simgr.move('active', 'pruned', lambda a: type(a.addr) == SootAddressDescriptor
+                   and a.addr.method == SootMethodDescriptor("NotFun", "gameFail", ()))
+
+    print("="*10 + " SYMBOLIC EXECUTION ENDED")
+    assert len(simgr.stashed) == 1
+    win_state = simgr.stashed[0]
+    numeric_solutions = []
+    for s in solutions:
+        es = win_state.solver.eval_atmost(s, 2)
+        assert len(es) == 1
+        numeric_solutions.append(es[0])
+    return numeric_solutions
+
+
+# You can create other challenge-response pairs by using the 'solve_given_numbers_python' function
+
+def test_t1():
+    assert solve_given_numbers_angr([60, 86, 203, 8, 6]) == [62, 259, 51971]
+
+
+def test_t2():
+    assert solve_given_numbers_angr([50, 87, 10, 7, 3]) == [52, 262, 51219]
+
+
+def test():
+    test_t1()
+    test_t2()
+
+
+if __name__ == "__main__":
+    import logging
+    logging.getLogger('cle.backends.soot').setLevel('DEBUG')
+    logging.getLogger('cle.backends.apk').setLevel('DEBUG')
+    logging.getLogger('cle.backends.jar').setLevel('DEBUG')
+    logging.getLogger("angr").setLevel("INFO")
+    logging.getLogger("angr.state_plugins").setLevel("INFO")
+    logging.getLogger('angr.state_plugins.jni_references').setLevel("DEBUG")
+    logging.getLogger('archinfo.arch_soot').setLevel("DEBUG")
+    test()
diff --git a/examples/java_androidnative1/.gitignore b/examples/java_androidnative1/.gitignore
new file mode 100644
index 0000000..fe876b7
--- /dev/null
+++ b/examples/java_androidnative1/.gitignore
@@ -0,0 +1 @@
+app/app/build
diff --git a/examples/java_androidnative1/androidnative1.apk b/examples/java_androidnative1/androidnative1.apk
new file mode 100644
index 0000000..f5fb30e
Binary files /dev/null and b/examples/java_androidnative1/androidnative1.apk differ
diff --git a/examples/java_androidnative1/app/.gitignore b/examples/java_androidnative1/app/.gitignore
new file mode 100644
index 0000000..2b75303
--- /dev/null
+++ b/examples/java_androidnative1/app/.gitignore
@@ -0,0 +1,13 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
diff --git a/examples/java_androidnative1/app/.idea/codeStyles/Project.xml b/examples/java_androidnative1/app/.idea/codeStyles/Project.xml
new file mode 100644
index 0000000..30aa626
--- /dev/null
+++ b/examples/java_androidnative1/app/.idea/codeStyles/Project.xml
@@ -0,0 +1,29 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <Objective-C-extensions>
+      <file>
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />
+      </file>
+      <class>
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />
+        <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod" />
+      </class>
+      <extensions>
+        <pair source="cpp" header="h" fileNamingConvention="NONE" />
+        <pair source="c" header="h" fileNamingConvention="NONE" />
+      </extensions>
+    </Objective-C-extensions>
+  </code_scheme>
+</component>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/.idea/gradle.xml b/examples/java_androidnative1/app/.idea/gradle.xml
new file mode 100644
index 0000000..2996d53
--- /dev/null
+++ b/examples/java_androidnative1/app/.idea/gradle.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <compositeConfiguration>
+          <compositeBuild compositeDefinitionSource="SCRIPT" />
+        </compositeConfiguration>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="resolveModulePerSourceSet" value="false" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/.idea/misc.xml b/examples/java_androidnative1/app/.idea/misc.xml
new file mode 100644
index 0000000..dfd2c79
--- /dev/null
+++ b/examples/java_androidnative1/app/.idea/misc.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="JDK" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/.idea/runConfigurations.xml b/examples/java_androidnative1/app/.idea/runConfigurations.xml
new file mode 100644
index 0000000..7f68460
--- /dev/null
+++ b/examples/java_androidnative1/app/.idea/runConfigurations.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
+        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/.idea/vcs.xml b/examples/java_androidnative1/app/.idea/vcs.xml
new file mode 100644
index 0000000..c2365ab
--- /dev/null
+++ b/examples/java_androidnative1/app/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/.gitignore b/examples/java_androidnative1/app/app/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/examples/java_androidnative1/app/app/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/examples/java_androidnative1/app/app/build.gradle b/examples/java_androidnative1/app/app/build.gradle
new file mode 100644
index 0000000..310c68f
--- /dev/null
+++ b/examples/java_androidnative1/app/app/build.gradle
@@ -0,0 +1,40 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 21
+    defaultConfig {
+        applicationId "com.angr.nativetest1"
+        minSdkVersion 21
+        targetSdkVersion 21
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+        externalNativeBuild {
+            cmake {
+                cppFlags ""
+            }
+        }
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+    externalNativeBuild {
+        cmake {
+            path "src/main/cpp/CMakeLists.txt"
+        }
+    }
+    productFlavors {
+    }
+}
+
+dependencies {
+    implementation fileTree(include: ['*.jar'], dir: 'libs')
+    implementation 'com.android.support:appcompat-v7:21.0.0'
+    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
+    testImplementation 'junit:junit:4.12'
+    androidTestImplementation 'com.android.support.test:runner:1.0.2'
+    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
+}
diff --git a/examples/java_androidnative1/app/app/proguard-rules.pro b/examples/java_androidnative1/app/app/proguard-rules.pro
new file mode 100644
index 0000000..f1b4245
--- /dev/null
+++ b/examples/java_androidnative1/app/app/proguard-rules.pro
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/examples/java_androidnative1/app/app/src/androidTest/java/com/angr/nativetest1/ExampleInstrumentedTest.java b/examples/java_androidnative1/app/app/src/androidTest/java/com/angr/nativetest1/ExampleInstrumentedTest.java
new file mode 100644
index 0000000..32c5b4c
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/androidTest/java/com/angr/nativetest1/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.angr.nativetest1;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.angr.nativetest1", appContext.getPackageName());
+    }
+}
diff --git a/examples/java_androidnative1/app/app/src/main/AndroidManifest.xml b/examples/java_androidnative1/app/app/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..8e668a6
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/AndroidManifest.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.angr.nativetest1">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/src/main/cpp/CMakeLists.txt b/examples/java_androidnative1/app/app/src/main/cpp/CMakeLists.txt
new file mode 100644
index 0000000..489ac01
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/cpp/CMakeLists.txt
@@ -0,0 +1,44 @@
+# For more information about using CMake with Android Studio, read the
+# documentation: https://d.android.com/studio/projects/add-native-code.html
+
+# Sets the minimum version of CMake required to build the native library.
+
+cmake_minimum_required(VERSION 3.4.1)
+
+# Creates and names a library, sets it as either STATIC
+# or SHARED, and provides the relative paths to its source code.
+# You can define multiple libraries, and CMake builds them for you.
+# Gradle automatically packages shared libraries with your APK.
+
+add_library( # Sets the name of the library.
+        native-lib
+
+        # Sets the library as a shared library.
+        SHARED
+
+        # Provides a relative path to your source file(s).
+        native-lib.cpp)
+
+# Searches for a specified prebuilt library and stores the path as a
+# variable. Because CMake includes system libraries in the search path by
+# default, you only need to specify the name of the public NDK library
+# you want to add. CMake verifies that the library exists before
+# completing its build.
+
+find_library( # Sets the name of the path variable.
+        log-lib
+
+        # Specifies the name of the NDK library that
+        # you want CMake to locate.
+        log)
+
+# Specifies libraries CMake should link to your target library. You
+# can link multiple libraries, such as libraries you define in this
+# build script, prebuilt third-party libraries, or system libraries.
+
+target_link_libraries( # Specifies the target library.
+        native-lib
+
+        # Links the target library to the log library
+        # included in the NDK.
+        ${log-lib})
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/src/main/cpp/native-lib.cpp b/examples/java_androidnative1/app/app/src/main/cpp/native-lib.cpp
new file mode 100644
index 0000000..a910cac
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/cpp/native-lib.cpp
@@ -0,0 +1,17 @@
+#include <jni.h>
+#include <string>
+
+extern "C" JNIEXPORT jstring JNICALL
+Java_com_angr_nativetest1_MainActivity_stringFromJNI(
+        JNIEnv *env,
+        jobject /* this */) {
+    std::string hello = "Hello from C++";
+    return env->NewStringUTF(hello.c_str());
+}
+
+extern "C" JNIEXPORT jint JNICALL
+Java_com_angr_nativetest1_MainActivity_multiply(
+        JNIEnv *env,
+        jobject /* this */, jint a, jint b) {
+    return a*b;
+}
diff --git a/examples/java_androidnative1/app/app/src/main/java/com/angr/nativetest1/MainActivity.java b/examples/java_androidnative1/app/app/src/main/java/com/angr/nativetest1/MainActivity.java
new file mode 100644
index 0000000..9d57786
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/java/com/angr/nativetest1/MainActivity.java
@@ -0,0 +1,33 @@
+package com.angr.nativetest1;
+
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.widget.TextView;
+
+public class MainActivity extends Activity {
+
+    // Used to load the 'native-lib' library on application startup.
+    static {
+        System.loadLibrary("native-lib");
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        TextView tv = (TextView) findViewById(R.id.sample_text);
+        int a = 17;
+        int b = 13;
+        int c = multiply(a, b);
+        tv.setText(String.valueOf(c));
+    }
+
+    /**
+     * A native method that is implemented by the 'native-lib' native library,
+     * which is packaged with this application.
+     */
+    public native String stringFromJNI();
+    public native int multiply(int a, int b);
+}
diff --git a/examples/java_androidnative1/app/app/src/main/res/drawable/ic_launcher_background.xml b/examples/java_androidnative1/app/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
index 0000000..0d025f9
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#008577"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
diff --git a/examples/java_androidnative1/app/app/src/main/res/layout/activity_main.xml b/examples/java_androidnative1/app/app/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000..7d8d24e
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/layout/activity_main.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".MainActivity">
+
+    <TextView
+        android:id="@+id/sample_text"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello World!"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</android.support.constraint.ConstraintLayout>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
index 0000000..d8a70db
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
index 0000000..d8a70db
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000..898f3ed
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher_round.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 0000000..dffca36
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000..64ba76f
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher_round.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 0000000..dae5e08
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..e5ed465
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..14ed0af
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..b0907ca
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..d8ae031
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000..2c18de9
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000..beed3cd
Binary files /dev/null and b/examples/java_androidnative1/app/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/examples/java_androidnative1/app/app/src/main/res/values/colors.xml b/examples/java_androidnative1/app/app/src/main/res/values/colors.xml
new file mode 100644
index 0000000..69b2233
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#008577</color>
+    <color name="colorPrimaryDark">#00574B</color>
+    <color name="colorAccent">#D81B60</color>
+</resources>
diff --git a/examples/java_androidnative1/app/app/src/main/res/values/strings.xml b/examples/java_androidnative1/app/app/src/main/res/values/strings.xml
new file mode 100644
index 0000000..efd3073
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">My Application</string>
+</resources>
diff --git a/examples/java_androidnative1/app/app/src/main/res/values/styles.xml b/examples/java_androidnative1/app/app/src/main/res/values/styles.xml
new file mode 100644
index 0000000..5885930
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/examples/java_androidnative1/app/app/src/test/java/com/angr/nativetest1/ExampleUnitTest.java b/examples/java_androidnative1/app/app/src/test/java/com/angr/nativetest1/ExampleUnitTest.java
new file mode 100644
index 0000000..6fa99d7
--- /dev/null
+++ b/examples/java_androidnative1/app/app/src/test/java/com/angr/nativetest1/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.angr.nativetest1;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/examples/java_androidnative1/app/build.gradle b/examples/java_androidnative1/app/build.gradle
new file mode 100644
index 0000000..0125c22
--- /dev/null
+++ b/examples/java_androidnative1/app/build.gradle
@@ -0,0 +1,27 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        google()
+        jcenter()
+        
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.3.0'
+        
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        jcenter()
+        
+    }
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
diff --git a/examples/java_androidnative1/app/gradle.properties b/examples/java_androidnative1/app/gradle.properties
new file mode 100644
index 0000000..82618ce
--- /dev/null
+++ b/examples/java_androidnative1/app/gradle.properties
@@ -0,0 +1,15 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx1536m
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+
+
diff --git a/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.jar b/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..f6b961f
Binary files /dev/null and b/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.properties b/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..1bff620
--- /dev/null
+++ b/examples/java_androidnative1/app/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Thu Apr 11 09:27:09 CDT 2019
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.1-all.zip
diff --git a/examples/java_androidnative1/app/gradlew b/examples/java_androidnative1/app/gradlew
new file mode 100755
index 0000000..cccdd3d
--- /dev/null
+++ b/examples/java_androidnative1/app/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/examples/java_androidnative1/app/gradlew.bat b/examples/java_androidnative1/app/gradlew.bat
new file mode 100644
index 0000000..e95643d
--- /dev/null
+++ b/examples/java_androidnative1/app/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/examples/java_androidnative1/app/settings.gradle b/examples/java_androidnative1/app/settings.gradle
new file mode 100644
index 0000000..e7b4def
--- /dev/null
+++ b/examples/java_androidnative1/app/settings.gradle
@@ -0,0 +1 @@
+include ':app'
diff --git a/examples/java_androidnative1/compile.sh b/examples/java_androidnative1/compile.sh
new file mode 100755
index 0000000..cd26f7f
--- /dev/null
+++ b/examples/java_androidnative1/compile.sh
@@ -0,0 +1,9 @@
+#!/bin/bash
+
+rm androidnative1.apk
+(
+    cd app
+    ./gradlew clean
+    ./gradlew app:assembleDebug
+    cp app/build/outputs/apk/debug/app-debug.apk ../androidnative1.apk
+)
diff --git a/examples/java_androidnative1/solve.py b/examples/java_androidnative1/solve.py
new file mode 100644
index 0000000..7a5432d
--- /dev/null
+++ b/examples/java_androidnative1/solve.py
@@ -0,0 +1,59 @@
+
+import os
+import angr
+from angr.procedures.java import JavaSimProcedure
+from angr.engines.soot.values import SimSootValue_ThisRef
+from archinfo.arch_soot import SootArgument, SootMethodDescriptor
+
+
+file_dir = os.path.dirname(os.path.realpath(__file__))
+
+
+result = None
+
+class Dummy_String_valueOf(JavaSimProcedure):
+    __provides__ = (
+        ("java.lang.String", "valueOf(int)"),
+    )
+
+    def run(self, intv): # pylint: disable=W0221
+        global result
+        result = intv
+        return ""
+
+
+def test_androidnative1():
+    sdk_path = os.path.join(os.path.expanduser("~"), "Android/Sdk/platforms/")
+    if not os.path.exists(sdk_path):
+        print("cannot run test_apk_loading since there is no Android SDK folder")
+        return
+
+    apk_location = os.path.join(file_dir, "androidnative1.apk")
+    loading_opts = {'android_sdk': sdk_path,
+                    'entry_point': 'com.angr.nativetest1.MainActivity.onCreate',
+                    'entry_point_params': ('android.os.Bundle', ),
+                    'supported_jni_archs': ['x86']}
+    project = angr.Project(apk_location, main_opts=loading_opts)
+    project.hook(SootMethodDescriptor(class_name="java.lang.String", name="valueOf", params=('int',)).address(), Dummy_String_valueOf())
+
+    blank_state = project.factory.blank_state()
+    a1 = SimSootValue_ThisRef.new_object(blank_state, 'com.angr.androidnative1.MainActivity')
+    a2 = SimSootValue_ThisRef.new_object(blank_state, 'android.os.Bundle', symbolic = True)
+    args = [SootArgument(arg, arg.type) for arg in [a1, a2]]
+    entry = project.factory.entry_state(args = args)
+    simgr = project.factory.simgr(entry)
+
+    simgr.run()
+
+    int_result = simgr.deadended[0].solver.eval(result)
+    assert int_result == 221
+
+
+def test():
+    test_androidnative1()
+
+
+if __name__ == "__main__":
+    import logging
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    test()
diff --git a/examples/java_crackme1/.gitignore b/examples/java_crackme1/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_crackme1/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_crackme1/compile.sh b/examples/java_crackme1/compile.sh
new file mode 100755
index 0000000..b97355c
--- /dev/null
+++ b/examples/java_crackme1/compile.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+rm crackme1.jar
+(
+cd crackme1_src
+javac -classpath . crackme1/*.java
+jar cfm ../crackme1.jar META-INF/MANIFEST.MF crackme1/*.class
+)
+
+# java -jar crackme1.jar
diff --git a/examples/java_crackme1/crackme1.jar b/examples/java_crackme1/crackme1.jar
new file mode 100644
index 0000000..04c7c9d
Binary files /dev/null and b/examples/java_crackme1/crackme1.jar differ
diff --git a/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF b/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..a259075
--- /dev/null
+++ b/examples/java_crackme1/crackme1_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: crackme1.Class1
diff --git a/examples/java_crackme1/crackme1_src/crackme1/Class1.java b/examples/java_crackme1/crackme1_src/crackme1/Class1.java
new file mode 100644
index 0000000..24a7394
--- /dev/null
+++ b/examples/java_crackme1/crackme1_src/crackme1/Class1.java
@@ -0,0 +1,94 @@
+package crackme1;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void win(){
+        System.out.write('W');
+        System.out.flush();
+    }
+
+    public static void fail(){
+        System.out.write('L');
+        System.out.flush();
+        System.exit(-1);
+    }
+
+
+    public static void main(String[] args) {
+        int c1=0;
+        int c2=0;
+        int c3=0;
+        int c4=0;
+        int c5=0;
+        int c6=0;
+        int c7=0;
+        int c8=0;
+        int c9=0;
+        int c10=0;
+        int v1,v2,v3,v4,v5;
+
+        try {
+            // JaV$!sB4D!
+            c1 = System.in.read();
+            c2 = System.in.read();
+            c3 = System.in.read();
+            c4 = System.in.read();
+            c5 = System.in.read();
+            c6 = System.in.read();
+            c7 = System.in.read();
+            c8 = System.in.read();
+            c9 = System.in.read();
+            c10 = System.in.read();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        if(c1!='J'){
+            fail();
+        }
+
+        v1 = (c2<<8)+c3;
+        if(v1!=0x6156){
+            fail();
+        }
+
+        v2 = c4*3214+c5*3;
+        if(v2!=115803){
+            fail();
+        }
+
+        if(c6>>1!=57){
+            fail();
+        }
+        if(c6%2==0){
+            fail();
+        }
+
+        v3 = (c7<<8)+c8;
+        v4 = v3*v3 - 16938*v3 - 169480;
+        if(v4!=0){
+            fail();
+        }
+        if(v3<0){
+            fail();
+        }
+
+        if(c9>70){
+            fail();
+        }
+        if(c9<65){
+            fail();
+        }
+        if((c9-61)%5!=2){
+            fail();
+        }
+
+        v5 = c1+c2+c3+c4+c5+c6+c7+c8+c9+c10;
+        if(v5!=660){
+            fail();
+        }
+        win();
+    }
+}
diff --git a/examples/java_crackme1/solve.py b/examples/java_crackme1/solve.py
new file mode 100644
index 0000000..6498a6f
--- /dev/null
+++ b/examples/java_crackme1/solve.py
@@ -0,0 +1,40 @@
+
+import os
+import angr
+import logging
+import subprocess
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+def test_java_crackme1():
+    binary_path = os.path.join(self_dir, "crackme1.jar")
+    project = angr.Project(binary_path)
+    entry = project.factory.entry_state()
+    simgr = project.factory.simgr(entry)
+    simgr.explore()
+
+    terminated_states = simgr.deadended
+    assert len(terminated_states) > 1
+
+    # the winning state has "W" on stdout and "JaV$!sB4D!" on stdin
+    winnning_states = [s for s in terminated_states if s.posix.stdout.concretize() == [b"W"]]
+    assert len(winnning_states) == 1
+    winning_state = winnning_states[0]
+    flag = b"".join(winning_state.posix.stdin.concretize())
+    assert flag == b"JaV$!sB4D!"
+
+    # verify against the real code
+    p = subprocess.Popen(["java", "-jar", binary_path], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
+    res, _ = p.communicate(flag)
+    assert res == b"W"
+
+
+def test():
+    test_java_crackme1()
+
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    test()
diff --git a/examples/java_simple3/.gitignore b/examples/java_simple3/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_simple3/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_simple3/compile.sh b/examples/java_simple3/compile.sh
new file mode 100755
index 0000000..d3ef365
--- /dev/null
+++ b/examples/java_simple3/compile.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+# cp -a   ../../../../eclipse_workspace/simple3/src/** simple3_src
+
+rm simple3.jar
+(
+cd simple3_src
+javac -classpath . simple3/*.java
+jar cfm ../simple3.jar META-INF/MANIFEST.MF simple3/*.class
+)
+
+# java -jar simple3.jar
diff --git a/examples/java_simple3/simple3.jar b/examples/java_simple3/simple3.jar
new file mode 100644
index 0000000..5966908
Binary files /dev/null and b/examples/java_simple3/simple3.jar differ
diff --git a/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF b/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..f6d58ea
--- /dev/null
+++ b/examples/java_simple3/simple3_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: simple3.Class1
diff --git a/examples/java_simple3/simple3_src/simple3/Class1.java b/examples/java_simple3/simple3_src/simple3/Class1.java
new file mode 100644
index 0000000..045c09c
--- /dev/null
+++ b/examples/java_simple3/simple3_src/simple3/Class1.java
@@ -0,0 +1,32 @@
+package simple3;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void main(String[] args) {
+        int c;
+
+        try {
+            /*
+            c is just one byte or -1
+            stdin is converted using utf-8
+            For example, inserting this character:
+            http://www.unicode.org/cgi-bin/GetUnihanData.pl?codepoint=2020C
+            returns 4 integers: 240, 160, 136, 140
+            and "normal" ascii characters return 1 integer
+            */
+            c = System.in.read();
+            c++;
+            /*
+            write expects an int in the 0-255 range
+            if higer % 256 is applied to the input
+            */
+            System.out.write(c);
+            System.out.flush();
+            boolean b = System.out.checkError();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/examples/java_simple3/solve.py b/examples/java_simple3/solve.py
new file mode 100644
index 0000000..686c19a
--- /dev/null
+++ b/examples/java_simple3/solve.py
@@ -0,0 +1,31 @@
+
+import os
+import angr
+import logging
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+
+def test_java_simple3():
+    binary_path = os.path.join(self_dir, "simple3.jar")
+    project = angr.Project(binary_path)
+    entry = project.factory.entry_state()
+    simgr = project.factory.simgr(entry)
+    simgr.explore()
+
+    state = simgr.deadended[0]
+    # simple3.jar return the character after the inserted one
+    # we constrain stdout to "c" and we expected stdin to be "b"
+    state.add_constraints(state.posix.stdout.content[0][0] == state.solver.BVV(ord(b"c"), 8))
+    assert state.posix.stdin.concretize() == [b"b"]
+
+
+def test():
+    test_java_simple3()
+
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    test()
diff --git a/examples/java_simple4/.gitignore b/examples/java_simple4/.gitignore
new file mode 100644
index 0000000..ab31b20
--- /dev/null
+++ b/examples/java_simple4/.gitignore
@@ -0,0 +1,2 @@
+*.class
+
diff --git a/examples/java_simple4/compile.sh b/examples/java_simple4/compile.sh
new file mode 100755
index 0000000..05865f0
--- /dev/null
+++ b/examples/java_simple4/compile.sh
@@ -0,0 +1,10 @@
+#!/bin/bash
+
+rm simple4.jar
+(
+cd simple4_src
+javac -classpath . simple4/*.java
+jar cfm ../simple4.jar META-INF/MANIFEST.MF simple4/*.class
+)
+
+# java -jar simple4.jar
diff --git a/examples/java_simple4/simple4.jar b/examples/java_simple4/simple4.jar
new file mode 100644
index 0000000..ce5957a
Binary files /dev/null and b/examples/java_simple4/simple4.jar differ
diff --git a/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF b/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..f29fe6e
--- /dev/null
+++ b/examples/java_simple4/simple4_src/META-INF/MANIFEST.MF
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+Main-Class: simple4.Class1
diff --git a/examples/java_simple4/simple4_src/simple4/Class1.java b/examples/java_simple4/simple4_src/simple4/Class1.java
new file mode 100644
index 0000000..6f5750c
--- /dev/null
+++ b/examples/java_simple4/simple4_src/simple4/Class1.java
@@ -0,0 +1,22 @@
+package simple4;
+
+import java.io.IOException;
+
+public class Class1 {
+
+    public static void main(String[] args) {
+        int c;
+
+        try {
+            c = System.in.read();
+            if(c=='F'){
+                System.out.write('W');
+            }else{
+                System.out.write('L');
+            }
+            System.out.flush();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+}
diff --git a/examples/java_simple4/solve.py b/examples/java_simple4/solve.py
new file mode 100644
index 0000000..566c2f3
--- /dev/null
+++ b/examples/java_simple4/solve.py
@@ -0,0 +1,35 @@
+
+import os
+import angr
+import logging
+
+
+self_dir = os.path.dirname(os.path.realpath(__file__))
+
+
+def test_java_simple4():
+    binary_path = os.path.join(self_dir, "simple4.jar")
+    project = angr.Project(binary_path)
+    entry = project.factory.entry_state()
+    simgr = project.factory.simgr(entry)
+    simgr.explore()
+
+    states = simgr.deadended
+    assert len(states) == 2
+
+    # the winning state has "W" on stdout and "F" on stdin
+    winnning_states = [s for s in states if s.posix.stdout.concretize() == [b"W"]]
+    assert len(winnning_states) == 1
+    winning_state = winnning_states[0]
+    flag = b"".join(winning_state.posix.stdin.concretize())
+    assert flag == b"F"
+
+
+def test():
+    test_java_simple4()
+
+
+if __name__ == "__main__":
+    logging.getLogger("angr.engines.soot.engine").setLevel("DEBUG")
+    logging.getLogger("angr.factory").setLevel("DEBUG")
+    test()
diff --git a/tests/test_examples.py b/tests/test_examples.py
index 80e5ef5..82cb43c 100644
--- a/tests/test_examples.py
+++ b/tests/test_examples.py
@@ -83,6 +83,11 @@ def test_unmapped_analysis(): exampletest_single('unmapped_analysis')
 @attr(speed='slow')
 def test_zwiebel(): exampletest_single('tumctf2016_zwiebel') # ~45m
 def test_csgames2018(): exampletest_single('csgames2018')
+def test_java_crackme1(): exampletest_single('java_crackme1')
+def test_java_simple3(): exampletest_single('java_simple3')
+def test_java_simple4(): exampletest_single('java_simple4')
+def test_ictf2017_javaisnotfun(): exampletest_single('ictf2017_javaisnotfun')
+def test_java_androidnative1(): exampletest_single('java_androidnative1')
 ## END EXAMPLE TESTS
 
 def test_example_inclusion():
