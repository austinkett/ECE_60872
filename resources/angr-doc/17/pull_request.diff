diff --git a/ir.md b/ir.md
index 83a8562..a59d319 100644
--- a/ir.md
+++ b/ir.md
@@ -18,7 +18,7 @@ This representation has four main classes of objects:
 - **Statements.** IR Statements model changes in the state of the target machine, such as the effect of memory stores and register writes. IR Statements use IR Expressions for values they may need. For example, a memory store *IR Statement* uses an *IR Expression* for the target address of the write, and another *IR Expression* for the content.
 - **Blocks.** An IR Block is a collection of IR Statements, representing an extended basic block (termed "IR Super Block" or "IRSB") in the target architecture. A block can have several exits. For conditional exits from the middle of a basic block, a special *Exit* IR Statement is used. An IR Expression is used to represent the target of the unconditional exit at the end of the block.
 
-VEX IR is actually quite well documented in the `libvex_ir.h` file (https://git.seclab.cs.ucsb.edu/gitlab/angr/vex/blob/master/pub/libvex_ir.h) in the VEX repository. For the lazy, we'll detail some parts of VEX that you'll likely interact with fairly frequently. To begin with, here are some IR Expressions:
+VEX IR is actually quite well documented in the `libvex_ir.h` file (https://github.com/angr/vex/blob/master/pub/libvex_ir.h) in the VEX repository. For the lazy, we'll detail some parts of VEX that you'll likely interact with fairly frequently. To begin with, here are some IR Expressions:
 
 | IR Expression | Evaluated Value | VEX Output Example |
 | ------------- | --------------- | ------- |
diff --git a/simuvex.md b/simuvex.md
index feca8e5..3eb4124 100644
--- a/simuvex.md
+++ b/simuvex.md
@@ -1,7 +1,7 @@
 # Semantic Meaning
 
 Most analyses require an understanding of what the code is *doing* (semantic meaning), not just what the code *is* (syntactic meaning).
-For this, we developed a module called SimuVEX (https://git.seclab.cs.ucsb.edu/gitlab/angr/simuvex). SimuVEX provides a semantic understanding of what a given piece of VEX code does on a given machine state.
+For this, we developed a module called SimuVEX (https://github.com/angr/simuvex). SimuVEX provides a semantic understanding of what a given piece of VEX code does on a given machine state.
 
 In a nutshell, SimuVEX is a VEX emulator.
 Given a machine state and a VEX IR block, SimuVEX provides a resulting machine state (or, in the case of condition jumps, *several* resulting machine states).
