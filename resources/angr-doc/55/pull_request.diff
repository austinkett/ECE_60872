diff --git a/docs/examples.md b/docs/examples.md
index 006acc9..560be73 100644
--- a/docs/examples.md
+++ b/docs/examples.md
@@ -13,6 +13,22 @@ Binary, source, and script are found [here.](https://github.com/angr/angr-doc/tr
 
 ## CTF Problems
 
+### ReverseMe example: Google CTF - baby-re
+
+Script 0 author: David Manouchehri (github: [@Manouchehri](https://github.com/Manouchehri))
+
+Script runtime: 8 minutes
+
+Script 1 author: Stanislas Lejay (github: [@P1kachu](https://github.com/P1kachu))
+
+Script runtime: 11 sec
+
+Here is the [binary](https://github.com/angr/angr-doc/tree/master/examples/defcon2016quals_baby-re/baby-re) and the scripts:
+* [script0](https://github.com/angr/angr-doc/tree/master/examples/defcon2016quals_baby-re_0/solve.py)
+* [script1](https://github.com/angr/angr-doc/tree/master/examples/defcon2016quals_baby-re_1/solve.py)
+
+
+
 ### ReverseMe example: Google CTF - Unbreakable Enterprise Product Activation (150 points)
 
 Script 0 author: David Manouchehri (github: [@Manouchehri](https://github.com/Manouchehri))
@@ -40,10 +56,10 @@ Script runtime: 5.5 sec
 
 A Windows binary that takes a flag as argument, and tells you if the flag is correct or not.
 
-"I have to patch out some checks that are difficult for angr to solve (e.g., it uses some bytes of the flag to decrypt some data, and see if those data are legit Windows APIs). 
+"I have to patch out some checks that are difficult for angr to solve (e.g., it uses some bytes of the flag to decrypt some data, and see if those data are legit Windows APIs).
 Other than that, angr works really well for solving this challenge."
 
-The [binary](https://github.com/angr/angr-doc/tree/master/examples/whitehatvn2015_re400/re400.exe) and the [script](https://github.com/angr/angr-doc/tree/master/examples/whitehatvn2015_re400/solve.py). 
+The [binary](https://github.com/angr/angr-doc/tree/master/examples/whitehatvn2015_re400/re400.exe) and the [script](https://github.com/angr/angr-doc/tree/master/examples/whitehatvn2015_re400/solve.py).
 
 ### ReverseMe example: EKOPARTY CTF 2015 - rev 100
 
@@ -117,10 +133,10 @@ The binary can be found [here](https://github.com/angr/angr-doc/tree/master/exam
 
 Author: Fish Wang (github: @ltfish)
 
-angr acts as a binary loader and an emulator in solving this challenge. 
+angr acts as a binary loader and an emulator in solving this challenge.
 I didnâ€™t have to load the driver onto my Windows box.
 
-The [script](https://github.com/angr/angr-doc/tree/master/examples/flareon2015_10/solve.py) demonstrates how to hook at arbitrary program points without affecting the intended bytes to be executed (a zero-length hook). 
+The [script](https://github.com/angr/angr-doc/tree/master/examples/flareon2015_10/solve.py) demonstrates how to hook at arbitrary program points without affecting the intended bytes to be executed (a zero-length hook).
 It also shows how to read bytes out of memory and decode as a string.
 
 By the way, here is the [link](https://www.fireeye.com/content/dam/fireeye-www/global/en/blog/threat-research/flareon/2015solution10.pdf) to the intended solution from FireEye.
@@ -157,7 +173,7 @@ you can also find the solution from the FireEye [here](https://www.fireeye.com/c
 Author: Fish Wang (github: @ltfish), ocean (github: @ocean1)
 
 This challenge is a [movfuscated](https://github.com/xoreaxeaxeax/movfuscator) binary.
-To find the correct password after exploring the binary with Qira it is possible to understand 
+To find the correct password after exploring the binary with Qira it is possible to understand
 how to find the places in the binary where every character is checked using capstone and using angr to
 load the [binary](./examples/0ctf_momo/solve.py) and brute-force the single characters of the flag.
 Be aware that the [script](./examples/0ctf_momo/solve.py) is really slow. Runtime: > 1 hour.
@@ -215,7 +231,7 @@ The script to do so is [here](https://github.com/angr/angr-doc/tree/master/examp
 Author: Andrew Dutcher (github: @rhelmot)
 
 angr cannot currently solve this problem natively, as the problem is too complex for z3 to solve.
-Formatting the constraints to z3 a little differently allows z3 to come up with an answer relatively quickly. 
+Formatting the constraints to z3 a little differently allows z3 to come up with an answer relatively quickly.
 (I was asleep while it was solving, so I don't know exactly how long!)
 The script for this is [here](https://github.com/angr/angr-doc/tree/master/examples/9447_nobranch/solve.py) and the binary is [here](https://github.com/angr/angr-doc/tree/master/examples/9447_nobranch/nobranch).
 
@@ -232,11 +248,11 @@ ais3_crackme has been developed by Tyler Nighswander (tylerni7) for ais3 summer
 
 Author: Kyle Ossinger (github: @k0ss)
 
-This is the first in a series of "tutorial scripts" I'll be making which use angr to find exploitable conditions in binaries.  
-The first example is a very simple program.  
-The script finds a path from the main entry point to `strcpy`, but **only** when we control the source buffer of the `strcpy` operation.  
-To hit the right path, angr has to solve for a password argument, but angr solved this in less than 2 seconds on my machine using the standard python interpreter.  
-The script might look large, but that's only because I've heavily commented it to be more helpful to beginners.  
+This is the first in a series of "tutorial scripts" I'll be making which use angr to find exploitable conditions in binaries.
+The first example is a very simple program.
+The script finds a path from the main entry point to `strcpy`, but **only** when we control the source buffer of the `strcpy` operation.
+To hit the right path, angr has to solve for a password argument, but angr solved this in less than 2 seconds on my machine using the standard python interpreter.
+The script might look large, but that's only because I've heavily commented it to be more helpful to beginners.
 The challenge binary is [here](https://github.com/angr/angr-doc/tree/master/examples/strcpy_find/strcpy_test) and the script is [here](https://github.com/angr/angr-doc/tree/master/examples/strcpy_find/solve.py).
 
 ### Beginner Exploitation example: CADET_0001
diff --git a/examples/defcon2016quals_baby-re_1/baby-re b/examples/defcon2016quals_baby-re_1/baby-re
new file mode 100755
index 0000000..8dcd2ba
Binary files /dev/null and b/examples/defcon2016quals_baby-re_1/baby-re differ
diff --git a/examples/defcon2016quals_baby-re_1/solve.py b/examples/defcon2016quals_baby-re_1/solve.py
new file mode 100755
index 0000000..7c36891
--- /dev/null
+++ b/examples/defcon2016quals_baby-re_1/solve.py
@@ -0,0 +1,59 @@
+#!/usr/bin/python2
+
+import angr
+import string
+
+# DEFCON - BABY-RE
+# @author: P1kachu
+# @contact: p1kachu@lse.epita.fr
+# execution time: 14s  - Intel i7 - 16Gb RAM
+
+def main():
+    p = angr.Project('baby-re')
+
+
+    win            = 0x4028e9  # good
+    fail           = 0x402941  # fail
+    main           = 0x4025e7  # Address of main
+    PASS_LEN       = 13
+    flag_addr      = 0x7fffffffffeff98 # First rsi from scanf
+    find           = (win,)
+    avoid          = (fail,)
+
+
+    def patch_scanf(state):
+        print(state.regs.rsi)
+        state.mem[state.regs.rsi:] = state.se.BVS('c', 8)
+
+    # IDA xrefs
+    scanf_offsets = (0x4d, 0x85, 0xbd, 0xf5, 0x12d, 0x165, 0x19d, 0x1d5, 0x20d, 0x245, 0x27d, 0x2b5, 0x2ed)
+
+
+    init = p.factory.blank_state(addr=main)
+
+    # Patch scanfs (don't know how angr handles it)
+    for offst in scanf_offsets:
+        p.hook(main + offst, func=patch_scanf, length=5)
+
+
+    pgp = p.factory.path_group(init)
+
+    # Now stuff becomes interesting
+    ex = pgp.explore(find=find, avoid=avoid)
+
+    print(ex)
+    s = ex.found[0].state
+    flag = s.se.any_str(s.memory.load(flag_addr, 50))
+
+    # The flag is 'Math is hard!'
+    print("The flag is '{0}'".format(flag))
+    return flag
+
+def test():
+    res = main()
+    printable = set(string.printable)
+    res = filter(lambda x: x in printable, res)
+    assert res == "Math is hard!"
+
+if __name__ in '__main__':
+    print(main())
