diff --git a/docs/examples.md b/docs/examples.md
index 7f4a9a7..b018769 100644
--- a/docs/examples.md
+++ b/docs/examples.md
@@ -239,6 +239,12 @@ Author: Antonio Bianchi, Tyler Nighswander
 
 ais3_crackme has been developed by Tyler Nighswander (tylerni7) for ais3 summer school. It is an easy crackme challenge, checking its command line argument.
 
+### ReverseMe: Modern Binary Exploitation - CSCI 4968
+
+Author: David Manouchehri (GitHub [@Manouchehri](https://github.com/Manouchehri))
+
+[This folder](https://github.com/angr/angr-doc/tree/master/examples/CSCI-4968-MBE/challenges) contains scripts used to solve some of the challenges with angr. At the moment it only contains the examples from the IOLI crackme suite, but eventually other solutions will be added.
+
 
 ## Exploitation Examples
 
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a b/examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a
new file mode 100755
index 0000000..61917fa
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x00a/crackme0x00a differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x00a/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x00a/solve.py
new file mode 100755
index 0000000..8279969
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x00a/solve.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python2
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+FIND_ADDR = 0x08048533 # mov dword [esp], str.Congrats_ ; [0x8048654:4]=0x676e6f43 LEA str.Congrats_ ; "Congrats!" @ 0x8048654
+AVOID_ADDR = 0x08048554 # mov dword [esp], str.Wrong_ ; [0x804865e:4]=0x6e6f7257 LEA str.Wrong_ ; "Wrong!" @ 0x804865e
+
+
+def main():
+	proj = angr.Project('crackme0x00a', load_options={"auto_load_libs": False}) 
+	path_group = proj.factory.path_group()
+	path_group.explore(find=FIND_ADDR, avoid=AVOID_ADDR) 
+	return path_group.found[0].state.posix.dumps(0).split('\0')[0] # stdin
+
+def test():
+	assert main() == 'g00dJ0B!'
+
+if __name__ == '__main__':
+	print(main())
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x01/crackme0x01 b/examples/CSCI-4968-MBE/challenges/crackme0x01/crackme0x01
new file mode 100755
index 0000000..f49d8c4
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x01/crackme0x01 differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x01/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x01/solve.py
new file mode 100755
index 0000000..fedd49e
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x01/solve.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+FIND_ADDR = 0x0804844e # This is right after the printf for the OK password.
+AVOID_ADDR = 0x08048434 # mov dword [esp], str.Invalid_Password__n ; [0x804854f:4]=0x61766e49 LEA str.Invalid_Password__n ; "Invalid Password!." @ 0x804854f
+
+def main():
+	proj = angr.Project('crackme0x01', load_options={"auto_load_libs": False}) 
+
+	path_group = proj.factory.path_group()
+	path_group.explore(find=FIND_ADDR, avoid=AVOID_ADDR)
+
+	return path_group.found[0].state.posix.dumps(0).lstrip('+0').rstrip('B')
+
+def test():
+	assert main() == '5274'
+
+if __name__ == '__main__':
+	print(main())
+
+"""
+[0x08048530]> pdf @ main  
+            ;-- main:
+╒ (fcn) sym.main 113
+│           ; arg int arg_149ah @ ebp+0x149a
+│           ; var int arg_4h @ esp+0x4
+│           ; UNKNOWN XREF from 0x08048348 (entry0)
+│           ; DATA XREF from 0x08048347 (entry0)
+│           0x080483e4      55             push ebp
+│           0x080483e5      89e5           ebp = esp
+│           0x080483e7      83ec18         esp -= 0x18
+│           0x080483ea      83e4f0         esp &= 0xfffffff0
+│           0x080483ed      b800000000     eax = 0
+│           0x080483f2      83c00f         eax += 0xf
+│           0x080483f5      83c00f         eax += 0xf
+│           0x080483f8      c1e804         eax >>>= 4
+│           0x080483fb      c1e004         eax <<<= 4
+│           0x080483fe      29c4           esp -= eax
+│           0x08048400      c70424288504.  dword [esp] = str.IOLI_Crackme_Level_0x01_n ; [0x8048528:4]=0x494c4f49 LEA str.IOLI_Crackme_Level_0x01_n ; "IOLI Crackme Level 0x01." @ 0x8048528
+│           0x08048407      e810ffffff     sym.imp.printf ()
+│           0x0804840c      c70424418504.  dword [esp] = str.Password: ; [0x8048541:4]=0x73736150 LEA str.Password: ; "Password: " @ 0x8048541
+│           0x08048413      e804ffffff     sym.imp.printf ()
+│           0x08048418      8d45fc         eax = [ebp - local_4h]
+│           0x0804841b      89442404       dword [esp + arg_4h] = eax
+│           0x0804841f      c704244c8504.  dword [esp] = 0x804854c     ; [0x804854c:4]=0x49006425 ; "%d" @ 0x804854c
+│           0x08048426      e8e1feffff     sym.imp.scanf ()
+│           0x0804842b      817dfc9a1400.  if (dword [ebp - local_4h] == 0x149a ; [0x149a:4]=0x2ec0804
+│       ┌─< 0x08048432      740e           isZero 0x8048442)
+│       │   0x08048434      c704244f8504.  dword [esp] = str.Invalid_Password__n ; [0x804854f:4]=0x61766e49 LEA str.Invalid_Password__n ; "Invalid Password!." @ 0x804854f
+│       │   0x0804843b      e8dcfeffff     sym.imp.printf ()
+│      ┌──< 0x08048440      eb0c           goto 0x804844e
+│      │└─> 0x08048442      c70424628504.  dword [esp] = str.Password_OK_:__n ; [0x8048562:4]=0x73736150 LEA str.Password_OK_:__n ; "Password OK :)." @ 0x8048562
+│      │    0x08048449      e8cefeffff     sym.imp.printf ()
+│      │    ; JMP XREF from 0x08048440 (sym.main)
+│      └──> 0x0804844e      b800000000     eax = 0
+│           0x08048453      c9             
+╘           0x08048454      c3       
+"""
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x02/crackme0x02 b/examples/CSCI-4968-MBE/challenges/crackme0x02/crackme0x02
new file mode 100755
index 0000000..9ff97e9
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x02/crackme0x02 differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x02/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x02/solve.py
new file mode 100755
index 0000000..06f6485
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x02/solve.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+FIND_ADDR = 0x0804845f # Statement right after the OK printf.
+AVOID_ADDR = 0x08048461 # dword [esp] = str.Invalid_Password__n ; [0x804857f:4]=0x61766e49 LEA str.Invalid_Password__n ; "Invalid Password!." @ 0x804857f
+
+def main():
+	proj = angr.Project('crackme0x02', load_options={"auto_load_libs": False}) 
+
+	path_group = proj.factory.path_group()
+	path_group.explore(find=FIND_ADDR, avoid=AVOID_ADDR)
+
+	return path_group.found[0].state.posix.dumps(0).lstrip('+0').rstrip('B')
+
+def test():
+	assert main() == '338724'
+
+if __name__ == '__main__':
+	print(main())
+
+"""
+ [0x08048330]> pdf @ main 
+            ;-- main:
+╒ (fcn) sym.main 144
+│           ; var int local_4h @ ebp-0x4
+│           ; var int local_8h @ ebp-0x8
+│           ; var int local_ch @ ebp-0xc
+│           ; var int arg_4h @ esp+0x4
+│           ; UNKNOWN XREF from 0x08048348 (entry0)
+│           ; DATA XREF from 0x08048347 (entry0)
+│           0x080483e4      55             push ebp
+│           0x080483e5      89e5           ebp = esp
+│           0x080483e7      83ec18         esp -= 0x18
+│           0x080483ea      83e4f0         esp &= 0xfffffff0
+│           0x080483ed      b800000000     eax = 0
+│           0x080483f2      83c00f         eax += 0xf
+│           0x080483f5      83c00f         eax += 0xf
+│           0x080483f8      c1e804         eax >>>= 4
+│           0x080483fb      c1e004         eax <<<= 4
+│           0x080483fe      29c4           esp -= eax
+│           0x08048400      c70424488504.  dword [esp] = str.IOLI_Crackme_Level_0x02_n ; [0x8048548:4]=0x494c4f49 LEA str.IOLI_Crackme_Level_0x02_n ; "IOLI Crackme Level 0x02." @ 0x8048548
+│           0x08048407      e810ffffff     sym.imp.printf ()
+│           0x0804840c      c70424618504.  dword [esp] = str.Password: ; [0x8048561:4]=0x73736150 LEA str.Password: ; "Password: " @ 0x8048561
+│           0x08048413      e804ffffff     sym.imp.printf ()
+│           0x08048418      8d45fc         eax = [ebp - local_4h]
+│           0x0804841b      89442404       dword [esp + arg_4h] = eax
+│           0x0804841f      c704246c8504.  dword [esp] = 0x804856c     ; [0x804856c:4]=0x50006425 ; "%d" @ 0x804856c
+│           0x08048426      e8e1feffff     sym.imp.scanf ()
+│           0x0804842b      c745f85a0000.  dword [ebp - local_8h] = 0x5a
+│           0x08048432      c745f4ec0100.  dword [ebp - local_ch] = 0x1ec
+│           0x08048439      8b55f4         edx = dword [ebp - local_ch]
+│           0x0804843c      8d45f8         eax = [ebp - local_8h]
+│           0x0804843f      0110           dword [eax] += edx
+│           0x08048441      8b45f8         eax = dword [ebp - local_8h]
+│           0x08048444      0faf45f8       eax *= dword [ebp - local_8h]
+│           0x08048448      8945f4         dword [ebp - local_ch] = eax
+│           0x0804844b      8b45fc         eax = dword [ebp - local_4h]
+│           0x0804844e      3b45f4         if (eax == dword [ebp - local_ch]
+│       ┌─< 0x08048451      750e           notZero 0x8048461)
+│       │   0x08048453      c704246f8504.  dword [esp] = str.Password_OK_:__n ; [0x804856f:4]=0x73736150 LEA str.Password_OK_:__n ; "Password OK :)." @ 0x804856f
+│       │   0x0804845a      e8bdfeffff     sym.imp.printf ()
+│      ┌──< 0x0804845f      eb0c           goto 0x804846d
+│      │└─> 0x08048461      c704247f8504.  dword [esp] = str.Invalid_Password__n ; [0x804857f:4]=0x61766e49 LEA str.Invalid_Password__n ; "Invalid Password!." @ 0x804857f
+│      │    0x08048468      e8affeffff     sym.imp.printf ()
+│      │    ; JMP XREF from 0x0804845f (sym.main)
+│      └──> 0x0804846d      b800000000     eax = 0
+│           0x08048472      c9             
+╘           0x08048473      c3  
+"""
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x03/crackme0x03 b/examples/CSCI-4968-MBE/challenges/crackme0x03/crackme0x03
new file mode 100755
index 0000000..6be1f0e
Binary files /dev/null and b/examples/CSCI-4968-MBE/challenges/crackme0x03/crackme0x03 differ
diff --git a/examples/CSCI-4968-MBE/challenges/crackme0x03/solve.py b/examples/CSCI-4968-MBE/challenges/crackme0x03/solve.py
new file mode 100755
index 0000000..4525b98
--- /dev/null
+++ b/examples/CSCI-4968-MBE/challenges/crackme0x03/solve.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python2
+# -*- coding: utf-8 -*-
+
+# Author: David Manouchehri <manouchehri@protonmail.com>
+# Modern Binary Exploitation
+# http://security.cs.rpi.edu/courses/binexp-spring2015/
+
+import angr
+
+FIND_ADDR = 0x0804848a
+AVOID_ADDR = 0x0804847c
+
+def main():
+	proj = angr.Project('crackme0x03', load_options={"auto_load_libs": False}) 
+
+	path_group = proj.factory.path_group()
+	path_group.explore(find=FIND_ADDR, avoid=AVOID_ADDR)
+
+	return path_group.found[0].state.posix.dumps(0).lstrip('+0').rstrip('B')
+
+def test():
+	assert main() == '338724'
+
+if __name__ == '__main__':
+	print(main())
+
+"""
+[0x08048360]> pdf @ main  
+            ;-- main:
+╒ (fcn) sym.main 128
+│           ; var int local_4h @ ebp-0x4
+│           ; var int local_8h @ ebp-0x8
+│           ; var int local_ch @ ebp-0xc
+│           ; var int arg_4h @ esp+0x4
+│           ; UNKNOWN XREF from 0x08048378 (entry0)
+│           ; DATA XREF from 0x08048377 (entry0)
+│           0x08048498      55             push ebp
+│           0x08048499      89e5           ebp = esp
+│           0x0804849b      83ec18         esp -= 0x18
+│           0x0804849e      83e4f0         esp &= 0xfffffff0
+│           0x080484a1      b800000000     eax = 0
+│           0x080484a6      83c00f         eax += 0xf
+│           0x080484a9      83c00f         eax += 0xf
+│           0x080484ac      c1e804         eax >>>= 4
+│           0x080484af      c1e004         eax <<<= 4
+│           0x080484b2      29c4           esp -= eax
+│           0x080484b4      c70424108604.  dword [esp] = str.IOLI_Crackme_Level_0x03_n ; [0x8048610:4]=0x494c4f49 LEA str.IOLI_Crackme_Level_0x03_n ; "IOLI Crackme Level 0x03." @ 0x8048610
+│           0x080484bb      e890feffff     sym.imp.printf ()
+│           0x080484c0      c70424298604.  dword [esp] = str.Password: ; [0x8048629:4]=0x73736150 LEA str.Password: ; "Password: " @ 0x8048629
+│           0x080484c7      e884feffff     sym.imp.printf ()
+│           0x080484cc      8d45fc         eax = [ebp - local_4h]
+│           0x080484cf      89442404       dword [esp + arg_4h] = eax
+│           0x080484d3      c70424348604.  dword [esp] = 0x8048634     ; [0x8048634:4]=0x6425 ; "%d" @ 0x8048634
+│           0x080484da      e851feffff     sym.imp.scanf ()
+│           0x080484df      c745f85a0000.  dword [ebp - local_8h] = 0x5a
+│           0x080484e6      c745f4ec0100.  dword [ebp - local_ch] = 0x1ec
+│           0x080484ed      8b55f4         edx = dword [ebp - local_ch]
+│           0x080484f0      8d45f8         eax = [ebp - local_8h]
+│           0x080484f3      0110           dword [eax] += edx
+│           0x080484f5      8b45f8         eax = dword [ebp - local_8h]
+│           0x080484f8      0faf45f8       eax *= dword [ebp - local_8h]
+│           0x080484fc      8945f4         dword [ebp - local_ch] = eax
+│           0x080484ff      8b45f4         eax = dword [ebp - local_ch]
+│           0x08048502      89442404       dword [esp + arg_4h] = eax
+│           0x08048506      8b45fc         eax = dword [ebp - local_4h]
+│           0x08048509      890424         dword [esp] = eax
+│           0x0804850c      e85dffffff     sym.test ()
+│           0x08048511      b800000000     eax = 0
+│           0x08048516      c9             
+╘           0x08048517      c3   
+[0x08048460]> pdf @ sym.test 
+╒ (fcn) sym.test 42
+│           ; arg int arg_8h @ ebp+0x8
+│           ; arg int arg_ch @ ebp+0xc
+│           ; CALL XREF from 0x0804850c (sym.main)
+│           0x0804846e      55             push ebp
+│           0x0804846f      89e5           ebp = esp
+│           0x08048471      83ec08         esp -= 8
+│           0x08048474      8b4508         eax = dword [ebp + arg_8h]  ; [0x8:4]=0
+│           0x08048477      3b450c         if (eax == dword [ebp + arg_ch] ; [0xc:4]=0
+│       ┌─< 0x0804847a      740e           isZero 0x804848a)
+│       │   0x0804847c      c70424ec8504.  dword [esp] = str.Lqydolg_Sdvvzrug_ ; [0x80485ec:4]=0x6479714c LEA str.Lqydolg_Sdvvzrug_ ; "Lqydolg#Sdvvzrug$" @ 0x80485ec
+│       │   0x08048483      e88cffffff     sym.shift ()
+│      ┌──< 0x08048488      eb0c           goto 0x8048496
+│      │└─> 0x0804848a      c70424fe8504.  dword [esp] = str.Sdvvzrug_RN______ ; [0x80485fe:4]=0x76766453 LEA str.Sdvvzrug_RN______ ; "Sdvvzrug#RN$$$#=," @ 0x80485fe
+│      │    0x08048491      e87effffff     sym.shift ()
+│      │    ; JMP XREF from 0x08048488 (sym.test)
+│      └──> 0x08048496      c9             
+╘           0x08048497      c3             
+"""
