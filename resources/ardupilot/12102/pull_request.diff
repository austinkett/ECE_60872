diff --git a/libraries/SITL/SIM_Sailboat.cpp b/libraries/SITL/SIM_Sailboat.cpp
index 060a2fb183b8..cbd96e1607e7 100644
--- a/libraries/SITL/SIM_Sailboat.cpp
+++ b/libraries/SITL/SIM_Sailboat.cpp
@@ -43,6 +43,7 @@ Sailboat::Sailboat(const char *frame_str) :
     steering_angle_max(35),
     turning_circle(1.8)
 {
+    motor_connected = (strcmp(frame_str, "sailboat-motor") == 0);
 }
 
 // calculate the lift and drag as values from 0 to 1
@@ -222,9 +223,9 @@ void Sailboat::update(const struct sitl_input &input)
     // throttle force (for motor sailing)
     // gives throttle force == hull drag at 10m/s
     float throttle_force = 0.0f;
-    uint16_t throttle_in = input.servos[THROTTLE_SERVO_CH];
-    if (throttle_in > 900 && throttle_in < 2100) {
-        throttle_force = (throttle_in-1500) * 0.1f;
+    if (motor_connected) {
+        const uint16_t throttle_out = constrain_int16(input.servos[THROTTLE_SERVO_CH], 1000, 2000);
+        throttle_force = (throttle_out-1500) * 0.1f;
     }
 
     // accel in body frame due acceleration from sail and deceleration from hull friction
diff --git a/libraries/SITL/SIM_Sailboat.h b/libraries/SITL/SIM_Sailboat.h
index b82f41959cbe..fc121cf8bc1e 100644
--- a/libraries/SITL/SIM_Sailboat.h
+++ b/libraries/SITL/SIM_Sailboat.h
@@ -52,6 +52,9 @@ class Sailboat : public Aircraft {
     // return lateral acceleration in m/s/s given a steering input (in the range -1 to +1) and speed in m/s
     float get_lat_accel(float steering, float speed) const;
 
+    // simulate waves and swell
+    void update_wave(float delta_time);
+
     float steering_angle_max;   // vehicle steering mechanism's max angle in degrees
     float turning_circle;       // vehicle minimum turning circle diameter in meters
 
@@ -63,13 +66,10 @@ class Sailboat : public Aircraft {
     const float mass = 2.0f;
 
     Vector3f velocity_ef_water; // m/s
-
-    // simulate basic waves / swell
-    void update_wave(float delta_time);
-    Vector3f wave_gyro; // rad/s
-    float wave_heave; // m/s/s
-    float wave_phase; // rads
-
+    Vector3f wave_gyro;         // rad/s
+    float wave_heave;           // m/s/s
+    float wave_phase;           // rads
+    bool motor_connected;       // true if this frame has a motor
 };
 
 } // namespace SITL
