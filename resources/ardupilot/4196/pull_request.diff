diff --git a/libraries/AP_NavEKF2/AP_NavEKF2.cpp b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
index 4bfd45d28175..30aeb7c8024a 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
@@ -23,7 +23,7 @@
 #define GYRO_P_NSE_DEFAULT      3.0E-02f
 #define ACC_P_NSE_DEFAULT       6.0E-01f
 #define GBIAS_P_NSE_DEFAULT     1.0E-04f
-#define GSCALE_P_NSE_DEFAULT    1.0E-05f
+#define GSCALE_P_NSE_DEFAULT    5.0E-04f
 #define ABIAS_P_NSE_DEFAULT     1.0E-03f
 #define MAG_P_NSE_DEFAULT       2.5E-02f
 #define VEL_I_GATE_DEFAULT      500
@@ -47,7 +47,7 @@
 #define GYRO_P_NSE_DEFAULT      3.0E-02f
 #define ACC_P_NSE_DEFAULT       6.0E-01f
 #define GBIAS_P_NSE_DEFAULT     1.0E-04f
-#define GSCALE_P_NSE_DEFAULT    1.0E-05f
+#define GSCALE_P_NSE_DEFAULT    5.0E-04f
 #define ABIAS_P_NSE_DEFAULT     1.0E-03f
 #define MAG_P_NSE_DEFAULT       2.5E-02f
 #define VEL_I_GATE_DEFAULT      500
@@ -71,7 +71,7 @@
 #define GYRO_P_NSE_DEFAULT      3.0E-02f
 #define ACC_P_NSE_DEFAULT       6.0E-01f
 #define GBIAS_P_NSE_DEFAULT     1.0E-04f
-#define GSCALE_P_NSE_DEFAULT    1.0E-05f
+#define GSCALE_P_NSE_DEFAULT    5.0E-04f
 #define ABIAS_P_NSE_DEFAULT     1.0E-03f
 #define MAG_P_NSE_DEFAULT       2.5E-02f
 #define VEL_I_GATE_DEFAULT      500
@@ -95,7 +95,7 @@
 #define GYRO_P_NSE_DEFAULT      3.0E-02f
 #define ACC_P_NSE_DEFAULT       6.0E-01f
 #define GBIAS_P_NSE_DEFAULT     1.0E-04f
-#define GSCALE_P_NSE_DEFAULT    1.0E-05f
+#define GSCALE_P_NSE_DEFAULT    5.0E-04f
 #define ABIAS_P_NSE_DEFAULT     1.0E-03f
 #define MAG_P_NSE_DEFAULT       2.5E-02f
 #define VEL_I_GATE_DEFAULT      500
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
index f929eb7f97ef..53640dee62d1 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
@@ -46,7 +46,32 @@ void NavEKF2_core::controlFilterModes()
 void NavEKF2_core::setWindMagStateLearningMode()
 {
     // If we are on ground, or in constant position mode, or don't have the right vehicle and sensing to estimate wind, inhibit wind states
-    inhibitWindStates = ((!useAirspeed() && !assume_zero_sideslip()) || onGround || (PV_AidingMode == AID_NONE));
+    bool setWindInhibit = (!useAirspeed() && !assume_zero_sideslip()) || onGround || (PV_AidingMode == AID_NONE);
+    if (!inhibitWindStates && setWindInhibit) {
+        inhibitWindStates = true;
+    } else if (inhibitWindStates && !setWindInhibit) {
+        inhibitWindStates = false;
+        // set states and variances
+        if (yawAlignComplete && useAirspeed()) {
+            // if we have airspeed and a valid heading, set the wind states to the reciprocal of the vehicle heading
+            // which assumes the vehicle has launched into the wind
+             Vector3f tempEuler;
+            stateStruct.quat.to_euler(tempEuler.x, tempEuler.y, tempEuler.z);
+            float windSpeed =  sqrtf(sq(stateStruct.velocity.x) + sq(stateStruct.velocity.y)) - tasDataDelayed.tas;
+            stateStruct.wind_vel.x = windSpeed * cosf(tempEuler.z);
+            stateStruct.wind_vel.y = windSpeed * sinf(tempEuler.z);
+
+            // set the wind sate variances to the measurement uncertainty
+            for (uint8_t index=22; index<=23; index++) {
+                P[index][index] = sq(constrain_float(frontend->_easNoise, 0.5f, 5.0f) * constrain_float(_ahrs->get_EAS2TAS(), 0.9f, 10.0f));
+            }
+        } else {
+            // set the variances using a typical wind speed
+            for (uint8_t index=22; index<=23; index++) {
+                P[index][index] = sq(5.0f);
+            }
+        }
+    }
 
     // determine if the vehicle is manoevring
     if (accNavMagHoriz > 0.5f) {
@@ -67,7 +92,18 @@ void NavEKF2_core::setWindMagStateLearningMode()
     bool magCalDenied = !use_compass() || (frontend->_magCal == 2) ||(onGround && frontend->_magCal != 4);
 
     // Inhibit the magnetic field calibration if not requested or denied
-    inhibitMagStates = (!magCalRequested || magCalDenied);
+    bool setMagInhibit = !magCalRequested || magCalDenied;
+    if (!inhibitMagStates && setMagInhibit) {
+        inhibitMagStates = true;
+    } else if (inhibitMagStates && !setMagInhibit) {
+        inhibitMagStates = false;
+        // when commencing use of magnetic field states, set the variances equal to the observation uncertainty
+        for (uint8_t index=16; index<=21; index++) {
+            P[index][index] = sq(frontend->_magNoise);
+        }
+        // let the magnetometer fusion know it needs to reset the yaw and field states
+        firstMagYawInit = false;
+    }
 
     // If on ground we clear the flag indicating that the magnetic field in-flight initialisation has been completed
     // because we want it re-done for each takeoff
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
index 251caadd3846..92d3248c33cf 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
@@ -43,8 +43,6 @@ void NavEKF2_core::controlMagYawReset()
 
         if (hgtCheckPassed || toiletBowling) {
             firstMagYawInit = true;
-            // reset the timer used to prevent magnetometer fusion from affecting attitude until initial field learning is complete
-            magFuseTiltInhibit_ms =  imuSampleTime_ms;
             // Update the yaw  angle and earth field states using the magnetic field measurements
             Quaternion tempQuat;
             Vector3f eulerAngles;
@@ -57,13 +55,6 @@ void NavEKF2_core::controlMagYawReset()
         }
     }
 
-    // In-Flight yaw alignment for vehicles that can use a zero sideslip assumption (Planes)
-    // and are not using a compass
-    if (!yawAlignComplete && assume_zero_sideslip() && inFlight) {
-        realignYawGPS();
-        firstMagYawInit = yawAlignComplete;
-    }
-
     // In-Flight reset for vehicles that can use a zero sideslip assumption (Planes)
     // this is done to protect against unrecoverable heading alignment errors due to compass faults
     if (!firstMagYawInit && assume_zero_sideslip() && inFlight) {
@@ -71,14 +62,6 @@ void NavEKF2_core::controlMagYawReset()
         firstMagYawInit = true;
     }
 
-    // inhibit the 3-axis mag fusion from modifying the tilt states for the first few seconds after a mag field reset
-    // to allow the mag states to converge and prevent disturbances in roll and pitch.
-    if (imuSampleTime_ms - magFuseTiltInhibit_ms < 5000) {
-        magFuseTiltInhibit = true;
-    } else {
-        magFuseTiltInhibit = false;
-    }
-
 }
 
 // this function is used to do a forced re-alignment of the yaw angle to align with the horizontal velocity
@@ -103,6 +86,8 @@ void NavEKF2_core::realignYawGPS()
             stateStruct.quat.from_euler(eulerAngles.x, eulerAngles.y, gpsYaw);
             yawAlignComplete = true;
 
+            // zero the attitude covariances becasue the corelations will now be invalid
+            zeroAttCovOnly();
         }
 
         // Check the yaw angles for consistency
@@ -117,13 +102,8 @@ void NavEKF2_core::realignYawGPS()
             // calculate new filter quaternion states from Euler angles
             stateStruct.quat.from_euler(eulerAngles.x, eulerAngles.y, gpsYaw);
 
-            // The correlations between attitude errors and position and velocity errors in the covariance matrix
-            // are invalid because of the changed yaw angle, so reset the corresponding row and columns
-            zeroCols(P,0,2);
-            zeroRows(P,0,2);
-
-            // Set the initial attitude error covariances
-            P[2][2] = P[1][1] = P[0][0] = sq(radians(5.0f));
+            // zero the attitude covariances becasue the corelations will now be invalid
+            zeroAttCovOnly();
 
             // reset tposition fusion timer to cause the states to be reset to the GPS on the next GPS fusion cycle
             lastPosPassTime_ms = 0;
@@ -212,9 +192,12 @@ void NavEKF2_core::SelectMagFusion()
             magTestRatio.zero();
             yawTestRatio = 0.0f;
             lastSynthYawTime_ms = imuSampleTime_ms;
-        } else {
-            // Control reset of yaw and magnetic field states
-            controlMagYawReset();
+        }
+        // In-Flight yaw alignment for vehicles that can use a zero sideslip assumption (Planes)
+        // and are not using a compass
+        if (!yawAlignComplete && assume_zero_sideslip() && inFlight) {
+            realignYawGPS();
+            firstMagYawInit = yawAlignComplete;
         }
     }
 
@@ -631,12 +614,6 @@ void NavEKF2_core::FuseMagnetometer()
             statesArray[j] = statesArray[j] - Kfusion[j] * innovMag[obsIndex];
         }
 
-        // Inhibit corrections to tilt if requested. This enables mag states to settle after a reset without causing sudden changes in roll and pitch
-        if (magFuseTiltInhibit) {
-            stateStruct.angErr.x = 0.0f;
-            stateStruct.angErr.y = 0.0f;
-        }
-
         // the first 3 states represent the angular misalignment vector. This is
         // is used to correct the estimated quaternion on the current time step
         stateStruct.quat.rotate(stateStruct.angErr);
@@ -923,6 +900,9 @@ void NavEKF2_core::FuseDeclination()
     float t10 = t9-t14;
     float t15 = t23*t10;
     float t11 = R_DECL+t8-t15; // innovation variance
+    if (t11 < R_DECL) {
+        return;
+    }
     float t12 = 1.0f/t11;
 
     float H_MAG[24];
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
index 8a753b5a51f6..e10777dfc852 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
@@ -240,7 +240,6 @@ void NavEKF2_core::InitialiseVariables()
     optFlowFusionDelayed = false;
     airSpdFusionDelayed = false;
     sideSlipFusionDelayed = false;
-    magFuseTiltInhibit = false;
     posResetNE.zero();
     velResetNE.zero();
     hgtInnovFiltState = 0.0f;
@@ -1292,7 +1291,6 @@ void NavEKF2_core::calcEarthRateNED(Vector3f &omega, int32_t latitude) const
 
 // initialise the earth magnetic field states using declination, suppled roll/pitch
 // and magnetometer measurements and return initial attitude quaternion
-// if no magnetometer data, do not update magnetic field states and assume zero yaw angle
 Quaternion NavEKF2_core::calcQuatAndFieldStates(float roll, float pitch)
 {
     // declare local variables required to calculate initial orientation and magnetic field
@@ -1334,6 +1332,8 @@ Quaternion NavEKF2_core::calcQuatAndFieldStates(float roll, float pitch)
             lastYawReset_ms = imuSampleTime_ms;
             // calculate an initial quaternion using the new yaw value
             initQuat.from_euler(roll, pitch, yaw);
+            // zero the attitude covariances becasue the corelations will now be invalid
+            zeroAttCovOnly();
         } else {
             initQuat = stateStruct.quat;
         }
@@ -1350,23 +1350,37 @@ Quaternion NavEKF2_core::calcQuatAndFieldStates(float roll, float pitch)
         zeroRows(P,16,21);
         zeroCols(P,16,21);
         // set initial earth magnetic field variances
-        P[16][16] = sq(0.05f);
+        P[16][16] = sq(frontend->_magNoise);
         P[17][17] = P[16][16];
         P[18][18] = P[16][16];
         // set initial body magnetic field variances
-        P[19][19] = sq(0.05f);
+        P[19][19] = sq(frontend->_magNoise);
         P[20][20] = P[19][19];
         P[21][21] = P[19][19];
 
         // clear bad magnetic yaw status
         badMagYaw = false;
     } else {
-        initQuat.from_euler(roll, pitch, 0.0f);
-        yawAlignComplete = false;
+        // no magnetoemter data so there is nothing we can do
+        initQuat = stateStruct.quat;
     }
 
     // return attitude quaternion
     return initQuat;
 }
 
+// zero the attitude covariances, but preserve the variances
+void NavEKF2_core::zeroAttCovOnly()
+{
+    float varTemp[3];
+    for (uint8_t index=0; index<=2; index++) {
+        varTemp[index] = P[index][index];
+    }
+    zeroCols(P,0,2);
+    zeroRows(P,0,2);
+    for (uint8_t index=0; index<=2; index++) {
+        P[index][index] = varTemp[index];
+    }
+}
+
 #endif // HAL_CPU_CLASS
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_core.h b/libraries/AP_NavEKF2/AP_NavEKF2_core.h
index 6b2aa9cb68c7..45b7272811c9 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_core.h
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_core.h
@@ -608,6 +608,9 @@ class NavEKF2_core
     // Select height data to be fused from the available baro, range finder and GPS sources
     void selectHeightForFusion();
 
+    // zero attitude state covariances, but preserve variances
+    void zeroAttCovOnly();
+
     // Length of FIFO buffers used for non-IMU sensor data.
     // Must be larger than the time period defined by IMU_BUFFER_LENGTH
     static const uint32_t OBS_BUFFER_LENGTH = 5;
@@ -758,8 +761,6 @@ class NavEKF2_core
     bool optFlowFusionDelayed;      // true when the optical flow fusion has been delayed
     bool airSpdFusionDelayed;       // true when the air speed fusion has been delayed
     bool sideSlipFusionDelayed;     // true when the sideslip fusion has been delayed
-    bool magFuseTiltInhibit;        // true when the 3-axis magnetoemter fusion is prevented from changing tilt angle
-    uint32_t magFuseTiltInhibit_ms; // time in msec that the condition indicated by magFuseTiltInhibit was commenced
     Vector3f lastMagOffsets;        // Last magnetometer offsets from COMPASS_ parameters. Used to detect parameter changes.
     bool lastMagOffsetsValid;       // True when lastMagOffsets has been initialized
     Vector2f posResetNE;            // Change in North/East position due to last in-flight reset in metres. Returned by getLastPosNorthEastReset
