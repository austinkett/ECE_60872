diff --git a/libraries/AP_HAL/Scheduler.h b/libraries/AP_HAL/Scheduler.h
index fe575a04e8db..2044da093205 100644
--- a/libraries/AP_HAL/Scheduler.h
+++ b/libraries/AP_HAL/Scheduler.h
@@ -54,5 +54,8 @@ class AP_HAL::Scheduler {
      */
     virtual void     stop_clock(uint64_t time_usec) {}
 
+    virtual bool     in_main_thread() const = 0;
+
     virtual void create_uavcan_thread() {};
+
 };
diff --git a/libraries/AP_HAL_Linux/Scheduler.cpp b/libraries/AP_HAL_Linux/Scheduler.cpp
index c11f89d83e12..6c5b72a1b5d9 100644
--- a/libraries/AP_HAL_Linux/Scheduler.cpp
+++ b/libraries/AP_HAL_Linux/Scheduler.cpp
@@ -332,7 +332,7 @@ void Scheduler::_io_task()
     _run_io();
 }
 
-bool Scheduler::in_main_thread()
+bool Scheduler::in_main_thread() const
 {
     return pthread_equal(pthread_self(), _main_ctx);
 }
diff --git a/libraries/AP_HAL_Linux/Scheduler.h b/libraries/AP_HAL_Linux/Scheduler.h
index b36ab982a9e1..00007685194f 100644
--- a/libraries/AP_HAL_Linux/Scheduler.h
+++ b/libraries/AP_HAL_Linux/Scheduler.h
@@ -35,7 +35,7 @@ class Scheduler : public AP_HAL::Scheduler {
     void     suspend_timer_procs();
     void     resume_timer_procs();
 
-    bool     in_main_thread();
+    bool     in_main_thread() const override;
 
     void     register_timer_failsafe(AP_HAL::Proc, uint32_t period_us);
 
diff --git a/libraries/AP_HAL_PX4/Scheduler.cpp b/libraries/AP_HAL_PX4/Scheduler.cpp
index 8441b9046bcc..78b730c7dbb2 100644
--- a/libraries/AP_HAL_PX4/Scheduler.cpp
+++ b/libraries/AP_HAL_PX4/Scheduler.cpp
@@ -443,7 +443,7 @@ void *PX4Scheduler::_uavcan_thread(void *arg)
 }
 #endif
 
-bool PX4Scheduler::in_main_thread()
+bool PX4Scheduler::in_main_thread() const
 {
     return getpid() == _main_task_pid;
 }
diff --git a/libraries/AP_HAL_PX4/Scheduler.h b/libraries/AP_HAL_PX4/Scheduler.h
index 4ca33698c946..46baf581639b 100644
--- a/libraries/AP_HAL_PX4/Scheduler.h
+++ b/libraries/AP_HAL_PX4/Scheduler.h
@@ -58,7 +58,7 @@ class PX4::PX4Scheduler : public AP_HAL::Scheduler {
     void     resume_timer_procs();
     void     reboot(bool hold_in_bootloader);
 
-    bool     in_main_thread();
+    bool     in_main_thread() const override;
     void     system_initialized();
     void     hal_initialized() { _hal_initialized = true; }
 
diff --git a/libraries/AP_HAL_QURT/Scheduler.cpp b/libraries/AP_HAL_QURT/Scheduler.cpp
index d66a66db78a5..5e790f7db081 100644
--- a/libraries/AP_HAL_QURT/Scheduler.cpp
+++ b/libraries/AP_HAL_QURT/Scheduler.cpp
@@ -261,7 +261,7 @@ void *Scheduler::_io_thread(void *arg)
     return nullptr;
 }
 
-bool Scheduler::in_main_thread()
+bool Scheduler::in_main_thread() const
 {
     return getpid() == _main_task_pid;
 }
diff --git a/libraries/AP_HAL_QURT/Scheduler.h b/libraries/AP_HAL_QURT/Scheduler.h
index 385e2a58f47a..7613646937b4 100644
--- a/libraries/AP_HAL_QURT/Scheduler.h
+++ b/libraries/AP_HAL_QURT/Scheduler.h
@@ -31,7 +31,7 @@ class QURT::Scheduler : public AP_HAL::Scheduler {
     void     resume_timer_procs();
     void     reboot(bool hold_in_bootloader);
 
-    bool     in_main_thread();
+    bool     in_main_thread() const override;
     void     system_initialized();
     void     hal_initialized();
     
diff --git a/libraries/AP_HAL_SITL/Scheduler.h b/libraries/AP_HAL_SITL/Scheduler.h
index af0ea8ad0983..b1bce958a803 100644
--- a/libraries/AP_HAL_SITL/Scheduler.h
+++ b/libraries/AP_HAL_SITL/Scheduler.h
@@ -29,6 +29,7 @@ class HALSITL::Scheduler : public AP_HAL::Scheduler {
 
     void register_timer_failsafe(AP_HAL::Proc, uint32_t period_us);
 
+    bool in_main_thread() const override { return !_in_timer_proc && !_in_io_proc; };
     void system_initialized();
 
     void reboot(bool hold_in_bootloader);
diff --git a/libraries/AP_HAL_VRBRAIN/Scheduler.cpp b/libraries/AP_HAL_VRBRAIN/Scheduler.cpp
index f5ffba79f22b..369756b29a97 100644
--- a/libraries/AP_HAL_VRBRAIN/Scheduler.cpp
+++ b/libraries/AP_HAL_VRBRAIN/Scheduler.cpp
@@ -370,7 +370,7 @@ void *VRBRAINScheduler::_storage_thread(void *arg)
     return nullptr;
 }
 
-bool VRBRAINScheduler::in_main_thread()
+bool VRBRAINScheduler::in_main_thread() const
 {
     return getpid() == _main_task_pid;
 }
diff --git a/libraries/AP_HAL_VRBRAIN/Scheduler.h b/libraries/AP_HAL_VRBRAIN/Scheduler.h
index 4ae9058b216f..77bcc7662bd7 100644
--- a/libraries/AP_HAL_VRBRAIN/Scheduler.h
+++ b/libraries/AP_HAL_VRBRAIN/Scheduler.h
@@ -55,6 +55,7 @@ class VRBRAIN::VRBRAINScheduler : public AP_HAL::Scheduler {
     void     resume_timer_procs();
     void     reboot(bool hold_in_bootloader);
 
+    bool     in_main_thread() const override;
     void     system_initialized();
     void     hal_initialized() { _hal_initialized = true; }
     
diff --git a/libraries/DataFlash/DataFlash_Backend.cpp b/libraries/DataFlash/DataFlash_Backend.cpp
index e4cbfee11ea1..19b3742e15d7 100644
--- a/libraries/DataFlash/DataFlash_Backend.cpp
+++ b/libraries/DataFlash/DataFlash_Backend.cpp
@@ -86,6 +86,12 @@ bool DataFlash_Backend::WriteBlockCheckStartupMessages()
         return true;
     }
 
+    if (!_startup_messagewriter->finished() &&
+        !hal.scheduler->in_main_thread()) {
+        // only the main thread may write startup messages out
+        return false;
+    }
+
     // we're not writing startup messages, so this must be some random
     // caller hoping to write blocks out.  Push out log blocks - we
     // might end up clearing the buffer.....
@@ -271,6 +277,9 @@ bool DataFlash_Backend::StartNewLogOK() const
     if (_front.in_log_download()) {
         return false;
     }
+    if (!hal.scheduler->in_main_thread()) {
+        return false;
+    }
     return true;
 }
 
@@ -300,5 +309,11 @@ bool DataFlash_Backend::ShouldLog() const
         return false;
     }
 
+    if (!_startup_messagewriter->finished() &&
+        !hal.scheduler->in_main_thread()) {
+        // only the main thread may write startup messages out
+        return false;
+    }
+
     return true;
 }
