diff --git a/APMrover2/GCS_Mavlink.cpp b/APMrover2/GCS_Mavlink.cpp
index cb84df362aee..c73fc70139ee 100644
--- a/APMrover2/GCS_Mavlink.cpp
+++ b/APMrover2/GCS_Mavlink.cpp
@@ -573,12 +573,10 @@ bool GCS_MAVLINK_Rover::try_send_message(enum ap_message id)
         break;
 
     case MSG_MAG_CAL_PROGRESS:
-        CHECK_PAYLOAD_SIZE(MAG_CAL_PROGRESS);
         rover.compass.send_mag_cal_progress(chan);
         break;
 
     case MSG_MAG_CAL_REPORT:
-        CHECK_PAYLOAD_SIZE(MAG_CAL_REPORT);
         rover.compass.send_mag_cal_report(chan);
         break;
 
diff --git a/ArduPlane/GCS_Mavlink.cpp b/ArduPlane/GCS_Mavlink.cpp
index d249b7d3b2de..31b5090e9a82 100644
--- a/ArduPlane/GCS_Mavlink.cpp
+++ b/ArduPlane/GCS_Mavlink.cpp
@@ -857,12 +857,10 @@ bool GCS_MAVLINK_Plane::try_send_message(enum ap_message id)
         break;
 
     case MSG_MAG_CAL_PROGRESS:
-        CHECK_PAYLOAD_SIZE(MAG_CAL_PROGRESS);
         plane.compass.send_mag_cal_progress(chan);
         break;
 
     case MSG_MAG_CAL_REPORT:
-        CHECK_PAYLOAD_SIZE(MAG_CAL_REPORT);
         plane.compass.send_mag_cal_report(chan);
         break;
 
diff --git a/libraries/AP_Compass/AP_Compass.cpp b/libraries/AP_Compass/AP_Compass.cpp
index 00e045f3fd4b..74590425e5e8 100644
--- a/libraries/AP_Compass/AP_Compass.cpp
+++ b/libraries/AP_Compass/AP_Compass.cpp
@@ -384,7 +384,6 @@ Compass::Compass(void) :
     for (uint8_t i=0; i<COMPASS_MAX_BACKEND; i++) {
         _backends[i] = NULL;
         _state[i].last_update_usec = 0;
-        _reports_sent[i] = 0;
     }
 
     // default device ids to zero.  init() method will overwrite with the actual device ids
diff --git a/libraries/AP_Compass/AP_Compass.h b/libraries/AP_Compass/AP_Compass.h
index 8f6f1bd91537..7ae6403215e4 100644
--- a/libraries/AP_Compass/AP_Compass.h
+++ b/libraries/AP_Compass/AP_Compass.h
@@ -51,8 +51,6 @@
 #define COMPASS_MAX_BACKEND   3
 
 //MAXIMUM COMPASS REPORTS
-#define MAX_CAL_REPORTS 10
-#define CONTINUOUS_REPORTS 0
 #define AP_COMPASS_MAX_XYZ_ANG_DIFF radians(50.0f)
 #define AP_COMPASS_MAX_XY_ANG_DIFF radians(30.0f)
 #define AP_COMPASS_MAX_XY_LENGTH_DIFF 100.0f
@@ -317,9 +315,6 @@ friend class AP_Compass_Backend;
     bool _add_backend(AP_Compass_Backend *backend, const char *name, bool external);
     void _detect_backends(void);
 
-    //keep track of number of calibration reports sent
-    uint8_t _reports_sent[COMPASS_MAX_INSTANCES];
-
     //autoreboot after compass calibration
     bool _compass_cal_autoreboot;
     bool _cal_complete_requires_reboot;
diff --git a/libraries/AP_Compass/AP_Compass_Calibration.cpp b/libraries/AP_Compass/AP_Compass_Calibration.cpp
index b8da7070b359..d4bf53ae5817 100644
--- a/libraries/AP_Compass/AP_Compass_Calibration.cpp
+++ b/libraries/AP_Compass/AP_Compass_Calibration.cpp
@@ -46,7 +46,6 @@ Compass::start_calibration(uint8_t i, bool retry, bool autosave, float delay, bo
     if (!healthy(i)) {
         return false;
     }
-    memset(_reports_sent,0,sizeof(_reports_sent));
     if (!is_calibrating() && delay > 0.5f) {
         AP_Notify::events.initiated_compass_cal = 1;
     }
@@ -128,12 +127,13 @@ Compass::accept_calibration(uint8_t i)
     CompassCalibrator& cal = _calibrator[i];
     uint8_t cal_status = cal.get_status();
 
-    if (cal_status == COMPASS_CAL_SUCCESS) {
+    if (cal.is_saved() || cal_status == COMPASS_CAL_NOT_STARTED) {
+        return true;
+    } else if (cal_status == COMPASS_CAL_SUCCESS) {
         _cal_complete_requires_reboot = true;
         Vector3f ofs, diag, offdiag;
         cal.get_calibration(ofs, diag, offdiag);
-        cal.clear();
-
+        cal.set_saved(true);
         set_and_save_offsets(i, ofs);
         set_and_save_diagonals(i,diag);
         set_and_save_offdiagonals(i,offdiag);
@@ -185,6 +185,11 @@ Compass::send_mag_cal_progress(mavlink_channel_t chan)
     uint8_t cal_mask = get_cal_mask();
 
     for (uint8_t compass_id=0; compass_id<COMPASS_MAX_INSTANCES; compass_id++) {
+        // ensure we don't try to send with no space available
+        if (!HAVE_PAYLOAD_SPACE(chan, MAG_CAL_PROGRESS)) {
+            return;
+        }
+
         auto& calibrator = _calibrator[compass_id];
         uint8_t cal_status = calibrator.get_status();
 
@@ -196,11 +201,6 @@ Compass::send_mag_cal_progress(mavlink_channel_t chan)
             Vector3f direction(0.0f,0.0f,0.0f);
             uint8_t attempt = _calibrator[compass_id].get_attempt();
 
-            // ensure we don't try to send with no space available
-            if (!HAVE_PAYLOAD_SPACE(chan, MAG_CAL_PROGRESS)) {
-                return;
-            }
-
             mavlink_msg_mag_cal_progress_send(
                 chan,
                 compass_id, cal_mask,
@@ -216,21 +216,20 @@ void Compass::send_mag_cal_report(mavlink_channel_t chan)
     uint8_t cal_mask = get_cal_mask();
 
     for (uint8_t compass_id=0; compass_id<COMPASS_MAX_INSTANCES; compass_id++) {
+        // ensure we don't try to send with no space available
+        if (!HAVE_PAYLOAD_SPACE(chan, MAG_CAL_REPORT)) {
+            return;
+        }
 
         uint8_t cal_status = _calibrator[compass_id].get_status();
 
-        if ((cal_status == COMPASS_CAL_SUCCESS ||
-            cal_status == COMPASS_CAL_FAILED) && ((_reports_sent[compass_id] < MAX_CAL_REPORTS) || CONTINUOUS_REPORTS)) {
+        if (cal_status == COMPASS_CAL_SUCCESS ||
+            cal_status == COMPASS_CAL_FAILED) {
             float fitness = _calibrator[compass_id].get_fitness();
             Vector3f ofs, diag, offdiag;
             _calibrator[compass_id].get_calibration(ofs, diag, offdiag);
             uint8_t autosaved = _calibrator[compass_id].get_autosave();
 
-            // ensure we don't try to send with no space available
-            if (!HAVE_PAYLOAD_SPACE(chan, MAG_CAL_REPORT)) {
-                return;
-            }
-            
             mavlink_msg_mag_cal_report_send(
                 chan,
                 compass_id, cal_mask,
@@ -240,7 +239,6 @@ void Compass::send_mag_cal_report(mavlink_channel_t chan)
                 diag.x, diag.y, diag.z,
                 offdiag.x, offdiag.y, offdiag.z
             );
-            _reports_sent[compass_id]++;
         }
 
         if (cal_status == COMPASS_CAL_SUCCESS && _calibrator[compass_id].get_autosave()) {
@@ -320,12 +318,16 @@ uint8_t Compass::handle_mag_cal_command(const mavlink_command_long_t &packet)
             if(!accept_calibration_all()) {
                 result = MAV_RESULT_FAILED;
             }
-            break;
-        }
-        
-        if(!accept_calibration_mask(mag_mask)) {
+        } else if(!accept_calibration_mask(mag_mask)) {
             result = MAV_RESULT_FAILED;
         }
+
+        if(result == MAV_RESULT_ACCEPTED) {
+            for(int i = 0; i < COMPASS_MAX_INSTANCES; i++) {
+                _calibrator[i].clear();
+            }
+        }
+
         break;
     }
         
diff --git a/libraries/AP_Compass/CompassCalibrator.cpp b/libraries/AP_Compass/CompassCalibrator.cpp
index de1215eff96e..c2a34920e29c 100644
--- a/libraries/AP_Compass/CompassCalibrator.cpp
+++ b/libraries/AP_Compass/CompassCalibrator.cpp
@@ -85,6 +85,7 @@ _sample_buffer(NULL)
 
 void CompassCalibrator::clear() {
     set_status(COMPASS_CAL_NOT_STARTED);
+    _saved = false;
 }
 
 void CompassCalibrator::start(bool retry, bool autosave, float delay) {
@@ -97,6 +98,7 @@ void CompassCalibrator::start(bool retry, bool autosave, float delay) {
     _delay_start_sec = delay;
     _start_time_ms = AP_HAL::millis();
     set_status(COMPASS_CAL_WAITING_TO_START);
+    _saved = false;
 }
 
 void CompassCalibrator::get_calibration(Vector3f &offsets, Vector3f &diagonals, Vector3f &offdiagonals) {
@@ -259,7 +261,6 @@ bool CompassCalibrator::set_status(compass_cal_status_t status) {
     if (status != COMPASS_CAL_NOT_STARTED && _status == status) {
         return true;
     }
-
     switch(status) {
         case COMPASS_CAL_NOT_STARTED:
             reset_state();
diff --git a/libraries/AP_Compass/CompassCalibrator.h b/libraries/AP_Compass/CompassCalibrator.h
index de6b6c4785d9..21d16c782dc4 100644
--- a/libraries/AP_Compass/CompassCalibrator.h
+++ b/libraries/AP_Compass/CompassCalibrator.h
@@ -42,6 +42,8 @@ class CompassCalibrator {
     float get_fitness() const { return sqrtf(_fitness); }
     bool get_autosave() const { return _autosave; }
     uint8_t get_attempt() const { return _attempt; }
+    bool is_saved() const { return _saved; }
+    void set_saved(bool saved) { _saved = saved; }
 
 private:
     class param_t {
@@ -84,6 +86,7 @@ class CompassCalibrator {
     bool _retry;
     float _tolerance;
     uint8_t _attempt;
+    bool _saved;
 
     completion_mask_t _completion_mask;
 
