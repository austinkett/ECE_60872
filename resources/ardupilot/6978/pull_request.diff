diff --git a/ArduCopter/control_althold.cpp b/ArduCopter/control_althold.cpp
index e22c2150c1ec..0bd3d94533c6 100644
--- a/ArduCopter/control_althold.cpp
+++ b/ArduCopter/control_althold.cpp
@@ -8,13 +8,6 @@
 // althold_init - initialise althold controller
 bool Copter::althold_init(bool ignore_checks)
 {
-#if FRAME_CONFIG == HELI_FRAME
-    // do not allow helis to enter Alt Hold if the Rotor Runup is not complete
-    if (!ignore_checks && !motors->rotor_runup_complete()){
-        return false;
-    }
-#endif
-
     // initialize vertical speeds and leash lengths
     pos_control->set_speed_z(-g.pilot_velocity_z_max, g.pilot_velocity_z_max);
     pos_control->set_accel_z(g.pilot_accel_z);
diff --git a/ArduCopter/control_loiter.cpp b/ArduCopter/control_loiter.cpp
index e4f42252234c..f8fc21f47cf5 100644
--- a/ArduCopter/control_loiter.cpp
+++ b/ArduCopter/control_loiter.cpp
@@ -7,13 +7,6 @@
 // loiter_init - initialise loiter controller
 bool Copter::loiter_init(bool ignore_checks)
 {
-#if FRAME_CONFIG == HELI_FRAME
-    // do not allow helis to enter Loiter if the Rotor Runup is not complete
-    if (!ignore_checks && !motors->rotor_runup_complete()){
-        return false;
-    }
-#endif
-
     if (position_ok() || ignore_checks) {
 
         // set target to current position
diff --git a/ArduCopter/control_poshold.cpp b/ArduCopter/control_poshold.cpp
index 2ff9b1926150..4ef6a4359188 100644
--- a/ArduCopter/control_poshold.cpp
+++ b/ArduCopter/control_poshold.cpp
@@ -75,13 +75,6 @@ static struct {
 // poshold_init - initialise PosHold controller
 bool Copter::poshold_init(bool ignore_checks)
 {
-#if FRAME_CONFIG == HELI_FRAME
-    // do not allow helis to enter Pos Hold if the Rotor Runup is not complete
-    if (!ignore_checks && !motors->rotor_runup_complete()){
-        return false;
-    }
-#endif
-
     // fail to initialise PosHold mode if no GPS lock
     if (!position_ok() && !ignore_checks) {
         return false;
diff --git a/ArduCopter/flight_mode.cpp b/ArduCopter/flight_mode.cpp
index 76d15a74da0d..08762822f97d 100644
--- a/ArduCopter/flight_mode.cpp
+++ b/ArduCopter/flight_mode.cpp
@@ -24,6 +24,15 @@ bool Copter::set_mode(control_mode_t mode, mode_reason_t reason)
         return true;
     }
 
+
+#if FRAME_CONFIG == HELI_FRAME
+    // do not allow helis to enter a non-manual throttle mode if the
+    // rotor runup is not complete
+    if (!ignore_checks && !mode_has_manual_throttle(mode) && !motors->rotor_runup_complete()){
+        goto failed;
+    }
+#endif
+
     switch (mode) {
         case ACRO:
             #if FRAME_CONFIG == HELI_FRAME
@@ -118,6 +127,10 @@ bool Copter::set_mode(control_mode_t mode, mode_reason_t reason)
             break;
     }
 
+#if FRAME_CONFIG == HELI_FRAME
+failed:
+#endif
+    
     // update flight mode
     if (success) {
         // perform any cleanup required by previous flight mode
diff --git a/ArduCopter/radio.cpp b/ArduCopter/radio.cpp
index 589c16d5721a..5fe6d16e5132 100644
--- a/ArduCopter/radio.cpp
+++ b/ArduCopter/radio.cpp
@@ -182,5 +182,8 @@ void Copter::set_throttle_zero_flag(int16_t throttle_control)
 // pass pilot's inputs to motors library (used to allow wiggling servos while disarmed on heli, single, coax copters)
 void Copter::radio_passthrough_to_motors()
 {
-    motors->set_radio_passthrough(channel_roll->norm_input(), channel_pitch->norm_input(), channel_throttle->norm_input(), channel_yaw->norm_input());
+    motors->set_radio_passthrough(channel_roll->norm_input(),
+                                  channel_pitch->norm_input(),
+                                  channel_throttle->get_control_in_zero_dz()*0.001,
+                                  channel_yaw->norm_input());
 }
