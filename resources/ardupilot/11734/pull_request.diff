diff --git a/libraries/AC_Avoidance/AP_OADijkstra.cpp b/libraries/AC_Avoidance/AP_OADijkstra.cpp
index eccfa882b719..80bf7ed88012 100644
--- a/libraries/AC_Avoidance/AP_OADijkstra.cpp
+++ b/libraries/AC_Avoidance/AP_OADijkstra.cpp
@@ -122,6 +122,9 @@ bool AP_OADijkstra::polygon_fence_enabled() const
     if (fence == nullptr) {
         return false;
     }
+    if (!fence->is_polygon_valid()) {
+        return false;
+    }
     return ((fence->get_enabled_fences() & AC_FENCE_TYPE_POLYGON) > 0);
 }
 
@@ -248,7 +251,6 @@ bool AP_OADijkstra::create_polygon_fence_visgraph()
                                              {AP_OAVisGraph::OATYPE_FENCE_POINT, j},
                                              (_polyfence_pts[i] - _polyfence_pts[j]).length());
             }
-            // ToDo: store infinity when there is no clear path between points to allow faster search later
         }
     }
 
diff --git a/libraries/AP_Math/polygon.cpp b/libraries/AP_Math/polygon.cpp
index ae111c5daecb..32250e23da32 100644
--- a/libraries/AP_Math/polygon.cpp
+++ b/libraries/AP_Math/polygon.cpp
@@ -132,10 +132,21 @@ template bool Polygon_complete<float>(const Vector2f *V, unsigned n);
  */
 bool Polygon_intersects(const Vector2f *V, unsigned N, const Vector2f &p1, const Vector2f &p2, Vector2f &intersection)
 {
+    const bool complete = Polygon_complete(V, N);
+    if (complete) {
+        // if the last point is the same as the first point
+        // treat as if the last point wasn't passed in
+        N--;
+    }
+
     float intersect_dist_sq = FLT_MAX;
-    for (uint8_t i=0; i<N-1; i++) {
+    for (uint8_t i=0; i<N; i++) {
+        uint8_t j = i+1;
+        if (j >= N) {
+            j = 0;
+        }
         const Vector2f &v1 = V[i];
-        const Vector2f &v2 = V[i+1];
+        const Vector2f &v2 = V[j];
         // optimisations for common cases
         if (v1.x > p1.x && v2.x > p1.x && v1.x > p2.x && v2.x > p2.x) {
             continue;
