diff --git a/libraries/AP_Airspeed/AP_Airspeed.cpp b/libraries/AP_Airspeed/AP_Airspeed.cpp
index ffa8f162ae60..f8ba19153ab2 100644
--- a/libraries/AP_Airspeed/AP_Airspeed.cpp
+++ b/libraries/AP_Airspeed/AP_Airspeed.cpp
@@ -201,6 +201,11 @@ AP_Airspeed::AP_Airspeed()
         state[i].EAS2TAS = 1;
     }
     AP_Param::setup_object_defaults(this, var_info);
+
+    if (_singleton != nullptr) {
+        AP_HAL::panic("AP_Airspeed must be singleton");
+    }
+    _singleton = this;
 }
 
 
@@ -449,3 +454,7 @@ bool AP_Airspeed::all_healthy(void) const
     }
     return true;
 }
+
+// singleton instance
+AP_Airspeed *AP_Airspeed::_singleton;
+
diff --git a/libraries/AP_Airspeed/AP_Airspeed.h b/libraries/AP_Airspeed/AP_Airspeed.h
index 65df10d31e54..02fbdf588f3f 100644
--- a/libraries/AP_Airspeed/AP_Airspeed.h
+++ b/libraries/AP_Airspeed/AP_Airspeed.h
@@ -164,8 +164,11 @@ class AP_Airspeed
 
     // get current primary sensor
     uint8_t get_primary(void) const { return primary; }
+
+    static AP_Airspeed *get_singleton() { return _singleton; }
     
 private:
+    static AP_Airspeed *_singleton;
 
     AP_Int8 primary_sensor;
     
diff --git a/libraries/GCS_MAVLink/GCS_Common.cpp b/libraries/GCS_MAVLink/GCS_Common.cpp
index 69a3b2c274ee..b70a5a706a23 100644
--- a/libraries/GCS_MAVLink/GCS_Common.cpp
+++ b/libraries/GCS_MAVLink/GCS_Common.cpp
@@ -19,6 +19,7 @@
 #include <AP_OpticalFlow/AP_OpticalFlow.h>
 #include <AP_Vehicle/AP_Vehicle.h>
 #include <AP_RangeFinder/RangeFinder_Backend.h>
+#include <AP_Airspeed/AP_Airspeed.h>
 
 #include "GCS.h"
 
@@ -1066,11 +1067,18 @@ void GCS_MAVLINK::send_scaled_pressure(AP_Baro &barometer)
 {
     uint32_t now = AP_HAL::millis();
     float pressure = barometer.get_pressure(0);
+    float diff_pressure = 0; // pascal
+
+    AP_Airspeed *airspeed = AP_Airspeed::get_singleton();
+    if (airspeed != nullptr) {
+        diff_pressure = airspeed->get_differential_pressure();
+    }
+
     mavlink_msg_scaled_pressure_send(
         chan,
         now,
         pressure*0.01f, // hectopascal
-        (pressure - barometer.get_ground_pressure(0))*0.01f, // hectopascal
+        diff_pressure*0.01f, // hectopascal
         barometer.get_temperature(0)*100); // 0.01 degrees C
 
     if (barometer.num_instances() > 1 &&
