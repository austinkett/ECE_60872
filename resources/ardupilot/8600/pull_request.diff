diff --git a/APMrover2/AP_MotorsUGV.cpp b/APMrover2/AP_MotorsUGV.cpp
index 52d9b7820d04..d09bddc9fffa 100644
--- a/APMrover2/AP_MotorsUGV.cpp
+++ b/APMrover2/AP_MotorsUGV.cpp
@@ -88,6 +88,14 @@ const AP_Param::GroupInfo AP_MotorsUGV::var_info[] = {
     // @User: Advanced
     AP_GROUPINFO("VEC_THR_BASE", 10, AP_MotorsUGV, _vector_throttle_base, 0.0f),
 
+    // @Param: SPD_SCA_BASE
+    // @DisplayName: Motor speed scaling base speed
+    // @Description: Speed above which steering is scaled down when using regular steering/throttle vehicles.  zero to disable speed scaling
+    // @Units: m/s
+    // @Range: 0 10
+    // @User: Advanced
+    AP_GROUPINFO("SPD_SCA_BASE", 11, AP_MotorsUGV, _speed_scale_base, 1.0f),
+
     AP_GROUPEND
 };
 
@@ -161,7 +169,7 @@ void AP_MotorsUGV::setup_servo_output()
 //   no scaling by speed or angle should be performed
 void AP_MotorsUGV::set_steering(float steering, bool apply_scaling)
 {
-    _steering = constrain_float(steering, -4500.0f, 4500.0f);
+    _steering = steering;
     _scale_steering = apply_scaling;
 }
 
@@ -230,9 +238,6 @@ void AP_MotorsUGV::output(bool armed, float ground_speed, float dt)
     // sanity check parameters
     sanity_check_parameters();
 
-    // clear and set limits based on input (limit flags may be set again by output_regular or output_skid_steering methods)
-    set_limits_from_input(armed, _steering, _throttle);
-
     // slew limit throttle
     slew_limit_throttle(dt);
 
@@ -434,9 +439,9 @@ void AP_MotorsUGV::output_regular(bool armed, float ground_speed, float steering
                     steering *= constrain_float(_vector_throttle_base / fabsf(throttle), 0.0f, 1.0f);
                 }
             } else {
-                // scale steering down as speed increase above 1m/s
-                if (fabsf(ground_speed) > 1.0f) {
-                    steering *= (1.0f / fabsf(ground_speed));
+                // scale steering down as speed increase above MOT_SPD_SCA_BASE (1 m/s default)
+                if (is_positive(_speed_scale_base) && (fabsf(ground_speed) > _speed_scale_base)) {
+                    steering *= (_speed_scale_base / fabsf(ground_speed));
                 } else {
                     // regular steering rover at low speed so set limits to stop I-term build-up in controllers
                     if (!have_skid_steering()) {
@@ -444,7 +449,7 @@ void AP_MotorsUGV::output_regular(bool armed, float ground_speed, float steering
                         limit.steer_right = true;
                     }
                 }
-                // reverse steering output if backing up
+                // reverse steering direction when backing up
                 if (is_negative(ground_speed)) {
                     steering *= -1.0f;
                 }
@@ -465,6 +470,13 @@ void AP_MotorsUGV::output_regular(bool armed, float ground_speed, float steering
         }
     }
 
+    // clear and set limits based on input
+    // we do this here because vectored thrust or speed scaling may have reduced steering request
+    set_limits_from_input(armed, steering, throttle);
+
+    // constrain steering
+    steering = constrain_float(steering, -4500.0f, 4500.0f);
+
     // always allow steering to move
     SRV_Channels::set_output_scaled(SRV_Channel::k_steering, steering);
 }
@@ -475,6 +487,13 @@ void AP_MotorsUGV::output_omni(bool armed, float steering, float throttle, float
     if (!has_lateral_control()) {
         return;
     }
+
+    // clear and set limits based on input
+    set_limits_from_input(armed, steering, throttle);
+
+    // constrain steering
+    steering = constrain_float(steering, -4500.0f, 4500.0f);
+
     if (armed) {
         // scale throttle, steering and lateral to -1 ~ 1
         const float scaled_throttle = throttle / 100.0f;
@@ -527,6 +546,12 @@ void AP_MotorsUGV::output_skid_steering(bool armed, float steering, float thrott
         return;
     }
 
+    // clear and set limits based on input
+    set_limits_from_input(armed, steering, throttle);
+
+    // constrain steering
+    steering = constrain_float(steering, -4500.0f, 4500.0f);
+
     // handle simpler disarmed case
     if (!armed) {
         if (_disarm_disable_pwm) {
diff --git a/APMrover2/AP_MotorsUGV.h b/APMrover2/AP_MotorsUGV.h
index b39437559f4c..1a532f077542 100644
--- a/APMrover2/AP_MotorsUGV.h
+++ b/APMrover2/AP_MotorsUGV.h
@@ -131,6 +131,7 @@ class AP_MotorsUGV {
     AP_Int8 _throttle_max; // throttle maximum percentage
     AP_Float _thrust_curve_expo; // thrust curve exponent from -1 to +1 with 0 being linear
     AP_Float _vector_throttle_base;  // throttle level above which steering is scaled down when using vector thrust.  zero to disable vectored thrust
+    AP_Float _speed_scale_base;  // speed above which steering is scaled down when using regular steering/throttle vehicles.  zero to disable speed scaling
 
     // internal variables
     float   _steering;  // requested steering as a value from -4500 to +4500
diff --git a/libraries/APM_Control/AR_AttitudeControl.cpp b/libraries/APM_Control/AR_AttitudeControl.cpp
index 59006a531fa3..1027c3686510 100644
--- a/libraries/APM_Control/AR_AttitudeControl.cpp
+++ b/libraries/APM_Control/AR_AttitudeControl.cpp
@@ -285,7 +285,7 @@ float AR_AttitudeControl::get_steering_out_rate(float desired_rate, bool motor_l
     const float d = _steer_rate_pid.get_d();
 
     // constrain and return final output
-    return constrain_float(ff + p + i + d, -1.0f, 1.0f);
+    return (ff + p + i + d);
 }
 
 // get latest desired turn rate in rad/sec (recorded during calls to get_steering_out_rate)
diff --git a/libraries/APM_Control/AR_AttitudeControl.h b/libraries/APM_Control/AR_AttitudeControl.h
index 0dd248e02365..6d5770f6def6 100644
--- a/libraries/APM_Control/AR_AttitudeControl.h
+++ b/libraries/APM_Control/AR_AttitudeControl.h
@@ -43,15 +43,18 @@ class AR_AttitudeControl {
     // steering controller
     //
 
-    // return a steering servo output from -1.0 to +1.0 given a desired lateral acceleration rate in m/s/s.
+    // return a steering servo output given a desired lateral acceleration rate in m/s/s.
     // positive lateral acceleration is to the right.  dt should normally be the main loop rate.
+    // return value is normally in range -1.0 to +1.0 but can be higher or lower
     float get_steering_out_lat_accel(float desired_accel, bool motor_limit_left, bool motor_limit_right, float dt);
 
-    // return a steering servo output from -1 to +1 given a heading in radians
+    // return a steering servo output given a heading in radians
+    // return value is normally in range -1.0 to +1.0 but can be higher or lower
     float get_steering_out_heading(float heading_rad, float rate_max, bool motor_limit_left, bool motor_limit_right, float dt);
 
-    // return a steering servo output from -1 to +1 given a
-    // desired yaw rate in radians/sec. Positive yaw is to the right.
+    // return a steering servo output given a desired yaw rate in radians/sec.
+    // positive yaw is to the right
+    // return value is normally in range -1.0 to +1.0 but can be higher or lower
     float get_steering_out_rate(float desired_rate, bool motor_limit_left, bool motor_limit_right, float dt);
 
     // get latest desired turn rate in rad/sec recorded during calls to get_steering_out_rate.  For reporting purposes only
