diff --git a/APMrover2/GCS_Mavlink.cpp b/APMrover2/GCS_Mavlink.cpp
index aac5c237fec3..b157e332f425 100644
--- a/APMrover2/GCS_Mavlink.cpp
+++ b/APMrover2/GCS_Mavlink.cpp
@@ -289,7 +289,7 @@ void Rover::send_wheel_encoder_distance(const mavlink_channel_t chan)
         for (uint8_t i = 0; i < g2.wheel_encoder.num_sensors(); i++) {
             distances[i] = wheel_encoder_last_distance_m[i];
         }
-        mavlink_msg_wheel_distance_send(chan, 1000UL * wheel_encoder_last_ekf_update_ms, g2.wheel_encoder.num_sensors(), distances);
+        mavlink_msg_wheel_distance_send(chan, 1000UL * AP_HAL::millis(), g2.wheel_encoder.num_sensors(), distances);
     }
 }
 
diff --git a/APMrover2/Rover.h b/APMrover2/Rover.h
index 73ee86668824..4dda42d697ff 100644
--- a/APMrover2/Rover.h
+++ b/APMrover2/Rover.h
@@ -267,11 +267,12 @@ class Rover : public AP_Vehicle {
     // Store the time the last GPS message was received.
     uint32_t last_gps_msg_ms{0};
 
-    // last wheel encoder update times
+    // latest wheel encoder values
+    float wheel_encoder_last_distance_m[WHEELENCODER_MAX_INSTANCES];    // total distance recorded by wheel encoder (for reporting to GCS)
+    bool wheel_encoder_initialised;                                     // true once arrays below have been initialised to sensors initial values
     float wheel_encoder_last_angle_rad[WHEELENCODER_MAX_INSTANCES];     // distance in radians at time of last update to EKF
-    float wheel_encoder_last_distance_m[WHEELENCODER_MAX_INSTANCES];    // distance in meters at time of last update to EKF (for reporting to GCS)
-    uint32_t wheel_encoder_last_update_ms[WHEELENCODER_MAX_INSTANCES];  // system time of last ping from each encoder
-    uint32_t wheel_encoder_last_ekf_update_ms;                          // system time of last encoder data push to EKF
+    uint32_t wheel_encoder_last_reading_ms[WHEELENCODER_MAX_INSTANCES]; // system time of last ping from each encoder
+    uint8_t wheel_encoder_last_index_sent;                              // index of the last wheel encoder sent to the EKF
 
     // True when we are doing motor test
     bool motor_test;
diff --git a/APMrover2/ekf_check.cpp b/APMrover2/ekf_check.cpp
index 16287908aa38..e43c4f2ad2b8 100644
--- a/APMrover2/ekf_check.cpp
+++ b/APMrover2/ekf_check.cpp
@@ -132,12 +132,12 @@ bool Rover::ekf_position_ok()
     nav_filter_status filt_status;
     rover.ahrs.get_filter_status(filt_status);
 
-    // if disarmed we accept a predicted horizontal position
+    // if disarmed we accept a predicted horizontal absolute or relative position
     if (!arming.is_armed()) {
-        return ((filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs));
+        return (filt_status.flags.horiz_pos_abs || filt_status.flags.pred_horiz_pos_abs || filt_status.flags.horiz_pos_rel || filt_status.flags.pred_horiz_pos_rel);
     } else {
-        // once armed we require a good absolute position and EKF must not be in const_pos_mode
-        return (filt_status.flags.horiz_pos_abs && !filt_status.flags.const_pos_mode);
+        // once armed we require a good absolute or relative position and EKF must not be in const_pos_mode
+        return ((filt_status.flags.horiz_pos_abs || filt_status.flags.horiz_pos_rel) && !filt_status.flags.const_pos_mode);
     }
 }
 
diff --git a/APMrover2/radio.cpp b/APMrover2/radio.cpp
index 336626c24dc4..8f99b4092fd4 100644
--- a/APMrover2/radio.cpp
+++ b/APMrover2/radio.cpp
@@ -26,7 +26,7 @@ void Rover::set_control_channels(void)
         // For a rover safety is TRIM throttle
         g2.motors.setup_safety_output();
     }
-    // setup correct scaling for ESCs like the UAVCAN PX4ESC which
+    // setup correct scaling for ESCs like the UAVCAN ESCs which
     // take a proportion of speed. Default to 1000 to 2000 for systems without
     // a k_throttle output
     hal.rcout->set_esc_scaling(1000, 2000);
diff --git a/APMrover2/sensors.cpp b/APMrover2/sensors.cpp
index 9cd676356ae1..f35130f3cdb5 100644
--- a/APMrover2/sensors.cpp
+++ b/APMrover2/sensors.cpp
@@ -43,57 +43,59 @@ void Rover::update_wheel_encoder()
     // update encoders
     g2.wheel_encoder.update();
 
+    // save cumulative distances at current time (in meters) for reporting to GCS
+    for (uint8_t i = 0; i < g2.wheel_encoder.num_sensors(); i++) {
+        wheel_encoder_last_distance_m[i] = g2.wheel_encoder.get_distance(i);
+    }
+
+    // send wheel encoder delta angle and delta time to EKF
+    // this should not be done at more than 50hz
     // initialise on first iteration
-    const uint32_t now = AP_HAL::millis();
-    if (wheel_encoder_last_ekf_update_ms == 0) {
-        wheel_encoder_last_ekf_update_ms = now;
+    if (!wheel_encoder_initialised) {
+        wheel_encoder_initialised = true;
         for (uint8_t i = 0; i < g2.wheel_encoder.num_sensors(); i++) {
             wheel_encoder_last_angle_rad[i] = g2.wheel_encoder.get_delta_angle(i);
-            wheel_encoder_last_update_ms[i] = g2.wheel_encoder.get_last_reading_ms(i);
+            wheel_encoder_last_reading_ms[i] = g2.wheel_encoder.get_last_reading_ms(i);
         }
         return;
     }
 
-    // calculate delta angle and delta time and send to EKF
-    // use time of last ping from wheel encoder
-    // send delta time (time between this wheel encoder time and previous wheel encoder time)
-    // in case where wheel hasn't moved, count = 0 (cap the delta time at 50ms - or system time)
-    //     use system clock of last update instead of time of last ping
-    const float system_dt = (now - wheel_encoder_last_ekf_update_ms) / 1000.0f;
-    for (uint8_t i = 0; i < g2.wheel_encoder.num_sensors(); i++) {
-        // calculate angular change (in radians)
-        const float curr_angle_rad = g2.wheel_encoder.get_delta_angle(i);
-        const float delta_angle = curr_angle_rad - wheel_encoder_last_angle_rad[i];
-        wheel_encoder_last_angle_rad[i] = curr_angle_rad;
-
-        // save cumulative distances at current time (in meters)
-        wheel_encoder_last_distance_m[i] = g2.wheel_encoder.get_distance(i);
-
-        // calculate delta time
-        float delta_time;
-        const uint32_t latest_sensor_update_ms = g2.wheel_encoder.get_last_reading_ms(i);
-        const uint32_t sensor_diff_ms = latest_sensor_update_ms - wheel_encoder_last_update_ms[i];
-
-        // if we have not received any sensor updates, or time difference is too high then use time since last update to the ekf
-        // check for old or insane sensor update times
-        if (sensor_diff_ms == 0 || sensor_diff_ms > 100) {
-            delta_time = system_dt;
-            wheel_encoder_last_update_ms[i] = wheel_encoder_last_ekf_update_ms;
-        } else {
-            delta_time = sensor_diff_ms / 1000.0f;
-            wheel_encoder_last_update_ms[i] = latest_sensor_update_ms;
-        }
-
-        /* delAng is the measured change in angular position from the previous measurement where a positive rotation is produced by forward motion of the vehicle (rad)
-         * delTime is the time interval for the measurement of delAng (sec)
-         * timeStamp_ms is the time when the rotation was last measured (msec)
-         * posOffset is the XYZ body frame position of the wheel hub (m)
-         */
-        EKF3.writeWheelOdom(delta_angle, delta_time, wheel_encoder_last_update_ms[i], g2.wheel_encoder.get_pos_offset(i), g2.wheel_encoder.get_wheel_radius(i));
+    // on each iteration send data from alternative wheel encoders
+    wheel_encoder_last_index_sent++;
+    if (wheel_encoder_last_index_sent >= g2.wheel_encoder.num_sensors()) {
+        wheel_encoder_last_index_sent = 0;
     }
 
-    // record system time update for next iteration
-    wheel_encoder_last_ekf_update_ms = now;
+    // get current time, total delta angle (since startup) and update time from sensor
+    const float curr_angle_rad = g2.wheel_encoder.get_delta_angle(wheel_encoder_last_index_sent);
+    const uint32_t sensor_reading_ms = g2.wheel_encoder.get_last_reading_ms(wheel_encoder_last_index_sent);
+    const uint32_t now_ms = AP_HAL::millis();
+
+    // calculate angular change (in radians)
+    const float delta_angle = curr_angle_rad - wheel_encoder_last_angle_rad[wheel_encoder_last_index_sent];
+    wheel_encoder_last_angle_rad[wheel_encoder_last_index_sent] = curr_angle_rad;
+
+    // calculate delta time using time between sensor readings or time since last send to ekf (whichever is shorter)
+    uint32_t sensor_diff_ms = sensor_reading_ms - wheel_encoder_last_reading_ms[wheel_encoder_last_index_sent];
+    if (sensor_diff_ms == 0 || sensor_diff_ms > 100) {
+        // if no sensor update or time difference between sensor readings is too long use time since last send to ekf
+        sensor_diff_ms = now_ms - wheel_encoder_last_reading_ms[wheel_encoder_last_index_sent];
+        wheel_encoder_last_reading_ms[wheel_encoder_last_index_sent] = now_ms;
+    } else {
+        wheel_encoder_last_reading_ms[wheel_encoder_last_index_sent] = sensor_reading_ms;
+    }
+    const float delta_time = sensor_diff_ms * 0.001f;
+
+    /* delAng is the measured change in angular position from the previous measurement where a positive rotation is produced by forward motion of the vehicle (rad)
+     * delTime is the time interval for the measurement of delAng (sec)
+     * timeStamp_ms is the time when the rotation was last measured (msec)
+     * posOffset is the XYZ body frame position of the wheel hub (m)
+     */
+    EKF3.writeWheelOdom(delta_angle,
+                        delta_time,
+                        wheel_encoder_last_reading_ms[wheel_encoder_last_index_sent],
+                        g2.wheel_encoder.get_pos_offset(wheel_encoder_last_index_sent),
+                        g2.wheel_encoder.get_wheel_radius(wheel_encoder_last_index_sent));
 }
 
 // Accel calibration
diff --git a/ArduCopter/radio.cpp b/ArduCopter/radio.cpp
index a0840ebc9fb6..5d91d84fcf12 100644
--- a/ArduCopter/radio.cpp
+++ b/ArduCopter/radio.cpp
@@ -59,7 +59,7 @@ void Copter::init_rc_out()
 #if FRAME_CONFIG != HELI_FRAME
     motors->set_throttle_range(channel_throttle->get_radio_min(), channel_throttle->get_radio_max());
 #else
-    // setup correct scaling for ESCs like the UAVCAN PX4ESC which
+    // setup correct scaling for ESCs like the UAVCAN ESCs which
     // take a proportion of speed.
     hal.rcout->set_esc_scaling(channel_throttle->get_radio_min(), channel_throttle->get_radio_max());
 #endif
diff --git a/ArduPlane/quadplane.cpp b/ArduPlane/quadplane.cpp
index 186fcf8b7cf3..1dd1bd478452 100644
--- a/ArduPlane/quadplane.cpp
+++ b/ArduPlane/quadplane.cpp
@@ -707,7 +707,7 @@ bool QuadPlane::setup(void)
     pos_control->set_dt(loop_delta_t);
     attitude_control->parameter_sanity_check();
 
-    // setup the trim of any motors used by AP_Motors so px4io
+    // setup the trim of any motors used by AP_Motors so I/O board
     // failsafe will disable motors
     for (uint8_t i=0; i<8; i++) {
         SRV_Channel::Aux_servo_function_t func = SRV_Channels::get_motor_function(i);
diff --git a/ArduPlane/radio.cpp b/ArduPlane/radio.cpp
index 727b66bc4457..f30995cbc97e 100644
--- a/ArduPlane/radio.cpp
+++ b/ArduPlane/radio.cpp
@@ -45,7 +45,7 @@ void Plane::set_control_channels(void)
     }
 
     if (!quadplane.enable) {
-        // setup correct scaling for ESCs like the UAVCAN PX4ESC which
+        // setup correct scaling for ESCs like the UAVCAN ESCs which
         // take a proportion of speed. For quadplanes we use AP_Motors
         // scaling
         g2.servo_channels.set_esc_scaling_for(SRV_Channel::k_throttle);
@@ -84,7 +84,7 @@ void Plane::init_rc_out_main()
     SRV_Channels::set_failsafe_limit(SRV_Channel::k_throttle, SRV_Channel::SRV_CHANNEL_LIMIT_TRIM);
     SRV_Channels::set_failsafe_limit(SRV_Channel::k_rudder, SRV_Channel::SRV_CHANNEL_LIMIT_TRIM);
     
-    // setup PX4 to output the min throttle when safety off if arming
+    // setup flight controller to output the min throttle when safety off if arming
     // is setup for min on disarm
     if (arming.arming_required() == AP_Arming::Required::YES_MIN_PWM) {
         SRV_Channels::set_safety_limit(SRV_Channel::k_throttle, have_reverse_thrust()?SRV_Channel::SRV_CHANNEL_LIMIT_TRIM:SRV_Channel::SRV_CHANNEL_LIMIT_MIN);
diff --git a/ArduSub/Parameters.h b/ArduSub/Parameters.h
index 1f9154e63c54..a34815d1dfc4 100644
--- a/ArduSub/Parameters.h
+++ b/ArduSub/Parameters.h
@@ -60,7 +60,7 @@ class Parameters {
         k_param_sysid_my_gcs,
 
         // Hardware/Software configuration
-        k_param_BoardConfig = 20, // Board configuration (PX4/Linux/etc)
+        k_param_BoardConfig = 20, // Board configuration (Pixhawk/Linux/etc)
         k_param_scheduler, // Scheduler (for debugging/perf_info)
         k_param_logger, // AP_Logger Logging
         k_param_serial_manager, // Serial ports, AP_SerialManager
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2.cpp b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
index 95982bdda800..5f693c497599 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
@@ -1104,6 +1104,9 @@ bool NavEKF2::getOriginLLH(int8_t instance, struct Location &loc) const
 // Returns false if the filter has rejected the attempt to set the origin
 bool NavEKF2::setOriginLLH(const Location &loc)
 {
+    if (!core) {
+        return false;
+    }
     if (_fusionModeGPS != 3) {
         // we don't allow setting of the EKF origin unless we are
         // flying in non-GPS mode. This is to prevent accidental set
@@ -1111,9 +1114,6 @@ bool NavEKF2::setOriginLLH(const Location &loc)
         gcs().send_text(MAV_SEVERITY_WARNING, "EKF2 refusing set origin");
         return false;
     }
-    if (!core) {
-        return false;
-    }
     bool ret = false;
     for (uint8_t i=0; i<num_cores; i++) {
         ret |= core[i].setOriginLLH(loc);
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3.cpp b/libraries/AP_NavEKF3/AP_NavEKF3.cpp
index c3033f171b6f..217450a0bd0d 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3.cpp
@@ -1127,6 +1127,9 @@ bool NavEKF3::getOriginLLH(int8_t instance, struct Location &loc) const
 // Returns false if the filter has rejected the attempt to set the origin
 bool NavEKF3::setOriginLLH(const Location &loc)
 {
+    if (!core) {
+        return false;
+    }
     if (_fusionModeGPS != 3) {
         // we don't allow setting of the EKF origin unless we are
         // flying in non-GPS mode. This is to prevent accidental set
@@ -1134,9 +1137,6 @@ bool NavEKF3::setOriginLLH(const Location &loc)
         gcs().send_text(MAV_SEVERITY_WARNING, "EKF3 refusing set origin");
         return false;
     }
-    if (!core) {
-        return false;
-    }
     bool ret = false;
     for (uint8_t i=0; i<num_cores; i++) {
         ret |= core[i].setOriginLLH(loc);
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3.h b/libraries/AP_NavEKF3/AP_NavEKF3.h
index 35de0716f986..7b54b55d3c3a 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3.h
+++ b/libraries/AP_NavEKF3/AP_NavEKF3.h
@@ -233,6 +233,7 @@ class NavEKF3 {
      * timeStamp_ms is the time when the rotation was last measured (msec)
      * posOffset is the XYZ body frame position of the wheel hub (m)
      * radius is the effective rolling radius of the wheel (m)
+     * this should not be called at more than the EKF's update rate (50hz or 100hz)
     */
     void writeWheelOdom(float delAng, float delTime, uint32_t timeStamp_ms, const Vector3f &posOffset, float radius);
 
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp b/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
index 17bdcff00b57..f77cf3ca4caf 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
@@ -140,9 +140,10 @@ void NavEKF3_core::writeWheelOdom(float delAng, float delTime, uint32_t timeStam
     // It uses the exisiting body frame velocity fusion.
     // TODO implement a dedicated wheel odometry observation model
 
+    // rate limiting to 50hz should be done by the caller
     // limit update rate to maximum allowed by sensor buffers and fusion process
     // don't try to write to buffer until the filter has been initialised
-    if (((timeStamp_ms - wheelOdmMeasTime_ms) < frontend->sensorIntervalMin_ms) || (delTime < dtEkfAvg) || !statesInitialised) {
+    if ((delTime < dtEkfAvg) || !statesInitialised) {
         return;
     }
 
diff --git a/libraries/AP_RPM/AP_RPM.cpp b/libraries/AP_RPM/AP_RPM.cpp
index 0aa96520b621..a053d51b8dcb 100644
--- a/libraries/AP_RPM/AP_RPM.cpp
+++ b/libraries/AP_RPM/AP_RPM.cpp
@@ -24,7 +24,7 @@ const AP_Param::GroupInfo AP_RPM::var_info[] = {
     // @Param: _TYPE
     // @DisplayName: RPM type
     // @Description: What type of RPM sensor is connected
-    // @Values: 0:None,1:PX4-PWM,2:AUXPIN
+    // @Values: 0:None,1:PWM,2:AUXPIN
     // @User: Standard
     AP_GROUPINFO("_TYPE",    0, AP_RPM, _type[0], 0),
 
@@ -67,7 +67,7 @@ const AP_Param::GroupInfo AP_RPM::var_info[] = {
     // @Param: 2_TYPE
     // @DisplayName: Second RPM type
     // @Description: What type of RPM sensor is connected
-    // @Values: 0:None,1:PX4-PWM,2:AUXPIN
+    // @Values: 0:None,1:PWM,2:AUXPIN
     // @User: Advanced
     AP_GROUPINFO("2_TYPE",    10, AP_RPM, _type[1], 0),
 
@@ -111,8 +111,8 @@ void AP_RPM::init(void)
     for (uint8_t i=0; i<RPM_MAX_INSTANCES; i++) {
         uint8_t type = _type[i];
 
-        if (type == RPM_TYPE_PX4_PWM) {
-            // on non-PX4 treat PX4-pin as AUXPIN option, for upgrade
+        if (type == RPM_TYPE_PWM) {
+            // PWM option same as PIN option, for upgrade
             type = RPM_TYPE_PIN;
         }
         if (type == RPM_TYPE_PIN) {
diff --git a/libraries/AP_RPM/AP_RPM.h b/libraries/AP_RPM/AP_RPM.h
index 1c782cde9776..3277c3efe211 100644
--- a/libraries/AP_RPM/AP_RPM.h
+++ b/libraries/AP_RPM/AP_RPM.h
@@ -38,7 +38,7 @@ class AP_RPM
     // RPM driver types
     enum RPM_Type {
         RPM_TYPE_NONE    = 0,
-        RPM_TYPE_PX4_PWM = 1,
+        RPM_TYPE_PWM     = 1,
         RPM_TYPE_PIN     = 2
     };
 
