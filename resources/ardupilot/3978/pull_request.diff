diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
index 74039f6c25ee..a264c9ba283f 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_Control.cpp
@@ -143,10 +143,9 @@ void NavEKF2_core::setAidingMode()
             // reset the last valid position fix time to prevent unwanted activation of GPS glitch logic
             lastPosPassTime_ms = imuSampleTime_ms;
         }
-        // Reset all position, velocity and covariance
+        // Reset all position and velocity states
         ResetVelocity();
         ResetPosition();
-        CovarianceInit();
 
     }
 
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
index a1e2e59a0d42..031a18242967 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_MagFusion.cpp
@@ -174,7 +174,27 @@ void NavEKF2_core::SelectMagFusion()
         } else {
             // if we are not doing aiding with earth relative observations (eg GPS) then the declination is
             // maintained by fusing declination as a synthesised observation
-            if (PV_AidingMode != AID_ABSOLUTE || (imuSampleTime_ms - lastPosPassTime_ms) > 4000) {
+            bool useCompassDecl = (PV_AidingMode != AID_ABSOLUTE || (imuSampleTime_ms - lastPosPassTime_ms) > 4000);
+
+            // if we are spinning rapidly, then the declination observaton used is the last learned value before the spin started
+            bool useLearnedDecl = fabsf(filtYawRate) > 1.0f;
+            if (!useLearnedDecl) {
+                lastLearnedDecl = atan2f(stateStruct.earth_magfield.y,stateStruct.earth_magfield.x);
+            }
+
+            // constrain the declination angle of the learned earth field
+            if (useCompassDecl || useLearnedDecl) {
+                // select the source of the declination
+                if (useCompassDecl) {
+                    // use the value from the compass library lookup tables
+                    magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
+                    declObsVar = 0.01f;
+                } else {
+                    // use the last learned value
+                    magDecAng = lastLearnedDecl;
+                    declObsVar = 0.001f;
+                }
+
                 FuseDeclination();
             }
             // fuse the three magnetometer componenents sequentially
@@ -838,22 +858,18 @@ void NavEKF2_core::fuseEulerYaw()
 */
 void NavEKF2_core::FuseDeclination()
 {
-    // declination error variance (rad^2)
-    const float R_DECL = 1e-2f;
-
     // copy required states to local variables
     float magN = stateStruct.earth_magfield.x;
     float magE = stateStruct.earth_magfield.y;
 
-    // prevent bad earth field states from causing numerical errors or exceptions
-    if (magN < 1e-3f) {
-        return;
-    }
-
     // Calculate observation Jacobian and Kalman gains
     float t2 = magE*magE;
     float t3 = magN*magN;
     float t4 = t2+t3;
+    if (t4 < 0.001f) {
+        // prevent bad earth field states from causing numerical errors or exceptions
+        return;
+    }
     float t5 = 1.0f/t4;
     float t22 = magE*t5;
     float t23 = magN*t5;
@@ -865,7 +881,7 @@ void NavEKF2_core::FuseDeclination()
     float t14 = P[17][17]*t23;
     float t10 = t9-t14;
     float t15 = t23*t10;
-    float t11 = R_DECL+t8-t15; // innovation variance
+    float t11 = declObsVar+t8-t15; // innovation variance
     float t12 = 1.0f/t11;
 
     float H_MAG[24];
@@ -881,11 +897,8 @@ void NavEKF2_core::FuseDeclination()
         Kfusion[i] = -t12*(P[i][16]*t22-P[i][17]*t23);
     }
 
-    // get the magnetic declination
-    float magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
-
     // Calculate the innovation
-    float innovation = atanf(t4) - magDecAng;
+    float innovation = atan2f(magE , magN) - magDecAng;
 
     // limit the innovation to protect against data errors
     if (innovation > 0.5f) {
@@ -945,7 +958,7 @@ void NavEKF2_core::FuseDeclination()
 void NavEKF2_core::alignMagStateDeclination()
 {
     // get the magnetic declination
-    float magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
+    magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
 
     // rotate the NE values so that the declination matches the published value
     Vector3f initMagNED = stateStruct.earth_magfield;
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_PosVelFusion.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_PosVelFusion.cpp
index f99e5bed56b2..416060b91692 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_PosVelFusion.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_PosVelFusion.cpp
@@ -47,6 +47,31 @@ void NavEKF2_core::ResetVelocity(void)
 
     // store the time of the reset
     lastVelReset_ms = imuSampleTime_ms;
+
+    // reset the covariance matrix values
+    zeroRows(P,3,4);
+    zeroCols(P,3,4);
+
+    // calculate velocity variance
+    float R_OBS;
+    if (PV_AidingMode == AID_NONE) {
+        if (tiltAlignComplete && motorsArmed) {
+        // This is a compromise between corrections for gyro errors and reducing effect of manoeuvre accelerations on tilt estimate
+            R_OBS = sq(constrain_float(frontend->_noaidHorizNoise, 0.5f, 50.0f));
+        } else {
+            // Use a smaller value to give faster initial alignment
+            R_OBS = sq(0.5f);
+        }
+    } else {
+        if (gpsSpdAccuracy > 0.0f) {
+            // use GPS receivers reported speed accuracy if available and floor at value set by gps noise parameter
+            R_OBS = sq(constrain_float(gpsSpdAccuracy, frontend->_gpsHorizVelNoise, 50.0f));
+        } else {
+            // calculate additional error in GPS velocity caused by manoeuvring
+            R_OBS = sq(constrain_float(frontend->_gpsHorizVelNoise, 0.05f, 5.0f)) + sq(frontend->gpsNEVelVarAccScale * accNavMag);
+        }
+    }
+    P[4][4] = P[3][3] = R_OBS;
 }
 
 // resets position states to last GPS measurement or to zero if in constant position mode
@@ -80,6 +105,28 @@ void NavEKF2_core::ResetPosition(void)
 
     // store the time of the reset
     lastPosReset_ms = imuSampleTime_ms;
+
+    // reset the covariance matrix values
+    zeroRows(P,6,7);
+    zeroCols(P,6,7);
+
+    // calculate the initial position variance
+    float R_OBS;
+    if (PV_AidingMode == AID_NONE) {
+        if (tiltAlignComplete && motorsArmed) {
+        // This is a compromise between corrections for gyro errors and reducing effect of manoeuvre accelerations on tilt estimate
+            R_OBS = sq(constrain_float(frontend->_noaidHorizNoise, 0.5f, 50.0f));
+        } else {
+            // Use a smaller value to give faster initial alignment
+            R_OBS = sq(0.5f);
+        }
+    } else {
+        // Use GPS reported accuracy with adjustment for maneouvre g's
+        float posErr = frontend->gpsPosVarAccScale * accNavMag;
+        R_OBS = sq(constrain_float(frontend->_gpsHorizPosNoise, 0.1f, 10.0f)) + sq(posErr);
+    }
+    P[7][7] = P[6][6] = R_OBS;
+
 }
 
 // reset the vertical position state using the last height measurement
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp b/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
index 343cbea6b36c..78c77d34207f 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_core.cpp
@@ -251,6 +251,9 @@ void NavEKF2_core::InitialiseVariables()
     runUpdates = false;
     framesSincePredict = 0;
     lastMagOffsetsValid = false;
+    magDecAng = 0.0f;
+    filtYawRate = 0.0f;
+    lastLearnedDecl = 0.0f;
 
     // zero data buffers
     storedIMU.reset();
@@ -523,6 +526,10 @@ void NavEKF2_core::UpdateStrapdownEquationsNED()
 
     // limit states to protect against divergence
     ConstrainStates();
+
+    // calculate the angular rate about the vertical
+    float rawYawRate = (Tbn_temp.c.x * correctedDelAng.x + Tbn_temp.c.y * correctedDelAng.y + Tbn_temp.c.z * correctedDelAng.z) / imuDataDelayed.delAngDT;
+    filtYawRate = 0.98f * filtYawRate + 0.02f * rawYawRate;
 }
 
 /*
@@ -1304,7 +1311,7 @@ Quaternion NavEKF2_core::calcQuatAndFieldStates(float roll, float pitch)
         float magHeading = atan2f(initMagNED.y, initMagNED.x);
 
         // get the magnetic declination
-        float magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
+        magDecAng = use_compass() ? _ahrs->get_compass()->get_declination() : 0;
 
         // calculate yaw angle rel to true north
         yaw = magDecAng - magHeading;
diff --git a/libraries/AP_NavEKF2/AP_NavEKF2_core.h b/libraries/AP_NavEKF2/AP_NavEKF2_core.h
index e051885711e5..deed0f95c8e8 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2_core.h
+++ b/libraries/AP_NavEKF2/AP_NavEKF2_core.h
@@ -774,7 +774,11 @@ class NavEKF2_core
     uint32_t framesSincePredict;    // number of frames lapsed since EKF instance did a state prediction
     bool startPredictEnabled;       // boolean true when the frontend has given permission to start a new state prediciton cycele
     uint8_t localFilterTimeStep_ms; // average number of msec between filter updates
-    float posDownObsNoise;          // observationn noise on the vertical position used by the state and covariance update step (m)
+    float posDownObsNoise;          // observation noise on the vertical position used by the state and covariance update step (m)
+    float magDecAng;                // Magnetic declination angle used by the filter (rad)
+    float filtYawRate;              // filtered yaw rate used to activate rapid yaw protection (rad/sec)
+    float lastLearnedDecl;          // last value of declination learned (rad)
+    float declObsVar;               // variance of the magentic declination observation (rad)^2
 
     // variables used to calulate a vertical velocity that is kinematically consistent with the verical position
     float posDownDerivative;        // Rate of chage of vertical position (dPosD/dt) in m/s. This is the first time derivative of PosD.
