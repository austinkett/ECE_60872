diff --git a/libraries/AP_AccelCal/AccelCalibrator.cpp b/libraries/AP_AccelCal/AccelCalibrator.cpp
index d54df193f3f5..caec28372149 100644
--- a/libraries/AP_AccelCal/AccelCalibrator.cpp
+++ b/libraries/AP_AccelCal/AccelCalibrator.cpp
@@ -379,9 +379,6 @@ void AccelCalibrator::run_fit(uint8_t max_iterations, float& fitness)
         }
 
         num_iterations++;
-        if (fitness - last_fitness < 1.0e-9f) {
-            break;
-        }
     }
 }
 
diff --git a/libraries/AP_Compass/CompassCalibrator.cpp b/libraries/AP_Compass/CompassCalibrator.cpp
index 38457ff6ff12..2135ab2586af 100644
--- a/libraries/AP_Compass/CompassCalibrator.cpp
+++ b/libraries/AP_Compass/CompassCalibrator.cpp
@@ -508,9 +508,9 @@ void CompassCalibrator::run_sphere_fit()
     float JTJ2[COMPASS_CAL_NUM_SPHERE_PARAMS*COMPASS_CAL_NUM_SPHERE_PARAMS];
     float JTFI[COMPASS_CAL_NUM_SPHERE_PARAMS];
 
-    memset(&JTJ,0,sizeof(JTJ));
-    memset(&JTJ2,0,sizeof(JTJ2));
-    memset(&JTFI,0,sizeof(JTFI));
+    memset(JTJ,0,sizeof(JTJ));
+    memset(JTJ2,0,sizeof(JTJ2));
+    memset(JTFI,0,sizeof(JTFI));
     // Gauss Newton Part common for all kind of extensions including LM
     for(uint16_t k = 0; k<_samples_collected; k++) {
         Vector3f sample = _sample_buffer[k].get();
@@ -624,9 +624,9 @@ void CompassCalibrator::run_ellipsoid_fit()
     float JTJ2[COMPASS_CAL_NUM_ELLIPSOID_PARAMS*COMPASS_CAL_NUM_ELLIPSOID_PARAMS];
     float JTFI[COMPASS_CAL_NUM_ELLIPSOID_PARAMS];
 
-    memset(&JTJ,0,sizeof(JTJ));
-    memset(&JTJ2,0,sizeof(JTJ2));
-    memset(&JTFI,0,sizeof(JTFI));
+    memset(JTJ,0,sizeof(JTJ));
+    memset(JTJ2,0,sizeof(JTJ2));
+    memset(JTFI,0,sizeof(JTFI));
     // Gauss Newton Part common for all kind of extensions including LM
     for(uint16_t k = 0; k<_samples_collected; k++) {
         Vector3f sample = _sample_buffer[k].get();
