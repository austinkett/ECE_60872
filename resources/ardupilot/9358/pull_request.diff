diff --git a/ArduPlane/is_flying.cpp b/ArduPlane/is_flying.cpp
index 5983704af345..8e7121375dd9 100644
--- a/ArduPlane/is_flying.cpp
+++ b/ArduPlane/is_flying.cpp
@@ -14,7 +14,7 @@
 */
 void Plane::update_is_flying_5Hz(void)
 {
-    float aspeed;
+    float aspeed=0;
     bool is_flying_bool;
     uint32_t now_ms = AP_HAL::millis();
 
@@ -23,8 +23,16 @@ void Plane::update_is_flying_5Hz(void)
                                     (gps.ground_speed_cm() >= ground_speed_thresh_cm);
 
     // airspeed at least 75% of stall speed?
-    bool airspeed_movement = ahrs.airspeed_estimate(&aspeed) && (aspeed >= (MAX(aparm.airspeed_min,2)*0.75f));
-
+    const float airspeed_threshold = MAX(aparm.airspeed_min,2)*0.75f;
+    bool airspeed_movement = ahrs.airspeed_estimate(&aspeed) && (aspeed >= airspeed_threshold);
+
+    if (gps.status() < AP_GPS::GPS_OK_FIX_2D && arming.is_armed() && !airspeed_movement && isFlyingProbability > 0.3) {
+        // when flying with no GPS, use the last airspeed estimate to
+        // determine if we think we have airspeed movement. This
+        // prevents the crash detector from triggering when
+        // dead-reckoning under long GPS loss
+        airspeed_movement = aspeed >= airspeed_threshold;
+    }
 
     if (quadplane.is_flying()) {
         is_flying_bool = true;
@@ -270,6 +278,12 @@ void Plane::crash_detection_update(void)
         crash_state.checkedHardLanding = false;
     }
 
+    // if we have no GPS lock and we don't have a functional airspeed
+    // sensor then don't do crash detection
+    if (gps.status() < AP_GPS::GPS_OK_FIX_3D && (!airspeed.use() || !airspeed.healthy())) {
+        crashed = false;
+    }
+
     if (!crashed) {
         // reset timer
         crash_state.debounce_timer_ms = 0;
diff --git a/libraries/AP_AHRS/AP_AHRS.cpp b/libraries/AP_AHRS/AP_AHRS.cpp
index 3d9be88da73c..b42e7a6f88b7 100644
--- a/libraries/AP_AHRS/AP_AHRS.cpp
+++ b/libraries/AP_AHRS/AP_AHRS.cpp
@@ -237,13 +237,13 @@ Vector2f AP_AHRS::groundspeed_vector(void)
     // Generate estimate of ground speed vector using air data system
     Vector2f gndVelADS;
     Vector2f gndVelGPS;
-    float airspeed;
+    float airspeed = 0;
     const bool gotAirspeed = airspeed_estimate_true(&airspeed);
     const bool gotGPS = (AP::gps().status() >= AP_GPS::GPS_OK_FIX_2D);
     if (gotAirspeed) {
         const Vector3f wind = wind_estimate();
         const Vector2f wind2d(wind.x, wind.y);
-        const Vector2f airspeed_vector(cosf(yaw) * airspeed, sinf(yaw) * airspeed);
+        const Vector2f airspeed_vector(_cos_yaw * airspeed, _sin_yaw * airspeed);
         gndVelADS = airspeed_vector - wind2d;
     }
 
@@ -281,6 +281,20 @@ Vector2f AP_AHRS::groundspeed_vector(void)
     if (!gotAirspeed && gotGPS) {
         return gndVelGPS;
     }
+
+    if (airspeed > 0) {
+        // we have a rough airspeed, and we have a yaw. For
+        // dead-reckoning purposes we can create a estimated
+        // groundspeed vector
+        Vector2f ret(cosf(yaw), sinf(yaw));
+        ret *= airspeed;
+        // adjust for estimated wind
+        Vector3f wind = wind_estimate();
+        ret.x += wind.x;
+        ret.y += wind.y;
+        return ret;
+    }
+
     return Vector2f(0.0f, 0.0f);
 }
 
diff --git a/libraries/AP_AHRS/AP_AHRS_DCM.cpp b/libraries/AP_AHRS/AP_AHRS_DCM.cpp
index c75c87bf25e7..6ed1f7a7310f 100644
--- a/libraries/AP_AHRS/AP_AHRS_DCM.cpp
+++ b/libraries/AP_AHRS/AP_AHRS_DCM.cpp
@@ -1023,6 +1023,11 @@ bool AP_AHRS_DCM::airspeed_estimate(float *airspeed_ret) const
                                         gnd_speed + _wind_max);
         *airspeed_ret = true_airspeed / get_EAS2TAS();
     }
+    if (!ret) {
+        // give the last estimate, but return false. This is used by
+        // dead-reckoning code
+        *airspeed_ret = _last_airspeed;
+    }
     return ret;
 }
 
