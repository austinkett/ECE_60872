diff --git a/libraries/DataFlash/DataFlash_Backend.cpp b/libraries/DataFlash/DataFlash_Backend.cpp
index 19b3742e15d7..2fc2404f2c33 100644
--- a/libraries/DataFlash/DataFlash_Backend.cpp
+++ b/libraries/DataFlash/DataFlash_Backend.cpp
@@ -285,7 +285,7 @@ bool DataFlash_Backend::StartNewLogOK() const
 
 bool DataFlash_Backend::WritePrioritisedBlock(const void *pBuffer, uint16_t size, bool is_critical)
 {
-    if (!ShouldLog()) {
+    if (!ShouldLog(is_critical)) {
         return false;
     }
     if (StartNewLogOK()) {
@@ -297,14 +297,11 @@ bool DataFlash_Backend::WritePrioritisedBlock(const void *pBuffer, uint16_t size
     return _WritePrioritisedBlock(pBuffer, size, is_critical);
 }
 
-bool DataFlash_Backend::ShouldLog() const
+bool DataFlash_Backend::ShouldLog(bool is_critical)
 {
     if (!_front.WritesEnabled()) {
         return false;
     }
-    if (!_front.vehicle_is_armed() && !_front.log_while_disarmed()) {
-        return false;
-    }
     if (!_initialised) {
         return false;
     }
@@ -315,5 +312,20 @@ bool DataFlash_Backend::ShouldLog() const
         return false;
     }
 
+    if (is_critical && have_logged_armed && !_front._params.file_disarm_rot) {
+        // if we have previously logged while armed then we log all
+        // critical messages from then on. That fixes a problem where
+        // logs show the wrong flight mode if you disarm then arm again
+        return true;
+    }
+    
+    if (!_front.vehicle_is_armed() && !_front.log_while_disarmed()) {
+        return false;
+    }
+
+    if (_front.vehicle_is_armed()) {
+        have_logged_armed = true;
+    }
+    
     return true;
 }
diff --git a/libraries/DataFlash/DataFlash_Backend.h b/libraries/DataFlash/DataFlash_Backend.h
index 40524408728f..2b7e6639861e 100644
--- a/libraries/DataFlash/DataFlash_Backend.h
+++ b/libraries/DataFlash/DataFlash_Backend.h
@@ -136,7 +136,7 @@ class DataFlash_Backend
                           print_mode_fn print_mode,
                           AP_HAL::BetterStream *port);
 
-    bool ShouldLog() const;
+    bool ShouldLog(bool is_critical);
     virtual bool WritesOK() const = 0;
     virtual bool StartNewLogOK() const;
 
@@ -166,5 +166,5 @@ class DataFlash_Backend
 
     uint32_t _last_periodic_1Hz;
     uint32_t _last_periodic_10Hz;
-
+    bool have_logged_armed;
 };
