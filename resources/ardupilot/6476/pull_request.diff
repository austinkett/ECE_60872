diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_Control.cpp b/libraries/AP_NavEKF3/AP_NavEKF3_Control.cpp
index fb5e574a1461..bb94f20c95bb 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_Control.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_Control.cpp
@@ -302,7 +302,8 @@ void NavEKF3_core::setAidingMode()
     // check to see if we are starting or stopping aiding and set states and modes as required
     if (PV_AidingMode != PV_AidingModePrev) {
         // set various  usage modes based on the condition when we start aiding. These are then held until aiding is stopped.
-        if (PV_AidingMode == AID_NONE) {
+        switch (PV_AidingMode) {
+        case AID_NONE:
             // We have ceased aiding
             GCS_MAVLINK::send_statustext_all(MAV_SEVERITY_WARNING, "EKF3 IMU%u stopped aiding",(unsigned)imu_index);
             // When not aiding, estimate orientation & height fusing synthetic constant position and zero velocity measurement to constrain tilt errors
@@ -322,7 +323,9 @@ void NavEKF3_core::setAidingMode()
             // reset relative aiding sensor fusion activity status
             flowFusionActive = false;
             bodyVelFusionActive = false;
-        } else if (PV_AidingMode == AID_RELATIVE) {
+            break;
+
+        case AID_RELATIVE:
             // We are doing relative position navigation where velocity errors are constrained, but position drift will occur
             GCS_MAVLINK::send_statustext_all(MAV_SEVERITY_INFO, "EKF3 IMU%u started relative aiding",(unsigned)imu_index);
             if (readyToUseOptFlow()) {
@@ -336,7 +339,9 @@ void NavEKF3_core::setAidingMode()
             }
             posTimeout = true;
             velTimeout = true;
-        } else if (PV_AidingMode == AID_ABSOLUTE) {
+            break;
+
+        case AID_ABSOLUTE:
             if (readyToUseGPS()) {
                 // We are commencing aiding using GPS - this is the preferred method
                 posResetSource = GPS;
@@ -359,6 +364,10 @@ void NavEKF3_core::setAidingMode()
             lastPosPassTime_ms = imuSampleTime_ms;
             lastVelPassTime_ms = imuSampleTime_ms;
             lastRngBcnPassTime_ms = imuSampleTime_ms;
+            break;
+
+        default:
+            break;
         }
 
         // Always reset the position and velocity when changing mode
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp b/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
index 80789fdaf099..0b21d3b72bd5 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_Measurements.cpp
@@ -782,7 +782,8 @@ void NavEKF3_core::readRngBcnData()
 
     // Correct the range beacon earth frame origin for estimated offset relative to the EKF earth frame origin
     if (rngBcnDataToFuse) {
-        rngBcnDataDelayed.beacon_posNED += bcnPosOffsetNED;
+        rngBcnDataDelayed.beacon_posNED.x += bcnPosOffsetNED.x;
+        rngBcnDataDelayed.beacon_posNED.y += bcnPosOffsetNED.y;
     }
 
 }
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_RngBcnFusion.cpp b/libraries/AP_NavEKF3/AP_NavEKF3_RngBcnFusion.cpp
index 72ef1d585018..d2aec1197969 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_RngBcnFusion.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_RngBcnFusion.cpp
@@ -531,7 +531,7 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
     float obsDeriv; // derivative of observation relative to state
 
     const float stateNoiseVar = 0.1f; // State process noise variance
-    const float filtAlpha = 0.01f; // LPF constant
+    const float filtAlpha = 0.1f; // LPF constant
     const float innovGateWidth = 5.0f; // width of innovation consistency check gate in std
 
     // estimate upper value for offset
@@ -552,9 +552,6 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
         // Calculate innovation
         innov = sqrtf(t8) - rngBcnDataDelayed.rng;
 
-        // calculate a filtered innovation magnitude to be used to select between the high or low offset
-        OffsetMaxInnovFilt = (1.0f - filtAlpha) * bcnPosOffsetMaxVar + filtAlpha * fabsf(innov);
-
         // covariance prediction
         bcnPosOffsetMaxVar += stateNoiseVar;
 
@@ -562,13 +559,18 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
         innovVar = obsDeriv * bcnPosOffsetMaxVar * obsDeriv + obsVar;
         innovVar = MAX(innovVar, obsVar);
 
+        // calculate the Kalman gain
+        gain = (bcnPosOffsetMaxVar * obsDeriv) / innovVar;
+
+        // calculate a filtered state change magnitude to be used to select between the high or low offset
+        float stateChange = innov * gain;
+        maxOffsetStateChangeFilt = (1.0f - filtAlpha) * maxOffsetStateChangeFilt + fminf(fabsf(filtAlpha * stateChange) , 1.0f);
+
         // Reject range innovation spikes using a 5-sigma threshold unless aligning
         if ((sq(innov) < sq(innovGateWidth) * innovVar) || aligning) {
-            // calculate the Kalman gain
-            gain = (bcnPosOffsetMaxVar * obsDeriv) / innovVar;
 
             // state update
-            bcnPosDownOffsetMax -= innov * gain;
+            bcnPosDownOffsetMax -= stateChange;
 
             // covariance update
             bcnPosOffsetMaxVar -= gain * obsDeriv * bcnPosOffsetMaxVar;
@@ -589,9 +591,6 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
         // Calculate innovation
         innov = sqrtf(t8) - rngBcnDataDelayed.rng;
 
-        // calculate a filtered innovation magnitude to be used to select between the high or low offset
-        OffsetMinInnovFilt = (1.0f - filtAlpha) * OffsetMinInnovFilt + filtAlpha * fabsf(innov);
-
         // covariance prediction
         bcnPosOffsetMinVar += stateNoiseVar;
 
@@ -599,13 +598,18 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
         innovVar = obsDeriv * bcnPosOffsetMinVar * obsDeriv + obsVar;
         innovVar = MAX(innovVar, obsVar);
 
+        // calculate the Kalman gain
+        gain = (bcnPosOffsetMinVar * obsDeriv) / innovVar;
+
+        // calculate a filtered state change magnitude to be used to select between the high or low offset
+        float stateChange = innov * gain;
+        minOffsetStateChangeFilt = (1.0f - filtAlpha) * minOffsetStateChangeFilt + fminf(fabsf(filtAlpha * stateChange) , 1.0f);
+
         // Reject range innovation spikes using a 5-sigma threshold unless aligning
         if ((sq(innov) < sq(innovGateWidth) * innovVar) || aligning) {
-            // calculate the Kalman gain
-            gain = (bcnPosOffsetMinVar * obsDeriv) / innovVar;
 
             // state update
-            bcnPosDownOffsetMin -= innov * gain;
+            bcnPosDownOffsetMin -= stateChange;
 
             // covariance update
             bcnPosOffsetMinVar -= gain * obsDeriv * bcnPosOffsetMinVar;
@@ -620,16 +624,21 @@ void NavEKF3_core::CalcRangeBeaconPosDownOffset(float obsVar, Vector3f &vehicleP
     bcnPosDownOffsetMax = MAX(bcnPosDownOffsetMax, vehiclePosNED.z - bcnMidPosD + 0.5f);
     bcnPosDownOffsetMin  = MIN(bcnPosDownOffsetMin,  vehiclePosNED.z - bcnMidPosD - 0.5f);
 
-    // calculate the innovation for the main filter using the offset with the smallest innovation history
+    // calculate the innovation for the main filter using the offset that is most stable
     // apply hysteresis to prevent rapid switching
-    if (!usingMinHypothesis && OffsetMinInnovFilt < 0.8f * OffsetMaxInnovFilt) {
-        bcnPosOffsetNED.z = bcnPosDownOffsetMin;
+    if (!usingMinHypothesis && (minOffsetStateChangeFilt < (0.8f * maxOffsetStateChangeFilt))) {
         usingMinHypothesis = true;
-    } else if (usingMinHypothesis && OffsetMaxInnovFilt < 0.8f * OffsetMinInnovFilt) {
-        bcnPosOffsetNED.z = bcnPosDownOffsetMax;
+    } else if (usingMinHypothesis && (maxOffsetStateChangeFilt < (0.8f * minOffsetStateChangeFilt))) {
         usingMinHypothesis = false;
     }
+    if (usingMinHypothesis) {
+        bcnPosOffsetNED.z = bcnPosDownOffsetMin;
+    } else {
+        bcnPosOffsetNED.z = bcnPosDownOffsetMax;
+    }
 
+    // apply the vertical offset to the beacon positions
+    rngBcnDataDelayed.beacon_posNED.z += bcnPosOffsetNED.z;
 }
 
 #endif // HAL_CPU_CLASS
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_core.cpp b/libraries/AP_NavEKF3/AP_NavEKF3_core.cpp
index 830dccf7fb1f..6c3cab91b22b 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_core.cpp
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_core.cpp
@@ -352,10 +352,10 @@ void NavEKF3_core::InitialiseVariables()
     minBcnPosD = 0.0f;
     bcnPosDownOffsetMax = 0.0f;
     bcnPosOffsetMaxVar = 0.0f;
-    OffsetMaxInnovFilt = 0.0f;
+    maxOffsetStateChangeFilt = 0.0f;
     bcnPosDownOffsetMin = 0.0f;
     bcnPosOffsetMinVar = 0.0f;
-    OffsetMinInnovFilt = 0.0f;
+    minOffsetStateChangeFilt = 0.0f;
     rngBcnFuseDataReportIndex = 0;
     memset(&rngBcnFusionReport, 0, sizeof(rngBcnFusionReport));
     bcnPosOffsetNED.zero();
diff --git a/libraries/AP_NavEKF3/AP_NavEKF3_core.h b/libraries/AP_NavEKF3/AP_NavEKF3_core.h
index f57feb72fe56..045f190c7258 100644
--- a/libraries/AP_NavEKF3/AP_NavEKF3_core.h
+++ b/libraries/AP_NavEKF3/AP_NavEKF3_core.h
@@ -1091,11 +1091,11 @@ class NavEKF3_core
 
     float bcnPosDownOffsetMax;          // Vertical position offset of the beacon constellation origin relative to the EKF origin (m)
     float bcnPosOffsetMaxVar;           // Variance of the bcnPosDownOffsetMax state (m)
-    float OffsetMaxInnovFilt;           // Filtered magnitude of the range innovations using bcnPosOffsetHigh
+    float maxOffsetStateChangeFilt;     // Filtered magnitude of the change in bcnPosOffsetHigh
 
     float bcnPosDownOffsetMin;          // Vertical position offset of the beacon constellation origin relative to the EKF origin (m)
     float bcnPosOffsetMinVar;           // Variance of the bcnPosDownOffsetMin state (m)
-    float OffsetMinInnovFilt;           // Filtered magnitude of the range innovations using bcnPosOffsetLow
+    float minOffsetStateChangeFilt;     // Filtered magnitude of the change in bcnPosOffsetLow
 
     Vector3f bcnPosOffsetNED;           // NED position of the beacon origin in earth frame (m)
     bool bcnOriginEstInit;              // True when the beacon origin has been initialised
