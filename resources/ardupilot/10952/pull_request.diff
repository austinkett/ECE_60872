diff --git a/ArduCopter/mode.h b/ArduCopter/mode.h
index fec37a76629c..a996cdeca724 100644
--- a/ArduCopter/mode.h
+++ b/ArduCopter/mode.h
@@ -499,6 +499,7 @@ class ModeAutoTune : public Mode {
 
     void save_tuning_gains();
     void stop();
+    void reset();
 
 protected:
 
diff --git a/ArduCopter/mode_autotune.cpp b/ArduCopter/mode_autotune.cpp
index 1a0382d31759..ea914bb7e711 100644
--- a/ArduCopter/mode_autotune.cpp
+++ b/ArduCopter/mode_autotune.cpp
@@ -173,4 +173,9 @@ void Copter::ModeAutoTune::stop()
     copter.autotune.stop();
 }
 
+void Copter::ModeAutoTune::reset()
+{
+    copter.autotune.reset();
+}
+
 #endif  // AUTOTUNE_ENABLED == ENABLED
diff --git a/ArduCopter/motors.cpp b/ArduCopter/motors.cpp
index 9bb0185b3c61..c8114d70f3d1 100644
--- a/ArduCopter/motors.cpp
+++ b/ArduCopter/motors.cpp
@@ -266,7 +266,11 @@ void Copter::init_disarm_motors()
 
 #if AUTOTUNE_ENABLED == ENABLED
     // save auto tuned parameters
-    mode_autotune.save_tuning_gains();
+    if (control_mode == AUTOTUNE) {;
+        mode_autotune.save_tuning_gains();
+    } else {
+        mode_autotune.reset();
+    }
 #endif
 
     // we are not in the air
diff --git a/ArduPlane/system.cpp b/ArduPlane/system.cpp
index 9e55b98d7b98..f3cc5db356b6 100644
--- a/ArduPlane/system.cpp
+++ b/ArduPlane/system.cpp
@@ -502,7 +502,11 @@ bool Plane::disarm_motors(void)
     
 #if QAUTOTUNE_ENABLED
     //save qautotune gains if enabled and success
-    quadplane.qautotune.save_tuning_gains();
+    if (control_mode == &mode_qautotune) {
+        quadplane.qautotune.save_tuning_gains();
+    } else {
+        quadplane.qautotune.reset();
+    }
 #endif
 
     return true;
diff --git a/Tools/autotest/quadplane.py b/Tools/autotest/quadplane.py
index 84665f7f6470..8c53d76a57d5 100644
--- a/Tools/autotest/quadplane.py
+++ b/Tools/autotest/quadplane.py
@@ -7,10 +7,13 @@
 from pymavlink import mavutil
 
 from common import AutoTest
+from common import AutoTestTimeoutException
+
 from pysim import util
 from pysim import vehicleinfo
 import operator
 
+
 # get location of scripts
 testdir = os.path.dirname(os.path.realpath(__file__))
 SITL_START_LOCATION = mavutil.location(-27.274439, 151.290064, 343, 8.7)
@@ -133,12 +136,17 @@ def fly_qautotune(self):
                 continue
             self.progress("STATUSTEXT (%u<%u): %s" % (now, deadline, m.text))
             if "AutoTune: Success" in m.text:
-                self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
-                # near enough for now:
-                self.change_mode("QLAND")
-                self.mavproxy.expect("AutoTune: Saved gains for Roll Pitch Yaw")
-                self.mav.motors_disarmed_wait()
-                return
+                break
+        self.progress("AUTOTUNE OK (%u seconds)" % (now - tstart))
+        self.set_rc(3, 1200)
+        self.wait_altitude(-5, 1, relative=True, timeout=30)
+        while self.get_sim_time_cached() < deadline:
+            self.mavproxy.send('disarm\n')
+            try:
+                self.wait_text("AutoTune: Saved gains for Roll Pitch Yaw", timeout=0.5)
+            except AutoTestTimeoutException as e:
+                continue
+            break
         self.mav.motors_disarmed_wait()
 
     def test_pid_tuning(self):
diff --git a/libraries/AC_AutoTune/AC_AutoTune.cpp b/libraries/AC_AutoTune/AC_AutoTune.cpp
index fa1deb12c16e..fbfaad563297 100644
--- a/libraries/AC_AutoTune/AC_AutoTune.cpp
+++ b/libraries/AC_AutoTune/AC_AutoTune.cpp
@@ -1215,9 +1215,7 @@ void AC_AutoTune::save_tuning_gains()
     update_gcs(AUTOTUNE_MESSAGE_SAVED_GAINS);
     Log_Write_Event(EVENT_AUTOTUNE_SAVEDGAINS);
 
-    // reset Autotune so that gains are not saved again and autotune can be run again.
-    mode = UNINITIALISED;
-    axes_completed = 0;
+    reset();
 }
 
 // update_gcs - send message to ground station
diff --git a/libraries/AC_AutoTune/AC_AutoTune.h b/libraries/AC_AutoTune/AC_AutoTune.h
index 754b7765798e..87ad7322b016 100644
--- a/libraries/AC_AutoTune/AC_AutoTune.h
+++ b/libraries/AC_AutoTune/AC_AutoTune.h
@@ -37,6 +37,12 @@ class AC_AutoTune {
     // stop tune, reverting gains
     void stop();
 
+    // reset Autotune so that gains are not saved again and autotune can be run again.
+    void reset() {
+        mode = UNINITIALISED;
+        axes_completed = 0;
+    }
+
     // var_info for holding Parameter information
     static const struct AP_Param::GroupInfo var_info[];
 
