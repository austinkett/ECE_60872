diff --git a/ArduCopter/AP_Arming.cpp b/ArduCopter/AP_Arming.cpp
index 5caeaf5b8638..d8cc9cc2503f 100644
--- a/ArduCopter/AP_Arming.cpp
+++ b/ArduCopter/AP_Arming.cpp
@@ -253,6 +253,11 @@ bool AP_Arming_Copter::motor_checks(bool display_failure)
         return false;
     }
 
+    // further checks enabled with parameters
+    if (!check_enabled(ARMING_CHECK_PARAMETERS)) {
+        return true;
+    }
+
     // if this is a multicopter using ToshibaCAN ESCs ensure MOT_PMW_MIN = 1000, MOT_PWM_MAX = 2000
 #if HAL_WITH_UAVCAN && (FRAME_CONFIG != HELI_FRAME)
     bool tcan_active = false;
@@ -265,6 +270,7 @@ bool AP_Arming_Copter::motor_checks(bool display_failure)
         }
     }
     if (tcan_active) {
+        // check motor range parameters
         if (copter.motors->get_pwm_output_min() != 1000) {
             check_failed(display_failure, "TCAN ESCs require MOT_PWM_MIN=1000");
             return false;
diff --git a/libraries/AP_BLHeli/AP_BLHeli.cpp b/libraries/AP_BLHeli/AP_BLHeli.cpp
index 08686aea62eb..a820cca04686 100644
--- a/libraries/AP_BLHeli/AP_BLHeli.cpp
+++ b/libraries/AP_BLHeli/AP_BLHeli.cpp
@@ -1381,7 +1381,8 @@ void AP_BLHeli::read_telemetry_packet(void)
                       td.voltage,
                       td.current,
                       td.temperature * 100U,
-                      td.consumption);
+                      td.consumption,
+                      0);
     }
     if (debug_level >= 2) {
         hal.console->printf("ESC[%u] T=%u V=%u C=%u con=%u RPM=%u t=%u\n",
diff --git a/libraries/AP_KDECAN/AP_KDECAN.cpp b/libraries/AP_KDECAN/AP_KDECAN.cpp
index 15f79a7f9cf5..cdddc1a823f3 100644
--- a/libraries/AP_KDECAN/AP_KDECAN.cpp
+++ b/libraries/AP_KDECAN/AP_KDECAN.cpp
@@ -633,7 +633,7 @@ void AP_KDECAN::update()
                           int32_t(telem_buffer[i].rpm * 60UL * 2 / num_poles * 100),
                           telem_buffer[i].voltage,
                           telem_buffer[i].current,
-                          int16_t(telem_buffer[i].temp * 100U), 0);
+                          int16_t(telem_buffer[i].temp * 100U), 0, 0);
         }
     }
 }
diff --git a/libraries/AP_Logger/AP_Logger.h b/libraries/AP_Logger/AP_Logger.h
index 2bdd3e14b5e7..7e7a9dbd2211 100644
--- a/libraries/AP_Logger/AP_Logger.h
+++ b/libraries/AP_Logger/AP_Logger.h
@@ -257,7 +257,7 @@ class AP_Logger
     void Write_CameraInfo(enum LogMessages msg, const Location &current_loc, uint64_t timestamp_us=0);
     void Write_Camera(const Location &current_loc, uint64_t timestamp_us=0);
     void Write_Trigger(const Location &current_loc);
-    void Write_ESC(uint8_t id, uint64_t time_us, int32_t rpm, uint16_t voltage, uint16_t current, int16_t temperature, uint16_t current_tot);
+    void Write_ESC(uint8_t id, uint64_t time_us, int32_t rpm, uint16_t voltage, uint16_t current, int16_t esc_temp, uint16_t current_tot, int16_t motor_temp);
     void Write_Attitude(const Vector3f &targets);
     void Write_AttitudeView(AP_AHRS_View &ahrs, const Vector3f &targets);
     void Write_Current();
diff --git a/libraries/AP_Logger/LogFile.cpp b/libraries/AP_Logger/LogFile.cpp
index ebcc173b54b5..df2bfd0a85c4 100644
--- a/libraries/AP_Logger/LogFile.cpp
+++ b/libraries/AP_Logger/LogFile.cpp
@@ -780,7 +780,7 @@ bool AP_Logger_Backend::Write_Mode(uint8_t mode, const ModeReason reason)
 //   current is in centi-amps
 //   temperature is in centi-degrees Celsius
 //   current_tot is in centi-amp hours
-void AP_Logger::Write_ESC(uint8_t id, uint64_t time_us, int32_t rpm, uint16_t voltage, uint16_t current, int16_t temperature, uint16_t current_tot)
+void AP_Logger::Write_ESC(uint8_t id, uint64_t time_us, int32_t rpm, uint16_t voltage, uint16_t current, int16_t esc_temp, uint16_t current_tot, int16_t motor_temp)
 {
     // sanity check id
     if (id >= 8) {
@@ -792,8 +792,9 @@ void AP_Logger::Write_ESC(uint8_t id, uint64_t time_us, int32_t rpm, uint16_t vo
         rpm         : rpm,
         voltage     : voltage,
         current     : current,
-        temperature : temperature,
-        current_tot : current_tot
+        esc_temp    : esc_temp,
+        current_tot : current_tot,
+        motor_temp  : motor_temp
     };
     WriteBlock(&pkt, sizeof(pkt));
 }
diff --git a/libraries/AP_Logger/LogStructure.h b/libraries/AP_Logger/LogStructure.h
index 98f14d735aa5..4612fe589230 100644
--- a/libraries/AP_Logger/LogStructure.h
+++ b/libraries/AP_Logger/LogStructure.h
@@ -937,8 +937,9 @@ struct PACKED log_Esc {
     int32_t rpm;
     uint16_t voltage;
     uint16_t current;
-    int16_t temperature;
+    int16_t esc_temp;
     uint16_t current_tot;
+    int16_t motor_temp;
 };
 
 struct PACKED log_AIRSPEED {
@@ -1219,10 +1220,10 @@ struct PACKED log_Arm_Disarm {
 #define BARO_UNITS "smPOnsmO-"
 #define BARO_MULTS "F00B0C?0-"
 
-#define ESC_LABELS "TimeUS,RPM,Volt,Curr,Temp,CTot"
-#define ESC_FMT   "QeCCcH"
-#define ESC_UNITS "sqvAO-"
-#define ESC_MULTS "FBBBB-"
+#define ESC_LABELS "TimeUS,RPM,Volt,Curr,Temp,CTot,MotTemp"
+#define ESC_FMT   "QeCCcHc"
+#define ESC_UNITS "sqvAO-O"
+#define ESC_MULTS "FBBBB-B"
 
 #define GPA_LABELS "TimeUS,VDop,HAcc,VAcc,SAcc,YAcc,VV,SMS,Delta"
 #define GPA_FMT   "QCCCCfBIH"
diff --git a/libraries/AP_ToshibaCAN/AP_ToshibaCAN.cpp b/libraries/AP_ToshibaCAN/AP_ToshibaCAN.cpp
index bd717c9295f4..281b0972419c 100644
--- a/libraries/AP_ToshibaCAN/AP_ToshibaCAN.cpp
+++ b/libraries/AP_ToshibaCAN/AP_ToshibaCAN.cpp
@@ -340,13 +340,15 @@ void AP_ToshibaCAN::loop()
                     const uint16_t u_temp = ((uint16_t)recv_frame.data[0] << 2) | ((uint16_t)recv_frame.data[1] >> 6);
                     const uint16_t v_temp = (((uint16_t)recv_frame.data[1] & (uint16_t)0x3F) << 4) | (((uint16_t)recv_frame.data[2] & (uint16_t)0xF0) >> 4);
                     const uint16_t w_temp = (((uint16_t)recv_frame.data[2] & (uint16_t)0x0F) << 6) | (((uint16_t)recv_frame.data[3] & (uint16_t)0xFC) >> 2);
+                    const uint16_t motor_temp = (((uint16_t)recv_frame.data[3] & (uint16_t)0x03) << 8) | ((uint16_t)recv_frame.data[4]);
                     const uint16_t temp_max = MAX(u_temp, MAX(v_temp, w_temp));
 
                     // store repose in telemetry array
                     uint8_t esc_id = recv_frame.id - MOTOR_DATA2;
                     if (esc_id < TOSHIBACAN_MAX_NUM_ESCS) {
                         WITH_SEMAPHORE(_telem_sem);
-                        _telemetry[esc_id].temperature = temp_max < 20 ? 0 : temp_max / 5 - 20;
+                        _telemetry[esc_id].esc_temp = temp_max < 100 ? 0 : temp_max / 5 - 20;
+                        _telemetry[esc_id].motor_temp = motor_temp < 100 ? 0 : motor_temp / 5 - 20;
                         _esc_present_bitmask_recent |= ((uint32_t)1 << esc_id);
                     }
                 }
@@ -462,8 +464,9 @@ void AP_ToshibaCAN::update()
                               _telemetry[i].rpm * 100U,
                               _telemetry[i].voltage_cv,
                               _telemetry[i].current_ca,
-                              _telemetry[i].temperature * 100.0f,
-                              constrain_float(_telemetry[i].current_tot_mah, 0, UINT16_MAX));
+                              _telemetry[i].esc_temp * 100U,
+                              constrain_float(_telemetry[i].current_tot_mah, 0, UINT16_MAX),
+                              _telemetry[i].motor_temp * 100U);
                 _telemetry[i].new_data = false;
             }
         }
@@ -510,7 +513,7 @@ void AP_ToshibaCAN::send_esc_telemetry_mavlink(uint8_t mav_chan)
             // fill in output arrays
             for (uint8_t j = 0; j < 4; j++) {
                 uint8_t esc_id = i * 4 + j;
-                temperature[j] = _telemetry[esc_id].temperature;
+                temperature[j] = _telemetry[esc_id].esc_temp;
                 voltage[j] = _telemetry[esc_id].voltage_cv;
                 current[j] = _telemetry[esc_id].current_ca;
                 current_tot[j] = constrain_float(_telemetry[esc_id].current_tot_mah, 0, UINT16_MAX);
diff --git a/libraries/AP_ToshibaCAN/AP_ToshibaCAN.h b/libraries/AP_ToshibaCAN/AP_ToshibaCAN.h
index 709c268b8875..275ad14d4a03 100644
--- a/libraries/AP_ToshibaCAN/AP_ToshibaCAN.h
+++ b/libraries/AP_ToshibaCAN/AP_ToshibaCAN.h
@@ -78,7 +78,8 @@ class AP_ToshibaCAN : public AP_HAL::CANProtocol {
         uint16_t rpm;               // rpm
         uint16_t voltage_cv;        // voltage in centi-volts
         uint16_t current_ca;        // current in centi-amps
-        uint16_t temperature;       // temperature in degrees
+        uint16_t esc_temp;          // esc temperature in degrees
+        uint16_t motor_temp;        // motor temperature in degrees
         uint16_t count;             // total number of packets sent
         uint32_t last_update_ms;    // system time telemetry was last update (used to calc total current)
         float current_tot_mah;      // total current in mAh
