diff --git a/APMrover2/mode.cpp b/APMrover2/mode.cpp
index 3b9a205decfe..6a620fe4bded 100644
--- a/APMrover2/mode.cpp
+++ b/APMrover2/mode.cpp
@@ -115,7 +115,7 @@ void Mode::get_pilot_desired_steering_and_speed(float &steering_out, float &spee
     get_pilot_input(steering_out, desired_throttle);
     speed_out = desired_throttle * 0.01f * calc_speed_max(g.speed_cruise, g.throttle_cruise * 0.01f);
     // check for special case of input and output throttle being in opposite directions
-    float speed_out_limited = g2.attitude_control.get_desired_speed_accel_limited(speed_out);
+    float speed_out_limited = g2.attitude_control.get_desired_speed_accel_limited(speed_out, rover.G_Dt);
     if ((is_negative(speed_out) != is_negative(speed_out_limited)) &&
         ((g.pilot_steer_type == PILOT_STEER_TYPE_DEFAULT) ||
          (g.pilot_steer_type == PILOT_STEER_TYPE_DIR_REVERSED_WHEN_REVERSING))) {
@@ -148,6 +148,9 @@ void Mode::set_desired_location(const struct Location& destination, float next_l
         if (is_zero(turn_angle_cd)) {
             // if not turning can continue at full speed
             _desired_speed_final = _desired_speed;
+        } else if (rover.use_pivot_steering(turn_angle_cd)) {
+            // pivoting so we will stop
+            _desired_speed_final = 0.0f;
         } else {
             // calculate maximum speed that keeps overshoot within bounds
             const float radius_m = fabsf(g.waypoint_overshoot / (cosf(radians(turn_angle_cd * 0.01f)) - 1.0f));
@@ -207,7 +210,7 @@ void Mode::calc_throttle(float target_speed, bool nudge_allowed, bool avoidance_
     }
 
     // get acceleration limited target speed
-    target_speed = attitude_control.get_desired_speed_accel_limited(target_speed);
+    target_speed = attitude_control.get_desired_speed_accel_limited(target_speed, rover.G_Dt);
 
     // apply object avoidance to desired speed using half vehicle's maximum deceleration
     if (avoidance_enabled) {
@@ -220,9 +223,9 @@ void Mode::calc_throttle(float target_speed, bool nudge_allowed, bool avoidance_
     // call speed or stop controller
     if (is_zero(target_speed)) {
         bool stopped;
-        throttle_out = 100.0f * attitude_control.get_throttle_out_stop(g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f, stopped);
+        throttle_out = 100.0f * attitude_control.get_throttle_out_stop(g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f, rover.G_Dt, stopped);
     } else {
-        throttle_out = 100.0f * attitude_control.get_throttle_out_speed(target_speed, g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f);
+        throttle_out = 100.0f * attitude_control.get_throttle_out_speed(target_speed, g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f, rover.G_Dt);
     }
 
     // send to motor
@@ -234,7 +237,7 @@ bool Mode::stop_vehicle()
 {
     // call throttle controller and convert output to -100 to +100 range
     bool stopped = false;
-    float throttle_out = 100.0f * attitude_control.get_throttle_out_stop(g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f, stopped);
+    float throttle_out = 100.0f * attitude_control.get_throttle_out_stop(g2.motors.limit.throttle_lower, g2.motors.limit.throttle_upper, g.speed_cruise, g.throttle_cruise * 0.01f, rover.G_Dt, stopped);
 
     // send to motor
     g2.motors.set_throttle(throttle_out);
@@ -387,7 +390,8 @@ void Mode::calc_steering_from_lateral_acceleration(float lat_accel, bool reverse
     // send final steering command to motor library
     const float steering_out = attitude_control.get_steering_out_lat_accel(lat_accel,
                                                                            g2.motors.limit.steer_left,
-                                                                           g2.motors.limit.steer_right);
+                                                                           g2.motors.limit.steer_right,
+                                                                           rover.G_Dt);
     g2.motors.set_steering(steering_out * 4500.0f);
 }
 
@@ -398,7 +402,8 @@ void Mode::calc_steering_to_heading(float desired_heading_cd, float rate_max, bo
     const float steering_out = attitude_control.get_steering_out_heading(radians(desired_heading_cd*0.01f),
                                                                          rate_max,
                                                                          g2.motors.limit.steer_left,
-                                                                         g2.motors.limit.steer_right);
+                                                                         g2.motors.limit.steer_right,
+                                                                         rover.G_Dt);
     g2.motors.set_steering(steering_out * 4500.0f);
 }
 
diff --git a/APMrover2/mode_acro.cpp b/APMrover2/mode_acro.cpp
index 6f9cd161259f..8f8bebb81d50 100644
--- a/APMrover2/mode_acro.cpp
+++ b/APMrover2/mode_acro.cpp
@@ -26,10 +26,10 @@ void ModeAcro::update()
     const float target_turn_rate = (desired_steering / 4500.0f) * radians(g2.acro_turn_rate);
 
     // run steering turn rate controller and throttle controller
-    const float steering_out = attitude_control.get_steering_out_rate(
-                                                                    target_turn_rate,
-                                                                    g2.motors.limit.steer_left,
-                                                                    g2.motors.limit.steer_right);
+    const float steering_out = attitude_control.get_steering_out_rate(target_turn_rate,
+                                                                      g2.motors.limit.steer_left,
+                                                                      g2.motors.limit.steer_right,
+                                                                      rover.G_Dt);
 
     g2.motors.set_steering(steering_out * 4500.0f);
 }
diff --git a/APMrover2/mode_guided.cpp b/APMrover2/mode_guided.cpp
index df82e69b55da..a73e43212c09 100644
--- a/APMrover2/mode_guided.cpp
+++ b/APMrover2/mode_guided.cpp
@@ -67,7 +67,8 @@ void ModeGuided::update()
                 // run steering and throttle controllers
                 float steering_out = attitude_control.get_steering_out_rate(radians(_desired_yaw_rate_cds / 100.0f),
                                                                             g2.motors.limit.steer_left,
-                                                                            g2.motors.limit.steer_right);
+                                                                            g2.motors.limit.steer_right,
+                                                                            rover.G_Dt);
                 g2.motors.set_steering(steering_out * 4500.0f);
                 calc_throttle(_desired_speed, true, true);
             } else {
diff --git a/APMrover2/mode_loiter.cpp b/APMrover2/mode_loiter.cpp
index ccb42f0838ea..fa10da369187 100644
--- a/APMrover2/mode_loiter.cpp
+++ b/APMrover2/mode_loiter.cpp
@@ -28,11 +28,7 @@ void ModeLoiter::update()
 
     // if within waypoint radius slew desired speed towards zero and use existing desired heading
     if (_distance_to_destination <= g.waypoint_radius) {
-        if (is_negative(_desired_speed)) {
-            _desired_speed = MIN(_desired_speed + attitude_control.get_decel_max() * rover.G_Dt, 0.0f);
-        } else {
-            _desired_speed = MAX(_desired_speed - attitude_control.get_decel_max() * rover.G_Dt, 0.0f);
-        }
+        _desired_speed = attitude_control.get_desired_speed_accel_limited(0.0f, rover.G_Dt);
         _yaw_error_cd = 0.0f;
     } else {
         // P controller with hard-coded gain to convert distance to desired speed
diff --git a/APMrover2/mode_steering.cpp b/APMrover2/mode_steering.cpp
index 5c40af6c4113..1b6c7b6016e1 100644
--- a/APMrover2/mode_steering.cpp
+++ b/APMrover2/mode_steering.cpp
@@ -26,7 +26,8 @@ void ModeSteering::update()
         // run steering turn rate controller and throttle controller
         const float steering_out = attitude_control.get_steering_out_rate(target_turn_rate,
                                                                           g2.motors.limit.steer_left,
-                                                                          g2.motors.limit.steer_right);
+                                                                          g2.motors.limit.steer_right,
+                                                                          rover.G_Dt);
         g2.motors.set_steering(steering_out * 4500.0f);
     } else {
         // In steering mode we control lateral acceleration directly.
diff --git a/libraries/APM_Control/AR_AttitudeControl.cpp b/libraries/APM_Control/AR_AttitudeControl.cpp
index f3f9974d0666..60312bc19cbc 100644
--- a/libraries/APM_Control/AR_AttitudeControl.cpp
+++ b/libraries/APM_Control/AR_AttitudeControl.cpp
@@ -182,7 +182,7 @@ AR_AttitudeControl::AR_AttitudeControl(AP_AHRS &ahrs) :
 
 // return a steering servo output from -1.0 to +1.0 given a desired lateral acceleration rate in m/s/s.
 // positive lateral acceleration is to the right.
-float AR_AttitudeControl::get_steering_out_lat_accel(float desired_accel, bool motor_limit_left, bool motor_limit_right)
+float AR_AttitudeControl::get_steering_out_lat_accel(float desired_accel, bool motor_limit_left, bool motor_limit_right, float dt)
 {
     // record desired accel for reporting purposes
     _steer_lat_accel_last_ms = AP_HAL::millis();
@@ -208,11 +208,11 @@ float AR_AttitudeControl::get_steering_out_lat_accel(float desired_accel, bool m
     // Calculate the desired steering rate given desired_accel and speed
     const float desired_rate = desired_accel / speed;
 
-    return get_steering_out_rate(desired_rate, motor_limit_left, motor_limit_right);
+    return get_steering_out_rate(desired_rate, motor_limit_left, motor_limit_right, dt);
 }
 
 // return a steering servo output from -1 to +1 given a heading in radians
-float AR_AttitudeControl::get_steering_out_heading(float heading_rad, float rate_max, bool motor_limit_left, bool motor_limit_right)
+float AR_AttitudeControl::get_steering_out_heading(float heading_rad, float rate_max, bool motor_limit_left, bool motor_limit_right, float dt)
 {
     // calculate heading error (in radians)
     const float yaw_error = wrap_PI(heading_rad - _ahrs.yaw);
@@ -224,29 +224,27 @@ float AR_AttitudeControl::get_steering_out_heading(float heading_rad, float rate
         desired_rate = constrain_float(desired_rate, -rate_max, rate_max);
     }
 
-    return get_steering_out_rate(desired_rate, motor_limit_left, motor_limit_right);
+    return get_steering_out_rate(desired_rate, motor_limit_left, motor_limit_right, dt);
 }
 
 // return a steering servo output from -1 to +1 given a
 // desired yaw rate in radians/sec. Positive yaw is to the right.
-float AR_AttitudeControl::get_steering_out_rate(float desired_rate, bool motor_limit_left, bool motor_limit_right)
+float AR_AttitudeControl::get_steering_out_rate(float desired_rate, bool motor_limit_left, bool motor_limit_right, float dt)
 {
-    // calculate dt
+    // sanity check dt
+    dt = constrain_float(dt, 0.0f, 1.0f);
+
+    // if not called recently, reset input filter and desired turn rate to actual turn rate (used for accel limiting)
     const uint32_t now = AP_HAL::millis();
-    float dt = (now - _steer_turn_last_ms) / 1000.0f;
-    if ((_steer_turn_last_ms == 0) || (dt > (AR_ATTCONTROL_TIMEOUT_MS / 1000.0f))) {
-        dt = 0.0f;
+    if ((_steer_turn_last_ms == 0) || ((now - _steer_turn_last_ms) > AR_ATTCONTROL_TIMEOUT_MS)) {
         _steer_rate_pid.reset_filter();
-        // reset desired turn rate to actual turn rate for accel limiting
         _desired_turn_rate = _ahrs.get_yaw_rate_earth();
-    } else {
-        _steer_rate_pid.set_dt(dt);
     }
     _steer_turn_last_ms = now;
 
     // acceleration limit desired turn rate
-    const float change_max = radians(_steer_accel_max) * dt;
-    if (is_positive(dt) && is_positive(change_max)) {
+    if (is_positive(_steer_accel_max)) {
+        const float change_max = radians(_steer_accel_max) * dt;
         desired_rate = constrain_float(desired_rate, _desired_turn_rate - change_max, _desired_turn_rate + change_max);
     }
     _desired_turn_rate = desired_rate;
@@ -261,6 +259,9 @@ float AR_AttitudeControl::get_steering_out_rate(float desired_rate, bool motor_l
     // We do this in earth frame to allow for rover leaning over in hard corners
     const float rate_error = (_desired_turn_rate - _ahrs.get_yaw_rate_earth());
 
+    // set PID's dt
+    _steer_rate_pid.set_dt(dt);
+
     // record desired rate for logging purposes only
     _steer_rate_pid.set_desired_rate(_desired_turn_rate);
 
@@ -320,8 +321,11 @@ bool AR_AttitudeControl::get_lat_accel(float &lat_accel) const
 // return a throttle output from -1 to +1 given a desired speed in m/s (use negative speeds to travel backwards)
 //   motor_limit should be true if motors have hit their upper or lower limits
 //   cruise speed should be in m/s, cruise throttle should be a number from -1 to +1
-float AR_AttitudeControl::get_throttle_out_speed(float desired_speed, bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle)
+float AR_AttitudeControl::get_throttle_out_speed(float desired_speed, bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, float dt)
 {
+    // sanity check dt
+    dt = constrain_float(dt, 0.0f, 1.0f);
+
     // get speed forward
     float speed;
     if (!get_forward_speed(speed)) {
@@ -330,19 +334,19 @@ float AR_AttitudeControl::get_throttle_out_speed(float desired_speed, bool motor
         return 0.0f;
     }
 
-    // calculate dt
+    // if not called recently, reset input filter and desired speed to actual speed (used for accel limiting)
     const uint32_t now = AP_HAL::millis();
-    float dt = (now - _speed_last_ms) / 1000.0f;
-    if ((_speed_last_ms == 0) || (dt > (AR_ATTCONTROL_TIMEOUT_MS / 1000.0f))) {
-        dt = 0.0f;
+    if ((_speed_last_ms == 0) || ((now - _speed_last_ms) > AR_ATTCONTROL_TIMEOUT_MS)) {
         _throttle_speed_pid.reset_filter();
-    } else {
-        _throttle_speed_pid.set_dt(dt);
+        _desired_speed = speed;
     }
     _speed_last_ms = now;
 
-    // record desired speed for next iteration
-    _desired_speed = desired_speed;
+    // acceleration limit desired speed
+    _desired_speed = get_desired_speed_accel_limited(desired_speed, dt);
+
+    // set PID's dt
+    _throttle_speed_pid.set_dt(dt);
 
     // calculate speed error and pass to PID controller
     const float speed_error = desired_speed - speed;
@@ -397,7 +401,7 @@ float AR_AttitudeControl::get_throttle_out_speed(float desired_speed, bool motor
 }
 
 // return a throttle output from -1 to +1 to perform a controlled stop.  returns true once the vehicle has stopped
-float AR_AttitudeControl::get_throttle_out_stop(bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, bool &stopped)
+float AR_AttitudeControl::get_throttle_out_stop(bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, float dt, bool &stopped)
 {
     // get current system time
     const uint32_t now = AP_HAL::millis();
@@ -405,6 +409,9 @@ float AR_AttitudeControl::get_throttle_out_stop(bool motor_limit_low, bool motor
     // if we were stopped in the last 300ms, assume we are still stopped
     bool _stopped = (_stop_last_ms != 0) && (now - _stop_last_ms) < 300;
 
+    // get deceleration limited speed
+    float desired_speed_limited = get_desired_speed_accel_limited(0.0f, dt);
+
     // get speed forward
     float speed;
     if (!get_forward_speed(speed)) {
@@ -412,7 +419,7 @@ float AR_AttitudeControl::get_throttle_out_stop(bool motor_limit_low, bool motor
         _stopped = true;
     } else {
         // if desired speed is zero and vehicle drops below _stop_speed consider it stopped
-        if (is_zero(_desired_speed) && fabsf(speed) <= fabsf(_stop_speed)) {
+        if (is_zero(desired_speed_limited) && fabsf(speed) <= fabsf(_stop_speed)) {
             _stopped = true;
         }
     }
@@ -429,7 +436,7 @@ float AR_AttitudeControl::get_throttle_out_stop(bool motor_limit_low, bool motor
         // clear stopped system time
         _stop_last_ms = 0;
         // run speed controller to bring vehicle to stop
-        return get_throttle_out_speed(0.0f, motor_limit_low, motor_limit_high, cruise_speed, cruise_throttle);
+        return get_throttle_out_speed(desired_speed_limited, motor_limit_low, motor_limit_high, cruise_speed, cruise_throttle, dt);
     }
 }
 
@@ -475,18 +482,17 @@ float AR_AttitudeControl::get_desired_speed() const
 }
 
 // get acceleration limited desired speed
-float AR_AttitudeControl::get_desired_speed_accel_limited(float desired_speed) const
+float AR_AttitudeControl::get_desired_speed_accel_limited(float desired_speed, float dt) const
 {
-    // calculate dt
-    const uint32_t now = AP_HAL::millis();
-    float dt = (now - _speed_last_ms) / 1000.0f;
+    // sanity check dt
+    dt = constrain_float(dt, 0.0f, 1.0f);
 
     // use previous desired speed as basis for accel limiting
     float speed_prev = _desired_speed;
 
     // if no recent calls to speed controller limit based on current speed
-    if (is_negative(dt) || (dt > AR_ATTCONTROL_TIMEOUT_MS / 1000.0f)) {
-        dt = 0.0f;
+    const uint32_t now = AP_HAL::millis();
+    if ((_speed_last_ms == 0) || ((now - _speed_last_ms) > AR_ATTCONTROL_TIMEOUT_MS)) {
         get_forward_speed(speed_prev);
     }
 
diff --git a/libraries/APM_Control/AR_AttitudeControl.h b/libraries/APM_Control/AR_AttitudeControl.h
index d07301d229be..af03ad1405f4 100644
--- a/libraries/APM_Control/AR_AttitudeControl.h
+++ b/libraries/APM_Control/AR_AttitudeControl.h
@@ -24,7 +24,7 @@
 #define AR_ATTCONTROL_TIMEOUT_MS        200
 
 // throttle/speed control maximum acceleration/deceleration (in m/s) (_ACCEL_MAX parameter default)
-#define AR_ATTCONTROL_THR_ACCEL_MAX     5.00f
+#define AR_ATTCONTROL_THR_ACCEL_MAX     2.00f
 
 // minimum speed in m/s
 #define AR_ATTCONTROL_STEER_SPEED_MIN   1.0f
@@ -44,15 +44,15 @@ class AR_AttitudeControl {
     //
 
     // return a steering servo output from -1.0 to +1.0 given a desired lateral acceleration rate in m/s/s.
-    // positive lateral acceleration is to the right.
-    float get_steering_out_lat_accel(float desired_accel, bool motor_limit_left, bool motor_limit_right);
+    // positive lateral acceleration is to the right.  dt should normally be the main loop rate.
+    float get_steering_out_lat_accel(float desired_accel, bool motor_limit_left, bool motor_limit_right, float dt);
 
     // return a steering servo output from -1 to +1 given a heading in radians
-    float get_steering_out_heading(float heading_rad, float rate_max, bool motor_limit_left, bool motor_limit_right);
+    float get_steering_out_heading(float heading_rad, float rate_max, bool motor_limit_left, bool motor_limit_right, float dt);
 
     // return a steering servo output from -1 to +1 given a
     // desired yaw rate in radians/sec. Positive yaw is to the right.
-    float get_steering_out_rate(float desired_rate, bool motor_limit_left, bool motor_limit_right);
+    float get_steering_out_rate(float desired_rate, bool motor_limit_left, bool motor_limit_right, float dt);
 
     // get latest desired turn rate in rad/sec recorded during calls to get_steering_out_rate.  For reporting purposes only
     float get_desired_turn_rate() const;
@@ -76,10 +76,10 @@ class AR_AttitudeControl {
     //   desired_speed argument should already have been passed through get_desired_speed_accel_limited function
     //   motor_limit should be true if motors have hit their upper or lower limits
     //   cruise speed should be in m/s, cruise throttle should be a number from -1 to +1
-    float get_throttle_out_speed(float desired_speed, bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle);
+    float get_throttle_out_speed(float desired_speed, bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, float dt);
 
     // return a throttle output from -1 to +1 to perform a controlled stop.  stopped is set to true once stop has been completed
-    float get_throttle_out_stop(bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, bool &stopped);
+    float get_throttle_out_stop(bool motor_limit_low, bool motor_limit_high, float cruise_speed, float cruise_throttle, float dt, bool &stopped);
 
     // low level control accessors for reporting and logging
     AC_P& get_steering_angle_p() { return _steer_angle_p; }
@@ -99,7 +99,7 @@ class AR_AttitudeControl {
     float get_desired_speed() const;
 
     // get acceleration limited desired speed
-    float get_desired_speed_accel_limited(float desired_speed) const;
+    float get_desired_speed_accel_limited(float desired_speed, float dt) const;
 
     // get minimum stopping distance (in meters) given a speed (in m/s)
     float get_stopping_distance(float speed);
