diff --git a/ArduCopter/ArduCopter.pde b/ArduCopter/ArduCopter.pde
index 626b50f5075c..c18ab7aabb8b 100644
--- a/ArduCopter/ArduCopter.pde
+++ b/ArduCopter/ArduCopter.pde
@@ -647,7 +647,7 @@ static AP_Mount camera_mount(ahrs, current_loc);
 // AC_Fence library to reduce fly-aways
 ////////////////////////////////////////////////////////////////////////////////
 #if AC_FENCE == ENABLED
-AC_Fence    fence(&inertial_nav);
+AC_Fence    fence(inertial_nav);
 #endif
 
 ////////////////////////////////////////////////////////////////////////////////
diff --git a/ArduCopter/Attitude.pde b/ArduCopter/Attitude.pde
index 5eecc8c206aa..ffa83cf0958f 100644
--- a/ArduCopter/Attitude.pde
+++ b/ArduCopter/Attitude.pde
@@ -225,9 +225,9 @@ static int16_t get_throttle_pre_takeoff(int16_t throttle_control)
     return throttle_out;
 }
 
-// get_throttle_surface_tracking - hold copter at the desired distance above the ground
+// get_surface_tracking_climb_rate - hold copter at the desired distance above the ground
 //      returns climb rate (in cm/s) which should be passed to the position controller
-static float get_throttle_surface_tracking(int16_t target_rate, float current_alt_target, float dt)
+static float get_surface_tracking_climb_rate(int16_t target_rate, float current_alt_target, float dt)
 {
     static uint32_t last_call_ms = 0;
     float distance_error;
diff --git a/ArduCopter/GCS_Mavlink.pde b/ArduCopter/GCS_Mavlink.pde
index 7ab35833fff3..2cfb4007f577 100644
--- a/ArduCopter/GCS_Mavlink.pde
+++ b/ArduCopter/GCS_Mavlink.pde
@@ -1360,11 +1360,15 @@ void GCS_MAVLINK::handleMessage(mavlink_message_t* msg)
          */
 
         if (!pos_ignore && !vel_ignore && acc_ignore) {
-            guided_set_destination_posvel(Vector3f(packet.x * 100.0f, packet.y * 100.0f, -packet.z * 100.0f), Vector3f(packet.vx * 100.0f, packet.vy * 100.0f, -packet.vz * 100.0f));
+            Vector3f pos_ned = Vector3f(packet.x * 100.0f, packet.y * 100.0f, -packet.z * 100.0f);
+            pos_ned.z = pv_alt_above_origin(pos_ned.z);
+            guided_set_destination_posvel(pos_ned, Vector3f(packet.vx * 100.0f, packet.vy * 100.0f, -packet.vz * 100.0f));
         } else if (pos_ignore && !vel_ignore && acc_ignore) {
             guided_set_velocity(Vector3f(packet.vx * 100.0f, packet.vy * 100.0f, -packet.vz * 100.0f));
         } else if (!pos_ignore && vel_ignore && acc_ignore) {
-            guided_set_destination(Vector3f(packet.x * 100.0f, packet.y * 100.0f, -packet.z * 100.0f));
+            Vector3f pos_ned = Vector3f(packet.x * 100.0f, packet.y * 100.0f, -packet.z * 100.0f);
+            pos_ned.z = pv_alt_above_origin(pos_ned.z);
+            guided_set_destination(pos_ned);
         } else {
             result = MAV_RESULT_FAILED;
         }
diff --git a/ArduCopter/control_althold.pde b/ArduCopter/control_althold.pde
index 7b6029bc74a1..88d822343e16 100644
--- a/ArduCopter/control_althold.pde
+++ b/ArduCopter/control_althold.pde
@@ -70,7 +70,7 @@ static void althold_run()
         // call throttle controller
         if (sonar_alt_health >= SONAR_ALT_HEALTH_MAX) {
             // if sonar is ok, use surface tracking
-            target_climb_rate = get_throttle_surface_tracking(target_climb_rate, pos_control.get_alt_target(), G_Dt);
+            target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control.get_alt_target(), G_Dt);
         }
 
         // call position controller
diff --git a/ArduCopter/control_circle.pde b/ArduCopter/control_circle.pde
index 7e7d13e41890..6b34e37e535d 100644
--- a/ArduCopter/control_circle.pde
+++ b/ArduCopter/control_circle.pde
@@ -75,7 +75,7 @@ static void circle_run()
     // run altitude controller
     if (sonar_alt_health >= SONAR_ALT_HEALTH_MAX) {
         // if sonar is ok, use surface tracking
-        target_climb_rate = get_throttle_surface_tracking(target_climb_rate, pos_control.get_alt_target(), G_Dt);
+        target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control.get_alt_target(), G_Dt);
     }
     // update altitude target and call position controller
     pos_control.set_alt_target_from_climb_rate(target_climb_rate, G_Dt);
diff --git a/ArduCopter/control_guided.pde b/ArduCopter/control_guided.pde
index be9e811c8a24..7f49047bf911 100644
--- a/ArduCopter/control_guided.pde
+++ b/ArduCopter/control_guided.pde
@@ -39,13 +39,13 @@ static bool guided_init(bool ignore_checks)
 
 
 // guided_takeoff_start - initialises waypoint controller to implement take-off
-static void guided_takeoff_start(float final_alt)
+static void guided_takeoff_start(float final_alt_above_home)
 {
     guided_mode = Guided_TakeOff;
     
     // initialise wpnav destination
     Vector3f target_pos = inertial_nav.get_position();
-    target_pos.z = final_alt;
+    target_pos.z = pv_alt_above_origin(final_alt_above_home);
     wp_nav.set_wp_destination(target_pos);
 
     // initialise yaw
diff --git a/ArduCopter/control_loiter.pde b/ArduCopter/control_loiter.pde
index c62427873364..1a5a66cb4e36 100644
--- a/ArduCopter/control_loiter.pde
+++ b/ArduCopter/control_loiter.pde
@@ -93,7 +93,7 @@ static void loiter_run()
         // run altitude controller
         if (sonar_alt_health >= SONAR_ALT_HEALTH_MAX) {
             // if sonar is ok, use surface tracking
-            target_climb_rate = get_throttle_surface_tracking(target_climb_rate, pos_control.get_alt_target(), G_Dt);
+            target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control.get_alt_target(), G_Dt);
         }
 
         // update altitude target and call position controller
diff --git a/ArduCopter/control_poshold.pde b/ArduCopter/control_poshold.pde
index 365990671010..14da97a6153c 100644
--- a/ArduCopter/control_poshold.pde
+++ b/ArduCopter/control_poshold.pde
@@ -521,7 +521,7 @@ static void poshold_run()
         // throttle control
         if (sonar_alt_health >= SONAR_ALT_HEALTH_MAX) {
             // if sonar is ok, use surface tracking
-            target_climb_rate = get_throttle_surface_tracking(target_climb_rate, pos_control.get_alt_target(), G_Dt);
+            target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control.get_alt_target(), G_Dt);
         }
         // update altitude target and call position controller
         pos_control.set_alt_target_from_climb_rate(target_climb_rate, G_Dt);
diff --git a/ArduCopter/control_rtl.pde b/ArduCopter/control_rtl.pde
index 43c27b2067af..708840edfac1 100644
--- a/ArduCopter/control_rtl.pde
+++ b/ArduCopter/control_rtl.pde
@@ -300,7 +300,7 @@ static void rtl_descent_run()
     attitude_control.angle_ef_roll_pitch_rate_ef_yaw(wp_nav.get_roll(), wp_nav.get_pitch(), target_yaw_rate);
 
     // check if we've reached within 20cm of final altitude
-    rtl_state_complete = fabs(g.rtl_alt_final - inertial_nav.get_altitude()) < 20.0f;
+    rtl_state_complete = fabs(pv_alt_above_origin(g.rtl_alt_final) - inertial_nav.get_altitude()) < 20.0f;
 }
 
 // rtl_loiterathome_start - initialise controllers to loiter over home
@@ -401,7 +401,7 @@ static float get_RTL_alt()
 #if AC_FENCE == ENABLED
     // ensure not above fence altitude if alt fence is enabled
     if ((fence.get_enabled_fences() & AC_FENCE_TYPE_ALT_MAX) != 0) {
-        rtl_alt = min(rtl_alt, fence.get_safe_alt()*100.0f);
+        rtl_alt = min(rtl_alt, pv_alt_above_origin(fence.get_safe_alt()*100.0f));
     }
 #endif
 
diff --git a/ArduCopter/control_sport.pde b/ArduCopter/control_sport.pde
index 762632084884..7f1c976ffcbe 100644
--- a/ArduCopter/control_sport.pde
+++ b/ArduCopter/control_sport.pde
@@ -90,7 +90,7 @@ static void sport_run()
         // call throttle controller
         if (sonar_alt_health >= SONAR_ALT_HEALTH_MAX) {
             // if sonar is ok, use surface tracking
-            target_climb_rate = get_throttle_surface_tracking(target_climb_rate, pos_control.get_alt_target(), G_Dt);
+            target_climb_rate = get_surface_tracking_climb_rate(target_climb_rate, pos_control.get_alt_target(), G_Dt);
         }
 
         // call position controller
diff --git a/ArduCopter/fence.pde b/ArduCopter/fence.pde
index c35933017207..7acd6881d09c 100644
--- a/ArduCopter/fence.pde
+++ b/ArduCopter/fence.pde
@@ -20,7 +20,7 @@ void fence_check()
     fence.set_home_distance(home_distance*0.01f);
 
     // check for a breach
-    new_breaches = fence.check_fence();
+    new_breaches = fence.check_fence(pv_alt_above_home(inertial_nav.get_altitude()));
 
     // if there is a new breach take action
     if( new_breaches != AC_FENCE_TYPE_NONE ) {
diff --git a/ArduCopter/position_vector.pde b/ArduCopter/position_vector.pde
index b4ae9dd25e96..f03b88e9c628 100644
--- a/ArduCopter/position_vector.pde
+++ b/ArduCopter/position_vector.pde
@@ -11,9 +11,8 @@
 Vector3f pv_location_to_vector(const Location& loc)
 {
     const struct Location &origin = inertial_nav.get_origin();
-    float alt_above_origin = loc.alt + (ahrs.get_home().alt - origin.alt);  // convert alt-relative-to-home to alt-relative-to-origin
-    Vector3f tmp((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);
-    return tmp;
+    float alt_above_origin = pv_alt_above_origin(loc.alt);  // convert alt-relative-to-home to alt-relative-to-origin
+    return Vector3f((loc.lat-origin.lat) * LATLON_TO_CM, (loc.lng-origin.lng) * LATLON_TO_CM * scaleLongDown, alt_above_origin);
 }
 
 // pv_location_to_vector_with_default - convert lat/lon coordinates to a position vector,
diff --git a/libraries/AC_Fence/AC_Fence.cpp b/libraries/AC_Fence/AC_Fence.cpp
index 757244fe7bc4..b63f72199bc5 100644
--- a/libraries/AC_Fence/AC_Fence.cpp
+++ b/libraries/AC_Fence/AC_Fence.cpp
@@ -55,7 +55,7 @@ const AP_Param::GroupInfo AC_Fence::var_info[] PROGMEM = {
 };
 
 /// Default constructor.
-AC_Fence::AC_Fence(const AP_InertialNav* inav) :
+AC_Fence::AC_Fence(const AP_InertialNav& inav) :
     _inav(inav),
     _alt_max_backup(0),
     _circle_radius_backup(0),
@@ -102,7 +102,7 @@ bool AC_Fence::pre_arm_check() const
     }
 
     // if we have horizontal limits enabled, check inertial nav position is ok
-    if ((_enabled_fences & AC_FENCE_TYPE_CIRCLE)!=0 && !_inav->get_filter_status().flags.horiz_pos_abs && !_inav->get_filter_status().flags.pred_horiz_pos_abs) {
+    if ((_enabled_fences & AC_FENCE_TYPE_CIRCLE)!=0 && !_inav.get_filter_status().flags.horiz_pos_abs && !_inav.get_filter_status().flags.pred_horiz_pos_abs) {
         return false;
     }
 
@@ -111,7 +111,7 @@ bool AC_Fence::pre_arm_check() const
 }
 
 /// check_fence - returns the fence type that has been breached (if any)
-uint8_t AC_Fence::check_fence()
+uint8_t AC_Fence::check_fence(float curr_alt)
 {
     uint8_t ret = AC_FENCE_TYPE_NONE;
 
@@ -131,9 +131,6 @@ uint8_t AC_Fence::check_fence()
         }
     }
 
-    // get current altitude in meters
-    float curr_alt = _inav->get_altitude() * 0.01f;
-
     // altitude fence check
     if ((_enabled_fences & AC_FENCE_TYPE_ALT_MAX) != 0) {
 
diff --git a/libraries/AC_Fence/AC_Fence.h b/libraries/AC_Fence/AC_Fence.h
index f014fdd58f8c..41107ab3f1cb 100644
--- a/libraries/AC_Fence/AC_Fence.h
+++ b/libraries/AC_Fence/AC_Fence.h
@@ -33,7 +33,7 @@ class AC_Fence
 public:
 
     /// Constructor
-    AC_Fence(const AP_InertialNav* inav);
+    AC_Fence(const AP_InertialNav& inav);
 
     /// enable - allows fence to be enabled/disabled.  Note: this does not update the eeprom saved value
     void enable(bool true_false) { _enabled = true_false; }
@@ -52,7 +52,7 @@ class AC_Fence
     ///
 
     /// check_fence - returns the fence type that has been breached (if any)
-    uint8_t check_fence();
+    uint8_t check_fence(float curr_alt);
 
     /// get_breaches - returns bit mask of the fence types that have been breached
     uint8_t get_breaches() const { return _breached_fences; }
@@ -95,7 +95,7 @@ class AC_Fence
     void clear_breach(uint8_t fence_type);
 
     // pointers to other objects we depend upon
-    const AP_InertialNav *const _inav;
+    const AP_InertialNav& _inav;
 
     // parameters
     AP_Int8         _enabled;               // top level enable/disable control
