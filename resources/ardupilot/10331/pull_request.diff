diff --git a/ArduCopter/GCS_Mavlink.cpp b/ArduCopter/GCS_Mavlink.cpp
index e3f58d42706a..cd6a1625830d 100644
--- a/ArduCopter/GCS_Mavlink.cpp
+++ b/ArduCopter/GCS_Mavlink.cpp
@@ -744,9 +744,9 @@ MAV_RESULT GCS_MAVLINK_Copter::handle_command_long_packet(const mavlink_command_
         // param4 : unused
         if (packet.param2 > 0.0f) {
             if (packet.param1 > 2.9f) { // 3 = speed down
-                copter.wp_nav->set_speed_z(packet.param2 * 100.0f, copter.wp_nav->get_speed_up());
+                copter.wp_nav->set_speed_down(packet.param2 * 100.0f);
             } else if (packet.param1 > 1.9f) { // 2 = speed up
-                copter.wp_nav->set_speed_z(copter.wp_nav->get_speed_down(), packet.param2 * 100.0f);
+                copter.wp_nav->set_speed_up(packet.param2 * 100.0f);
             } else {
                 copter.wp_nav->set_speed_xy(packet.param2 * 100.0f);
             }
@@ -1097,10 +1097,10 @@ void GCS_MAVLINK_Copter::handleMessage(mavlink_message_t* msg)
             climb_rate_cms = 0.0f;
         } else if (packet.thrust > 0.5f) {
             // climb at up to WPNAV_SPEED_UP
-            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * copter.wp_nav->get_speed_up();
+            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * copter.wp_nav->get_default_speed_up();
         } else {
             // descend at up to WPNAV_SPEED_DN
-            climb_rate_cms = (0.5f - packet.thrust) * 2.0f * -fabsf(copter.wp_nav->get_speed_down());
+            climb_rate_cms = (0.5f - packet.thrust) * 2.0f * -fabsf(copter.wp_nav->get_default_speed_down());
         }
 
         // if the body_yaw_rate field is ignored, use the commanded yaw position
diff --git a/ArduCopter/avoidance_adsb.cpp b/ArduCopter/avoidance_adsb.cpp
index b623e684806a..f5f3f176c5cf 100644
--- a/ArduCopter/avoidance_adsb.cpp
+++ b/ArduCopter/avoidance_adsb.cpp
@@ -175,9 +175,9 @@ bool AP_Avoidance_Copter::handle_avoidance_vertical(const AP_Avoidance::Obstacle
     // get best vector away from obstacle
     Vector3f velocity_neu;
     if (should_climb) {
-        velocity_neu.z = copter.wp_nav->get_speed_up();
+        velocity_neu.z = copter.wp_nav->get_default_speed_up();
     } else {
-        velocity_neu.z = -copter.wp_nav->get_speed_down();
+        velocity_neu.z = -copter.wp_nav->get_default_speed_down();
         // do not descend if below RTL alt
         if (copter.current_loc.alt < copter.g.rtl_altitude) {
             velocity_neu.z = 0.0f;
@@ -208,8 +208,8 @@ bool AP_Avoidance_Copter::handle_avoidance_horizontal(const AP_Avoidance::Obstac
         // re-normalise
         velocity_neu.normalize();
         // convert horizontal components to velocities
-        velocity_neu.x *= copter.wp_nav->get_speed_xy();
-        velocity_neu.y *= copter.wp_nav->get_speed_xy();
+        velocity_neu.x *= copter.wp_nav->get_default_speed_xy();
+        velocity_neu.y *= copter.wp_nav->get_default_speed_xy();
         // send target velocity
         copter.mode_avoid_adsb.set_velocity(velocity_neu);
         return true;
@@ -230,13 +230,13 @@ bool AP_Avoidance_Copter::handle_avoidance_perpendicular(const AP_Avoidance::Obs
     Vector3f velocity_neu;
     if (get_vector_perpendicular(obstacle, velocity_neu)) {
         // convert horizontal components to velocities
-        velocity_neu.x *= copter.wp_nav->get_speed_xy();
-        velocity_neu.y *= copter.wp_nav->get_speed_xy();
+        velocity_neu.x *= copter.wp_nav->get_default_speed_xy();
+        velocity_neu.y *= copter.wp_nav->get_default_speed_xy();
         // use up and down waypoint speeds
         if (velocity_neu.z > 0.0f) {
-            velocity_neu.z *= copter.wp_nav->get_speed_up();
+            velocity_neu.z *= copter.wp_nav->get_default_speed_up();
         } else {
-            velocity_neu.z *= copter.wp_nav->get_speed_down();
+            velocity_neu.z *= copter.wp_nav->get_default_speed_down();
             // do not descend if below RTL alt
             if (copter.current_loc.alt < copter.g.rtl_altitude) {
                 velocity_neu.z = 0.0f;
diff --git a/ArduCopter/mode_auto.cpp b/ArduCopter/mode_auto.cpp
index dc40ebe4123f..23746d8d97a6 100644
--- a/ArduCopter/mode_auto.cpp
+++ b/ArduCopter/mode_auto.cpp
@@ -1217,8 +1217,8 @@ void Copter::ModeAuto::do_loiter_to_alt(const AP_Mission::Mission_Command& cmd)
     loiter_to_alt.alt_error_cm = 0;
 
     pos_control->set_max_accel_z(wp_nav->get_accel_z());
-    pos_control->set_max_speed_z(wp_nav->get_speed_down(),
-                                 wp_nav->get_speed_up());
+    pos_control->set_max_speed_z(wp_nav->get_default_speed_down(),
+                                 wp_nav->get_default_speed_up());
 
     if (pos_control->is_active_z()) {
         pos_control->freeze_ff_z();
@@ -1355,9 +1355,9 @@ void Copter::ModeAuto::do_change_speed(const AP_Mission::Mission_Command& cmd)
 {
     if (cmd.content.speed.target_ms > 0) {
         if (cmd.content.speed.speed_type == 2)  {
-            copter.wp_nav->set_speed_z(copter.wp_nav->get_speed_down(), cmd.content.speed.target_ms * 100.0f);
+            copter.wp_nav->set_speed_up(cmd.content.speed.target_ms * 100.0f);
         } else if (cmd.content.speed.speed_type == 3)  {
-            copter.wp_nav->set_speed_z(cmd.content.speed.target_ms * 100.0f, copter.wp_nav->get_speed_up());
+            copter.wp_nav->set_speed_down(cmd.content.speed.target_ms * 100.0f);
         } else {
             copter.wp_nav->set_speed_xy(cmd.content.speed.target_ms * 100.0f);
         }
diff --git a/ArduCopter/mode_circle.cpp b/ArduCopter/mode_circle.cpp
index a2b0a7d5d376..e04668355925 100644
--- a/ArduCopter/mode_circle.cpp
+++ b/ArduCopter/mode_circle.cpp
@@ -13,7 +13,7 @@ bool Copter::ModeCircle::init(bool ignore_checks)
         pilot_yaw_override = false;
 
         // initialize speeds and accelerations
-        pos_control->set_max_speed_xy(wp_nav->get_speed_xy());
+        pos_control->set_max_speed_xy(wp_nav->get_default_speed_xy());
         pos_control->set_max_accel_xy(wp_nav->get_wp_acceleration());
         pos_control->set_max_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
         pos_control->set_max_accel_z(g.pilot_accel_z);
@@ -35,7 +35,7 @@ void Copter::ModeCircle::run()
     float target_climb_rate = 0;
 
     // initialize speeds and accelerations
-    pos_control->set_max_speed_xy(wp_nav->get_speed_xy());
+    pos_control->set_max_speed_xy(wp_nav->get_default_speed_xy());
     pos_control->set_max_accel_xy(wp_nav->get_wp_acceleration());
     pos_control->set_max_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
     pos_control->set_max_accel_z(g.pilot_accel_z);
diff --git a/ArduCopter/mode_guided.cpp b/ArduCopter/mode_guided.cpp
index 90286ceacaac..0a744b75bb98 100644
--- a/ArduCopter/mode_guided.cpp
+++ b/ArduCopter/mode_guided.cpp
@@ -103,7 +103,7 @@ void Copter::ModeGuided::vel_control_start()
     guided_mode = Guided_Velocity;
 
     // initialise horizontal speed, acceleration
-    pos_control->set_max_speed_xy(wp_nav->get_speed_xy());
+    pos_control->set_max_speed_xy(wp_nav->get_default_speed_xy());
     pos_control->set_max_accel_xy(wp_nav->get_wp_acceleration());
 
     // initialize vertical speeds and acceleration
@@ -123,7 +123,7 @@ void Copter::ModeGuided::posvel_control_start()
     pos_control->init_xy_controller();
 
     // set speed and acceleration from wpnav's speed and acceleration
-    pos_control->set_max_speed_xy(wp_nav->get_speed_xy());
+    pos_control->set_max_speed_xy(wp_nav->get_default_speed_xy());
     pos_control->set_max_accel_xy(wp_nav->get_wp_acceleration());
 
     const Vector3f& curr_pos = inertial_nav.get_position();
@@ -134,7 +134,7 @@ void Copter::ModeGuided::posvel_control_start()
     pos_control->set_desired_velocity_xy(curr_vel.x, curr_vel.y);
 
     // set vertical speed and acceleration
-    pos_control->set_max_speed_z(wp_nav->get_speed_down(), wp_nav->get_speed_up());
+    pos_control->set_max_speed_z(wp_nav->get_default_speed_down(), wp_nav->get_default_speed_up());
     pos_control->set_max_accel_z(wp_nav->get_accel_z());
 
     // pilot always controls yaw
@@ -148,7 +148,7 @@ void Copter::ModeGuided::angle_control_start()
     guided_mode = Guided_Angle;
 
     // set vertical speed and acceleration
-    pos_control->set_max_speed_z(wp_nav->get_speed_down(), wp_nav->get_speed_up());
+    pos_control->set_max_speed_z(wp_nav->get_default_speed_down(), wp_nav->get_default_speed_up());
     pos_control->set_max_accel_z(wp_nav->get_accel_z());
 
     // initialise position and desired velocity
@@ -610,7 +610,7 @@ void Copter::ModeGuided::angle_control_run()
     float yaw_rate_in = wrap_180_cd(guided_angle_state.yaw_rate_cds);
 
     // constrain climb rate
-    float climb_rate_cms = constrain_float(guided_angle_state.climb_rate_cms, -fabsf(wp_nav->get_speed_down()), wp_nav->get_speed_up());
+    float climb_rate_cms = constrain_float(guided_angle_state.climb_rate_cms, -fabsf(wp_nav->get_default_speed_down()), wp_nav->get_default_speed_up());
 
     // get avoidance adjusted climb rate
     climb_rate_cms = get_avoidance_adjusted_climbrate(climb_rate_cms);
diff --git a/ArduCopter/mode_land.cpp b/ArduCopter/mode_land.cpp
index 38f8e1d01aef..8340abf63ebd 100644
--- a/ArduCopter/mode_land.cpp
+++ b/ArduCopter/mode_land.cpp
@@ -19,7 +19,7 @@ bool Copter::ModeLand::init(bool ignore_checks)
     }
 
     // initialize vertical speeds and leash lengths
-    pos_control->set_max_speed_z(wp_nav->get_speed_down(), wp_nav->get_speed_up());
+    pos_control->set_max_speed_z(wp_nav->get_default_speed_down(), wp_nav->get_default_speed_up());
     pos_control->set_max_accel_z(wp_nav->get_accel_z());
 
     // initialise position and desired velocity
diff --git a/ArduCopter/takeoff.cpp b/ArduCopter/takeoff.cpp
index 25fa9eefbbab..29747ba00435 100644
--- a/ArduCopter/takeoff.cpp
+++ b/ArduCopter/takeoff.cpp
@@ -51,7 +51,7 @@ bool Copter::Mode::do_user_takeoff(float takeoff_alt_cm, bool must_navigate)
 void Copter::Mode::_TakeOff::start(float alt_cm)
 {
     // calculate climb rate
-    const float speed = MIN(copter.wp_nav->get_speed_up(), MAX(copter.g.pilot_speed_up*2.0f/3.0f, copter.g.pilot_speed_up-50.0f));
+    const float speed = MIN(copter.wp_nav->get_default_speed_up(), MAX(copter.g.pilot_speed_up*2.0f/3.0f, copter.g.pilot_speed_up-50.0f));
 
     // sanity check speed and target
     if (running() || speed <= 0.0f || alt_cm <= 0.0f) {
diff --git a/ArduPlane/quadplane.cpp b/ArduPlane/quadplane.cpp
index 18c747a1e097..f8072d798652 100644
--- a/ArduPlane/quadplane.cpp
+++ b/ArduPlane/quadplane.cpp
@@ -970,7 +970,7 @@ bool QuadPlane::is_flying_vtol(void) const
  */
 float QuadPlane::landing_descent_rate_cms(float height_above_ground) const
 {
-    float ret = linear_interpolate(land_speed_cms, wp_nav->get_speed_down(),
+    float ret = linear_interpolate(land_speed_cms, wp_nav->get_default_speed_down(),
                                    height_above_ground,
                                    land_final_alt, land_final_alt+6);
     return ret;
@@ -1146,7 +1146,7 @@ float QuadPlane::assist_climb_rate_cms(void) const
         climb_rate = plane.g.flybywire_climb_rate * (plane.nav_pitch_cd/(float)plane.aparm.pitch_limit_max_cd);
         climb_rate *= plane.get_throttle_input();
     }
-    climb_rate = constrain_float(climb_rate, -wp_nav->get_speed_down(), wp_nav->get_speed_up());
+    climb_rate = constrain_float(climb_rate, -wp_nav->get_default_speed_down(), wp_nav->get_default_speed_up());
 
     // bring in the demanded climb rate over 2 seconds
     const uint32_t ramp_up_time_ms = 2000;
@@ -1859,7 +1859,7 @@ void QuadPlane::vtol_position_controller(void)
             // approach
 
             // max_speed will control how fast we will fly. It will always decrease
-            poscontrol.max_speed = MAX(speed_towards_target, wp_nav->get_speed_xy() * 0.01);
+            poscontrol.max_speed = MAX(speed_towards_target, wp_nav->get_default_speed_xy() * 0.01);
             poscontrol.speed_scale = poscontrol.max_speed / MAX(distance, 1);
         }
 
@@ -2081,7 +2081,7 @@ void QuadPlane::takeoff_controller(void)
                                                                   plane.nav_pitch_cd,
                                                                   get_pilot_input_yaw_rate_cds() + get_weathervane_yaw_rate_cds());
 
-    pos_control->set_alt_target_from_climb_rate(wp_nav->get_speed_up(), plane.G_Dt, true);
+    pos_control->set_alt_target_from_climb_rate(wp_nav->get_default_speed_up(), plane.G_Dt, true);
     run_z_controller();
 }
 
@@ -2440,7 +2440,7 @@ int8_t QuadPlane::forward_throttle_pct(void)
     // add in a component from our current pitch demand. This tends to
     // move us to zero pitch. Assume that LIM_PITCH would give us the
     // WP nav speed.
-    fwd_vel_error -= (wp_nav->get_speed_xy() * 0.01f) * plane.nav_pitch_cd / (float)plane.aparm.pitch_limit_max_cd;
+    fwd_vel_error -= (wp_nav->get_default_speed_xy() * 0.01f) * plane.nav_pitch_cd / (float)plane.aparm.pitch_limit_max_cd;
 
     if (should_relax() && vel_ned.length() < 1) {
         // we may be landed
diff --git a/ArduSub/GCS_Mavlink.cpp b/ArduSub/GCS_Mavlink.cpp
index e40379a48c89..41d78dc122ff 100644
--- a/ArduSub/GCS_Mavlink.cpp
+++ b/ArduSub/GCS_Mavlink.cpp
@@ -911,10 +911,10 @@ void GCS_MAVLINK_Sub::handleMessage(mavlink_message_t* msg)
             climb_rate_cms = 0.0f;
         } else if (packet.thrust > 0.5f) {
             // climb at up to WPNAV_SPEED_UP
-            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * sub.wp_nav.get_speed_up();
+            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * sub.wp_nav.get_default_speed_up();
         } else {
             // descend at up to WPNAV_SPEED_DN
-            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * fabsf(sub.wp_nav.get_speed_down());
+            climb_rate_cms = (packet.thrust - 0.5f) * 2.0f * fabsf(sub.wp_nav.get_default_speed_down());
         }
         sub.guided_set_angle(Quaternion(packet.q[0],packet.q[1],packet.q[2],packet.q[3]), climb_rate_cms);
         break;
diff --git a/ArduSub/control_auto.cpp b/ArduSub/control_auto.cpp
index 11ab23f248f2..9269e87040c4 100644
--- a/ArduSub/control_auto.cpp
+++ b/ArduSub/control_auto.cpp
@@ -653,7 +653,7 @@ bool Sub::auto_terrain_recover_start()
     pos_control.relax_alt_hold_controllers(motors.get_throttle_hover());
 
     // initialize vertical speeds and leash lengths
-    pos_control.set_max_speed_z(wp_nav.get_speed_down(), wp_nav.get_speed_up());
+    pos_control.set_max_speed_z(wp_nav.get_default_speed_down(), wp_nav.get_default_speed_up());
     pos_control.set_max_accel_z(wp_nav.get_accel_z());
 
     // Reset vertical position and velocity targets
@@ -682,12 +682,12 @@ void Sub::auto_terrain_recover_run()
     switch (rangefinder.status_orient(ROTATION_PITCH_270)) {
 
     case RangeFinder::RangeFinder_OutOfRangeLow:
-        target_climb_rate = wp_nav.get_speed_up();
+        target_climb_rate = wp_nav.get_default_speed_up();
         rangefinder_recovery_ms = 0;
         break;
 
     case RangeFinder::RangeFinder_OutOfRangeHigh:
-        target_climb_rate = wp_nav.get_speed_down();
+        target_climb_rate = wp_nav.get_default_speed_down();
         rangefinder_recovery_ms = 0;
         break;
 
diff --git a/ArduSub/control_circle.cpp b/ArduSub/control_circle.cpp
index f009c9c4edb0..7650ad0f0520 100644
--- a/ArduSub/control_circle.cpp
+++ b/ArduSub/control_circle.cpp
@@ -14,7 +14,7 @@ bool Sub::circle_init()
     circle_pilot_yaw_override = false;
 
     // initialize speeds and accelerations
-    pos_control.set_max_speed_xy(wp_nav.get_speed_xy());
+    pos_control.set_max_speed_xy(wp_nav.get_default_speed_xy());
     pos_control.set_max_accel_xy(wp_nav.get_wp_acceleration());
     pos_control.set_max_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
     pos_control.set_max_accel_z(g.pilot_accel_z);
@@ -33,7 +33,7 @@ void Sub::circle_run()
     float target_climb_rate = 0;
 
     // update parameters, to allow changing at runtime
-    pos_control.set_max_speed_xy(wp_nav.get_speed_xy());
+    pos_control.set_max_speed_xy(wp_nav.get_default_speed_xy());
     pos_control.set_max_accel_xy(wp_nav.get_wp_acceleration());
     pos_control.set_max_speed_z(-get_pilot_speed_dn(), g.pilot_speed_up);
     pos_control.set_max_accel_z(g.pilot_accel_z);
diff --git a/ArduSub/control_guided.cpp b/ArduSub/control_guided.cpp
index 49d97fd7ae7f..c5747d1205f6 100644
--- a/ArduSub/control_guided.cpp
+++ b/ArduSub/control_guided.cpp
@@ -92,7 +92,7 @@ void Sub::guided_posvel_control_start()
     pos_control.init_xy_controller();
 
     // set speed and acceleration from wpnav's speed and acceleration
-    pos_control.set_max_speed_xy(wp_nav.get_speed_xy());
+    pos_control.set_max_speed_xy(wp_nav.get_default_speed_xy());
     pos_control.set_max_accel_xy(wp_nav.get_wp_acceleration());
 
     const Vector3f& curr_pos = inertial_nav.get_position();
@@ -103,7 +103,7 @@ void Sub::guided_posvel_control_start()
     pos_control.set_desired_velocity_xy(curr_vel.x, curr_vel.y);
 
     // set vertical speed and acceleration
-    pos_control.set_max_speed_z(wp_nav.get_speed_down(), wp_nav.get_speed_up());
+    pos_control.set_max_speed_z(wp_nav.get_default_speed_down(), wp_nav.get_default_speed_up());
     pos_control.set_max_accel_z(wp_nav.get_accel_z());
 
     // pilot always controls yaw
@@ -117,7 +117,7 @@ void Sub::guided_angle_control_start()
     guided_mode = Guided_Angle;
 
     // set vertical speed and acceleration
-    pos_control.set_max_speed_z(wp_nav.get_speed_down(), wp_nav.get_speed_up());
+    pos_control.set_max_speed_z(wp_nav.get_default_speed_down(), wp_nav.get_default_speed_up());
     pos_control.set_max_accel_z(wp_nav.get_accel_z());
 
     // initialise position and desired velocity
@@ -490,7 +490,7 @@ void Sub::guided_angle_control_run()
     float yaw_in = wrap_180_cd(guided_angle_state.yaw_cd);
 
     // constrain climb rate
-    float climb_rate_cms = constrain_float(guided_angle_state.climb_rate_cms, -fabsf(wp_nav.get_speed_down()), wp_nav.get_speed_up());
+    float climb_rate_cms = constrain_float(guided_angle_state.climb_rate_cms, -fabsf(wp_nav.get_default_speed_down()), wp_nav.get_default_speed_up());
 
     // check for timeout - set lean angles and climb rate to zero if no updates received for 3 seconds
     uint32_t tnow = AP_HAL::millis();
diff --git a/ArduSub/control_surface.cpp b/ArduSub/control_surface.cpp
index 41a7228eecb0..d0f986392409 100644
--- a/ArduSub/control_surface.cpp
+++ b/ArduSub/control_surface.cpp
@@ -8,7 +8,7 @@ bool Sub::surface_init()
     }
 
     // initialize vertical speeds and leash lengths
-    pos_control.set_max_speed_z(wp_nav.get_speed_down(), wp_nav.get_speed_up());
+    pos_control.set_max_speed_z(wp_nav.get_default_speed_down(), wp_nav.get_default_speed_up());
     pos_control.set_max_accel_z(wp_nav.get_accel_z());
 
     // initialise position and desired velocity
@@ -48,7 +48,7 @@ void Sub::surface_run()
     attitude_control.input_euler_angle_roll_pitch_euler_rate_yaw(target_roll, target_pitch, target_yaw_rate);
 
     // set target climb rate
-    float cmb_rate = constrain_float(abs(wp_nav.get_speed_up()), 1, pos_control.get_max_speed_up());
+    float cmb_rate = constrain_float(abs(wp_nav.get_default_speed_up()), 1, pos_control.get_max_speed_up());
 
     // record desired climb rate for logging
     desired_climb_rate = cmb_rate;
diff --git a/Tools/autotest/arducopter.py b/Tools/autotest/arducopter.py
index 400301da1a98..57c6d20b866a 100644
--- a/Tools/autotest/arducopter.py
+++ b/Tools/autotest/arducopter.py
@@ -1294,9 +1294,6 @@ def fly_motor_fail(self, fail_servo=0, fail_mul=0.0, holdtime=30):
 
         self.do_RTL()
 
-    def fly_mission(self):
-        """Fly a mission from a file."""
-
     def fly_vision_position(self):
         """Disable GPS navigation, enable Vicon input."""
         # scribble down a location we can set origin to:
@@ -1384,6 +1381,49 @@ def fly_vision_position(self):
         if ex is not None:
             raise ex
 
+    def monitor_groundspeed(self, want, tolerance=0.5, timeout=5):
+        tstart = self.get_sim_time()
+        while True:
+            if self.get_sim_time() - tstart > timeout:
+                break
+            m = self.mav.recv_match(type='VFR_HUD', blocking=True)
+            if m.groundspeed > want+tolerance:
+                raise NotAchievedException("Too fast (%f > %f)" %
+                                           (m.groundspeed, want))
+            if m.groundspeed < want-tolerance:
+                raise NotAchievedException("Too slow (%f < %f)" %
+                                           (m.groundspeed, want))
+            self.progress("GroundSpeed OK (got=%f) (want=%f)" %
+                          (m.groundspeed, want))
+
+    def fly_rtl_speed(self):
+        """Test RTL Speed parameters"""
+        rtl_speed_ms = 7
+        wpnav_speed_ms = 4
+        wpnav_accel_mss = 3
+        tolerance = 0.5
+        self.load_mission("copter_rtl_speed.txt")
+        self.set_parameter('WPNAV_ACCEL', wpnav_accel_mss * 100)
+        self.set_parameter('RTL_SPEED', rtl_speed_ms * 100)
+        self.set_parameter('WPNAV_SPEED', wpnav_speed_ms * 100)
+        self.change_mode('LOITER')
+        self.wait_ready_to_arm()
+        self.arm_vehicle()
+        self.change_mode('AUTO')
+        self.set_rc(3, 1600)
+        self.wait_altitude(19, 25, relative=True)
+        self.wait_groundspeed(wpnav_speed_ms-tolerance, wpnav_speed_ms+tolerance)
+        self.monitor_groundspeed(wpnav_speed_ms, timeout=20)
+        self.change_mode('RTL')
+        self.wait_groundspeed(rtl_speed_ms-tolerance, rtl_speed_ms+tolerance)
+        self.monitor_groundspeed(rtl_speed_ms, timeout=5)
+        self.change_mode('AUTO')
+        self.wait_groundspeed(0-tolerance, 0+tolerance)
+        self.wait_groundspeed(wpnav_speed_ms-tolerance, wpnav_speed_ms+tolerance)
+        self.monitor_groundspeed(wpnav_speed_ms, timeout=5)
+        self.change_mode('RTL')
+        self.mav.motors_disarmed_wait()
+
     def fly_nav_delay(self):
         """Fly a simple mission that has a delay in it."""
 
@@ -2675,6 +2715,10 @@ def tests(self):
              "Fly Vision Position",
              self.fly_vision_position),
 
+            ("RTLSpeed",
+             "Fly RTL Speed",
+             self.fly_rtl_speed),
+
             ("Mount",
              "Test Camera/Antenna Mount",
              self.test_mount),
diff --git a/Tools/autotest/copter_rtl_speed.txt b/Tools/autotest/copter_rtl_speed.txt
new file mode 100644
index 000000000000..491f2c80edf6
--- /dev/null
+++ b/Tools/autotest/copter_rtl_speed.txt
@@ -0,0 +1,6 @@
+QGC WPL 110
+0	0	0	16	0.000000	0.000000	0.000000	0.000000	-35.363262	149.165237	584.080017	1
+1	0	3	22	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	20.000000	1
+2	0	3	16	0.000000	0.000000	0.000000	0.000000	-35.361374	149.164917	20.000000	1
+3	0	3	16	0.000000	0.000000	0.000000	0.000000	-35.361397	149.163910	20.000000	1
+4	0	0	20	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1
diff --git a/libraries/AC_WPNav/AC_WPNav.cpp b/libraries/AC_WPNav/AC_WPNav.cpp
index c93649b478dc..4fe82c09312f 100644
--- a/libraries/AC_WPNav/AC_WPNav.cpp
+++ b/libraries/AC_WPNav/AC_WPNav.cpp
@@ -164,19 +164,24 @@ void AC_WPNav::set_speed_xy(float speed_cms)
 {
     // range check new target speed and update position controller
     if (speed_cms >= WPNAV_WP_SPEED_MIN) {
-        _wp_speed_cms = speed_cms;
-        _pos_control.set_max_speed_xy(_wp_speed_cms);
+        _pos_control.set_max_speed_xy(speed_cms);
         // flag that wp leash must be recalculated
         _flags.recalc_wp_leash = true;
     }
 }
 
-/// set_speed_z - allows main code to pass target vertical velocity for wp navigation
-void AC_WPNav::set_speed_z(float speed_down_cms, float speed_up_cms)
+/// set current target climb rate during wp navigation
+void AC_WPNav::set_speed_up(float speed_up_cms)
 {
-    _wp_speed_down_cms = speed_down_cms;
-    _wp_speed_up_cms = speed_up_cms;
-    _pos_control.set_max_speed_z(_wp_speed_down_cms, _wp_speed_up_cms);
+    _pos_control.set_max_speed_z(_pos_control.get_max_speed_down(), speed_up_cms);
+    // flag that wp leash must be recalculated
+    _flags.recalc_wp_leash = true;
+}
+
+/// set current target descent rate during wp navigation
+void AC_WPNav::set_speed_down(float speed_down_cms)
+{
+    _pos_control.set_max_speed_z(speed_down_cms, _pos_control.get_max_speed_up());
     // flag that wp leash must be recalculated
     _flags.recalc_wp_leash = true;
 }
@@ -291,7 +296,7 @@ bool AC_WPNav::set_wp_origin_and_destination(const Vector3f& origin, const Vecto
     const Vector3f &curr_vel = _inav.get_velocity();
     // get speed along track (note: we convert vertical speed into horizontal speed equivalent)
     float speed_along_track = curr_vel.x * _pos_delta_unit.x + curr_vel.y * _pos_delta_unit.y + curr_vel.z * _pos_delta_unit.z;
-    _limited_speed_xy_cms = constrain_float(speed_along_track,0,_wp_speed_cms);
+    _limited_speed_xy_cms = constrain_float(speed_along_track, 0, _pos_control.get_max_speed_xy());
 
     return true;
 }
@@ -394,7 +399,7 @@ bool AC_WPNav::advance_wp_target_along_track(float dt)
     float speed_along_track = curr_vel.x * _pos_delta_unit.x + curr_vel.y * _pos_delta_unit.y + curr_vel.z * _pos_delta_unit.z;
 
     // calculate point at which velocity switches from linear to sqrt
-    float linear_velocity = _wp_speed_cms;
+    float linear_velocity = _pos_control.get_max_speed_xy();
     float kP = _pos_control.get_pos_xy_p().kP();
     if (is_positive(kP)) {   // avoid divide by zero
         linear_velocity = _track_accel/kP;
@@ -560,10 +565,10 @@ void AC_WPNav::calculate_wp_leash_length()
     float speed_z;
     float leash_z;
     if (_pos_delta_unit.z >= 0.0f) {
-        speed_z = _wp_speed_up_cms;
+        speed_z = _pos_control.get_max_speed_up();
         leash_z = _pos_control.get_leash_up_z();
     }else{
-        speed_z = _wp_speed_down_cms;
+        speed_z = fabsf(_pos_control.get_max_speed_down());
         leash_z = _pos_control.get_leash_down_z();
     }
 
@@ -574,7 +579,7 @@ void AC_WPNav::calculate_wp_leash_length()
         _track_leash_length = WPNAV_LEASH_LENGTH_MIN;
     }else if(is_zero(_pos_delta_unit.z)){
         _track_accel = _wp_accel_cmss/pos_delta_unit_xy;
-        _track_speed = _wp_speed_cms/pos_delta_unit_xy;
+        _track_speed = _pos_control.get_max_speed_xy() / pos_delta_unit_xy;
         _track_leash_length = _pos_control.get_leash_xy()/pos_delta_unit_xy;
     }else if(is_zero(pos_delta_unit_xy)){
         _track_accel = _wp_accel_z_cmss/pos_delta_unit_z;
@@ -582,7 +587,7 @@ void AC_WPNav::calculate_wp_leash_length()
         _track_leash_length = leash_z/pos_delta_unit_z;
     }else{
         _track_accel = MIN(_wp_accel_z_cmss/pos_delta_unit_z, _wp_accel_cmss/pos_delta_unit_xy);
-        _track_speed = MIN(speed_z/pos_delta_unit_z, _wp_speed_cms/pos_delta_unit_xy);
+        _track_speed = MIN(speed_z/pos_delta_unit_z, _pos_control.get_max_speed_xy() / pos_delta_unit_xy);
         _track_leash_length = MIN(leash_z/pos_delta_unit_z, _pos_control.get_leash_xy()/pos_delta_unit_xy);
     }
 
@@ -772,7 +777,7 @@ bool AC_WPNav::set_spline_origin_and_destination(const Vector3f& origin, const V
     _terrain_alt = terrain_alt;
 
     // calculate slow down distance
-    calc_slow_down_distance(_wp_speed_cms, _wp_accel_cmss);
+    calc_slow_down_distance(_pos_control.get_max_speed_xy(), _wp_accel_cmss);
 
     // get alt-above-terrain
     float terr_offset = 0.0f;
@@ -897,7 +902,7 @@ bool AC_WPNav::advance_spline_target_along_track(float dt)
 
         // update velocity
         float spline_dist_to_wp = (_destination - target_pos).length();
-        float vel_limit = _wp_speed_cms;
+        float vel_limit = _pos_control.get_max_speed_xy();
         if (!is_zero(dt)) {
             vel_limit = MIN(vel_limit, track_leash_slack/dt);
         }
diff --git a/libraries/AC_WPNav/AC_WPNav.h b/libraries/AC_WPNav/AC_WPNav.h
index 0a1e990a1606..abec31f10a93 100644
--- a/libraries/AC_WPNav/AC_WPNav.h
+++ b/libraries/AC_WPNav/AC_WPNav.h
@@ -75,20 +75,21 @@ class AC_WPNav
     ///     should be called once before the waypoint controller is used but does not need to be called before subsequent updates to destination
     void wp_and_spline_init();
 
-    /// set_speed_xy - allows main code to pass target horizontal velocity for wp navigation
+    /// set current target horizontal speed during wp navigation
     void set_speed_xy(float speed_cms);
 
-    /// set_speed_z - allows main code to pass target vertical velocity for wp navigation
-    void set_speed_z(float speed_down_cms, float speed_up_cms);
+    /// set current target climb or descent rate during wp navigation
+    void set_speed_up(float speed_up_cms);
+    void set_speed_down(float speed_down_cms);
 
-    /// get_speed_xy - allows main code to retrieve target horizontal velocity for wp navigation
-    float get_speed_xy() const { return _wp_speed_cms; }
+    /// get default target horizontal velocity during wp navigation
+    float get_default_speed_xy() const { return _wp_speed_cms; }
 
-    /// get_speed_up - returns target climb speed in cm/s during missions
-    float get_speed_up() const { return _wp_speed_up_cms; }
+    /// get default target climb speed in cm/s during missions
+    float get_default_speed_up() const { return _wp_speed_up_cms; }
 
-    /// get_speed_down - returns target descent speed in cm/s during missions.  Note: always positive
-    float get_speed_down() const { return _wp_speed_down_cms; }
+    /// get default target descent rate in cm/s during missions.  Note: always positive
+    float get_default_speed_down() const { return _wp_speed_down_cms; }
 
     /// get_speed_z - returns target descent speed in cm/s during missions.  Note: always positive
     float get_accel_z() const { return _wp_accel_z_cmss; }
@@ -281,9 +282,9 @@ class AC_WPNav
     AC_Avoid                *_avoid = nullptr;
 
     // parameters
-    AP_Float    _wp_speed_cms;          // maximum horizontal speed in cm/s during missions
-    AP_Float    _wp_speed_up_cms;       // climb speed target in cm/s
-    AP_Float    _wp_speed_down_cms;     // descent speed target in cm/s
+    AP_Float    _wp_speed_cms;          // default maximum horizontal speed in cm/s during missions
+    AP_Float    _wp_speed_up_cms;       // default maximum climb rate in cm/s
+    AP_Float    _wp_speed_down_cms;     // default maximum descent rate in cm/s
     AP_Float    _wp_radius_cm;          // distance from a waypoint in cm that, when crossed, indicates the wp has been reached
     AP_Float    _wp_accel_cmss;          // horizontal acceleration in cm/s/s during missions
     AP_Float    _wp_accel_z_cmss;        // vertical acceleration in cm/s/s during missions
