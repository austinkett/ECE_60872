diff --git a/libraries/AP_Compass/AP_Compass_AK8963.cpp b/libraries/AP_Compass/AP_Compass_AK8963.cpp
index 269e609b6eb3..130da090689a 100644
--- a/libraries/AP_Compass/AP_Compass_AK8963.cpp
+++ b/libraries/AP_Compass/AP_Compass_AK8963.cpp
@@ -204,9 +204,11 @@ void AP_Compass_AK8963::read()
 
     hal.scheduler->suspend_timer_procs();
     auto field = _get_filtered_field();
+
     _reset_filter();
     hal.scheduler->resume_timer_procs();
     _make_factory_sensitivity_adjustment(field);
+    _make_adc_sensitivity_adjustment(field);
 
 #if CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BEBOP
     field.rotate(ROTATION_YAW_90);
@@ -229,6 +231,13 @@ void AP_Compass_AK8963::_reset_filter()
     _accum_count = 0;
 }
 
+void AP_Compass_AK8963::_make_adc_sensitivity_adjustment(Vector3f& field) const
+{
+    static const float ADC_16BIT_RESOLUTION = 0.15f;
+
+    field *= ADC_16BIT_RESOLUTION;
+}
+
 void AP_Compass_AK8963::_make_factory_sensitivity_adjustment(Vector3f& field) const
 {
     field.x *= _magnetometer_ASA[0];
diff --git a/libraries/AP_Compass/AP_Compass_AK8963.h b/libraries/AP_Compass/AP_Compass_AK8963.h
index 503b0e020b4e..338776c80a87 100644
--- a/libraries/AP_Compass/AP_Compass_AK8963.h
+++ b/libraries/AP_Compass/AP_Compass_AK8963.h
@@ -45,6 +45,7 @@ class AP_Compass_AK8963 : public AP_Compass_Backend
 
 private:
     void _make_factory_sensitivity_adjustment(Vector3f& field) const;
+    void _make_adc_sensitivity_adjustment(Vector3f& field) const;
     Vector3f _get_filtered_field() const;
     void _reset_filter();
 
diff --git a/libraries/AP_Compass/AP_Compass_HMC5843.cpp b/libraries/AP_Compass/AP_Compass_HMC5843.cpp
index 4418efeebcf2..365b666a464b 100644
--- a/libraries/AP_Compass/AP_Compass_HMC5843.cpp
+++ b/libraries/AP_Compass/AP_Compass_HMC5843.cpp
@@ -74,7 +74,6 @@ AP_Compass_HMC5843::AP_Compass_HMC5843(Compass &compass):
     _product_id(0)
 {}
 
-// detect the sensor
 AP_Compass_Backend *AP_Compass_HMC5843::detect(Compass &compass)
 {
     AP_Compass_HMC5843 *sensor = new AP_Compass_HMC5843(compass);
@@ -88,7 +87,6 @@ AP_Compass_Backend *AP_Compass_HMC5843::detect(Compass &compass)
     return sensor;
 }
 
-// read_register - read a register value
 bool AP_Compass_HMC5843::read_register(uint8_t address, uint8_t *value)
 {
     if (hal.i2c->readRegister((uint8_t)COMPASS_ADDRESS, address, value) != 0) {
@@ -98,7 +96,6 @@ bool AP_Compass_HMC5843::read_register(uint8_t address, uint8_t *value)
     return true;
 }
 
-// write_register - update a register value
 bool AP_Compass_HMC5843::write_register(uint8_t address, uint8_t value)
 {
     if (hal.i2c->writeRegister((uint8_t)COMPASS_ADDRESS, address, value) != 0) {
@@ -108,7 +105,6 @@ bool AP_Compass_HMC5843::write_register(uint8_t address, uint8_t value)
     return true;
 }
 
-// Read Sensor data
 bool AP_Compass_HMC5843::read_raw()
 {
     uint8_t buff[6];
@@ -140,20 +136,19 @@ bool AP_Compass_HMC5843::read_raw()
     return true;
 }
 
-
-// accumulate a reading from the magnetometer
 void AP_Compass_HMC5843::accumulate(void)
 {
     if (!_initialised) {
-        // someone has tried to enable a compass for the first time
-        // mid-flight .... we can't do that yet (especially as we won't
-        // have the right orientation!)
+        /* someone has tried to enable a compass for the first time
+         * mid-flight .... we can't do that yet (especially as we won't
+         * have the right orientation!) */
+
         return;
     }
    uint32_t tnow = hal.scheduler->micros();
    if (_accum_count != 0 && (tnow - _last_accum_time) < 13333) {
-	  // the compass gets new data at 75Hz
-	  return;
+      // the compass gets new data at 75Hz
+      return;
    }
 
    if (!_i2c_sem->take(1)) {
@@ -164,22 +159,24 @@ void AP_Compass_HMC5843::accumulate(void)
    _i2c_sem->give();
 
    if (result) {
-	  // the _mag_N values are in the range -2048 to 2047, so we can
-	  // accumulate up to 15 of them in an int16_t. Let's make it 14
-	  // for ease of calculation. We expect to do reads at 10Hz, and
-	  // we get new data at most 75Hz, so we don't expect to
-	  // accumulate more than 8 before a read
-	  _mag_x_accum += _mag_x;
-	  _mag_y_accum += _mag_y;
-	  _mag_z_accum += _mag_z;
-	  _accum_count++;
-	  if (_accum_count == 14) {
-		 _mag_x_accum /= 2;
-		 _mag_y_accum /= 2;
-		 _mag_z_accum /= 2;
-		 _accum_count = 7;
-	  }
-	  _last_accum_time = tnow;
+
+      /* the _mag_N values are in the range -2048 to 2047, so we can
+       * accumulate up to 15 of them in an int16_t. Let's make it 14
+       * for ease of calculation. We expect to do reads at 10Hz, and
+       * we get new data at most 75Hz, so we don't expect to
+       * accumulate more than 8 before a read */
+
+      _mag_x_accum += _mag_x;
+      _mag_y_accum += _mag_y;
+      _mag_z_accum += _mag_z;
+      _accum_count++;
+      if (_accum_count == 14) {
+         _mag_x_accum /= 2;
+         _mag_y_accum /= 2;
+         _mag_z_accum /= 2;
+         _accum_count = 7;
+      }
+      _last_accum_time = tnow;
    }
 }
 
@@ -197,16 +194,33 @@ bool AP_Compass_HMC5843::re_initialise()
 }
 
 
-// Public Methods //////////////////////////////////////////////////////////////
-bool
-AP_Compass_HMC5843::init()
+bool AP_Compass_HMC5843::_detect_version()
+{
+    _base_config = 0x0;
+
+    if (!write_register(ConfigRegA, SampleAveraging_8<<5 | DataOutputRate_75HZ<<2 | NormalOperation) ||
+        !read_register(ConfigRegA, &_base_config)) {
+        return false;
+    }
+    if ( _base_config == (SampleAveraging_8<<5 | DataOutputRate_75HZ<<2 | NormalOperation)) {
+        /* a 5883L supports the sample averaging config */
+        _product_id = AP_COMPASS_TYPE_HMC5883L;
+        return true;
+    } else if (_base_config == (NormalOperation | DataOutputRate_75HZ<<2)) {
+        _product_id = AP_COMPASS_TYPE_HMC5843;
+        return true;
+    } else {
+        /* not behaving like either supported compass type */
+        return false;
+    }
+
+}
+
+bool AP_Compass_HMC5843::init()
 {
-    int numAttempts = 0, good_count = 0;
-    bool success = false;
     uint8_t calibration_gain = 0x20;
     uint16_t expected_x = 715;
     uint16_t expected_yz = 715;
-    float gain_multiple = 1.0;
 
     hal.scheduler->suspend_timer_procs();
     hal.scheduler->delay(10);
@@ -216,184 +230,183 @@ AP_Compass_HMC5843::init()
         hal.scheduler->panic(PSTR("Failed to get HMC5843 semaphore"));
     }
 
-    // determine if we are using 5843 or 5883L
-    _base_config = 0;
-    if (!write_register(ConfigRegA, SampleAveraging_8<<5 | DataOutputRate_75HZ<<2 | NormalOperation) ||
-        !read_register(ConfigRegA, &_base_config)) {
-        _i2c_sem->give();
-        hal.scheduler->resume_timer_procs();
-        return false;
+    if (!_detect_version()) {
+        goto errout;
     }
-    if ( _base_config == (SampleAveraging_8<<5 | DataOutputRate_75HZ<<2 | NormalOperation)) {
-        // a 5883L supports the sample averaging config
-        _product_id = AP_COMPASS_TYPE_HMC5883L;
+
+    if (_product_id == AP_COMPASS_TYPE_HMC5883L) {
         calibration_gain = 0x60;
-        /*
-          note that the HMC5883 datasheet gives the x and y expected
-          values as 766 and the z as 713. Experiments have shown the x
-          axis is around 766, and the y and z closer to 713.
+        /* Note that the HMC5883 datasheet gives the x and y expected
+           values as 766 and the z as 713. Experiments have shown the x
+           axis is around 766, and the y and z closer to 713.
          */
         expected_x = 766;
         expected_yz  = 713;
-        gain_multiple = 660.0f / 1090;  // adjustment for runtime vs calibration gain
-    } else if (_base_config == (NormalOperation | DataOutputRate_75HZ<<2)) {
-        _product_id = AP_COMPASS_TYPE_HMC5843;
-    } else {
-        // not behaving like either supported compass type
-        _i2c_sem->give();
-        hal.scheduler->resume_timer_procs();
-        return false;
     }
 
-    calibration[0] = 0;
-    calibration[1] = 0;
-    calibration[2] = 0;
+    if (!_calibrate(calibration_gain, expected_x, expected_yz)) {
+        goto errout;
+    }
+
+    /* leave test mode */
+    if (!re_initialise()) {
+        goto errout;
+    }
+
+    read();
+
+    _compass_instance = register_compass();
+    set_dev_id(_compass_instance, _product_id);
+
+    _initialised = true;
+
+    _i2c_sem->give();
+    hal.scheduler->resume_timer_procs();
+
+    return true;
+errout:
+
+    _i2c_sem->give();
+    hal.scheduler->resume_timer_procs();
+    return false;
+}
+
+/* XXX: we can do better */
+bool AP_Compass_HMC5843::_calibrate(uint8_t calibration_gain, uint16_t expected_x, uint16_t expected_yz)
+{
+    int numAttempts = 0, good_count = 0;
+    bool success = false;
+
+    float sum_excited[3] = {0.0f, 0.0f, 0.0f};
 
-    while ( success == 0 && numAttempts < 25 && good_count < 5)
+    while (success == 0 && numAttempts < 25 && good_count < 5)
     {
-        // record number of attempts at initialisation
         numAttempts++;
 
-        // force positiveBias (compass should return 715 for all channels)
-        if (!write_register(ConfigRegA, PositiveBiasConfig))
-            continue;      // compass not responding on the bus
+        /* force positiveBias (compass should return 715 for all channels) */
+        if (!write_register(ConfigRegA, PositiveBiasConfig)) {
+            continue;   /* compass not responding on the bus */
+        }
+
         hal.scheduler->delay(50);
 
-        // set gains
+        /* set gains */
         if (!write_register(ConfigRegB, calibration_gain) ||
-            !write_register(ModeRegister, SingleConversion))
+            !write_register(ModeRegister, SingleConversion)) {
             continue;
+        }
 
-        // read values from the compass
         hal.scheduler->delay(50);
-        if (!read_raw())
-            continue;      // we didn't read valid values
+
+        if (!read_raw()) {
+            continue;
+        }
 
         hal.scheduler->delay(10);
 
         float cal[3];
 
-        // hal.console->printf_P(PSTR("mag %d %d %d\n"), _mag_x, _mag_y, _mag_z);
         cal[0] = fabsf(expected_x / (float)_mag_x);
         cal[1] = fabsf(expected_yz / (float)_mag_y);
         cal[2] = fabsf(expected_yz / (float)_mag_z);
 
-        // hal.console->printf_P(PSTR("cal=%.2f %.2f %.2f\n"), cal[0], cal[1], cal[2]);
-
-        // we throw away the first two samples as the compass may
-        // still be changing its state from the application of the
-        // strap excitation. After that we accept values in a
-        // reasonable range
-        if (numAttempts > 2 &&
-            cal[0] > 0.7f && cal[0] < 1.35f &&
-            cal[1] > 0.7f && cal[1] < 1.35f &&
-            cal[2] > 0.7f && cal[2] < 1.35f) {
-            // hal.console->printf_P(PSTR("cal=%.2f %.2f %.2f good\n"), cal[0], cal[1], cal[2]);
+        /* we throw away the first two samples as the compass may
+         * still be changing its state from the application of the
+         * strap excitation. After that we accept values in a
+         * reasonable range */
+
+        if (numAttempts <= 2) {
+            continue;
+        }
+
+#define IS_CALIBRATION_VALUE_VALID(val) (val > 0.7f && val < 1.35f)
+
+        if (IS_CALIBRATION_VALUE_VALID(cal[0]) &&
+            IS_CALIBRATION_VALUE_VALID(cal[1]) &&
+            IS_CALIBRATION_VALUE_VALID(cal[2])) {
+
+            sum_excited[0] += cal[0];
+            sum_excited[1] += cal[1];
+            sum_excited[2] += cal[2];
+
             good_count++;
-            calibration[0] += cal[0];
-            calibration[1] += cal[1];
-            calibration[2] += cal[2];
         }
 
-#if 0
-        /* useful for debugging */
-        hal.console->printf_P(PSTR("MagX: %d MagY: %d MagZ: %d\n"), (int)_mag_x, (int)_mag_y, (int)_mag_z);
-        hal.console->printf_P(PSTR("CalX: %.2f CalY: %.2f CalZ: %.2f\n"), cal[0], cal[1], cal[2]);
-#endif
+#undef IS_CALIBRATION_VALUE_VALID
+
     }
 
     if (good_count >= 5) {
-        /*
-          The use of gain_multiple below is incorrect, as the gain
-          difference between 2.5Ga mode and 1Ga mode is already taken
-          into account by the expected_x and expected_yz values.  We
-          are not going to fix it however as it would mean all
-          APM1/APM2 users redoing their compass calibration. The
-          impact is that the values we report on APM1/APM2 are lower
-          than they should be (by a multiple of about 0.6). This
-          doesn't have any impact other than the learned compass
-          offsets
-         */
-        calibration[0] = calibration[0] * gain_multiple / good_count;
-        calibration[1] = calibration[1] * gain_multiple / good_count;
-        calibration[2] = calibration[2] * gain_multiple / good_count;
+        _scaling[0] = sum_excited[0] / good_count;
+        _scaling[1] = sum_excited[1] / good_count;
+        _scaling[2] = sum_excited[2] / good_count;
+
         success = true;
     } else {
         /* best guess */
-        calibration[0] = 1.0;
-        calibration[1] = 1.0;
-        calibration[2] = 1.0;
-    }
-
-    // leave test mode
-    if (!re_initialise()) {
-        _i2c_sem->give();
-        hal.scheduler->resume_timer_procs();
-        return false;
-    }
-
-    _i2c_sem->give();
-    hal.scheduler->resume_timer_procs();
-    _initialised = true;
-
-	// perform an initial read
-	read();
-
-#if 0
-    hal.console->printf_P(PSTR("CalX: %.2f CalY: %.2f CalZ: %.2f\n"), 
-                          calibration[0], calibration[1], calibration[2]);
-#endif
-
-    if (success) {
-        // register the compass instance in the frontend
-        _compass_instance = register_compass();
-        set_dev_id(_compass_instance, _product_id);
+        _scaling[0] = 1.0;
+        _scaling[1] = 1.0;
+        _scaling[2] = 1.0;
     }
 
     return success;
 }
 
-// Read Sensor data
 void AP_Compass_HMC5843::read()
 {
     if (!_initialised) {
-        // someone has tried to enable a compass for the first time
-        // mid-flight .... we can't do that yet (especially as we won't
-        // have the right orientation!)
+
+        /* someone has tried to enable a compass for the first time
+         * mid-flight .... we can't do that yet (especially as we won't
+         * have the right orientation!) */
+
         return;
     }
+
     if (_retry_time != 0) {
+
         if (hal.scheduler->millis() < _retry_time) {
             return;
         }
+
         if (!re_initialise()) {
             _retry_time = hal.scheduler->millis() + 1000;
-			hal.i2c->setHighSpeed(false);
+            hal.i2c->setHighSpeed(false);
             return;
         }
     }
 
-	if (_accum_count == 0) {
-	   accumulate();
+    if (_accum_count == 0) {
+       accumulate();
        if (_retry_time != 0) {
-		  hal.i2c->setHighSpeed(false);
-		  return;
-	   }
-	}
-
-    Vector3f field(_mag_x_accum * calibration[0],
-                   _mag_y_accum * calibration[1],
-                   _mag_z_accum * calibration[2]);
+          hal.i2c->setHighSpeed(false);
+          return;
+       }
+    }
+
+    Vector3f field(_mag_x_accum * _scaling[0],
+                   _mag_y_accum * _scaling[1],
+                   _mag_z_accum * _scaling[2]);
     field /= _accum_count;
 
-	_accum_count = 0;
-	_mag_x_accum = _mag_y_accum = _mag_z_accum = 0;
+    _accum_count = 0;
+    _mag_x_accum = _mag_y_accum = _mag_z_accum = 0;
 
     // rotate to the desired orientation
     if (_product_id == AP_COMPASS_TYPE_HMC5883L) {
         field.rotate(ROTATION_YAW_90);
     }
 
+    _convert_to_ut(field);
+
     publish_field(field, _compass_instance);
     _retry_time = 0;
 }
+
+void AP_Compass_HMC5843::_convert_to_ut(Vector3f& field) const
+{
+    /* Convert field from mG to uT.
+     * 1T = 10000G */
+
+    field /= 10;
+}
diff --git a/libraries/AP_Compass/AP_Compass_HMC5843.h b/libraries/AP_Compass/AP_Compass_HMC5843.h
index 4d900568b400..a5b4a9da4325 100644
--- a/libraries/AP_Compass/AP_Compass_HMC5843.h
+++ b/libraries/AP_Compass/AP_Compass_HMC5843.h
@@ -12,13 +12,18 @@
 class AP_Compass_HMC5843 : public AP_Compass_Backend
 {
 private:
-    float               calibration[3];
+    float               _scaling[3] = {0};
     bool                _initialised;
     bool                read_raw(void);
     uint8_t             _base_config;
     bool                re_initialise(void);
     bool                read_register(uint8_t address, uint8_t *value);
     bool                write_register(uint8_t address, uint8_t value);
+
+    bool                _calibrate(uint8_t calibration_gain, uint16_t expected_x, uint16_t expected_yz);
+    bool                _detect_version();
+    void                _convert_to_ut(Vector3f& field) const;
+
     uint32_t            _retry_time; // when unhealthy the millis() value to retry at
     AP_HAL::Semaphore*  _i2c_sem;
 
diff --git a/libraries/AP_Compass/Compass.cpp b/libraries/AP_Compass/Compass.cpp
index 987d2303bc31..48ba8567986c 100644
--- a/libraries/AP_Compass/Compass.cpp
+++ b/libraries/AP_Compass/Compass.cpp
@@ -265,6 +265,76 @@ const AP_Param::GroupInfo Compass::var_info[] PROGMEM = {
     AP_GROUPINFO("EXTERN3",23, Compass, _state[2].external, 0),
 #endif
 
+    // @Param: OFS1UT_X
+    // @DisplayName: Compass offsets (uT) on the X axis
+    // @Description: Offset (uT) to be added to the compass #1 x-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS1UT_Y
+    // @DisplayName: Compass offsets (uT) on the Y axis
+    // @Description: Offset (uT) to be added to the compass #1 y-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS1UT_Z
+    // @DisplayName: Compass offsets (uT) on the Z axis
+    // @Description: Offset (uT) to be added to the compass #1 z-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+#if COMPASS_MAX_INSTANCES == 1
+    AP_GROUPINFO("OFS1UT", 10, Compass, _state[0].offset_ut, 0),
+#elif COMPASS_MAX_INSTANCES == 2
+    AP_GROUPINFO("OFS1UT", 21, Compass, _state[0].offset_ut, 0),
+#elif COMPASS_MAX_INSTANCES == 3
+    AP_GROUPINFO("OFS1UT", 24, Compass, _state[0].offset_ut, 0),
+#endif
+
+    // @Param: OFS2UT_X
+    // @DisplayName: Compass2 offsets (uT) on the X axis
+    // @Description: Offset (uT) to be added to the compass #2 x-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS2UT_Y
+    // @DisplayName: Compass2 offsets (uT) on the Y axis
+    // @Description: Offset (uT) to be added to the compass #2 y-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS2UT_Z
+    // @DisplayName: Compass2 offsets (uT) on the Z axis
+    // @Description: Offset (uT) to be added to the compass #2 z-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+#if COMPASS_MAX_INSTANCES == 2
+    AP_GROUPINFO("OFS2UT", 22, Compass, _state[1].offset_ut, 0),
+#elif COMPASS_MAX_INSTANCES == 3
+    AP_GROUPINFO("OFS2UT", 25, Compass, _state[1].offset_ut, 0),
+#endif
+
+#if COMPASS_MAX_INSTANCES == 3
+    // @Param: OFS3UT_X
+    // @DisplayName: Compass3 offsets (uT) on the X axis
+    // @Description: Offset (uT) to be added to the compass #3 x-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS3UT_Y
+    // @DisplayName: Compass3 offsets (uT) on the Y axis
+    // @Description: Offset (uT) to be added to the compass #3 y-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+
+    // @Param: OFS3UT_Z
+    // @DisplayName: Compass3 offsets (uT) on the Z axis
+    // @Description: Offset (uT) to be added to the compass #3 z-axis values to compensate for metal in the frame
+    // @Range: -100 100
+    // @Increment: 1
+    AP_GROUPINFO("OFS3UT", 26, Compass, _state[2].offset_ut, 0),
+#endif
+
+
     AP_GROUPEND
 };
 
@@ -284,7 +354,7 @@ Compass::Compass(void) :
     for (uint8_t i=0; i<COMPASS_MAX_BACKEND; i++) {
         _backends[i] = NULL;
         _state[i].last_update_usec = 0;
-    }    
+    }
 
 #if COMPASS_MAX_INSTANCES > 1
     // default device ids to zero.  init() method will overwrite with the actual device ids
@@ -383,7 +453,7 @@ Compass::read(void)
     for (uint8_t i=0; i< _backend_count; i++) {
         // call read on each of the backend. This call updates field[i]
         _backends[i]->read();
-    }    
+    }
     for (uint8_t i=0; i < COMPASS_MAX_INSTANCES; i++) {
         _state[i].healthy = (hal.scheduler->millis() - _state[i].last_update_ms < 500);
     }
@@ -395,7 +465,7 @@ Compass::set_offsets(uint8_t i, const Vector3f &offsets)
 {
     // sanity check compass instance provided
     if (i < COMPASS_MAX_INSTANCES) {
-        _state[i].offset.set(offsets);
+        _state[i].offset_ut.set(offsets);
     }
 }
 
@@ -404,7 +474,7 @@ Compass::set_and_save_offsets(uint8_t i, const Vector3f &offsets)
 {
     // sanity check compass instance provided
     if (i < COMPASS_MAX_INSTANCES) {
-        _state[i].offset.set(offsets);
+        _state[i].offset_ut.set(offsets);
         save_offsets(i);
     }
 }
@@ -412,7 +482,7 @@ Compass::set_and_save_offsets(uint8_t i, const Vector3f &offsets)
 void
 Compass::save_offsets(uint8_t i)
 {
-    _state[i].offset.save();  // save offsets
+    _state[i].offset_ut.save();  // save offsets
 #if COMPASS_MAX_INSTANCES > 1
     _state[i].dev_id.save();  // save device id corresponding to these offsets
 #endif
@@ -615,7 +685,7 @@ void Compass::_setup_earth_field(void)
 {
     // assume a earth field strength of 400
     _hil.Bearth(400, 0, 0);
-    
+
     // rotate _Bearth for inclination and declination. -66 degrees
     // is the inclination in Canberra, Australia
     Matrix3f R;
diff --git a/libraries/AP_Compass/Compass.h b/libraries/AP_Compass/Compass.h
index 229fe481243a..a6f7689b6946 100644
--- a/libraries/AP_Compass/Compass.h
+++ b/libraries/AP_Compass/Compass.h
@@ -38,10 +38,10 @@
  */
 #if HAL_CPU_CLASS > HAL_CPU_CLASS_16
 #define COMPASS_MAX_INSTANCES 3
-#define COMPASS_MAX_BACKEND   3   
+#define COMPASS_MAX_BACKEND   3
 #else
 #define COMPASS_MAX_INSTANCES 1
-#define COMPASS_MAX_BACKEND   1   
+#define COMPASS_MAX_BACKEND   1
 #endif
 
 class Compass
@@ -61,7 +61,7 @@ friend class AP_Compass_Backend;
 
     /// Read the compass and update the mag_ variables.
     ///
-    bool read();    
+    bool read();
 
     /// use spare CPU cycles to accumulate values from the compass if
     /// possible (this method should also be implemented in the backends)
@@ -114,7 +114,7 @@ friend class AP_Compass_Backend;
     ///
     /// @returns                    The current compass offsets.
     ///
-    const Vector3f &get_offsets(uint8_t i) const { return _state[i].offset; }
+    const Vector3f &get_offsets(uint8_t i) const { return _state[i].offset_ut; }
     const Vector3f &get_offsets(void) const { return get_offsets(get_primary()); }
 
     /// Sets the initial location used to get declination
@@ -269,16 +269,16 @@ friend class AP_Compass_Backend;
     enum Rotation _board_orientation;
 
     // primary instance
-    AP_Int8     _primary;                           
+    AP_Int8     _primary;
 
     // declination in radians
     AP_Float    _declination;
 
     // enable automatic declination code
-    AP_Int8     _auto_declination;                  
+    AP_Int8     _auto_declination;
 
     // first-time-around flag used by offset nulling
-    bool        _null_init_done;                           
+    bool        _null_init_done;
 
     // used by offset correction
     static const uint8_t _mag_history_size = 20;
@@ -295,6 +295,7 @@ friend class AP_Compass_Backend;
         bool        healthy;
         AP_Int8     orientation;
         AP_Vector3f offset;
+        AP_Vector3f offset_ut;
 
 #if COMPASS_MAX_INSTANCES > 1
         // device id detected at init.  
