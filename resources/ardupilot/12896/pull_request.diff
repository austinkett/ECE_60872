diff --git a/libraries/AP_HAL_ChibiOS/hwdef/common/chconf.h b/libraries/AP_HAL_ChibiOS/hwdef/common/chconf.h
index 7162b1e9be80..6ac6bc960f0c 100644
--- a/libraries/AP_HAL_ChibiOS/hwdef/common/chconf.h
+++ b/libraries/AP_HAL_ChibiOS/hwdef/common/chconf.h
@@ -725,6 +725,8 @@
 #define CH_CFG_SYSTEM_HALT_HOOK(reason) do {                               \
         extern void memory_flush_all(void); \
         memory_flush_all(); \
+        extern void system_halt_hook(void); \
+        system_halt_hook(); \
 } while(0)
 #endif
 
diff --git a/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.c b/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.c
index 1651faaab266..eae3314eb0fa 100644
--- a/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.c
+++ b/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.c
@@ -353,3 +353,74 @@ void stm32_cacheBufferFlush(const void *p, size_t size)
 {
     cacheBufferFlush(p, size);
 }
+
+
+#ifdef HAL_GPIO_PIN_FAULT
+/*
+  optional support for hard-fault debugging using soft-serial output to a pin
+  To use this setup a pin like this:
+
+    Pxx FAULT OUTPUT HIGH
+
+  for some pin Pxx
+
+  On a STM32F405 the baudrate will be around 42kBaud. Use the
+  auto-baud function on your logic analyser to decode
+*/
+/*
+  send one bit out a debug line
+ */
+static void fault_send_bit(ioline_t line, uint8_t b)
+{
+    palWriteLine(line, b);
+    for (uint32_t i=0; i<1000; i++) {
+        palWriteLine(line, b);
+    }
+}
+
+/*
+  send a byte out a debug line
+ */
+static void fault_send_byte(ioline_t line, uint8_t b)
+{
+    fault_send_bit(line, 0); // start bit
+    for (uint8_t i=0; i<8; i++) {
+        uint8_t bit = (b & (1U<<i))?1:0;
+        fault_send_bit(line, bit);
+    }
+    fault_send_bit(line, 1); // stop bit
+}
+
+/*
+  send a string out a debug line
+ */
+static void fault_send_string(const char *str)
+{
+    while (*str) {
+        fault_send_byte(HAL_GPIO_PIN_FAULT, (uint8_t)*str++);
+    }
+    fault_send_byte(HAL_GPIO_PIN_FAULT, (uint8_t)'\n');
+}
+
+void fault_printf(const char *fmt, ...)
+{
+    static char buffer[100];
+    va_list ap;
+    va_start(ap, fmt);
+    vsnprintf(buffer, sizeof(buffer), fmt, ap);
+    va_end(ap);
+    fault_send_string(buffer);
+}
+#endif // HAL_GPIO_PIN_HARDFAULT
+
+void system_halt_hook(void)
+{
+#ifdef HAL_GPIO_PIN_FAULT
+    // optionally print the message on a fault pin
+    while (true) {
+        fault_printf("PANIC:%s\n", ch.dbg.panic_msg);
+        fault_printf("RA0:0x%08x\n", __builtin_return_address(0));
+    }
+#endif
+}
+
diff --git a/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.h b/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.h
index d5ad9f7dc145..e47c319ec27f 100644
--- a/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.h
+++ b/libraries/AP_HAL_ChibiOS/hwdef/common/stm32_util.h
@@ -91,6 +91,14 @@ void get_rtc_backup(uint8_t idx, uint32_t *v, uint8_t n);
 void stm32_cacheBufferInvalidate(const void *p, size_t size);
 void stm32_cacheBufferFlush(const void *p, size_t size);
 
+#ifdef HAL_GPIO_PIN_FAULT
+// printf for fault handlers
+void fault_printf(const char *fmt, ...);
+#endif
+
+// halt hook for printing panic message
+void system_halt_hook(void);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/libraries/AP_HAL_ChibiOS/system.cpp b/libraries/AP_HAL_ChibiOS/system.cpp
index 9c5a0040821e..037dbd91ff4a 100644
--- a/libraries/AP_HAL_ChibiOS/system.cpp
+++ b/libraries/AP_HAL_ChibiOS/system.cpp
@@ -20,6 +20,7 @@
 #include <AP_HAL/system.h>
 #include <AP_BoardConfig/AP_BoardConfig.h>
 #include "hwdef/common/watchdog.h"
+#include "hwdef/common/stm32_util.h"
 
 #include <ch.h>
 #include "hal.h"
@@ -93,6 +94,25 @@ void HardFault_Handler(void) {
 
     save_fault_watchdog(__LINE__, faultType, faultAddress);
 
+#ifdef HAL_GPIO_PIN_FAULT
+    while (true) {
+        fault_printf("HARDFAULT\n");
+        fault_printf("CUR=0x%08x\n", ch.rlist.current);
+        if (ch.rlist.current) {
+            fault_printf("NAME=%s\n", ch.rlist.current->name);
+        }
+        fault_printf("FA=0x%08x\n", faultAddress);
+        fault_printf("PC=0x%08x\n", ctx.pc);
+        fault_printf("LR=0x%08x\n", ctx.lr_thd);
+        fault_printf("R0=0x%08x\n", ctx.r0);
+        fault_printf("R1=0x%08x\n", ctx.r1);
+        fault_printf("R2=0x%08x\n", ctx.r2);
+        fault_printf("R3=0x%08x\n", ctx.r3);
+        fault_printf("R12=0x%08x\n", ctx.r12);
+        fault_printf("XPSR=0x%08x\n", ctx.xpsr);
+        fault_printf("\n\n");
+    }
+#endif
     //Cause debugger to stop. Ignored if no debugger is attached
     while(1) {}
 }
diff --git a/modules/ChibiOS b/modules/ChibiOS
index 0997003f024f..31fc3131f7d0 160000
--- a/modules/ChibiOS
+++ b/modules/ChibiOS
@@ -1 +1 @@
-Subproject commit 0997003f024fdccf24dcf0170cb11b0ab8085881
+Subproject commit 31fc3131f7d08791ce1544e3cdb49e0682768019
