diff --git a/libraries/AP_NavEKF2/AP_NavEKF2.cpp b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
index 855595adfd93..6048f7ff9e29 100644
--- a/libraries/AP_NavEKF2/AP_NavEKF2.cpp
+++ b/libraries/AP_NavEKF2/AP_NavEKF2.cpp
@@ -1172,27 +1172,34 @@ bool NavEKF2::getHeightControlLimit(float &height) const
     return core[primary].getHeightControlLimit(height);
 }
 
-// return the amount of yaw angle change (in radians) due to the last yaw angle reset or core selection switch
-// returns the time of the last yaw angle reset or 0 if no reset has ever occurred
+// Returns the amount of yaw angle change (in radians) due to the last yaw angle reset or core selection switch
+// Returns the time of the last yaw angle reset or 0 if no reset or core switch has ever occurred
+// Where there are multiple consumers, they must access this function on the same frame as each other
 uint32_t NavEKF2::getLastYawResetAngle(float &yawAngDelta)
 {
     if (!core) {
         return 0;
     }
 
-    // Record last time controller got the yaw reset
-    yaw_reset_data.last_function_call = imuSampleTime_us / 1000;
-    yawAngDelta = 0;
-    uint32_t lastYawReset_ms = 0;
+    yawAngDelta = 0.0f;
+
+    // Do the conversion to msec in one place
+    uint32_t now_time_ms = imuSampleTime_us / 1000;
+
+    // The last time we switched to the current primary core is the first reset event
+    uint32_t lastYawReset_ms = yaw_reset_data.last_primary_change;
 
     // There has been a change notification in the primary core that the controller has not consumed
-    if (yaw_reset_data.core_changed) {
+    // or this is a repeated acce
+    if (yaw_reset_data.core_changed || yaw_reset_data.last_function_call == now_time_ms) {
         yawAngDelta = yaw_reset_data.core_delta;
-        lastYawReset_ms = yaw_reset_data.last_primary_change;
         yaw_reset_data.core_changed = false;
     }
 
-    // There has been a reset inside the core since we switched
+    // Record last time controller got the yaw reset
+    yaw_reset_data.last_function_call = now_time_ms;
+
+    // There has been a reset inside the core since we switched so update the time and delta
     float temp_yawAng;
     uint32_t lastCoreYawReset_ms = core[primary].getLastYawResetAngle(temp_yawAng);
     if (lastCoreYawReset_ms > lastYawReset_ms) {
@@ -1203,27 +1210,34 @@ uint32_t NavEKF2::getLastYawResetAngle(float &yawAngDelta)
     return lastYawReset_ms;
 }
 
-// return the amount of NE position change due to the last position reset in metres
-// returns the time of the last reset or 0 if no reset has ever occurred
+// Returns the amount of NE position change due to the last position reset or core switch in metres
+// Returns the time of the last reset or 0 if no reset or core switch has ever occurred
+// Where there are multiple consumers, they must access this function on the same frame as each other
 uint32_t NavEKF2::getLastPosNorthEastReset(Vector2f &posDelta)
 {
     if (!core) {
         return 0;
     }
 
-    // Record last time controller got the position reset
-    pos_reset_data.last_function_call = imuSampleTime_us / 1000;
     posDelta.zero();
-    uint32_t lastPosReset_ms = 0;
+
+    // Do the conversion to msec in one place
+    uint32_t now_time_ms = imuSampleTime_us / 1000;
+
+    // The last time we switched to the current primary core is the first reset event
+    uint32_t lastPosReset_ms = pos_reset_data.last_primary_change;
 
     // There has been a change in the primary core that the controller has not consumed
-    if (pos_reset_data.core_changed) {
+    // allow for multiple consumers on the same frame
+    if (pos_reset_data.core_changed || pos_reset_data.last_function_call == now_time_ms) {
         posDelta = pos_reset_data.core_delta;
-        lastPosReset_ms = pos_reset_data.last_primary_change;
         pos_reset_data.core_changed = false;
     }
 
-    // There has been a reset inside the core since we switched
+    // Record last time controller got the position reset
+    pos_reset_data.last_function_call = now_time_ms;
+
+    // There has been a reset inside the core since we switched so update the time and delta
     Vector2f tempPosDelta;
     uint32_t lastCorePosReset_ms = core[primary].getLastPosNorthEastReset(tempPosDelta);
     if (lastCorePosReset_ms > lastPosReset_ms) {
@@ -1253,27 +1267,34 @@ const char *NavEKF2::prearm_failure_reason(void) const
     return core[primary].prearm_failure_reason();
 }
 
-// return the amount of vertical position change due to the last reset in metres
-// returns the time of the last reset or 0 if no reset has ever occurred
+// Returns the amount of vertical position change due to the last reset or core switch in metres
+// Returns the time of the last reset or 0 if no reset or core switch has ever occurred
+// Where there are multiple consumers, they must access this function on the same frame as each other
 uint32_t NavEKF2::getLastPosDownReset(float &posDelta)
 {
     if (!core) {
         return 0;
     }
 
-    // Record last time controller got the position reset
-    pos_down_reset_data.last_function_call = imuSampleTime_us / 1000;
     posDelta = 0.0f;
-    uint32_t lastPosReset_ms = 0;
+
+    // Do the conversion to msec in one place
+    uint32_t now_time_ms = imuSampleTime_us / 1000;
+
+    // The last time we switched to the current primary core is the first reset event
+    uint32_t lastPosReset_ms = pos_down_reset_data.last_primary_change;
 
     // There has been a change in the primary core that the controller has not consumed
-    if (pos_down_reset_data.core_changed) {
+    // allow for multiple consumers on the same frame
+    if (pos_down_reset_data.core_changed || pos_down_reset_data.last_function_call == now_time_ms) {
         posDelta = pos_down_reset_data.core_delta;
-        lastPosReset_ms = pos_down_reset_data.last_primary_change;
         pos_down_reset_data.core_changed = false;
     }
 
-    // There has been a reset inside the core since we switched
+    // Record last time controller got the position reset
+    pos_down_reset_data.last_function_call = now_time_ms;
+
+    // There has been a reset inside the core since we switched so update the time and delta
     float tempPosDelta;
     uint32_t lastCorePosReset_ms = core[primary].getLastPosDownReset(tempPosDelta);
     if (lastCorePosReset_ms > lastPosReset_ms) {
