diff --git a/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java
index 8acad8ac69..e66a8c1834 100644
--- a/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java
+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEager.java
@@ -172,6 +172,8 @@ void drainAndCancel() {
                 do {
                     cancelAll();
                 } while (decrementAndGet() != 0);
+
+                errors.tryTerminateAndReport();
             }
         }
 
@@ -279,6 +281,7 @@ public void drain() {
                         while (e != r) {
                             if (cancelled) {
                                 cancelAll();
+                                errors.tryTerminateAndReport();
                                 return;
                             }
 
@@ -305,6 +308,8 @@ public void drain() {
                                 current = null;
                                 inner.cancel();
                                 cancelAll();
+                                errors.addThrowable(ex);
+                                ex = errors.terminate();
                                 a.onError(ex);
                                 return;
                             }
@@ -333,6 +338,7 @@ public void drain() {
                         if (e == r) {
                             if (cancelled) {
                                 cancelAll();
+                                errors.tryTerminateAndReport();
                                 return;
                             }
 
diff --git a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletable.java b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletable.java
index 249d01ef82..21e4dc76f0 100644
--- a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletable.java
+++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletable.java
@@ -156,6 +156,7 @@ public void dispose() {
             inner.dispose();
             if (getAndIncrement() == 0) {
                 queue.clear();
+                errors.tryTerminateAndReport();
             }
         }
 
@@ -197,6 +198,7 @@ void drain() {
             do {
                 if (disposed) {
                     queue.clear();
+                    errors.tryTerminateAndReport();
                     return;
                 }
 
diff --git a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java
index 82a3009a6c..b399deb518 100644
--- a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java
+++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybe.java
@@ -170,6 +170,7 @@ public void cancel() {
             if (getAndIncrement() == 0) {
                 queue.clear();
                 item = null;
+                errors.tryTerminateAndReport();
             }
         }
 
@@ -215,7 +216,8 @@ void drain() {
                     if (cancelled) {
                         queue.clear();
                         item = null;
-                        break;
+                        errors.tryTerminateAndReport();
+                        return;
                     }
 
                     int s = state;
diff --git a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java
index 9be42fcb7b..538edfc842 100644
--- a/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java
+++ b/src/main/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingle.java
@@ -170,6 +170,7 @@ public void cancel() {
             if (getAndIncrement() == 0) {
                 queue.clear();
                 item = null;
+                errors.tryTerminateAndReport();
             }
         }
 
@@ -210,7 +211,8 @@ void drain() {
                     if (cancelled) {
                         queue.clear();
                         item = null;
-                        break;
+                        errors.tryTerminateAndReport();
+                        return;
                     }
 
                     int s = state;
diff --git a/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java
index 1358e1ed9c..72197d3d33 100644
--- a/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java
+++ b/src/main/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingle.java
@@ -148,6 +148,8 @@ public void dispose() {
             if (getAndIncrement() == 0) {
                 queue.clear();
                 item = null;
+
+                errors.tryTerminateAndReport();
             }
         }
 
@@ -191,6 +193,7 @@ void drain() {
                     if (cancelled) {
                         queue.clear();
                         item = null;
+                        errors.tryTerminateAndReport();
                         break;
                     }
 
diff --git a/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java
index ce8d23acfd..093eafd5be 100644
--- a/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java
+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableConcatMap.java
@@ -58,7 +58,7 @@ public void subscribeActual(Observer<? super U> observer) {
     static final class SourceObserver<T, U> extends AtomicInteger implements Observer<T>, Disposable {
 
         private static final long serialVersionUID = 8828587559905699186L;
-        final Observer<? super U> downstream;
+        final SerializedObserver<? super U> downstream;
         final Function<? super T, ? extends ObservableSource<? extends U>> mapper;
         final InnerObserver<U> inner;
         final int bufferSize;
@@ -75,7 +75,7 @@ public void subscribeActual(Observer<? super U> observer) {
 
         int fusionMode;
 
-        SourceObserver(Observer<? super U> actual,
+        SourceObserver(SerializedObserver<? super U> actual,
                                 Function<? super T, ? extends ObservableSource<? extends U>> mapper, int bufferSize) {
             this.downstream = actual;
             this.mapper = mapper;
@@ -137,8 +137,8 @@ public void onError(Throwable t) {
                 return;
             }
             done = true;
-            dispose();
             downstream.onError(t);
+            dispose();
         }
 
         @Override
@@ -165,6 +165,7 @@ public void dispose() {
             disposed = true;
             inner.dispose();
             upstream.dispose();
+            downstream.finish ();
 
             if (getAndIncrement() == 0) {
                 queue.clear();
@@ -191,9 +192,9 @@ void drain() {
                         t = queue.poll();
                     } catch (Throwable ex) {
                         Exceptions.throwIfFatal(ex);
-                        dispose();
                         queue.clear();
                         downstream.onError(ex);
+                        dispose();
                         return;
                     }
 
@@ -212,9 +213,9 @@ void drain() {
                             o = ObjectHelper.requireNonNull(mapper.apply(t), "The mapper returned a null ObservableSource");
                         } catch (Throwable ex) {
                             Exceptions.throwIfFatal(ex);
-                            dispose();
                             queue.clear();
                             downstream.onError(ex);
+                            dispose();
                             return;
                         }
 
@@ -253,8 +254,8 @@ public void onNext(U t) {
 
             @Override
             public void onError(Throwable t) {
-                parent.dispose();
                 downstream.onError(t);
+                parent.dispose();
             }
 
             @Override
@@ -379,6 +380,11 @@ public void dispose() {
             cancelled = true;
             upstream.dispose();
             observer.dispose();
+
+            if (getAndIncrement() == 0) {
+                queue.clear();
+                error.tryTerminateAndReport();
+            }
         }
 
         @SuppressWarnings("unchecked")
@@ -397,6 +403,7 @@ void drain() {
 
                     if (cancelled) {
                         queue.clear();
+                        error.tryTerminateAndReport();
                         return;
                     }
 
diff --git a/src/main/java/io/reactivex/observers/SerializedObserver.java b/src/main/java/io/reactivex/observers/SerializedObserver.java
index 31badf77f8..38aaa27820 100644
--- a/src/main/java/io/reactivex/observers/SerializedObserver.java
+++ b/src/main/java/io/reactivex/observers/SerializedObserver.java
@@ -197,4 +197,8 @@ void emitLoop() {
             }
         }
     }
+
+    public void finish () {
+        done = true;
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java
index c47b59fbcc..3299846adb 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatMapEagerTest.java
@@ -1367,4 +1367,39 @@ public void cancelNoInnerYet() {
 
         assertFalse(pp1.hasSubscribers());
     }
+
+    @Test
+    public void innerErrorAfterMainCancel() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishProcessor<Integer> pp = PublishProcessor.create();
+
+            final AtomicReference<Subscriber<? super Integer>> subs = new AtomicReference<Subscriber<? super Integer>>();
+
+            TestSubscriber<Integer> ts = pp.concatMapEager(
+                    new Function<Integer, Publisher<Integer>>() {
+                        @Override
+                        public Publisher<Integer> apply(Integer v) {
+                            return new Flowable<Integer>() {
+                                @Override
+                                protected void subscribeActual(
+                                        Subscriber<? super Integer> subscriber) {
+                                    subscriber.onSubscribe(new BooleanSubscription());
+                                    subs.set(subscriber);
+                                }
+                            };
+                        }
+                    }
+            ).test ();
+
+            pp.onNext(1);
+
+            ts.cancel();
+            subs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletableTest.java b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletableTest.java
index 258b1b9cbc..586e1d1ba1 100644
--- a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletableTest.java
+++ b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapCompletableTest.java
@@ -17,6 +17,7 @@
 
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 
 import org.junit.Test;
 import org.reactivestreams.Subscriber;
@@ -386,4 +387,36 @@ public void doneButNotEmpty() {
 
         to.assertResult();
     }
+
+    @Test
+    public void innerErrorAfterMainDispose() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishProcessor<Integer> pp = PublishProcessor.create();
+            final AtomicReference<CompletableObserver> obs = new AtomicReference<CompletableObserver>();
+
+            TestObserver<Void> to = pp.concatMapCompletable(
+                    new Function<Integer, CompletableSource>() {
+                        @Override
+                        public CompletableSource apply(Integer v) {
+                            return new CompletableSource () {
+                                @Override
+                                public void subscribe(CompletableObserver co) {
+                                    obs.set (co);
+                                }
+                            };
+                        }
+                    }
+            ).test ();
+
+            pp.onNext(1);
+
+            to.dispose();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java
index cceed98137..db22602ab1 100644
--- a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java
+++ b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapMaybeTest.java
@@ -420,4 +420,35 @@ public void run() {
         }
     }
 
+    @Test
+    public void innerErrorAfterMainCancel() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishProcessor<Integer> pp = PublishProcessor.create();
+            final AtomicReference<MaybeObserver<? super Integer>> obs = new AtomicReference<MaybeObserver<? super Integer>>();
+
+            TestSubscriber<Integer> ts = pp.concatMapMaybe(
+                    new Function<Integer, MaybeSource<Integer>>() {
+                        @Override
+                        public MaybeSource<Integer> apply(Integer v) {
+                            return new MaybeSource<Integer> () {
+                                @Override
+                                public void subscribe(MaybeObserver<? super Integer> observer) {
+                                    obs.set (observer);
+                                }
+                            };
+                        }
+                    }
+            ).test ();
+
+            pp.onNext(1);
+
+            ts.cancel();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingleTest.java b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingleTest.java
index 2de949ff40..a001dd1096 100644
--- a/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingleTest.java
+++ b/src/test/java/io/reactivex/internal/operators/mixed/FlowableConcatMapSingleTest.java
@@ -337,4 +337,38 @@ public void run() {
             ts.assertNoErrors();
         }
     }
+
+    @Test
+    public void innerErrorAfterMainCancel() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishProcessor<Integer> pp = PublishProcessor.create();
+            final AtomicReference<SingleObserver<? super Integer>> obs = new AtomicReference<SingleObserver<? super Integer>>();
+
+            TestSubscriber<Integer> ts = pp.concatMapSingle(
+                    new Function<Integer, SingleSource<Integer>>() {
+                        @Override
+                        public SingleSource<Integer> apply(Integer v) {
+                            return new Single<Integer>() {
+                                @Override
+                                protected void subscribeActual(
+                                        SingleObserver<? super Integer> observer) {
+                                    observer.onSubscribe(Disposables.empty());
+                                    obs.set(observer);
+                                }
+                            };
+                        }
+                    }
+            ).test ();
+
+            pp.onNext(1);
+
+            ts.cancel();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingleTest.java b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingleTest.java
index e22530053e..fb183537a5 100644
--- a/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingleTest.java
+++ b/src/test/java/io/reactivex/internal/operators/mixed/ObservableConcatMapSingleTest.java
@@ -212,6 +212,41 @@ protected void subscribeActual(
         }
     }
 
+    @Test
+    public void innerErrorAfterMainDispose() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishSubject<Integer> ps = PublishSubject.create();
+
+            final AtomicReference<SingleObserver<? super Integer>> obs = new AtomicReference<SingleObserver<? super Integer>>();
+
+            TestObserverEx<Integer> to = ps.concatMapSingle(
+                    new Function<Integer, SingleSource<Integer>>() {
+                        @Override
+                        public SingleSource<Integer> apply(Integer v) {
+                            return new Single<Integer>() {
+                                @Override
+                                protected void subscribeActual(
+                                        SingleObserver<? super Integer> observer) {
+                                    observer.onSubscribe(Disposables.empty());
+                                    obs.set(observer);
+                                }
+                            };
+                        }
+                    }
+            ).to(TestHelper.<Integer>testConsumer());
+
+            ps.onNext(1);
+
+            to.dispose();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
+
     @Test
     public void delayAllErrors() {
         TestObserverEx<Object> to = Observable.range(1, 5)
diff --git a/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java
index c9dbd0cda6..fc5c246bb7 100644
--- a/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java
+++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableConcatMapTest.java
@@ -18,6 +18,7 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 
 import org.junit.Test;
 
@@ -522,4 +523,83 @@ public void run() throws Exception {
 
         assertEquals(0, counter.get());
     }
+
+    @Test
+    public void innerImmediateErrorAfterMainDispose() {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishSubject<Integer> ps = PublishSubject.create();
+
+            final AtomicReference<Observer<? super Integer>> obs = new AtomicReference<Observer<? super Integer>>();
+
+            TestObserver<Integer> to = ps.concatMap(
+                    new Function<Integer, ObservableSource<Integer>>() {
+                        @Override
+                        public ObservableSource<Integer> apply(Integer v) {
+                            return new Observable<Integer>() {
+                                @Override
+                                protected void subscribeActual(
+                                        Observer<? super Integer> observer) {
+                                    observer.onSubscribe(Disposables.empty());
+                                    obs.set(observer);
+                                }
+                            };
+                        }
+                    }
+            ).test();
+
+            ps.onNext(1);
+
+            to.dispose();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
+
+    private void innerDelayErrorAfterMainDispose(boolean tillTheEnd) {
+        List<Throwable> errors = TestHelper.trackPluginErrors();
+        try {
+            final PublishSubject<Integer> ps = PublishSubject.create();
+
+            final AtomicReference<Observer<? super Integer>> obs = new AtomicReference<Observer<? super Integer>>();
+
+            TestObserver<Integer> to = ps.concatMapDelayError(
+                    new Function<Integer, ObservableSource<Integer>>() {
+                        @Override
+                        public ObservableSource<Integer> apply(Integer v) {
+                            return new Observable<Integer>() {
+                                @Override
+                                protected void subscribeActual(
+                                        Observer<? super Integer> observer) {
+                                    observer.onSubscribe(Disposables.empty());
+                                    obs.set(observer);
+                                }
+                            };
+                        }
+                    }, 2, tillTheEnd
+            ).test();
+
+            ps.onNext(1);
+
+            to.dispose();
+            obs.get().onError(new TestException("inner"));
+
+            TestHelper.assertUndeliverable(errors, 0, TestException.class, "inner");
+        } finally {
+            RxJavaPlugins.reset();
+        }
+    }
+
+    @Test
+    public void innerEndErrorAfterMainDispose() {
+        innerDelayErrorAfterMainDispose (true);
+    }
+
+    @Test
+    public void innerBoundaryErrorAfterMainDispose() {
+        innerDelayErrorAfterMainDispose (false);
+    }
 }
