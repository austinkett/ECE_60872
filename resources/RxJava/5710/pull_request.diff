diff --git a/src/main/java/rx/Single.java b/src/main/java/rx/Single.java
index 0cf0d5f06f..811ff880f5 100644
--- a/src/main/java/rx/Single.java
+++ b/src/main/java/rx/Single.java
@@ -1792,6 +1792,9 @@ public final Subscription subscribe(final Action1<? super T> onSuccess, final Ac
             public final void onError(Throwable e) {
                 try {
                     onError.call(e);
+                } catch (Throwable ex) {
+                    Exceptions.throwIfFatal(ex);
+                    RxJavaHooks.onError(new CompositeException(e, ex));
                 } finally {
                     unsubscribe();
                 }
@@ -1801,6 +1804,9 @@ public final void onError(Throwable e) {
             public final void onSuccess(T args) {
                 try {
                     onSuccess.call(args);
+                } catch (Throwable ex) {
+                    Exceptions.throwIfFatal(ex);
+                    RxJavaHooks.onError(ex);
                 } finally {
                     unsubscribe();
                 }
diff --git a/src/test/java/rx/CompletableTest.java b/src/test/java/rx/CompletableTest.java
index 3f34a983ca..03285c1fca 100644
--- a/src/test/java/rx/CompletableTest.java
+++ b/src/test/java/rx/CompletableTest.java
@@ -2827,14 +2827,27 @@ public void call(Integer integer) {
         });
     }
 
-    @Test(expected = OnErrorNotImplementedException.class)
+    @Test
     public void propagateExceptionSubscribeOneActionThrowFromOnSuccess() {
-        normal.completable.toSingleDefault(1).subscribe(new Action1<Integer>() {
+        final List<Throwable> list = Collections.synchronizedList(new ArrayList<Throwable>());
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
             @Override
-            public void call(Integer integer) {
-                throw new TestException();
+            public void call(Throwable t) {
+                list.add(t);
             }
         });
+        try {
+            normal.completable.toSingleDefault(1).subscribe(new Action1<Integer>() {
+                @Override
+                public void call(Integer integer) {
+                    throw new TestException();
+                }
+            });
+            assertTrue("TestException missing or more reported: " + list,
+                    list.size() == 1 && list.get(0) instanceof TestException);
+        } finally {
+            RxJavaHooks.reset();
+        }
     }
 
     @Test(timeout = 5000)
diff --git a/src/test/java/rx/SingleTest.java b/src/test/java/rx/SingleTest.java
index 9ae7fa0f90..ebfc0048c5 100644
--- a/src/test/java/rx/SingleTest.java
+++ b/src/test/java/rx/SingleTest.java
@@ -2291,4 +2291,162 @@ public void call() {
 
         assertTrue(name.get().startsWith("RxComputation"));
     }
+
+    @Test
+    public void subscribeLambdasSuccessSyncCrash() throws Exception {
+        final List<Throwable> list = Collections.synchronizedList(new ArrayList<Throwable>());
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                list.add(t);
+            }
+        });
+        try {
+            final AtomicReference<Throwable> onErrorRef = new AtomicReference<Throwable>();
+
+            Single.just(1)
+            .subscribe(new Action1<Integer>() {
+                @Override
+                public void call(Integer t) {
+                    throw new IllegalArgumentException();
+                }
+            }, new Action1<Throwable>() {
+                @Override
+                public void call(Throwable t) {
+                    onErrorRef.set(t);
+                }
+            });
+
+            assertNull("Should not have called onError:", onErrorRef.get());
+            assertTrue("Exception missing or more reported: " + list,
+                    list.size() == 1 && list.get(0) instanceof IllegalArgumentException);
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
+
+    @Test
+    public void subscribeLambdasSuccessAsyncCrash() throws Exception {
+        final List<Throwable> list = Collections.synchronizedList(new ArrayList<Throwable>());
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                list.add(t);
+            }
+        });
+        try {
+            final AtomicReference<Throwable> onErrorRef = new AtomicReference<Throwable>();
+
+            Single.just(1)
+            .subscribeOn(Schedulers.computation())
+            .subscribe(new Action1<Integer>() {
+                @Override
+                public void call(Integer t) {
+                    throw new IllegalArgumentException();
+                }
+            }, new Action1<Throwable>() {
+                @Override
+                public void call(Throwable t) {
+                    onErrorRef.set(t);
+                }
+            });
+
+            long start = System.currentTimeMillis();
+
+            while (System.currentTimeMillis() < start + 200) {
+                Thread.sleep(1);
+
+                assertNull("Should not have called onError:", onErrorRef.get());
+            }
+
+            assertTrue("Exception missing or more reported: " + list,
+                    list.size() == 1 && list.get(0) instanceof IllegalArgumentException);
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
+
+    @Test
+    public void subscribeLambdasErrorSyncCrash() throws Exception {
+        final List<Throwable> list = Collections.synchronizedList(new ArrayList<Throwable>());
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                list.add(t);
+            }
+        });
+        try {
+            final AtomicReference<Object> onSuccessRef = new AtomicReference<Object>();
+
+            Single.<Integer>error(new IllegalStateException())
+            .subscribe(new Action1<Integer>() {
+                @Override
+                public void call(Integer t) {
+                    onSuccessRef.set(t);
+                }
+            }, new Action1<Throwable>() {
+                @Override
+                public void call(Throwable t) {
+                    throw new IllegalArgumentException();
+                }
+            });
+
+            assertNull("Should not have called onSuccess", onSuccessRef.get());
+            assertTrue("Exception missing or more reported: " + list,
+                    list.size() == 1 && list.get(0) instanceof CompositeException);
+
+            List<Throwable> inners = ((CompositeException)list.get(0)).getExceptions();
+
+            assertTrue("" + inners.get(0), inners.get(0) instanceof IllegalStateException);
+            assertTrue("" + inners.get(1), inners.get(1) instanceof IllegalArgumentException);
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
+
+    @Test
+    public void subscribeLambdasErrorAsyncCrash() throws Exception {
+        final List<Throwable> list = Collections.synchronizedList(new ArrayList<Throwable>());
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                list.add(t);
+            }
+        });
+        try {
+            final AtomicReference<Object> onSuccessRef = new AtomicReference<Object>();
+
+            Single.<Integer>error(new IllegalStateException())
+            .subscribeOn(Schedulers.computation())
+            .subscribe(new Action1<Integer>() {
+                @Override
+                public void call(Integer t) {
+                    onSuccessRef.set(t);
+                }
+            }, new Action1<Throwable>() {
+                @Override
+                public void call(Throwable t) {
+                    throw new IllegalArgumentException();
+                }
+            });
+
+            long start = System.currentTimeMillis();
+
+            while (System.currentTimeMillis() < start + 200) {
+                Thread.sleep(1);
+
+                assertNull("Should not have called onSuccess", onSuccessRef.get());
+            }
+
+            assertTrue("Exception missing or more reported: " + list,
+                    list.size() == 1 && list.get(0) instanceof CompositeException);
+
+            List<Throwable> inners = ((CompositeException)list.get(0)).getExceptions();
+
+            assertTrue("" + inners.get(0), inners.get(0) instanceof IllegalStateException);
+            assertTrue("" + inners.get(1), inners.get(1) instanceof IllegalArgumentException);
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
 }
