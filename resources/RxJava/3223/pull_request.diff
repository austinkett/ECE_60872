diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index 5000365e75..ec06319989 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -28,7 +28,7 @@
 import io.reactivex.internal.subscriptions.EmptySubscription;
 import io.reactivex.observables.*;
 import io.reactivex.plugins.RxJavaPlugins;
-import io.reactivex.schedulers.Schedulers;
+import io.reactivex.schedulers.*;
 import io.reactivex.subscribers.SafeSubscriber;
 
 public class Observable<T> implements Publisher<T> {
@@ -794,11 +794,11 @@ public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super T
         return create(new PublisherRetryPredicate<>(this, times, predicate));
     }
 
-    public static Observable<Long> interval(long delay, TimeUnit unit) {
-        return interval(delay, unit, Schedulers.computation());
+    public static Observable<Long> timer(long delay, TimeUnit unit) {
+        return timer(delay, unit, Schedulers.computation());
     }
 
-    public static Observable<Long> interval(long delay, TimeUnit unit, Scheduler scheduler) {
+    public static Observable<Long> timer(long delay, TimeUnit unit, Scheduler scheduler) {
         if (delay < 0) {
             delay = 0L;
         }
@@ -807,7 +807,14 @@ public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super T
         
         return create(new PublisherIntervalOnceSource(delay, unit, scheduler));
     }
+    public static Observable<Long> interval(long period, TimeUnit unit) {
+        return interval(period, period, unit, Schedulers.computation());
+    }
 
+    public static Observable<Long> interval(long period, TimeUnit unit, Scheduler scheduler) {
+        return interval(period, period, unit, scheduler);
+    }
+    
     public static Observable<Long> interval(long initialDelay, long period, TimeUnit unit) {
         return interval(initialDelay, period, unit, Schedulers.computation());
     }
@@ -910,20 +917,35 @@ public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super T
         return lift(new OperatorGroupBy<>(keySelector, valueSelector, bufferSize, delayError));
     }
     
-    
     @SuppressWarnings("unchecked")
-    public static <T1, T2, R> Observable<R> zip(
-            Publisher<? extends T1> p1, Publisher<? extends T2> p2, 
-            BiFunction<? super T1, ? super T2, ? extends R> zipper) {
-        Function<Object[], R> f = a -> {
+    private static <T1, T2, R> Function<Object[], R> toFunction(BiFunction<? super T1, ? super T2, ? extends R> biFunction) {
+        return a -> {
             if (a.length != 2) {
                 throw new IllegalArgumentException("Array of size 2 expected but got " + a.length);
             }
-            return ((BiFunction<Object, Object, R>)zipper).apply(a[0], a[1]);
+            return ((BiFunction<Object, Object, R>)biFunction).apply(a[0], a[1]);
         };
-        return zipArray(f, false, bufferSize(), (Publisher<Object>)p1, (Publisher<Object>)p2);
+    }
+    
+    public static <T1, T2, R> Observable<R> zip(
+            Publisher<? extends T1> p1, Publisher<? extends T2> p2, 
+            BiFunction<? super T1, ? super T2, ? extends R> zipper) {
+        return zipArray(toFunction(zipper), false, bufferSize(), p1, p2);
+    }
+
+    public static <T1, T2, R> Observable<R> zip(
+            Publisher<? extends T1> p1, Publisher<? extends T2> p2, 
+            BiFunction<? super T1, ? super T2, ? extends R> zipper, boolean delayError) {
+        return zipArray(toFunction(zipper), delayError, bufferSize(), p1, p2);
+    }
+
+    public static <T1, T2, R> Observable<R> zip(
+            Publisher<? extends T1> p1, Publisher<? extends T2> p2, 
+            BiFunction<? super T1, ? super T2, ? extends R> zipper, boolean delayError, int bufferSize) {
+        return zipArray(toFunction(zipper), delayError, bufferSize, p1, p2);
     }
 
+    
     public static <T1, T2, T3, R> Observable<R> zip(
             Publisher<? extends T1> p1, Publisher<? extends T2> p2, Publisher<? extends T3> p3, 
             Function3<? super T1, ? super T2, ? super T3, ? extends R> zipper) {
@@ -1001,10 +1023,127 @@ public final Disposable subscribe(Consumer<? super T> onNext, Consumer<? super T
         return create(new PublisherZip<>(null, sources, zipper, bufferSize, delayError));
     }
     
-    public <U, R> Observable<R> withLatestFrom(Publisher<? extends U> other, BiFunction<? super T, ? super U, ? extends R> combiner) {
+    public final <U, R> Observable<R> withLatestFrom(Publisher<? extends U> other, BiFunction<? super T, ? super U, ? extends R> combiner) {
         Objects.requireNonNull(other);
         Objects.requireNonNull(combiner);
         
         return lift(new OperatorWithLatestFrom<>(combiner, other));
     }
+    
+    public final <U, R> Observable<R> zipWith(Publisher<? extends U> other, BiFunction<? super T, ? super U, ? extends R> zipper) {
+        return zip(this, other, zipper);
+    }
+
+    public final <U, R> Observable<R> zipWith(Publisher<? extends U> other, BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError) {
+        return zip(this, other, zipper, delayError);
+    }
+
+    public final <U, R> Observable<R> zipWith(Publisher<? extends U> other, BiFunction<? super T, ? super U, ? extends R> zipper, boolean delayError, int bufferSize) {
+        return zip(this, other, zipper, delayError, bufferSize);
+    }
+
+    public final <U, R> Observable<R> zipWith(Iterable<? extends U> other,  BiFunction<? super T, ? super U, ? extends R> zipper) {
+        return zip(this, new PublisherIterableSource<>(other), zipper);
+    }
+
+    public final <U, R> Observable<R> zipWith(Iterable<? extends U> other,  BiFunction<? super T, ? super U, ? extends R> zipper, int bufferSize) {
+        return zip(this, new PublisherIterableSource<>(other), zipper, false, bufferSize);
+    }
+
+    public static <T, R> Observable<R> zip(Publisher<? extends Publisher<? extends T>> sources, Function<Object[], R> zipper) {
+        return fromPublisher(sources).toList().flatMap(list -> {
+            return zipIterable(zipper, false, bufferSize(), list);
+        });
+    }
+    
+    public final <U> Observable<U> cast(Class<U> clazz) {
+        return map(clazz::cast);
+    }
+    
+    public final Observable<Boolean> contains(Object o) {
+        return any(v -> Objects.equals(v, o));
+    }
+    
+    /**
+     * @deprecated use {@link #any(Predicate)}
+     */
+    @Deprecated
+    public final Observable<Boolean> exists(Predicate<? super T> predicate) {
+        return any(predicate);
+    }
+    
+    public final <U> Observable<U> flatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) {
+        return flatMap(v -> new PublisherIterableSource<>(mapper.apply(v)));
+    }
+
+    public final <U> Observable<U> flatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper, int bufferSize) {
+        return flatMap(v -> new PublisherIterableSource<>(mapper.apply(v)), false, bufferSize);
+    }
+
+    public final <U> Observable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper) {
+        return concatMap(v -> new PublisherIterableSource<>(mapper.apply(v)));
+    }
+    
+    public final <U> Observable<U> concatMapIterable(Function<? super T, ? extends Iterable<? extends U>> mapper, int prefetch) {
+        return concatMap(v -> new PublisherIterableSource<>(mapper.apply(v)), prefetch);
+    }
+
+    public final <U, R> Observable<R> flatMap(Function<? super T, ? extends Publisher<? extends U>> mapper, BiFunction<? super T, ? super U, ? extends R> combiner, boolean delayError) {
+        return flatMap(mapper, combiner, delayError, bufferSize(), bufferSize());
+    }
+    
+    public final <U, R> Observable<R> flatMap(Function<? super T, ? extends Publisher<? extends U>> mapper, BiFunction<? super T, ? super U, ? extends R> combiner, int maxConcurrency) {
+        return flatMap(mapper, combiner, false, maxConcurrency, bufferSize());
+    }
+
+    public final <U, R> Observable<R> flatMap(Function<? super T, ? extends Publisher<? extends U>> mapper, BiFunction<? super T, ? super U, ? extends R> combiner, boolean delayError, int maxConcurrency) {
+        return flatMap(mapper, combiner, delayError, maxConcurrency, bufferSize());
+    }
+    
+    public <U, R> Observable<R> flatMap(Function<? super T, ? extends Publisher<? extends U>> mapper, BiFunction<? super T, ? super U, ? extends R> combiner, boolean delayError, int maxConcurrency, int bufferSize) {
+        return flatMap(t -> {
+            Observable<U> u = fromPublisher(mapper.apply(t));
+            return u.map(w -> combiner.apply(t, w));
+        }, delayError, maxConcurrency, bufferSize);
+    }
+    
+    public final <U> Observable<U> ofType(Class<U> clazz) {
+        return filter(clazz::isInstance).cast(clazz);
+    }
+
+    public final Observable<Timestamped<T>> timestamp() {
+        return timestamp(TimeUnit.MILLISECONDS, Schedulers.trampoline());
+    }
+
+    public final Observable<Timestamped<T>> timestamp(Scheduler scheduler) {
+        return timestamp(TimeUnit.MILLISECONDS, scheduler);
+    }
+
+    public final Observable<Timestamped<T>> timestamp(TimeUnit unit) {
+        return timestamp(unit, Schedulers.trampoline());
+    }
+    
+    public final Observable<Timestamped<T>> timestamp(TimeUnit unit, Scheduler scheduler) {
+        return map(v -> new Timestamped<>(v, scheduler.now(unit), unit));
+    }
+    
+    public final Observable<Try<Optional<T>>> materialize() {
+        // TODO implement
+        throw new UnsupportedOperationException();
+    }
+    
+//    @SuppressWarnings("unchecked")
+    public final Observable<T> dematerialize() {
+//        Observable<Try<Optional<T>>> m = (Observable<Try<Optional<T>>>)this;
+        // TODO implement
+        throw new UnsupportedOperationException();
+    }
+    
+    /**
+     * @deprecated use {@link #take(long)} instead
+     */
+    @Deprecated
+    public final Observable<T> limit(long n) {
+        return take(n);
+    }
 }
diff --git a/src/main/java/io/reactivex/Try.java b/src/main/java/io/reactivex/Try.java
new file mode 100644
index 0000000000..2084b53389
--- /dev/null
+++ b/src/main/java/io/reactivex/Try.java
@@ -0,0 +1,116 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex;
+
+import java.util.Objects;
+
+/**
+ * Container for either a value of type T or a Throwable.
+ *
+ * @param <T> the value type
+ */
+public final class Try<T> {
+    /** The value. */
+    final T value;
+    /** The error or null if this holds a value. */
+    final Throwable error;
+    
+    private Try(T value, Throwable error) {
+        this.value = value;
+        this.error = error;
+    }
+    
+    /**
+     * Constructs a Try instance by wrapping the given value.
+     * 
+     * @param value
+     * @return
+     */
+    public static <T> Try<T> ofValue(T value) {
+        // TODO ? Objects.requireNonNull(value);
+        return new Try<>(value, null);
+    }
+    
+    /**
+     * Constructs a Try instance by wrapping the given Throwable.
+     * 
+     * <p>Null Throwables are replaced by NullPointerException instance in this Try.
+     * 
+     * @param e
+     * @return
+     */
+    public static <T> Try<T> ofError(Throwable e) {
+        // TODO ? Objects.requireNonNull(e);
+        return new Try<>(null, e != null ? e : new NullPointerException());
+    }
+    
+    /**
+     * Returns the value or null if the value is actually null or if this Try holds an error instead.
+     * @return
+     * @see #hasValue()
+     */
+    public T value() {
+        return value;
+    }
+    
+    /**
+     * Returns the error or null if this Try holds a value instead.
+     * 
+     * @return
+     * 
+     */
+    public Throwable error() {
+        return error;
+    }
+    
+    /**
+     * Returns true if this Try holds an error.
+     * @return
+     */
+    public boolean hasError() {
+        return error != null;
+    }
+    
+    /**
+     * Returns true if this Try holds a value.
+     * @return
+     */
+    public boolean hasValue() {
+        return error == null;
+    }
+    
+    @Override
+    public boolean equals(Object other) {
+        if (other instanceof Try) {
+            
+            Try<?> o = (Try<?>) other;
+            return Objects.equals(value, o.value)
+                    && Objects.equals(error, o.error);
+        }
+        return false;
+    }
+    
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(value) + Objects.hashCode(error);
+    }
+    
+    @Override
+    public String toString() {
+        if (error != null) {
+            return "Try[" + error + "]";
+        }
+        return "Try[" + value + "]";
+    }
+}
diff --git a/src/main/java/io/reactivex/internal/operators/PublisherZip.java b/src/main/java/io/reactivex/internal/operators/PublisherZip.java
index eea7ba88aa..fd5b52c02b 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherZip.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherZip.java
@@ -70,7 +70,6 @@ public void subscribe(Subscriber<? super R> s) {
         }
         
         ZipCoordinator<T, R> zc = new ZipCoordinator<>(s, zipper, count, delayError);
-        s.onSubscribe(zc);
         zc.subscribe(sources, bufferSize);
     }
     
@@ -109,6 +108,7 @@ public void subscribe(Publisher<? extends T>[] sources, int bufferSize) {
             }
             // this makes sure the contents of the subscribers array is visible
             REQUESTED.lazySet(this, 0);
+            actual.onSubscribe(this);
             for (int i = 0; i < len; i++) {
                 if (cancelled) {
                     return;
@@ -162,9 +162,9 @@ public void drain() {
                 boolean unbounded = r == Long.MAX_VALUE;
                 long e = 0;
                 
+                outer:
                 while (r != 0) {
                     int i = 0;
-                    boolean full = true;
                     for (ZipSubscriber<T, R> z : zs) {
                         boolean d = z.done;
                         T v = z.queue.peek();
@@ -175,21 +175,18 @@ public void drain() {
                         }
                         
                         if (empty) {
-                            full = false;
-                            break;
+                            break outer;
                         }
                         
                         os[i] = v;
                         i++;
                     }
                     
-                    if (full) {
-                        // consume the row
-                        for (ZipSubscriber<T, R> z : zs) {
-                            z.queue.poll();
-                        }
+                    // consume the row
+                    for (ZipSubscriber<T, R> z : zs) {
+                        z.queue.poll();
                     }
-                    
+
                     R v;
                     try {
                         v = zipper.apply(os.clone());
@@ -317,6 +314,8 @@ public void onSubscribe(Subscription s) {
                     lazySet(bufferSize);
                     s.request(bufferSize);
                     return;
+                } else {
+                    s.cancel();
                 }
             }
             
diff --git a/src/main/java/io/reactivex/internal/queue/BaseArrayQueue.java b/src/main/java/io/reactivex/internal/queue/BaseArrayQueue.java
index ecba9336b1..e7e01c7bdc 100644
--- a/src/main/java/io/reactivex/internal/queue/BaseArrayQueue.java
+++ b/src/main/java/io/reactivex/internal/queue/BaseArrayQueue.java
@@ -29,7 +29,7 @@
     protected final int mask;
     public BaseArrayQueue(int capacity) {
         super(Pow2.roundToPowerOfTwo(capacity));
-        this.mask = size() - 1;
+        this.mask = length() - 1;
     }
     @Override
     public Iterator<E> iterator() {
