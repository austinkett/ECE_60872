diff --git a/src/main/java/rx/subjects/ReplaySubject.java b/src/main/java/rx/subjects/ReplaySubject.java
index d6d9351a8b..a842baedbf 100644
--- a/src/main/java/rx/subjects/ReplaySubject.java
+++ b/src/main/java/rx/subjects/ReplaySubject.java
@@ -26,6 +26,7 @@
 import rx.exceptions.Exceptions;
 import rx.internal.operators.BackpressureUtils;
 import rx.internal.util.RxJavaPluginUtils;
+import rx.schedulers.Schedulers;
 
 /**
  * Subject that buffers all items it observes and replays them to any {@link Observer} that subscribes.
@@ -110,6 +111,24 @@
         ReplayState<T> state = new ReplayState<T>(buffer);
         return new ReplaySubject<T>(state);
     }
+    /**
+     * Creates an unbounded replay subject with the time-bounded-implementation for testing purposes.
+     * <p>
+     * This variant behaves like the regular unbounded {@code ReplaySubject} created via {@link #create()} but
+     * uses the structures of the bounded-implementation. This is by no means intended for the replacement of
+     * the original, array-backed and unbounded {@code ReplaySubject} due to the additional overhead of the
+     * linked-list based internal buffer. The sole purpose is to allow testing and reasoning about the behavior
+     * of the bounded implementations without the interference of the eviction policies.
+     *
+     * @param <T>
+     *          the type of items observed and emitted by the Subject
+     * @return the created subject
+     */
+    /* public */ static <T> ReplaySubject<T> createUnboundedTime() {
+        ReplayBuffer<T> buffer = new ReplaySizeAndTimeBoundBuffer<T>(Integer.MAX_VALUE, Long.MAX_VALUE, Schedulers.immediate());
+        ReplayState<T> state = new ReplayState<T>(buffer);
+        return new ReplaySubject<T>(state);
+    }
     /**
      * Creates a size-bounded replay subject.
      * <p>
@@ -431,14 +450,7 @@ public void onNext(T t) {
             
             b.next(t);
             for (ReplayProducer<T> rp : get()) {
-                if (rp.caughtUp) {
-                    rp.actual.onNext(t);
-                } else {
-                    if (b.drain(rp)) {
-                        rp.caughtUp = true;
-                        rp.node = null;
-                    }
-                }
+                b.drain(rp);
             }
         }
 
@@ -451,14 +463,7 @@ public void onError(Throwable e) {
             List<Throwable> errors = null;
             for (ReplayProducer<T> rp : getAndSet(TERMINATED)) {
                 try {
-                    if (rp.caughtUp) {
-                        rp.actual.onError(e);
-                    } else {
-                        if (b.drain(rp)) {
-                            rp.caughtUp = true;
-                            rp.node = null;
-                        }
-                    }
+                    b.drain(rp);
                 } catch (Throwable ex) {
                     if (errors == null) {
                         errors = new ArrayList<Throwable>();
@@ -477,14 +482,7 @@ public void onCompleted() {
             
             b.complete();
             for (ReplayProducer<T> rp : getAndSet(TERMINATED)) {
-                if (rp.caughtUp) {
-                    rp.actual.onCompleted();
-                } else {
-                    if (b.drain(rp)) {
-                        rp.caughtUp = true;
-                        rp.node = null;
-                    }
-                }
+                b.drain(rp);
             }
         }
         
@@ -508,7 +506,7 @@ boolean isTerminated() {
         
         void complete();
         
-        boolean drain(ReplayProducer<T> rp);
+        void drain(ReplayProducer<T> rp);
         
         boolean isComplete();
         
@@ -585,9 +583,9 @@ public void complete() {
         }
 
         @Override
-        public boolean drain(ReplayProducer<T> rp) {
+        public void drain(ReplayProducer<T> rp) {
             if (rp.getAndIncrement() != 0) {
-                return false;
+                return;
             }
             
             int missed = 1;
@@ -610,7 +608,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 while (e != r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -624,7 +622,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                     
                     if (empty) {
@@ -649,7 +647,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 if (e == r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -663,7 +661,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                 }
                 
@@ -679,7 +677,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 
                 missed = rp.addAndGet(-missed);
                 if (missed == 0) {
-                    return r == Long.MAX_VALUE;
+                    return;
                 }
             }
         }
@@ -799,9 +797,9 @@ public void complete() {
         }
 
         @Override
-        public boolean drain(ReplayProducer<T> rp) {
+        public void drain(ReplayProducer<T> rp) {
             if (rp.getAndIncrement() != 0) {
-                return false;
+                return;
             }
             
             final Subscriber<? super T> a = rp.actual;
@@ -822,7 +820,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 while (e != r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -837,7 +835,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                     
                     if (empty) {
@@ -853,7 +851,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 if (e == r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -867,7 +865,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                 }
                 
@@ -881,7 +879,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 
                 missed = rp.addAndGet(-missed);
                 if (missed == 0) {
-                    return r == Long.MAX_VALUE;
+                    return;
                 }
             }
         }
@@ -1051,9 +1049,9 @@ void evictFinal() {
         }
         
         @Override
-        public boolean drain(ReplayProducer<T> rp) {
+        public void drain(ReplayProducer<T> rp) {
             if (rp.getAndIncrement() != 0) {
-                return false;
+                return;
             }
             
             final Subscriber<? super T> a = rp.actual;
@@ -1074,7 +1072,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 while (e != r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -1089,7 +1087,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                     
                     if (empty) {
@@ -1105,7 +1103,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 if (e == r) {
                     if (a.isUnsubscribed()) {
                         rp.node = null;
-                        return false;
+                        return;
                     }
                     
                     boolean d = done;
@@ -1119,7 +1117,7 @@ public boolean drain(ReplayProducer<T> rp) {
                         } else {
                             a.onCompleted();
                         }
-                        return false;
+                        return;
                     }
                 }
                 
@@ -1133,7 +1131,7 @@ public boolean drain(ReplayProducer<T> rp) {
                 
                 missed = rp.addAndGet(-missed);
                 if (missed == 0) {
-                    return r == Long.MAX_VALUE;
+                    return;
                 }
             }
         }
@@ -1226,14 +1224,6 @@ public boolean isEmpty() {
         /** Holds the back-reference to the replay state object. */
         final ReplayState<T> state;
 
-        /** 
-         * Indicates this Subscriber runs unbounded and the <b>source</b>-triggered
-         * buffer.drain() has emitted all available values.
-         * <p>
-         * This field has to be read and written from the source emitter's thread only.
-         */
-        boolean caughtUp;
-        
         /** 
          * Unbounded buffer.drain() uses this field to remember the absolute index of
          * values replayed to this Subscriber.
@@ -1276,6 +1266,5 @@ public void request(long n) {
                 throw new IllegalArgumentException("n >= required but it was " + n);
             }
         }
-        
     }
 }
diff --git a/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java b/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java
index 8cbe051594..1c29ee6348 100644
--- a/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java
+++ b/src/test/java/rx/subjects/ReplaySubjectBoundedConcurrencyTest.java
@@ -17,20 +17,16 @@
 
 import static org.junit.Assert.assertEquals;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.BrokenBarrierException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.CyclicBarrier;
-import java.util.concurrent.TimeUnit;
+import java.util.*;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.junit.*;
 
 import rx.*;
+import rx.Observable;
 import rx.Observable.OnSubscribe;
+import rx.Observer;
 import rx.functions.*;
 import rx.observers.TestSubscriber;
 import rx.schedulers.Schedulers;
@@ -159,86 +155,33 @@ public void onNext(Long args) {
     }
 
     @Test
-    public void testReplaySubjectConcurrentSubscriptions() throws InterruptedException {
-        final ReplaySubject<Long> replay = ReplaySubject.createUnbounded();
-        Thread source = new Thread(new Runnable() {
-
-            @Override
-            public void run() {
-                Observable.create(new OnSubscribe<Long>() {
-
-                    @Override
-                    public void call(Subscriber<? super Long> o) {
-                        System.out.println("********* Start Source Data ***********");
-                        for (long l = 1; l <= 10000; l++) {
-                            o.onNext(l);
-                        }
-                        System.out.println("********* Finished Source Data ***********");
-                        o.onCompleted();
-                    }
-                }).subscribe(replay);
-            }
-        });
-
-        // used to collect results of each thread
-        final List<List<Long>> listOfListsOfValues = Collections.synchronizedList(new ArrayList<List<Long>>());
-        final List<Thread> threads = Collections.synchronizedList(new ArrayList<Thread>());
-
-        for (int i = 1; i <= 200; i++) {
-            final int count = i;
-            if (count == 20) {
-                // start source data after we have some already subscribed
-                // and while others are in process of subscribing
-                source.start();
-            }
-            if (count == 100) {
-                // wait for source to finish then keep adding after it's done
-                source.join();
-            }
-            Thread t = new Thread(new Runnable() {
-
-                @Override
-                public void run() {
-                    List<Long> values = replay.toList().toBlocking().last();
-                    listOfListsOfValues.add(values);
-                    System.out.println("Finished thread: " + count);
-                }
-            });
-            t.start();
-            System.out.println("Started thread: " + i);
-            threads.add(t);
-        }
-
-        // wait for all threads to complete
-        for (Thread t : threads) {
-            t.join();
-        }
-
-        // assert all threads got the same results
-        List<Long> sums = new ArrayList<Long>();
-        for (List<Long> values : listOfListsOfValues) {
-            long v = 0;
-            for (long l : values) {
-                v += l;
-            }
-            sums.add(v);
-        }
-
-        long expected = sums.get(0);
-        boolean success = true;
-        for (long l : sums) {
-            if (l != expected) {
-                success = false;
-                System.out.println("FAILURE => Expected " + expected + " but got: " + l);
-            }
+    public void unboundedReplaySubjectConcurrentSubscriptionsLoop() throws Exception {
+        for (int i = 0; i < 50; i++) {
+            System.out.println(i + " --------------------------------------------------------------- ");
+            unboundedReplaySubjectConcurrentSubscriptions();
         }
+    }
+    
+    @Test
+    public void unboundedReplaySubjectConcurrentSubscriptions() throws InterruptedException {
+        final ReplaySubject<Long> replay = ReplaySubject.createUnbounded();
+        
+        ReplaySubjectConcurrencyTest.concurrencyTest(replay);
+    }
 
-        if (success) {
-            System.out.println("Success! " + sums.size() + " each had the same sum of " + expected);
-        } else {
-            throw new RuntimeException("Concurrency Bug");
+    @Test
+    public void unboundedTimeReplaySubjectConcurrentSubscriptionsLoop() throws Exception {
+        for (int i = 0; i < 50; i++) {
+            System.out.println(i + " --------------------------------------------------------------- ");
+            unboundedTimeReplaySubjectConcurrentSubscriptions();
         }
-
+    }
+    
+    @Test
+    public void unboundedTimeReplaySubjectConcurrentSubscriptions() throws InterruptedException {
+        final ReplaySubject<Long> replay = ReplaySubject.createUnboundedTime();
+        
+        ReplaySubjectConcurrencyTest.concurrencyTest(replay);
     }
 
     /**
diff --git a/src/test/java/rx/subjects/ReplaySubjectConcurrencyTest.java b/src/test/java/rx/subjects/ReplaySubjectConcurrencyTest.java
index e0744ef1d2..593e96c528 100644
--- a/src/test/java/rx/subjects/ReplaySubjectConcurrencyTest.java
+++ b/src/test/java/rx/subjects/ReplaySubjectConcurrencyTest.java
@@ -154,9 +154,22 @@ public void onNext(Long args) {
         slowThread.join();
     }
 
+    @Test
+    public void testReplaySubjectConcurrentSubscriptionsLoop() throws Exception {
+        for (int i = 0; i < 50; i++) {
+            System.out.println(i + " --------------------------------------------------------------- ");
+            testReplaySubjectConcurrentSubscriptions();
+        }
+    }
+    
     @Test
     public void testReplaySubjectConcurrentSubscriptions() throws InterruptedException {
         final ReplaySubject<Long> replay = ReplaySubject.create();
+        
+        concurrencyTest(replay);
+    }
+    
+    public static void concurrencyTest(final ReplaySubject<Long> replay) throws InterruptedException {
         Thread source = new Thread(new Runnable() {
 
             @Override
@@ -210,12 +223,23 @@ public void run() {
             t.join();
         }
 
+        StringBuilder sb = new StringBuilder();
+
         // assert all threads got the same results
         List<Long> sums = new ArrayList<Long>();
         for (List<Long> values : listOfListsOfValues) {
             long v = 0;
-            for (long l : values) {
+            if (values.size() != 10000) {
+                sb.append("A list is longer than expected: " + values.size() + "\n");
+            }
+            int i = 0;
+            for (Long l : values) {
+                if (l == null) {
+                    sb.append("Element at  " + i + " is null\n");
+                    break;
+                }
                 v += l;
+                i++;
             }
             sums.add(v);
         }
@@ -225,16 +249,15 @@ public void run() {
         for (long l : sums) {
             if (l != expected) {
                 success = false;
-                System.out.println("FAILURE => Expected " + expected + " but got: " + l);
+                sb.append("FAILURE => Expected " + expected + " but got: " + l + "\n");
             }
         }
 
         if (success) {
             System.out.println("Success! " + sums.size() + " each had the same sum of " + expected);
         } else {
-            throw new RuntimeException("Concurrency Bug");
+            Assert.fail(sb.toString());
         }
-
     }
 
     /**
