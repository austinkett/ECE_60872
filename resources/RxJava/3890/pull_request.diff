diff --git a/src/main/java/rx/internal/operators/OperatorFilter.java b/src/main/java/rx/internal/operators/OperatorFilter.java
index 3704dbc4a3..15f1a48ec9 100644
--- a/src/main/java/rx/internal/operators/OperatorFilter.java
+++ b/src/main/java/rx/internal/operators/OperatorFilter.java
@@ -15,15 +15,17 @@
  */
 package rx.internal.operators;
 
+import rx.*;
 import rx.Observable.Operator;
-import rx.Subscriber;
 import rx.exceptions.*;
 import rx.functions.Func1;
+import rx.internal.util.RxJavaPluginUtils;
 
 /**
  * Filters an Observable by discarding any items it emits that do not meet some test.
  * <p>
  * <img width="640" src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/filter.png" alt="">
+ * @param <T> the value type
  */
 public final class OperatorFilter<T> implements Operator<T, T> {
 
@@ -35,33 +37,67 @@ public OperatorFilter(Func1<? super T, Boolean> predicate) {
 
     @Override
     public Subscriber<? super T> call(final Subscriber<? super T> child) {
-        return new Subscriber<T>(child) {
+        FilterSubscriber<T> parent = new FilterSubscriber<T>(child, predicate);
+        child.add(parent);
+        return parent;
+    }
 
-            @Override
-            public void onCompleted() {
-                child.onCompleted();
-            }
+    static final class FilterSubscriber<T> extends Subscriber<T> {
+        
+        final Subscriber<? super T> actual;
+        
+        final Func1<? super T, Boolean> predicate;
 
-            @Override
-            public void onError(Throwable e) {
-                child.onError(e);
+        boolean done;
+        
+        public FilterSubscriber(Subscriber<? super T> actual, Func1<? super T, Boolean> predicate) {
+            this.actual = actual;
+            this.predicate = predicate;
+        }
+        
+        @Override
+        public void onNext(T t) {
+            boolean result;
+            
+            try {
+                result = predicate.call(t);
+            } catch (Throwable ex) {
+                Exceptions.throwIfFatal(ex);
+                unsubscribe();
+                onError(OnErrorThrowable.addValueAsLastCause(ex, t));
+                return;
             }
-
-            @Override
-            public void onNext(T t) {
-                try {
-                    if (predicate.call(t)) {
-                        child.onNext(t);
-                    } else {
-                        // TODO consider a more complicated version that batches these
-                        request(1);
-                    }
-                } catch (Throwable e) {
-                    Exceptions.throwOrReport(e, child, t);
-                }
+            
+            if (result) {
+                actual.onNext(t);
+            } else {
+                request(1);
             }
-
-        };
+        }
+        
+        @Override
+        public void onError(Throwable e) {
+            if (done) {
+                RxJavaPluginUtils.handleException(e);
+                return;
+            }
+            done = true;
+            
+            actual.onError(e);
+        }
+        
+        
+        @Override
+        public void onCompleted() {
+            if (done) {
+                return;
+            }
+            actual.onCompleted();
+        }
+        @Override
+        public void setProducer(Producer p) {
+            super.setProducer(p);
+            actual.setProducer(p);
+        }
     }
-
 }
diff --git a/src/main/java/rx/internal/operators/OperatorMap.java b/src/main/java/rx/internal/operators/OperatorMap.java
index 90925c2764..a8a33178ca 100644
--- a/src/main/java/rx/internal/operators/OperatorMap.java
+++ b/src/main/java/rx/internal/operators/OperatorMap.java
@@ -15,16 +15,20 @@
  */
 package rx.internal.operators;
 
+import rx.*;
 import rx.Observable.Operator;
-import rx.Subscriber;
-import rx.exceptions.Exceptions;
+import rx.exceptions.*;
 import rx.functions.Func1;
+import rx.internal.util.RxJavaPluginUtils;
 
 /**
  * Applies a function of your choosing to every item emitted by an {@code Observable}, and emits the results of
  * this transformation as a new {@code Observable}.
  * <p>
  * <img width="640" height="305" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/map.png" alt="">
+ * 
+ * @param <T> the input value type
+ * @param <R> the return value type
  */
 public final class OperatorMap<T, R> implements Operator<R, T> {
 
@@ -36,28 +40,64 @@ public OperatorMap(Func1<? super T, ? extends R> transformer) {
 
     @Override
     public Subscriber<? super T> call(final Subscriber<? super R> o) {
-        return new Subscriber<T>(o) {
+        MapSubscriber<T, R> parent = new MapSubscriber<T, R>(o, transformer);
+        o.add(parent);
+        return parent;
+    }
+    
+    static final class MapSubscriber<T, R> extends Subscriber<T> {
+        
+        final Subscriber<? super R> actual;
+        
+        final Func1<? super T, ? extends R> mapper;
 
-            @Override
-            public void onCompleted() {
-                o.onCompleted();
+        boolean done;
+        
+        public MapSubscriber(Subscriber<? super R> actual, Func1<? super T, ? extends R> mapper) {
+            this.actual = actual;
+            this.mapper = mapper;
+        }
+        
+        @Override
+        public void onNext(T t) {
+            R result;
+            
+            try {
+                result = mapper.call(t);
+            } catch (Throwable ex) {
+                Exceptions.throwIfFatal(ex);
+                unsubscribe();
+                onError(OnErrorThrowable.addValueAsLastCause(ex, t));
+                return;
             }
-
-            @Override
-            public void onError(Throwable e) {
-                o.onError(e);
+            
+            actual.onNext(result);
+        }
+        
+        @Override
+        public void onError(Throwable e) {
+            if (done) {
+                RxJavaPluginUtils.handleException(e);
+                return;
             }
-
-            @Override
-            public void onNext(T t) {
-                try {
-                    o.onNext(transformer.call(t));
-                } catch (Throwable e) {
-                    Exceptions.throwOrReport(e, this, t);
-                }
+            done = true;
+            
+            actual.onError(e);
+        }
+        
+        
+        @Override
+        public void onCompleted() {
+            if (done) {
+                return;
             }
-
-        };
+            actual.onCompleted();
+        }
+        
+        @Override
+        public void setProducer(Producer p) {
+            actual.setProducer(p);
+        }
     }
 
 }
diff --git a/src/test/java/rx/internal/operators/OperatorFilterTest.java b/src/test/java/rx/internal/operators/OperatorFilterTest.java
index f1f086666c..543dc06cf7 100644
--- a/src/test/java/rx/internal/operators/OperatorFilterTest.java
+++ b/src/test/java/rx/internal/operators/OperatorFilterTest.java
@@ -28,6 +28,7 @@
 import rx.functions.*;
 import rx.internal.util.RxRingBuffer;
 import rx.observers.TestSubscriber;
+import rx.subjects.PublishSubject;
 
 public class OperatorFilterTest {
 
@@ -54,6 +55,7 @@ public Boolean call(String t1) {
 
     /**
      * Make sure we are adjusting subscriber.request() for filtered items
+     * @throws InterruptedException on interrupt
      */
     @Test(timeout = 500)
     public void testWithBackpressure() throws InterruptedException {
@@ -100,6 +102,7 @@ public void onNext(String t) {
 
     /**
      * Make sure we are adjusting subscriber.request() for filtered items
+     * @throws InterruptedException on interrupt
      */
     @Test(timeout = 500000)
     public void testWithBackpressure2() throws InterruptedException {
@@ -167,4 +170,28 @@ public void call(Integer t) {
             }
         }
     }
+
+    @Test
+    public void functionCrashUnsubscribes() {
+        
+        PublishSubject<Integer> ps = PublishSubject.create();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();
+        
+        ps.filter(new Func1<Integer, Boolean>() {
+            @Override
+            public Boolean call(Integer v) { 
+                throw new TestException(); 
+            }
+        }).unsafeSubscribe(ts);
+        
+        Assert.assertTrue("Not subscribed?", ps.hasObservers());
+        
+        ps.onNext(1);
+        
+        Assert.assertFalse("Subscribed?", ps.hasObservers());
+        
+        ts.assertError(TestException.class);
+    }
+
 }
diff --git a/src/test/java/rx/internal/operators/OperatorMapTest.java b/src/test/java/rx/internal/operators/OperatorMapTest.java
index d79d5863b6..18e3e523e3 100644
--- a/src/test/java/rx/internal/operators/OperatorMapTest.java
+++ b/src/test/java/rx/internal/operators/OperatorMapTest.java
@@ -16,28 +16,21 @@
 package rx.internal.operators;
 
 import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.*;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.NoSuchElementException;
+import java.util.*;
 
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
+import org.junit.*;
+import org.mockito.*;
 
 import rx.Observable;
 import rx.Observer;
 import rx.Subscriber;
-import rx.exceptions.OnErrorNotImplementedException;
-import rx.functions.Action1;
-import rx.functions.Func1;
-import rx.functions.Func2;
-import rx.internal.operators.OperatorMap;
+import rx.exceptions.*;
+import rx.functions.*;
+import rx.observers.TestSubscriber;
 import rx.schedulers.Schedulers;
+import rx.subjects.PublishSubject;
 
 public class OperatorMapTest {
 
@@ -339,4 +332,27 @@ public void call(String s) {
             }
         });
     }
+    
+    @Test
+    public void functionCrashUnsubscribes() {
+        
+        PublishSubject<Integer> ps = PublishSubject.create();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();
+        
+        ps.map(new Func1<Integer, Integer>() {
+            @Override
+            public Integer call(Integer v) { 
+                throw new TestException(); 
+            }
+        }).unsafeSubscribe(ts);
+        
+        Assert.assertTrue("Not subscribed?", ps.hasObservers());
+        
+        ps.onNext(1);
+        
+        Assert.assertFalse("Subscribed?", ps.hasObservers());
+        
+        ts.assertError(TestException.class);
+    }
 }
