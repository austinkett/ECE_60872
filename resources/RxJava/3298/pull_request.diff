diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index f7f21b8856..f754d2210e 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -551,6 +551,9 @@ public static int bufferSize() {
     }
 
     public static Observable<Integer> range(int start, int count) {
+        if (count < 0) {
+            throw new IllegalArgumentException("count >= required but it was " + count);
+        } else
         if (count == 0) {
             return empty();
         } else
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java
index 424e2a01d3..22025c2871 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorFlatMap.java
@@ -518,23 +518,13 @@ void reportError(Queue<Throwable> q) {
             while ((t = q.poll()) != null) {
                 if (count == 0) {
                     ex = t;
-                } else
-                if (count == 1) {
-                    Throwable e = ex;
-                    ex = new RuntimeException("Multiple exceptions");
-                    ex.addSuppressed(e);
-                    ex.addSuppressed(t);
                 } else {
                     ex.addSuppressed(t);
                 }
                 
                 count++;
             }
-            if (count > 1) {
-                actual.onError(ex);
-            } else {
-                actual.onError(ex.getSuppressed()[0]);
-            }
+            actual.onError(ex);
         }
         
         void unsubscribe() {
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorPublish.java b/src/main/java/io/reactivex/internal/operators/OperatorPublish.java
index 9260b83ad5..d90cb3ca6a 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorPublish.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorPublish.java
@@ -22,6 +22,7 @@
 import io.reactivex.Observable;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.internal.queue.SpscArrayQueue;
+import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.internal.util.NotificationLite;
 import io.reactivex.observables.ConnectableObservable;
 import io.reactivex.plugins.RxJavaPlugins;
@@ -209,7 +210,21 @@ public void connect(Consumer<? super Disposable> connection) {
         /** Guarded by this. */
         boolean missed;
         
-        Subscription s;
+        volatile Subscription s;
+        static final AtomicReferenceFieldUpdater<PublishSubscriber, Subscription> S =
+                AtomicReferenceFieldUpdater.newUpdater(PublishSubscriber.class, Subscription.class, "s");
+        
+        static final Subscription CANCELLED = new Subscription() {
+            @Override
+            public void request(long n) {
+                
+            }
+            
+            @Override
+            public void cancel() {
+                
+            }
+        };
         
         public PublishSubscriber(AtomicReference<PublishSubscriber<T>> current, int bufferSize) {
             this.queue = new SpscArrayQueue<>(bufferSize);
@@ -222,8 +237,20 @@ public PublishSubscriber(AtomicReference<PublishSubscriber<T>> current, int buff
         
         @Override
         public void dispose() {
-            producers.getAndSet(TERMINATED);
-            current.compareAndSet(PublishSubscriber.this, null);
+            if (producers.get() != TERMINATED) {
+                InnerProducer[] ps = producers.getAndSet(TERMINATED);
+                if (ps != TERMINATED) {
+                    current.compareAndSet(PublishSubscriber.this, null);
+                    
+                    Subscription a = s;
+                    if (a != CANCELLED) {
+                        a = S.getAndSet(this, CANCELLED);
+                        if (a != CANCELLED && a != null) {
+                            a.cancel();
+                        }
+                    }
+                }
+            }
         }
         
         public boolean isDisposed() {
@@ -232,12 +259,13 @@ public boolean isDisposed() {
         
         @Override
         public void onSubscribe(Subscription s) {
-            if (this.s != null) {
+            if (!S.compareAndSet(this, null, s)) {
                 s.cancel();
-                RxJavaPlugins.onError(new IllegalStateException("Subscription already set!"));
+                if (this.s != CANCELLED) {
+                    SubscriptionHelper.reportSubscriptionSet();
+                }
                 return;
             }
-            this.s = s;
             s.request(bufferSize);
         }
         
diff --git a/src/main/java/io/reactivex/internal/subscribers/CancelledSubscriber.java b/src/main/java/io/reactivex/internal/subscribers/CancelledSubscriber.java
index c00df6f9ac..6ff320d64d 100644
--- a/src/main/java/io/reactivex/internal/subscribers/CancelledSubscriber.java
+++ b/src/main/java/io/reactivex/internal/subscribers/CancelledSubscriber.java
@@ -24,6 +24,11 @@
 public enum CancelledSubscriber implements Subscriber<Object> {
     INSTANCE;
     
+    @SuppressWarnings("unchecked")
+    public static <T> Subscriber<T> instance() {
+        return (Subscriber<T>)INSTANCE;
+    }
+    
     @Override
     public void onSubscribe(Subscription s) {
         s.cancel();
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeRefCountTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeRefCountTest.java
new file mode 100644
index 0000000000..ab4be92e47
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeRefCountTest.java
@@ -0,0 +1,475 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.*;
+
+import org.junit.Test;
+import org.mockito.InOrder;
+import org.reactivestreams.*;
+
+import io.reactivex.Observable;
+import io.reactivex.TestHelper;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.subscribers.CancelledSubscriber;
+import io.reactivex.schedulers.*;
+import io.reactivex.subjects.ReplaySubject;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OnSubscribeRefCountTest {
+
+    @Test
+    public void testRefCountAsync() {
+        final AtomicInteger subscribeCount = new AtomicInteger();
+        final AtomicInteger nextCount = new AtomicInteger();
+        Observable<Long> r = Observable.interval(0, 5, TimeUnit.MILLISECONDS)
+                .doOnSubscribe(s -> subscribeCount.incrementAndGet())
+                .doOnNext(l -> nextCount.incrementAndGet())
+                .publish().refCount();
+
+        final AtomicInteger receivedCount = new AtomicInteger();
+        Disposable s1 = r.subscribe(l -> receivedCount.incrementAndGet());
+        
+        Disposable s2 = r.subscribe();
+
+        // give time to emit
+        try {
+            Thread.sleep(52);
+        } catch (InterruptedException e) {
+        }
+
+        // now unsubscribe
+        s2.dispose(); // unsubscribe s2 first as we're counting in 1 and there can be a race between unsubscribe and one subscriber getting a value but not the other
+        s1.dispose();
+
+        System.out.println("onNext: " + nextCount.get());
+
+        // should emit once for both subscribers
+        assertEquals(nextCount.get(), receivedCount.get());
+        // only 1 subscribe
+        assertEquals(1, subscribeCount.get());
+    }
+
+    @Test
+    public void testRefCountSynchronous() {
+        final AtomicInteger subscribeCount = new AtomicInteger();
+        final AtomicInteger nextCount = new AtomicInteger();
+        Observable<Integer> r = Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9)
+                .doOnSubscribe(s -> subscribeCount.incrementAndGet())
+                .doOnNext(l -> nextCount.incrementAndGet())
+                .publish().refCount();
+
+        final AtomicInteger receivedCount = new AtomicInteger();
+        Disposable s1 = r.subscribe(l -> receivedCount.incrementAndGet());
+
+        Disposable s2 = r.subscribe();
+
+        // give time to emit
+        try {
+            Thread.sleep(50);
+        } catch (InterruptedException e) {
+        }
+
+        // now unsubscribe
+        s2.dispose(); // unsubscribe s2 first as we're counting in 1 and there can be a race between unsubscribe and one subscriber getting a value but not the other
+        s1.dispose();
+
+        System.out.println("onNext Count: " + nextCount.get());
+
+        // it will emit twice because it is synchronous
+        assertEquals(nextCount.get(), receivedCount.get() * 2);
+        // it will subscribe twice because it is synchronous
+        assertEquals(2, subscribeCount.get());
+    }
+
+    @Test
+    public void testRefCountSynchronousTake() {
+        final AtomicInteger nextCount = new AtomicInteger();
+        Observable<Integer> r = Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9)
+                .doOnNext(l -> {
+                        System.out.println("onNext --------> " + l);
+                        nextCount.incrementAndGet();
+                })
+                .take(4)
+                .publish().refCount();
+
+        final AtomicInteger receivedCount = new AtomicInteger();
+        r.subscribe(l -> receivedCount.incrementAndGet());
+
+        System.out.println("onNext: " + nextCount.get());
+
+        assertEquals(4, receivedCount.get());
+        assertEquals(4, receivedCount.get());
+    }
+
+    @Test
+    public void testRepeat() {
+        final AtomicInteger subscribeCount = new AtomicInteger();
+        final AtomicInteger unsubscribeCount = new AtomicInteger();
+        Observable<Long> r = Observable.interval(0, 1, TimeUnit.MILLISECONDS)
+                .doOnSubscribe(s -> {
+                        System.out.println("******************************* Subscribe received");
+                        // when we are subscribed
+                        subscribeCount.incrementAndGet();
+                })
+                .doOnCancel(() -> {
+                        System.out.println("******************************* Unsubscribe received");
+                        // when we are unsubscribed
+                        unsubscribeCount.incrementAndGet();
+                })
+                .publish().refCount();
+
+        for (int i = 0; i < 10; i++) {
+            TestSubscriber<Long> ts1 = new TestSubscriber<>();
+            TestSubscriber<Long> ts2 = new TestSubscriber<>();
+            r.subscribe(ts1);
+            r.subscribe(ts2);
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+            }
+            ts1.dispose();
+            ts2.dispose();
+            ts1.assertNoErrors();
+            ts2.assertNoErrors();
+            assertTrue(ts1.valueCount() > 0);
+            assertTrue(ts2.valueCount() > 0);
+        }
+
+        assertEquals(10, subscribeCount.get());
+        assertEquals(10, unsubscribeCount.get());
+    }
+
+    @Test
+    public void testConnectUnsubscribe() throws InterruptedException {
+        final CountDownLatch unsubscribeLatch = new CountDownLatch(1);
+        final CountDownLatch subscribeLatch = new CountDownLatch(1);
+        
+        Observable<Long> o = synchronousInterval()
+                .doOnSubscribe(s -> {
+                        System.out.println("******************************* Subscribe received");
+                        // when we are subscribed
+                        subscribeLatch.countDown();
+                })
+                .doOnCancel(() -> {
+                        System.out.println("******************************* Unsubscribe received");
+                        // when we are unsubscribed
+                        unsubscribeLatch.countDown();
+                });
+        
+        TestSubscriber<Long> s = new TestSubscriber<>();
+        o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);
+        System.out.println("send unsubscribe");
+        // wait until connected
+        subscribeLatch.await();
+        // now unsubscribe
+        s.dispose();
+        System.out.println("DONE sending unsubscribe ... now waiting");
+        if (!unsubscribeLatch.await(3000, TimeUnit.MILLISECONDS)) {
+            System.out.println("Errors: " + s.errors());
+            if (s.errors().size() > 0) {
+                s.errors().get(0).printStackTrace();
+            }
+            fail("timed out waiting for unsubscribe");
+        }
+        s.assertNoErrors();
+    }
+
+    @Test
+    public void testConnectUnsubscribeRaceConditionLoop() throws InterruptedException {
+        for (int i = 0; i < 1000; i++) {
+            testConnectUnsubscribeRaceCondition();
+        }
+    }
+    
+    @Test
+    public void testConnectUnsubscribeRaceCondition() throws InterruptedException {
+        final AtomicInteger subUnsubCount = new AtomicInteger();
+        Observable<Long> o = synchronousInterval()
+                .doOnCancel(() -> {
+                        System.out.println("******************************* Unsubscribe received");
+                        // when we are unsubscribed
+                        subUnsubCount.decrementAndGet();
+                })
+                .doOnSubscribe(s -> {
+                        System.out.println("******************************* SUBSCRIBE received");
+                        subUnsubCount.incrementAndGet();
+                });
+
+        TestSubscriber<Long> s = new TestSubscriber<>();
+        
+        o.publish().refCount().subscribeOn(Schedulers.computation()).subscribe(s);
+        System.out.println("send unsubscribe");
+        // now immediately unsubscribe while subscribeOn is racing to subscribe
+        s.dispose();
+        // this generally will mean it won't even subscribe as it is already unsubscribed by the time connect() gets scheduled
+        // give time to the counter to update
+        Thread.sleep(5);
+        // either we subscribed and then unsubscribed, or we didn't ever even subscribe
+        assertEquals(0, subUnsubCount.get());
+
+        System.out.println("DONE sending unsubscribe ... now waiting");
+        System.out.println("Errors: " + s.errors());
+        if (s.errors().size() > 0) {
+            s.errors().get(0).printStackTrace();
+        }
+        s.assertNoErrors();
+    }
+
+    private Observable<Long> synchronousInterval() {
+        return Observable.create(subscriber -> {
+            AtomicBoolean cancel = new AtomicBoolean();
+            subscriber.onSubscribe(new Subscription() {
+                @Override
+                public void request(long n) {
+                    
+                }
+
+                @Override
+                public void cancel() {
+                    cancel.set(true);
+                }
+                
+            });
+            for (;;) {
+                if (cancel.get()) {
+                    break;
+                }
+                try {
+                    Thread.sleep(100);
+                } catch (InterruptedException e) {
+                }
+                subscriber.onNext(1L);
+            }
+        });
+    }
+
+    @Test
+    public void onlyFirstShouldSubscribeAndLastUnsubscribe() {
+        final AtomicInteger subscriptionCount = new AtomicInteger();
+        final AtomicInteger unsubscriptionCount = new AtomicInteger();
+        Observable<Integer> observable = Observable.create(new Publisher<Integer>() {
+            @Override
+            public void subscribe(Subscriber<? super Integer> observer) {
+                subscriptionCount.incrementAndGet();
+                observer.onSubscribe(new Subscription() {
+                    @Override
+                    public void request(long n) {
+                        
+                    }
+                    
+                    @Override
+                    public void cancel() {
+                        unsubscriptionCount.incrementAndGet();
+                    }
+                });
+            }
+        });
+        Observable<Integer> refCounted = observable.publish().refCount();
+
+        Disposable first = refCounted.subscribe();
+        assertEquals(1, subscriptionCount.get());
+        
+        Disposable second = refCounted.subscribe();
+        assertEquals(1, subscriptionCount.get());
+        
+        first.dispose();
+        assertEquals(0, unsubscriptionCount.get());
+        
+        second.dispose();
+        assertEquals(1, unsubscriptionCount.get());
+    }
+
+    @Test
+    public void testRefCount() {
+        TestScheduler s = new TestScheduler();
+        Observable<Long> interval = Observable.interval(100, TimeUnit.MILLISECONDS, s).publish().refCount();
+
+        // subscribe list1
+        final List<Long> list1 = new ArrayList<>();
+        Disposable s1 = interval.subscribe(t1 -> list1.add(t1));
+
+        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);
+
+        assertEquals(2, list1.size());
+        assertEquals(0L, list1.get(0).longValue());
+        assertEquals(1L, list1.get(1).longValue());
+
+        // subscribe list2
+        final List<Long> list2 = new ArrayList<>();
+        Disposable s2 = interval.subscribe(t1 -> list2.add(t1));
+
+        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);
+
+        // list 1 should have 5 items
+        assertEquals(5, list1.size());
+        assertEquals(2L, list1.get(2).longValue());
+        assertEquals(3L, list1.get(3).longValue());
+        assertEquals(4L, list1.get(4).longValue());
+
+        // list 2 should only have 3 items
+        assertEquals(3, list2.size());
+        assertEquals(2L, list2.get(0).longValue());
+        assertEquals(3L, list2.get(1).longValue());
+        assertEquals(4L, list2.get(2).longValue());
+
+        // unsubscribe list1
+        s1.dispose();
+
+        // advance further
+        s.advanceTimeBy(300, TimeUnit.MILLISECONDS);
+
+        // list 1 should still have 5 items
+        assertEquals(5, list1.size());
+
+        // list 2 should have 6 items
+        assertEquals(6, list2.size());
+        assertEquals(5L, list2.get(3).longValue());
+        assertEquals(6L, list2.get(4).longValue());
+        assertEquals(7L, list2.get(5).longValue());
+
+        // unsubscribe list2
+        s2.dispose();
+
+        // advance further
+        s.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
+
+        // subscribing a new one should start over because the source should have been unsubscribed
+        // subscribe list3
+        final List<Long> list3 = new ArrayList<>();
+        interval.subscribe(t1 -> list3.add(t1));
+
+        s.advanceTimeBy(200, TimeUnit.MILLISECONDS);
+
+        assertEquals(2, list3.size());
+        assertEquals(0L, list3.get(0).longValue());
+        assertEquals(1L, list3.get(1).longValue());
+
+    }
+
+    @Test
+    public void testAlreadyUnsubscribedClient() {
+        Subscriber<Integer> done = CancelledSubscriber.instance();
+
+        Subscriber<Integer> o = TestHelper.mockSubscriber();
+
+        Observable<Integer> result = Observable.just(1).publish().refCount();
+
+        result.subscribe(done);
+
+        result.subscribe(o);
+
+        verify(o).onNext(1);
+        verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void testAlreadyUnsubscribedInterleavesWithClient() {
+        ReplaySubject<Integer> source = ReplaySubject.create();
+
+        Subscriber<Integer> done = CancelledSubscriber.instance();
+
+        Subscriber<Integer> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+
+        Observable<Integer> result = source.publish().refCount();
+
+        result.subscribe(o);
+
+        source.onNext(1);
+
+        result.subscribe(done);
+
+        source.onNext(2);
+        source.onComplete();
+
+        inOrder.verify(o).onNext(1);
+        inOrder.verify(o).onNext(2);
+        inOrder.verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void testConnectDisconnectConnectAndSubjectState() {
+        Observable<Integer> o1 = Observable.just(10);
+        Observable<Integer> o2 = Observable.just(20);
+        Observable<Integer> combined = Observable.combineLatest(o1, o2, (t1, t2) -> t1 + t2)
+                .publish().refCount();
+
+        TestSubscriber<Integer> ts1 = new TestSubscriber<>();
+        TestSubscriber<Integer> ts2 = new TestSubscriber<>();
+
+        combined.subscribe(ts1);
+        combined.subscribe(ts2);
+
+        ts1.assertTerminated();
+        ts1.assertNoErrors();
+        ts1.assertValue(30);
+
+        ts2.assertTerminated();
+        ts2.assertNoErrors();
+        ts2.assertValue(30);
+    }
+
+    @Test(timeout = 10000)
+    public void testUpstreamErrorAllowsRetry() throws InterruptedException {
+        final AtomicInteger intervalSubscribed = new AtomicInteger();
+        Observable<String> interval =
+                Observable.interval(200,TimeUnit.MILLISECONDS)
+                        .doOnSubscribe(s -> {
+                                        System.out.println("Subscribing to interval " + intervalSubscribed.incrementAndGet());
+                                }
+                         )
+                        .flatMap(t1 -> {
+                                return Observable.defer(() -> {
+                                        return Observable.<String>error(new Exception("Some exception"));
+                                });
+                        })
+                        .onErrorResumeNext(t1 -> {
+                                return Observable.error(t1);
+                        })
+                        .publish()
+                        .refCount();
+
+        interval
+                .doOnError(t1 -> {
+                        System.out.println("Subscriber 1 onError: " + t1);
+                })
+                .retry(5)
+                .subscribe(t1 -> {
+                        System.out.println("Subscriber 1: " + t1);
+                });
+        Thread.sleep(100);
+        interval
+        .doOnError(t1 -> {
+                System.out.println("Subscriber 2 onError: " + t1);
+        })
+        .retry(5)
+                .subscribe(t1 -> {
+                        System.out.println("Subscriber 2: " + t1);
+                });
+        
+        Thread.sleep(1300);
+        
+        System.out.println(intervalSubscribed.get());
+        assertEquals(6, intervalSubscribed.get());
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeTimerTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeTimerTest.java
new file mode 100644
index 0000000000..6e4deffab7
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeTimerTest.java
@@ -0,0 +1,286 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.mockito.Matchers.*;
+import static org.mockito.Mockito.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.*;
+import org.mockito.*;
+import org.reactivestreams.Subscriber;
+
+import io.reactivex.*;
+import io.reactivex.exceptions.TestException;
+import io.reactivex.observables.ConnectableObservable;
+import io.reactivex.schedulers.TestScheduler;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OnSubscribeTimerTest {
+    @Mock
+    Subscriber<Object> observer;
+    @Mock
+    Subscriber<Long> observer2;
+    
+    TestScheduler scheduler;
+
+    @Before
+    public void before() {
+        observer = TestHelper.mockSubscriber();
+        
+        observer2 = TestHelper.mockSubscriber();
+        
+        scheduler = new TestScheduler();
+    }
+
+    @Test
+    public void testTimerOnce() {
+        Observable.timer(100, TimeUnit.MILLISECONDS, scheduler).subscribe(observer);
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+
+        verify(observer, times(1)).onNext(0L);
+        verify(observer, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void testTimerPeriodically() {
+        TestSubscriber<Long> ts = new TestSubscriber<>();
+        
+        Observable.interval(100, 100, TimeUnit.MILLISECONDS, scheduler).subscribe(ts);
+        
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+
+        ts.assertValue(0L);
+
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        ts.assertValues(0L, 1L);
+
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        ts.assertValues(0L, 1L, 2L);
+
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        ts.assertValues(0L, 1L, 2L, 3L);
+
+        ts.dispose();
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        ts.assertValues(0L, 1L, 2L, 3L);
+
+        ts.assertNotComplete();
+        ts.assertNoErrors();
+    }
+    @Test
+    public void testInterval() {
+        Observable<Long> w = Observable.interval(1, TimeUnit.SECONDS, scheduler);
+        TestSubscriber<Long> ts = new TestSubscriber<>();
+        w.subscribe(ts);
+
+        ts.assertNoValues();
+        ts.assertNoErrors();
+        ts.assertNotComplete();
+
+        scheduler.advanceTimeTo(2, TimeUnit.SECONDS);
+
+        ts.assertValues(0L, 1L);
+        ts.assertNoErrors();
+        ts.assertNotComplete();
+
+        ts.dispose();
+        
+        scheduler.advanceTimeTo(4, TimeUnit.SECONDS);
+        ts.assertValues(0L, 1L);
+        ts.assertNoErrors();
+        ts.assertNotComplete();
+    }
+
+    @Test
+    public void testWithMultipleSubscribersStartingAtSameTime() {
+        Observable<Long> w = Observable.interval(1, TimeUnit.SECONDS, scheduler);
+        
+        TestSubscriber<Long> ts1 = new TestSubscriber<>();
+        TestSubscriber<Long> ts2 = new TestSubscriber<>();
+        
+        w.subscribe(ts1);
+        w.subscribe(ts2);
+
+        ts1.assertNoValues();
+        ts2.assertNoValues();
+
+        scheduler.advanceTimeTo(2, TimeUnit.SECONDS);
+
+        ts1.assertValues(0L, 1L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+
+        ts2.assertValues(0L, 1L);
+        ts2.assertNoErrors();
+        ts2.assertNotComplete();
+
+        ts1.dispose();
+        ts2.dispose();
+        
+        scheduler.advanceTimeTo(4, TimeUnit.SECONDS);
+
+        ts1.assertValues(0L, 1L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+
+        ts2.assertValues(0L, 1L);
+        ts2.assertNoErrors();
+        ts2.assertNotComplete();
+    }
+
+    @Test
+    public void testWithMultipleStaggeredSubscribers() {
+        Observable<Long> w = Observable.interval(1, TimeUnit.SECONDS, scheduler);
+        
+        TestSubscriber<Long> ts1 = new TestSubscriber<>();
+        
+        w.subscribe(ts1);
+
+        ts1.assertNoErrors();
+        
+        scheduler.advanceTimeTo(2, TimeUnit.SECONDS);
+        
+        TestSubscriber<Long> ts2 = new TestSubscriber<>();
+        
+        w.subscribe(ts2);
+
+        ts1.assertValues(0L, 1L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+        
+        ts2.assertNoValues();
+
+        scheduler.advanceTimeTo(4, TimeUnit.SECONDS);
+
+        ts1.assertValues(0L, 1L, 2L, 3L);
+
+        ts2.assertValues(0L, 1L);
+
+        ts1.dispose();
+        ts2.dispose();
+
+        ts1.assertValues(0L, 1L, 2L, 3L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+
+        ts2.assertValues(0L, 1L);
+        ts2.assertNoErrors();
+        ts2.assertNotComplete();
+    }
+
+    @Test
+    public void testWithMultipleStaggeredSubscribersAndPublish() {
+        ConnectableObservable<Long> w = Observable.interval(1, TimeUnit.SECONDS, scheduler).publish();
+        
+        TestSubscriber<Long> ts1 = new TestSubscriber<>();
+        
+        w.subscribe(ts1);
+        w.connect();
+        
+        ts1.assertNoValues();
+
+        scheduler.advanceTimeTo(2, TimeUnit.SECONDS);
+        
+        TestSubscriber<Long> ts2 = new TestSubscriber<>();
+        w.subscribe(ts2);
+
+        ts1.assertValues(0L, 1L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+
+        ts2.assertNoValues();
+
+        scheduler.advanceTimeTo(4, TimeUnit.SECONDS);
+
+        ts1.assertValues(0L, 1L, 2L, 3L);
+
+        ts2.assertValues(2L, 3L);
+
+        ts1.dispose();
+        ts2.dispose();
+
+        ts1.assertValues(0L, 1L, 2L, 3L);
+        ts1.assertNoErrors();
+        ts1.assertNotComplete();
+        
+        ts2.assertValues(2L, 3L);
+        ts2.assertNoErrors();
+        ts2.assertNotComplete();
+    }
+    @Test
+    public void testOnceObserverThrows() {
+        Observable<Long> source = Observable.timer(100, TimeUnit.MILLISECONDS, scheduler);
+        
+        source.safeSubscribe(new Observer<Long>() {
+
+            @Override
+            public void onNext(Long t) {
+                throw new TestException();
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                observer.onError(e);
+            }
+
+            @Override
+            public void onComplete() {
+                observer.onComplete();
+            }
+        });
+        
+        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);
+        
+        verify(observer).onError(any(TestException.class));
+        verify(observer, never()).onNext(anyLong());
+        verify(observer, never()).onComplete();
+    }
+    @Test
+    public void testPeriodicObserverThrows() {
+        Observable<Long> source = Observable.interval(100, 100, TimeUnit.MILLISECONDS, scheduler);
+        
+        InOrder inOrder = inOrder(observer);
+        
+        source.safeSubscribe(new Observer<Long>() {
+
+            @Override
+            public void onNext(Long t) {
+                if (t > 0) {
+                    throw new TestException();
+                }
+                observer.onNext(t);
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                observer.onError(e);
+            }
+
+            @Override
+            public void onComplete() {
+                observer.onComplete();
+            }
+        });
+        
+        scheduler.advanceTimeBy(1, TimeUnit.SECONDS);
+        
+        inOrder.verify(observer).onNext(0L);
+        inOrder.verify(observer).onError(any(TestException.class));
+        inOrder.verifyNoMoreInteractions();
+        verify(observer, never()).onComplete();
+    }
+}
\ No newline at end of file
