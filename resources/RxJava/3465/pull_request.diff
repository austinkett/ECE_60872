diff --git a/src/main/java/io/reactivex/subscribers/Subscribers.java b/src/main/java/io/reactivex/subscribers/Subscribers.java
index bd66a7935f..bd2f13402c 100644
--- a/src/main/java/io/reactivex/subscribers/Subscribers.java
+++ b/src/main/java/io/reactivex/subscribers/Subscribers.java
@@ -161,14 +161,14 @@ public void onComplete() {
     public static <T> Subscriber<T> create(
             Consumer<? super T> onNext
     ) {
-        return create(onNext, RxJavaPlugins::onError, () -> { }, s -> { });
+        return create(onNext, RxJavaPlugins::onError, () -> { }, s -> s.request(Long.MAX_VALUE));
     }
 
     public static <T> Subscriber<T> create(
             Consumer<? super T> onNext,
             Consumer<? super Throwable> onError
     ) {
-        return create(onNext, onError, () -> { }, s -> { });
+        return create(onNext, onError, () -> { }, s -> s.request(Long.MAX_VALUE));
     }
 
     public static <T> Subscriber<T> create(
@@ -176,7 +176,7 @@ public void onComplete() {
             Consumer<? super Throwable> onError,
             Runnable onComplete
     ) {
-        return create(onNext, onError, onComplete, s -> { });
+        return create(onNext, onError, onComplete, s -> s.request(Long.MAX_VALUE));
     }
     
     public static <T> Subscriber<T> create(
diff --git a/src/test/java/io/reactivex/subscribers/SubscribersTest.java b/src/test/java/io/reactivex/subscribers/SubscribersTest.java
index f7c9362c57..84f097dae6 100644
--- a/src/test/java/io/reactivex/subscribers/SubscribersTest.java
+++ b/src/test/java/io/reactivex/subscribers/SubscribersTest.java
@@ -17,11 +17,14 @@
 import static org.mockito.Mockito.*;
 
 import java.lang.reflect.*;
+import java.util.*;
 import java.util.concurrent.atomic.*;
 import java.util.function.Consumer;
 
 import org.junit.*;
+import org.reactivestreams.Subscriber;
 
+import io.reactivex.Observable;
 import io.reactivex.exceptions.*;
 
 public class SubscribersTest {
@@ -185,4 +188,31 @@ public void testEmptyCompleted() {
         Consumer<Throwable> throwAction = e -> { };
         Subscribers.create(e -> { }, throwAction).onComplete();
     }
+    
+    @Test
+    public void testCreateOnNext() {
+        List<Integer> list = new ArrayList<>();
+        Subscriber<Integer> s = Subscribers.create(v -> list.add(v));
+        
+        Observable.range(1, 10).subscribe(s);
+        
+        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), list);
+    }
+    
+    @Test
+    public void testCreateOnError() {
+        List<Integer> list = new ArrayList<>();
+        List<Throwable> errors = new ArrayList<>();
+        Subscriber<Integer> s = Subscribers.create(v -> list.add(v), e -> errors.add(e));
+        
+        Observable
+        .range(1, 10)
+        .concatWith(Observable.error(new TestException()))
+        .subscribe(s);
+        
+        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), list);
+        assertEquals(1, errors.size());
+        System.out.println(errors);
+        assertTrue(errors.get(0) instanceof TestException);
+    }
 }
\ No newline at end of file
