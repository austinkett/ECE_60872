diff --git a/src/main/java/rx/Notification.java b/src/main/java/rx/Notification.java
index 17a23d1031..b708b58766 100644
--- a/src/main/java/rx/Notification.java
+++ b/src/main/java/rx/Notification.java
@@ -202,6 +202,11 @@ public boolean equals(Object obj) {
             return false;
         if (hasThrowable() && !getThrowable().equals(notification.getThrowable()))
             return false;
+        if(!hasValue() && !hasThrowable() && notification.hasValue())
+        	return false;
+        if(!hasValue() && !hasThrowable() && notification.hasThrowable())
+        	return false;
+        
         return true;
     }
 }
diff --git a/src/test/java/rx/NotificationTest.java b/src/test/java/rx/NotificationTest.java
new file mode 100644
index 0000000000..cf33fb991a
--- /dev/null
+++ b/src/test/java/rx/NotificationTest.java
@@ -0,0 +1,64 @@
+package rx;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class NotificationTest {
+	
+	@Test
+	public void testOnNextIntegerNotificationDoesNotEqualNullNotification(){
+		final Notification<Integer> integerNotification = Notification.createOnNext(1);
+		final Notification<Integer> nullNotification = Notification.createOnNext(null);
+		Assert.assertFalse(integerNotification.equals(nullNotification));
+	}
+	
+	@Test
+	public void testOnNextNullNotificationDoesNotEqualIntegerNotification(){
+		final Notification<Integer> integerNotification = Notification.createOnNext(1);
+		final Notification<Integer> nullNotification = Notification.createOnNext(null);
+		Assert.assertFalse(nullNotification.equals(integerNotification));
+	}
+	
+	@Test
+	public void testOnNextIntegerNotificationsWhenEqual(){
+		final Notification<Integer> integerNotification = Notification.createOnNext(1);
+		final Notification<Integer> integerNotification2 = Notification.createOnNext(1);
+		Assert.assertTrue(integerNotification.equals(integerNotification2));
+	}
+	
+	@Test
+	public void testOnNextIntegerNotificationsWhenNotEqual(){
+		final Notification<Integer> integerNotification = Notification.createOnNext(1);
+		final Notification<Integer> integerNotification2 = Notification.createOnNext(2);
+		Assert.assertFalse(integerNotification.equals(integerNotification2));
+	}
+	
+	@Test
+	public void testOnErrorIntegerNotificationDoesNotEqualNullNotification(){
+		final Notification<Integer> integerNotification = Notification.createOnError(new Exception());
+		final Notification<Integer> nullNotification = Notification.createOnError(null);
+		Assert.assertFalse(integerNotification.equals(nullNotification));
+	}
+	
+	@Test
+	public void testOnErrorNullNotificationDoesNotEqualIntegerNotification(){
+		final Notification<Integer> integerNotification = Notification.createOnError(new Exception());
+		final Notification<Integer> nullNotification = Notification.createOnError(null);
+		Assert.assertFalse(nullNotification.equals(integerNotification));
+	}
+
+	@Test
+	public void testOnErrorIntegerNotificationsWhenEqual(){
+		final Exception exception = new Exception();
+		final Notification<Integer> onErrorNotification = Notification.createOnError(exception);
+		final Notification<Integer> onErrorNotification2 = Notification.createOnError(exception);
+		Assert.assertTrue(onErrorNotification.equals(onErrorNotification2));
+	}
+	
+	@Test
+	public void testOnErrorIntegerNotificationWhenNotEqual(){
+		final Notification<Integer> onErrorNotification = Notification.createOnError(new Exception());
+		final Notification<Integer> onErrorNotification2 = Notification.createOnError(new Exception());
+		Assert.assertFalse(onErrorNotification.equals(onErrorNotification2));
+	}
+}
