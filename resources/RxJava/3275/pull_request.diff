diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index a3eb740b9f..9d83a3dacf 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -42,6 +42,18 @@
     public interface Operator<Downstream, Upstream> extends Function<Subscriber<? super Downstream>, Subscriber<? super Upstream>> {
 
     }
+    
+    /**
+     * Interface to compose observables.
+     *
+     * @param <T> the upstream value type
+     * @param <R> the downstream value type
+     */
+    @FunctionalInterface
+    public interface Transformer<T, R> extends Function<Observable<T>, Publisher<? extends R>> {
+        
+    }
+
 
     static final int BUFFER_SIZE;
     static {
@@ -794,7 +806,7 @@ protected Observable(Publisher<T> onSubscribe) {
     }
 
     // TODO generics
-    public final <R> Observable<R> compose(Function<? super Observable<T>, ? extends Publisher<? extends R>> composer) {
+    public final <R> Observable<R> compose(Transformer<T, R> composer) {
         return fromPublisher(to(composer));
     }
 
@@ -1163,14 +1175,14 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return any(v -> true);
     }
 
-    public final Observable<T> just(T v1, T v2) {
+    public static final <T> Observable<T> just(T v1, T v2) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         
         return fromArray(v1, v2);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1178,7 +1190,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1187,7 +1199,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3, v4);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4, T v5) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1197,7 +1209,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3, v4, v5);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1208,7 +1220,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3, v4, v5, v6);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1220,7 +1232,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3, v4, v5, v6, v7);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
@@ -1233,7 +1245,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
         return fromArray(v1, v2, v3, v4, v5, v6, v7, v8);
     }
 
-    public final Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8, T v9) {
+    public static final <T> Observable<T> just(T v1, T v2, T v3, T v4, T v5, T v6, T v7, T v8, T v9) {
         Objects.requireNonNull(v1);
         Objects.requireNonNull(v2);
         Objects.requireNonNull(v3);
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java
index 90198c415b..c94021ae15 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorGroupBy.java
@@ -135,7 +135,9 @@ public void onError(Throwable t) {
             List<GroupedUnicast<V, K>> list = new ArrayList<>(groups.values());
             groups.clear();
             
-            list.forEach(g -> g.onError(t));
+            for (GroupedUnicast<V, K> e : list) {
+                e.onError(t);
+            }
             
             actual.onError(t);
         }
@@ -145,7 +147,9 @@ public void onComplete() {
             List<GroupedUnicast<V, K>> list = new ArrayList<>(groups.values());
             groups.clear();
             
-            list.forEach(GroupedUnicast::onComplete);
+            for (GroupedUnicast<V, K> e : list) {
+                e.onComplete();
+            }
             
             actual.onComplete();
         }
@@ -265,7 +269,6 @@ public void subscribe(Subscriber<? super T> s) {
 
         public void onNext(T t) {
             if (t == null) {
-                parent.cancel(key);
                 error = new NullPointerException();
                 done = true;
             } else {
@@ -317,6 +320,8 @@ void drain() {
                             break;
                         }
                         
+                        a.onNext(v);
+                        
                         r--;
                         e--;
                     }
@@ -340,6 +345,7 @@ void drain() {
         
         boolean checkTerminated(boolean d, boolean empty, Subscriber<? super T> a, boolean delayError) {
             if (cancelled != 0) {
+                queue.clear();
                 parent.cancel(key);
                 return true;
             }
diff --git a/src/test/java/io/reactivex/CombineLatestTests.java b/src/test/java/io/reactivex/CombineLatestTests.java
new file mode 100644
index 0000000000..b245fb40a9
--- /dev/null
+++ b/src/test/java/io/reactivex/CombineLatestTests.java
@@ -0,0 +1,67 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package io.reactivex;
+
+import static io.reactivex.Observable.combineLatest;
+import static org.junit.Assert.assertNull;
+
+import java.util.function.*;
+
+import org.junit.*;
+
+import io.reactivex.CovarianceTest.*;
+import io.reactivex.subjects.BehaviorSubject;
+
+public class CombineLatestTests {
+    /**
+     * This won't compile if super/extends isn't done correctly on generics
+     */
+    @Test
+    public void testCovarianceOfCombineLatest() {
+        Observable<HorrorMovie> horrors = Observable.just(new HorrorMovie());
+        Observable<CoolRating> ratings = Observable.just(new CoolRating());
+
+        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlocking().forEach(action);
+        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine).toBlocking().forEach(action);
+        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlocking().forEach(extendedAction);
+        Observable.<Media, Rating, Result> combineLatest(horrors, ratings, combine).toBlocking().forEach(action);
+        Observable.<Media, Rating, ExtendedResult> combineLatest(horrors, ratings, combine).toBlocking().forEach(action);
+
+        Observable.<Movie, CoolRating, Result> combineLatest(horrors, ratings, combine);
+    }
+
+    BiFunction<Media, Rating, ExtendedResult> combine = (m, r) -> new ExtendedResult();
+
+    Consumer<Result> action = t1 -> System.out.println("Result: " + t1);
+
+    Consumer<ExtendedResult> extendedAction = t1 -> System.out.println("Result: " + t1);
+
+    @Ignore
+    @Test
+    public void testNullEmitting() throws Exception {
+        // FIXME this is no longer allowed
+        Observable<Boolean> nullObservable = BehaviorSubject.createDefault((Boolean) null);
+        Observable<Boolean> nonNullObservable = BehaviorSubject.createDefault(true);
+        Observable<Boolean> combined =
+                combineLatest(nullObservable, nonNullObservable, new BiFunction<Boolean, Boolean, Boolean>() {
+                    @Override
+                    public Boolean apply(Boolean bool1, Boolean bool2) {
+                        return bool1 == null ? null : bool2;
+                    }
+                });
+        combined.subscribe(aBoolean -> assertNull(aBoolean));
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/CovarianceTest.java b/src/test/java/io/reactivex/CovarianceTest.java
new file mode 100644
index 0000000000..64bc7c1fef
--- /dev/null
+++ b/src/test/java/io/reactivex/CovarianceTest.java
@@ -0,0 +1,183 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package io.reactivex;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.*;
+import java.util.function.Function;
+
+import org.junit.Test;
+
+import io.reactivex.Observable.Transformer;
+import io.reactivex.subscribers.TestSubscriber;
+
+/**
+ * Test super/extends of generics.
+ * 
+ * See https://github.com/Netflix/RxJava/pull/331
+ */
+public class CovarianceTest {
+
+    /**
+     * This won't compile if super/extends isn't done correctly on generics
+     */
+    @Test
+    public void testCovarianceOfFrom() {
+        Observable.<Movie> just(new HorrorMovie());
+        Observable.<Movie> fromIterable(new ArrayList<HorrorMovie>());
+        // Observable.<HorrorMovie>from(new Movie()); // may not compile
+    }
+
+    @Test
+    public void testSortedList() {
+        Comparator<Media> SORT_FUNCTION = (t1, t2) -> 1;
+
+        // this one would work without the covariance generics
+        Observable<Media> o = Observable.just(new Movie(), new TVSeason(), new Album());
+        o.toSortedList(SORT_FUNCTION);
+
+        // this one would NOT work without the covariance generics
+        Observable<Movie> o2 = Observable.just(new Movie(), new ActionMovie(), new HorrorMovie());
+        o2.toSortedList(SORT_FUNCTION);
+    }
+
+    @Test
+    public void testGroupByCompose() {
+        Observable<Movie> movies = Observable.just(new HorrorMovie(), new ActionMovie(), new Movie());
+        TestSubscriber<String> ts = new TestSubscriber<>();
+        movies
+        .groupBy(Object::getClass)
+        .doOnNext(g -> System.out.println(g.key()))
+        .flatMap(g -> 
+            g
+            .doOnNext(System.out::println)
+            .compose(m -> m.concatWith(Observable.just(new ActionMovie()))
+        )
+        .map(Object::toString))
+        .subscribe(ts);
+        ts.assertTerminated();
+        ts.assertNoErrors();
+        //        System.out.println(ts.getOnNextEvents());
+        assertEquals(6, ts.valueCount());
+    }
+
+    @SuppressWarnings("unused")
+    @Test
+    public void testCovarianceOfCompose() {
+        Observable<HorrorMovie> movie = Observable.just(new HorrorMovie());
+        Observable<Movie> movie2 = movie.compose(t -> Observable.just(new Movie()));
+    }
+    
+    @SuppressWarnings("unused")
+    @Test
+    public void testCovarianceOfCompose2() {
+        Observable<Movie> movie = Observable.<Movie> just(new HorrorMovie());
+        Observable<HorrorMovie> movie2 = movie.compose(t -> Observable.just(new HorrorMovie()));
+    }
+    
+    @SuppressWarnings("unused")
+    @Test
+    public void testCovarianceOfCompose3() {
+        Observable<Movie> movie = Observable.<Movie>just(new HorrorMovie());
+        Observable<HorrorMovie> movie2 = movie.compose(t ->
+                Observable.just(new HorrorMovie()).map(v -> v)
+        );
+    }
+
+    @SuppressWarnings("unused")
+    @Test
+    public void testCovarianceOfCompose4() {
+        Observable<HorrorMovie> movie = Observable.just(new HorrorMovie());
+        Observable<HorrorMovie> movie2 = movie.compose(t1 -> t1.map(v -> v));
+    }
+    
+    @Test
+    public void testComposeWithDeltaLogic() {
+        List<Movie> list1 = Arrays.asList(new Movie(), new HorrorMovie(), new ActionMovie());
+        List<Movie> list2 = Arrays.asList(new ActionMovie(), new Movie(), new HorrorMovie(), new ActionMovie());
+        Observable<List<Movie>> movies = Observable.just(list1, list2);
+        movies.compose(deltaTransformer);
+    }
+
+    static Function<List<List<Movie>>, Observable<Movie>> calculateDelta = listOfLists -> {
+        if (listOfLists.size() == 1) {
+            return Observable.fromIterable(listOfLists.get(0));
+        } else {
+            // diff the two
+            List<Movie> newList = listOfLists.get(1);
+            List<Movie> oldList = new ArrayList<>(listOfLists.get(0));
+
+            Set<Movie> delta = new LinkedHashSet<>();
+            delta.addAll(newList);
+            // remove all that match in old
+            delta.removeAll(oldList);
+
+            // filter oldList to those that aren't in the newList
+            oldList.removeAll(newList);
+
+            // for all left in the oldList we'll create DROP events
+            for (@SuppressWarnings("unused") Movie old : oldList) {
+                delta.add(new Movie());
+            }
+
+            return Observable.fromIterable(delta);
+        }
+    };
+    
+    static Transformer<List<Movie>, Movie> deltaTransformer = movieList -> {
+        return movieList
+            .startWith(new ArrayList<Movie>())
+            .buffer(2, 1)
+            .skip(1)
+            .flatMap(calculateDelta);
+    };
+
+    /*
+     * Most tests are moved into their applicable classes such as [Operator]Tests.java
+     */
+
+    static class Media {
+    }
+
+    static class Movie extends Media {
+    }
+
+    static class HorrorMovie extends Movie {
+    }
+
+    static class ActionMovie extends Movie {
+    }
+
+    static class Album extends Media {
+    }
+
+    static class TVSeason extends Media {
+    }
+
+    static class Rating {
+    }
+
+    static class CoolRating extends Rating {
+    }
+
+    static class Result {
+    }
+
+    static class ExtendedResult extends Result {
+    }
+}
