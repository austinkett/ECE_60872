diff --git a/src/main/java/rx/exceptions/OnErrorThrowable.java b/src/main/java/rx/exceptions/OnErrorThrowable.java
index dc34843868..e54a9a80ce 100644
--- a/src/main/java/rx/exceptions/OnErrorThrowable.java
+++ b/src/main/java/rx/exceptions/OnErrorThrowable.java
@@ -15,6 +15,9 @@
  */
 package rx.exceptions;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import rx.plugins.RxJavaErrorHandler;
 import rx.plugins.RxJavaPlugins;
 
@@ -109,6 +112,27 @@ public static Throwable addValueAsLastCause(Throwable e, Object value) {
     public static class OnNextValue extends RuntimeException {
 
         private static final long serialVersionUID = -3454462756050397899L;
+        
+        // Lazy loaded singleton 
+        private static final class Primitives {
+            
+            static final Set<Class<?>> INSTANCE = create();
+
+            private static Set<Class<?>> create() {
+                Set<Class<?>> set = new HashSet<Class<?>>();
+                set.add(Boolean.class);
+                set.add(Character.class);
+                set.add(Byte.class);
+                set.add(Short.class);
+                set.add(Integer.class);
+                set.add(Long.class);
+                set.add(Float.class);
+                set.add(Double.class);
+                // Void is another primitive but cannot be instantiated 
+                // and is caught by the null check in renderValue
+                return set;
+            }
+        }
 
         private final Object value;
 
@@ -148,11 +172,11 @@ public Object getValue() {
          * @return a string version of the object if primitive or managed through error plugin,
          *        otherwise the classname of the object
          */
-        private static String renderValue(Object value){
+        static String renderValue(Object value){
             if (value == null) {
                 return "null";
             }
-            if (value.getClass().isPrimitive()) {
+            if (Primitives.INSTANCE.contains(value.getClass())) {
                 return value.toString();
             }
             if (value instanceof String) {
diff --git a/src/test/java/rx/exceptions/OnNextValueTest.java b/src/test/java/rx/exceptions/OnNextValueTest.java
index 2164aca595..b620e3eed0 100644
--- a/src/test/java/rx/exceptions/OnNextValueTest.java
+++ b/src/test/java/rx/exceptions/OnNextValueTest.java
@@ -15,14 +15,18 @@
  */
 package rx.exceptions;
 
+import org.junit.Assert;
 import org.junit.Test;
+
 import rx.Observable;
 import rx.Observer;
+import rx.exceptions.OnErrorThrowable.OnNextValue;
 import rx.functions.Func1;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -118,4 +122,49 @@ public BadToString call(BadToString badToString) {
                 }).subscribe(observer);
 
     }
+    
+    @Test
+    public void testRenderInteger() {
+        assertEquals("123", OnNextValue.renderValue(123));
+    }
+    
+    @Test
+    public void testRenderByte() {
+        assertEquals("10", OnNextValue.renderValue((byte) 10));
+    }
+    
+    @Test
+    public void testRenderBoolean() {
+        assertEquals("true", OnNextValue.renderValue(true));
+    }
+    
+    @Test
+    public void testRenderShort() {
+        assertEquals("10", OnNextValue.renderValue((short) 10));
+    }
+    
+    @Test
+    public void testRenderLong() {
+        assertEquals("10", OnNextValue.renderValue(10L));
+    }
+    
+    @Test
+    public void testRenderCharacter() {
+        assertEquals("10", OnNextValue.renderValue(10L));
+    }
+    
+    @Test
+    public void testRenderFloat() {
+        assertEquals("10.0", OnNextValue.renderValue(10.0f));
+    }
+    
+    @Test
+    public void testRenderDouble() {
+        assertEquals("10.0", OnNextValue.renderValue(10.0));
+    }
+    
+    @Test
+    public void testRenderVoid() {
+        assertEquals("null", OnNextValue.renderValue((Void) null));
+    }
 }
