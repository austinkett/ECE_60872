diff --git a/src/main/java/rx/Completable.java b/src/main/java/rx/Completable.java
index 1fc39fbfda..8a2a4121d2 100644
--- a/src/main/java/rx/Completable.java
+++ b/src/main/java/rx/Completable.java
@@ -1972,6 +1972,7 @@ public final void subscribe(CompletableSubscriber s) {
             throw ex;
         } catch (Throwable ex) {
             ERROR_HANDLER.handleError(ex);
+            Exceptions.throwIfFatal(ex);
             throw toNpe(ex);
         }
     }
diff --git a/src/test/java/rx/CompletableTest.java b/src/test/java/rx/CompletableTest.java
index 2493da2356..8ee2f747d3 100644
--- a/src/test/java/rx/CompletableTest.java
+++ b/src/test/java/rx/CompletableTest.java
@@ -2813,6 +2813,30 @@ public void call() {
         });
     }
 
+    @Test(expected = OnErrorNotImplementedException.class)
+    public void propagateExceptionSubscribeEmpty() {
+        error.completable.toSingleDefault(0).subscribe();
+    }
+
+    @Test(expected = OnErrorNotImplementedException.class)
+    public void propagateExceptionSubscribeOneAction() {
+        error.completable.toSingleDefault(1).subscribe(new Action1<Integer>() {
+            @Override
+            public void call(Integer integer) {
+            }
+        });
+    }
+
+    @Test(expected = OnErrorNotImplementedException.class)
+    public void propagateExceptionSubscribeOneActionThrowFromOnSuccess() {
+        normal.completable.toSingleDefault(1).subscribe(new Action1<Integer>() {
+            @Override
+            public void call(Integer integer) {
+                throw new TestException();
+            }
+        });
+    }
+
     @Test(timeout = 1000)
     public void timeoutEmitError() {
         Throwable e = Completable.never().timeout(100, TimeUnit.MILLISECONDS).get();
