diff --git a/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
index 3e08911306..86c8d61384 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
@@ -117,6 +117,7 @@ public void onComplete() {
         @Override
         public void request(long n) {
             requested(n);
+            s.request(n);
         }
         
         @Override
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorSingle.java b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java
index e361b7bd6c..dc54a5ad29 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorSingle.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorSingle.java
@@ -18,6 +18,7 @@
 import org.reactivestreams.*;
 
 import io.reactivex.Observable.Operator;
+import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 public final class OperatorSingle<T> implements Operator<T, T> {
@@ -108,8 +109,7 @@ public void onComplete() {
         
         @Override
         public void request(long n) {
-            if (n <= 0) {
-                RxJavaPlugins.onError(new IllegalArgumentException("n > required but it was " + n));
+            if (SubscriptionHelper.validateRequest(n)) {
                 return;
             }
             s.request(Long.MAX_VALUE);
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java
index 58931747f1..308bf3fcd5 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastOne.java
@@ -17,6 +17,7 @@
 import org.reactivestreams.*;
 
 import io.reactivex.Observable.Operator;
+import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 public enum OperatorTakeLastOne implements Operator<Object, Object> {
@@ -52,9 +53,7 @@ public TakeLastOneSubscriber(Subscriber<? super T> actual) {
         
         @Override
         public void onSubscribe(Subscription s) {
-            if (this.s != null) {
-                s.cancel();
-                RxJavaPlugins.onError(new IllegalStateException("Subscription already set!"));
+            if (SubscriptionHelper.validateSubscription(this.s, s)) {
                 return;
             }
             this.s = s;
diff --git a/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java b/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java
index 166b7345bc..7cb77b0995 100644
--- a/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java
+++ b/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java
@@ -20,7 +20,7 @@
 
 import io.reactivex.disposables.Disposable;
 import io.reactivex.internal.subscriptions.SubscriptionHelper;
-import io.reactivex.internal.util.QueueDrain;
+import io.reactivex.internal.util.*;
 
 /**
  * Abstract base class for subscribers that hold another subscriber, a queue
@@ -209,7 +209,7 @@ public final void requested(long n) {
         if (SubscriptionHelper.validateRequest(n)) {
             return;
         }
-        REQUESTED.addAndGet(this, n);
+        BackpressureHelper.add(REQUESTED, this, n);
     }
     
     public void drain(boolean delayError) {
diff --git a/src/main/java/io/reactivex/subscribers/TestSubscriber.java b/src/main/java/io/reactivex/subscribers/TestSubscriber.java
index 2eb5a3b441..e5aba71397 100644
--- a/src/main/java/io/reactivex/subscribers/TestSubscriber.java
+++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java
@@ -99,11 +99,11 @@ public TestSubscriber(Long initialRequest) {
     }
 
     /**
-     * Constructs a forwarding TestSubscriber with an initial request value of Long.MAX_VALUE.
+     * Constructs a forwarding TestSubscriber but leaves the requesting to the wrapped subscriber.
      * @param actual the actual Subscriber to forward events to
      */
     public TestSubscriber(Subscriber<? super T> actual) {
-        this(actual, Long.MAX_VALUE);
+        this(actual, null);
     }
 
     /**
diff --git a/src/test/java/io/reactivex/ObservableConversionTest.java b/src/test/java/io/reactivex/ObservableConversionTest.java
new file mode 100644
index 0000000000..de9abf6871
--- /dev/null
+++ b/src/test/java/io/reactivex/ObservableConversionTest.java
@@ -0,0 +1,207 @@
+package io.reactivex;
+
+import java.util.*;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.atomic.*;
+import java.util.function.*;
+
+import org.junit.*;
+import org.reactivestreams.*;
+
+import io.reactivex.Observable.Operator;
+import io.reactivex.internal.operators.*;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class ObservableConversionTest {
+    
+    public static class Cylon {}
+    
+    public static class Jail {
+        Object cylon;
+        
+        Jail(Object cylon) {
+            this.cylon = cylon;
+        }
+    }
+    
+    public static class CylonDetectorObservable<T> {
+        protected Publisher<T> onSubscribe;
+        
+        public static <T> CylonDetectorObservable<T> create(Publisher<T> onSubscribe) {
+            return new CylonDetectorObservable<>(onSubscribe);
+        }
+
+        protected CylonDetectorObservable(Publisher<T> onSubscribe) {
+            this.onSubscribe = onSubscribe;
+        }
+
+        public void subscribe(Subscriber<T> subscriber) {
+            onSubscribe.subscribe(subscriber);
+        }
+
+        public <R> CylonDetectorObservable<R> lift(Operator<? extends R, ? super T> operator) {
+            return x(new RobotConversionFunc<T, R>(operator));
+        }
+        
+        public <R, O> O x(Function<Publisher<T>, O> operator) {
+            return operator.apply(onSubscribe);
+        }
+
+        public <R> CylonDetectorObservable<? extends R> compose(Function<CylonDetectorObservable<? super T>, CylonDetectorObservable<? extends R>> transformer) {
+            return transformer.apply(this);
+        }
+        
+        public final CylonDetectorObservable<T> beep(Predicate<? super T> predicate) {
+            return lift(new OperatorFilter<T>(predicate));
+        }
+        
+        public final <R> CylonDetectorObservable<R> boop(Function<? super T, ? extends R> func) {
+            return lift(new OperatorMap<T, R>(func));
+        }
+
+        public CylonDetectorObservable<String> DESTROY() {
+            return boop(new Function<T, String>() {
+                @Override
+                public String apply(T t) {
+                    Object cylon = ((Jail) t).cylon;
+                    throwOutTheAirlock(cylon);
+                    if (t instanceof Jail) {
+                        String name = cylon.toString();
+                        return "Cylon '" + name + "' has been destroyed";
+                    }
+                    else {
+                        return "Cylon 'anonymous' has been destroyed";
+                    }
+                }});
+        }
+        
+        private static void throwOutTheAirlock(Object cylon) {
+            // ...
+        }
+    }
+    
+    public static class RobotConversionFunc<T, R> implements Function<Publisher<T>, CylonDetectorObservable<R>> {
+        private Operator<? extends R, ? super T> operator;
+
+        public RobotConversionFunc(Operator<? extends R, ? super T> operator) {
+            this.operator = operator;
+        }
+
+        @Override
+        public CylonDetectorObservable<R> apply(final Publisher<T> onSubscribe) {
+            return CylonDetectorObservable.create(new Publisher<R>() {
+                @Override
+                public void subscribe(Subscriber<? super R> o) {
+                    try {
+                        Subscriber<? super T> st = operator.apply(o);
+                        try {
+                            onSubscribe.subscribe(st);
+                        } catch (Throwable e) {
+                            st.onError(e);
+                        }
+                    } catch (Throwable e) {
+                        o.onError(e);
+                    }
+                
+                }});
+        }
+    }
+    
+    public static class ConvertToCylonDetector<T> implements Function<Publisher<T>, CylonDetectorObservable<T>> {
+        @Override
+        public CylonDetectorObservable<T> apply(final Publisher<T> onSubscribe) {
+            return CylonDetectorObservable.create(onSubscribe);
+        }
+    }
+    
+    public static class ConvertToObservable<T> implements Function<Publisher<T>, Observable<T>> {
+        @Override
+        public Observable<T> apply(final Publisher<T> onSubscribe) {
+            return Observable.create(onSubscribe);
+        }
+    }
+    
+    @Test
+    public void testConversionBetweenObservableClasses() {
+        final TestSubscriber<String> subscriber = new TestSubscriber<>(new Observer<String>() {
+
+            @Override
+            public void onComplete() {
+                System.out.println("Complete");
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                System.out.println("error: " + e.getMessage());
+                e.printStackTrace();
+            }
+
+            @Override
+            public void onNext(String t) {
+                System.out.println(t);
+            }
+        });
+        
+        List<Object> crewOfBattlestarGalactica = Arrays.asList(new Object[] {"William Adama", "Laura Roslin", "Lee Adama", new Cylon()});
+        
+        Observable.fromIterable(crewOfBattlestarGalactica)
+            .doOnNext(System.out::println)
+            .to(new ConvertToCylonDetector<>())
+            .beep(t -> t instanceof Cylon)
+            .boop(cylon -> new Jail(cylon))
+            .DESTROY()
+            .x(new ConvertToObservable<String>())
+            .reduce("Cylon Detector finished. Report:\n", (a, n) -> a + n + "\n")
+            .subscribe(subscriber);
+        
+        subscriber.assertNoErrors();
+        subscriber.assertComplete();
+    }
+    
+    @Test
+    public void testConvertToConcurrentQueue() {
+        final AtomicReference<Throwable> thrown = new AtomicReference<>(null);
+        final AtomicBoolean isFinished = new AtomicBoolean(false);
+        ConcurrentLinkedQueue<? extends Integer> queue = Observable.range(0,5)
+                .flatMap(i -> Observable.range(0, 5)
+                        .observeOn(Schedulers.io())
+                        .map(k -> {
+                            try {
+                                Thread.sleep(System.currentTimeMillis() % 100);
+                            } catch (InterruptedException e) {
+                                e.printStackTrace();
+                            }
+                            return i + k;
+                        }))
+                    .to(onSubscribe -> {
+                        final ConcurrentLinkedQueue<Integer> q = new ConcurrentLinkedQueue<>();
+                        onSubscribe.subscribe(new Observer<Integer>(){
+                            @Override
+                            public void onComplete() {
+                                isFinished.set(true);
+                            }
+      
+                            @Override
+                            public void onError(Throwable e) {
+                                thrown.set(e);
+                            }
+      
+                            @Override
+                            public void onNext(Integer t) {
+                                q.add(t);
+                            }});
+                        return q;
+                    });
+        
+        int x = 0;
+        while (!isFinished.get()) {
+            Integer i = queue.poll();
+            if (i != null) {
+                x++;
+                System.out.println(x + " item: " + i);
+            }
+        }
+        Assert.assertNull(thrown.get());
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/ObservableDoOnTest.java b/src/test/java/io/reactivex/ObservableDoOnTest.java
new file mode 100644
index 0000000000..e1a4a9e33e
--- /dev/null
+++ b/src/test/java/io/reactivex/ObservableDoOnTest.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.atomic.*;
+
+import org.junit.Test;
+
+public class ObservableDoOnTest {
+
+    @Test
+    public void testDoOnEach() {
+        final AtomicReference<String> r = new AtomicReference<>();
+        String output = Observable.just("one").doOnNext(r::set).toBlocking().single();
+
+        assertEquals("one", output);
+        assertEquals("one", r.get());
+    }
+
+    @Test
+    public void testDoOnError() {
+        final AtomicReference<Throwable> r = new AtomicReference<>();
+        Throwable t = null;
+        try {
+            Observable.<String> error(new RuntimeException("an error"))
+            .doOnError(r::set).toBlocking().single();
+            fail("expected exception, not a return value");
+        } catch (Throwable e) {
+            t = e;
+        }
+
+        assertNotNull(t);
+        assertEquals(t, r.get());
+    }
+
+    @Test
+    public void testDoOnCompleted() {
+        final AtomicBoolean r = new AtomicBoolean();
+        String output = Observable.just("one").doOnComplete(() -> r.set(true)).toBlocking().single();
+
+        assertEquals("one", output);
+        assertTrue(r.get());
+    }
+}
\ No newline at end of file
