diff --git a/src/main/java/rx/observers/TestSubscriber.java b/src/main/java/rx/observers/TestSubscriber.java
index a2255cf401..9cc5032aef 100644
--- a/src/main/java/rx/observers/TestSubscriber.java
+++ b/src/main/java/rx/observers/TestSubscriber.java
@@ -404,20 +404,29 @@ public void assertError(Class<? extends Throwable> clazz) {
      */
     @Experimental
     public void assertError(Throwable throwable) {
-        List<Throwable> err = testObserver.getOnErrorEvents();
-        if (err.size() == 0) {
+        final List<Throwable> errorEvents = testObserver.getOnErrorEvents();
+
+        if (errorEvents.isEmpty()) {
             throw new AssertionError("No errors");
-        } else
-        if (err.size() > 1) {
-            AssertionError ae = new AssertionError("Multiple errors: " + err.size());
-            ae.initCause(new CompositeException(err));
+        }
+
+        if (errorEvents.size() > 1) {
+            AssertionError ae = new AssertionError("Multiple errors: " + errorEvents.size());
+            ae.initCause(new CompositeException(errorEvents));
             throw ae;
-        } else
-        if (!throwable.equals(err.get(0))) {
-            AssertionError ae = new AssertionError("Exceptions differ; expected: " + throwable + ", actual: " + err.get(0));
-            ae.initCause(err.get(0));
+        }
+
+        final Throwable firstError = errorEvents.isEmpty()
+                ? null
+                : errorEvents.get(0);
+
+        if (throwable != firstError && !throwable.equals(firstError)) {
+            AssertionError ae = new AssertionError("Exceptions differ; expected: " + throwable + ", actual: " + firstError);
+            ae.initCause(firstError);
             throw ae;
         }
+
+        // assert passed
     }
 
     /**
diff --git a/src/test/java/rx/exceptions/ExceptionsTest.java b/src/test/java/rx/exceptions/ExceptionsTest.java
index 4148f1b9e6..ba1a8fd1ff 100644
--- a/src/test/java/rx/exceptions/ExceptionsTest.java
+++ b/src/test/java/rx/exceptions/ExceptionsTest.java
@@ -24,7 +24,9 @@
 
 import rx.Observable;
 import rx.Observer;
+import rx.Subscriber;
 import rx.functions.Action1;
+import rx.observers.TestSubscriber;
 import rx.subjects.PublishSubject;
 
 public class ExceptionsTest {
@@ -162,4 +164,19 @@ public void onNext(Object o) {
         }
     }
 
+    @Test
+    public void shouldAllowThrowingNullError() {
+        TestSubscriber<Object> testSubscriber = new TestSubscriber<Object>();
+
+        Observable
+                .create(new Observable.OnSubscribe<Object>() {
+                    @Override
+                    public void call(Subscriber<? super Object> subscriber) {
+                        subscriber.onError(null);
+                    }
+                })
+                .subscribe(testSubscriber);
+
+        testSubscriber.assertError((Throwable) null);
+    }
 }
