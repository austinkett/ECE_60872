diff --git a/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java
index 3f1e609eaa..2d7d49ca46 100644
--- a/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java
+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDoOnEach.java
@@ -21,6 +21,7 @@
 import io.reactivex.functions.*;
 import io.reactivex.internal.fuseable.ConditionalSubscriber;
 import io.reactivex.internal.subscribers.*;
+import io.reactivex.internal.util.ExceptionHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 public final class FlowableDoOnEach<T> extends AbstractFlowableWithUpstream<T, T> {
@@ -149,11 +150,33 @@ public int requestFusion(int mode) {
         @Nullable
         @Override
         public T poll() throws Exception {
-            T v = qs.poll();
+            T v;
+
+            try {
+                v = qs.poll();
+            } catch (Throwable ex) {
+                Exceptions.throwIfFatal(ex);
+                try {
+                    onError.accept(ex);
+                } catch (Throwable exc) {
+                    throw new CompositeException(ex, exc);
+                }
+                throw ExceptionHelper.<Exception>throwIfThrowable(ex);
+            }
 
             if (v != null) {
                 try {
-                    onNext.accept(v);
+                    try {
+                        onNext.accept(v);
+                    } catch (Throwable ex) {
+                        Exceptions.throwIfFatal(ex);
+                        try {
+                            onError.accept(ex);
+                        } catch (Throwable exc) {
+                            throw new CompositeException(ex, exc);
+                        }
+                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);
+                    }
                 } finally {
                     onAfterTerminate.run();
                 }
@@ -282,11 +305,33 @@ public int requestFusion(int mode) {
         @Nullable
         @Override
         public T poll() throws Exception {
-            T v = qs.poll();
+            T v;
+
+            try {
+                v = qs.poll();
+            } catch (Throwable ex) {
+                Exceptions.throwIfFatal(ex);
+                try {
+                    onError.accept(ex);
+                } catch (Throwable exc) {
+                    throw new CompositeException(ex, exc);
+                }
+                throw ExceptionHelper.<Exception>throwIfThrowable(ex);
+            }
 
             if (v != null) {
                 try {
-                    onNext.accept(v);
+                    try {
+                        onNext.accept(v);
+                    } catch (Throwable ex) {
+                        Exceptions.throwIfFatal(ex);
+                        try {
+                            onError.accept(ex);
+                        } catch (Throwable exc) {
+                            throw new CompositeException(ex, exc);
+                        }
+                        throw ExceptionHelper.<Exception>throwIfThrowable(ex);
+                    }
                 } finally {
                     onAfterTerminate.run();
                 }
diff --git a/src/main/java/io/reactivex/internal/util/ExceptionHelper.java b/src/main/java/io/reactivex/internal/util/ExceptionHelper.java
index c8b53b0347..002f2df215 100644
--- a/src/main/java/io/reactivex/internal/util/ExceptionHelper.java
+++ b/src/main/java/io/reactivex/internal/util/ExceptionHelper.java
@@ -106,6 +106,21 @@ public static RuntimeException wrapOrThrow(Throwable error) {
         return list;
     }
 
+    /**
+     * Workaround for Java 6 not supporting throwing a final Throwable from a catch block.
+     * @param <E> the generic exception type
+     * @param e the Throwable error to return or throw
+     * @return the Throwable e if it is a subclass of Exception
+     * @throws E the generic exception thrown
+     */
+    @SuppressWarnings("unchecked")
+    public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E {
+        if (e instanceof Exception) {
+            return (Exception)e;
+        }
+        throw (E)e;
+    }
+
     static final class Termination extends Throwable {
 
         private static final long serialVersionUID = -4649703670690200604L;
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnEachTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnEachTest.java
index fbd8f6a6c6..d55c6be3a9 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnEachTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDoOnEachTest.java
@@ -26,6 +26,7 @@
 
 import io.reactivex.*;
 import io.reactivex.exceptions.*;
+import io.reactivex.flowables.ConnectableFlowable;
 import io.reactivex.functions.*;
 import io.reactivex.internal.functions.Functions;
 import io.reactivex.internal.fuseable.*;
@@ -732,4 +733,197 @@ public void doubleOnSubscribe() {
             }
         });
     }
+
+    @Test
+    public void doOnNextDoOnErrorFused() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+        .doOnNext(new Consumer<Integer>() {
+            @Override
+            public void accept(Integer v) throws Exception {
+                throw new TestException("First");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Second");
+            }
+        })
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+    }
+
+    @Test
+    public void doOnNextDoOnErrorCombinedFused() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+                .compose(new FlowableTransformer<Integer, Integer>() {
+                    @Override
+                    public Publisher<Integer> apply(Flowable<Integer> v) {
+                        return new FlowableDoOnEach<Integer>(v,
+                                new Consumer<Integer>() {
+                                    @Override
+                                    public void accept(Integer v) throws Exception {
+                                        throw new TestException("First");
+                                    }
+                                },
+                                new Consumer<Throwable>() {
+                                    @Override
+                                    public void accept(Throwable e) throws Exception {
+                                        throw new TestException("Second");
+                                    }
+                                },
+                                Functions.EMPTY_ACTION
+                                ,
+                                Functions.EMPTY_ACTION
+                                );
+                    }
+                })
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+    }
+
+    @Test
+    public void doOnNextDoOnErrorFused2() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+        .doOnNext(new Consumer<Integer>() {
+            @Override
+            public void accept(Integer v) throws Exception {
+                throw new TestException("First");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Second");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Third");
+            }
+        })
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+        TestHelper.assertError(ts, 2, TestException.class, "Third");
+    }
+
+    @Test
+    public void doOnNextDoOnErrorFusedConditional() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+        .doOnNext(new Consumer<Integer>() {
+            @Override
+            public void accept(Integer v) throws Exception {
+                throw new TestException("First");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Second");
+            }
+        })
+        .filter(Functions.alwaysTrue())
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+    }
+
+    @Test
+    public void doOnNextDoOnErrorFusedConditional2() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+        .doOnNext(new Consumer<Integer>() {
+            @Override
+            public void accept(Integer v) throws Exception {
+                throw new TestException("First");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Second");
+            }
+        })
+        .doOnError(new Consumer<Throwable>() {
+            @Override
+            public void accept(Throwable e) throws Exception {
+                throw new TestException("Third");
+            }
+        })
+        .filter(Functions.alwaysTrue())
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+        TestHelper.assertError(ts, 2, TestException.class, "Third");
+    }
+
+    @Test
+    public void doOnNextDoOnErrorCombinedFusedConditional() {
+        ConnectableFlowable<Integer> co = Flowable.just(1)
+                .compose(new FlowableTransformer<Integer, Integer>() {
+                    @Override
+                    public Publisher<Integer> apply(Flowable<Integer> v) {
+                        return new FlowableDoOnEach<Integer>(v,
+                                new Consumer<Integer>() {
+                                    @Override
+                                    public void accept(Integer v) throws Exception {
+                                        throw new TestException("First");
+                                    }
+                                },
+                                new Consumer<Throwable>() {
+                                    @Override
+                                    public void accept(Throwable e) throws Exception {
+                                        throw new TestException("Second");
+                                    }
+                                },
+                                Functions.EMPTY_ACTION
+                                ,
+                                Functions.EMPTY_ACTION
+                                );
+                    }
+                })
+        .filter(Functions.alwaysTrue())
+        .publish();
+
+        TestSubscriber<Integer> ts = co.test();
+        co.connect();
+
+        ts.assertFailure(CompositeException.class);
+
+        TestHelper.assertError(ts, 0, TestException.class, "First");
+        TestHelper.assertError(ts, 1, TestException.class, "Second");
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/util/ExceptionHelperTest.java b/src/test/java/io/reactivex/internal/util/ExceptionHelperTest.java
index 82c4c27230..618ae20d31 100644
--- a/src/test/java/io/reactivex/internal/util/ExceptionHelperTest.java
+++ b/src/test/java/io/reactivex/internal/util/ExceptionHelperTest.java
@@ -46,4 +46,9 @@ public void run() {
             TestHelper.race(r, r, Schedulers.single());
         }
     }
+
+    @Test(expected = InternalError.class)
+    public void throwIfThrowable() throws Exception {
+        ExceptionHelper.<Exception>throwIfThrowable(new InternalError());
+    }
 }
