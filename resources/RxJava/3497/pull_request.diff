diff --git a/src/main/java/io/reactivex/internal/operators/OperatorTakeLastTimed.java b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastTimed.java
index 63b0d71138..df5bfdcf00 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorTakeLastTimed.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorTakeLastTimed.java
@@ -95,26 +95,18 @@ public void onNext(T t) {
             final Queue<Object> q = queue;
 
             long now = scheduler.now(unit);
-            long time = this.time;
-            long c = count;
-            boolean unbounded = c == Long.MAX_VALUE;
-            
+
             q.offer(now);
             q.offer(t);
             
-            while (!q.isEmpty()) {
-                long ts = (Long)q.peek();
-                if (ts <= now - time || (!unbounded && (q.size() >> 1) > c)) {
-                    q.poll();
-                    q.poll();
-                } else {
-                    break;
-                }
-            }
+            trim(now, q);
         }
         
         @Override
         public void onError(Throwable t) {
+            if (delayError) {
+                trim(scheduler.now(unit), queue);
+            }
             error = t;
             done = true;
             drain();
@@ -122,10 +114,27 @@ public void onError(Throwable t) {
         
         @Override
         public void onComplete() {
+            trim(scheduler.now(unit), queue);
             done = true;
             drain();
         }
         
+        void trim(long now, Queue<Object> q) {
+            long time = this.time;
+            long c = count;
+            boolean unbounded = c == Long.MAX_VALUE;
+
+            while (!q.isEmpty()) {
+                long ts = (Long)q.peek();
+                if (ts < now - time || (!unbounded && (q.size() >> 1) > c)) {
+                    q.poll();
+                    q.poll();
+                } else {
+                    break;
+                }
+            }
+        }
+        
         @Override
         public void request(long n) {
             if (SubscriptionHelper.validateRequest(n)) {
@@ -171,18 +180,19 @@ void drain() {
                     boolean unbounded = r == Long.MAX_VALUE;
                     long e = 0L;
                     
-                    while (r != 0) {
-                        Object ts = q.poll(); // the timestamp long
+                    for (;;) {
+                        Object ts = q.peek(); // the timestamp long
                         empty = ts == null;
                         
                         if (checkTerminated(empty, a, delayError)) {
                             return;
                         }
                         
-                        if (empty) {
+                        if (empty || r == 0L) {
                             break;
                         }
                         
+                        q.poll();
                         @SuppressWarnings("unchecked")
                         T o = (T)q.poll();
                         if (o == null) {
@@ -191,10 +201,6 @@ void drain() {
                             return;
                         }
                         
-                        if ((Long)ts < scheduler.now(unit) - time) {
-                            continue;
-                        }
-                        
                         a.onNext(o);
                         
                         r--;
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorTakeLastTimedTest.java b/src/test/java/io/reactivex/internal/operators/OperatorTakeLastTimedTest.java
index e72b6bc95c..6189725c65 100644
--- a/src/test/java/io/reactivex/internal/operators/OperatorTakeLastTimedTest.java
+++ b/src/test/java/io/reactivex/internal/operators/OperatorTakeLastTimedTest.java
@@ -24,8 +24,9 @@
 
 import io.reactivex.*;
 import io.reactivex.exceptions.TestException;
-import io.reactivex.schedulers.TestScheduler;
+import io.reactivex.schedulers.*;
 import io.reactivex.subjects.PublishSubject;
+import io.reactivex.subscribers.TestSubscriber;
 
 public class OperatorTakeLastTimedTest {
 
@@ -200,4 +201,40 @@ public void takeLastTimedWithZeroCapacity() {
         verify(o, never()).onNext(any());
         verify(o, never()).onError(any(Throwable.class));
     }
+    
+    @Test
+    public void testContinuousDelivery() {
+        TestScheduler scheduler = Schedulers.test();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        PublishSubject<Integer> ps = PublishSubject.create();
+        
+        ps.takeLast(1000, TimeUnit.MILLISECONDS, scheduler).subscribe(ts);
+        
+        ps.onNext(1);
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+        ps.onNext(2);
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+        ps.onNext(3);
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+        ps.onNext(4);
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+        ps.onComplete();
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+
+        ts.assertNoValues();
+        
+        ts.request(1);
+        
+        ts.assertValue(3);
+        
+        scheduler.advanceTimeBy(500, TimeUnit.MILLISECONDS);
+        ts.request(1);
+        
+        ts.assertValues(3, 4);
+        ts.assertComplete();
+        ts.assertNoErrors();
+        
+    }
 }
\ No newline at end of file
