diff --git a/src/main/java/io/reactivex/Flowable.java b/src/main/java/io/reactivex/Flowable.java
index 8fb991144a..7533c5a991 100644
--- a/src/main/java/io/reactivex/Flowable.java
+++ b/src/main/java/io/reactivex/Flowable.java
@@ -25,7 +25,7 @@
 import io.reactivex.internal.functions.*;
 import io.reactivex.internal.fuseable.ScalarCallable;
 import io.reactivex.internal.operators.flowable.*;
-import io.reactivex.internal.operators.observable.*;
+import io.reactivex.internal.operators.observable.ObservableFromPublisher;
 import io.reactivex.internal.schedulers.ImmediateThinScheduler;
 import io.reactivex.internal.subscribers.*;
 import io.reactivex.internal.util.*;
@@ -7266,7 +7266,7 @@ public final void blockingSubscribe(Subscriber<? super T> subscriber) {
     @BackpressureSupport(BackpressureKind.FULL)
     @SchedulerSupport(SchedulerSupport.NONE)
     public final Flowable<T> distinctUntilChanged() {
-        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate());
+        return distinctUntilChanged(Functions.identity());
     }
 
     /**
@@ -7294,7 +7294,7 @@ public final void blockingSubscribe(Subscriber<? super T> subscriber) {
     @SchedulerSupport(SchedulerSupport.NONE)
     public final <K> Flowable<T> distinctUntilChanged(Function<? super T, K> keySelector) {
         ObjectHelper.requireNonNull(keySelector, "keySelector is null");
-        return new FlowableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));
+        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));
     }
 
     /**
@@ -7321,7 +7321,7 @@ public final void blockingSubscribe(Subscriber<? super T> subscriber) {
     @SchedulerSupport(SchedulerSupport.NONE)
     public final Flowable<T> distinctUntilChanged(BiPredicate<? super T, ? super T> comparer) {
         ObjectHelper.requireNonNull(comparer, "comparer is null");
-        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T>(this, comparer));
+        return RxJavaPlugins.onAssembly(new FlowableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));
     }
 
     /**
diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index 40354b8163..746a342a39 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -6333,7 +6333,7 @@ public final void blockingSubscribe(Observer<? super T> subscriber) {
      */
     @SchedulerSupport(SchedulerSupport.NONE)
     public final Observable<T> distinctUntilChanged() {
-        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate());
+        return distinctUntilChanged(Functions.identity());
     }
 
     /**
@@ -6357,7 +6357,7 @@ public final void blockingSubscribe(Observer<? super T> subscriber) {
     @SchedulerSupport(SchedulerSupport.NONE)
     public final <K> Observable<T> distinctUntilChanged(Function<? super T, K> keySelector) {
         ObjectHelper.requireNonNull(keySelector, "keySelector is null");
-        return new ObservableDistinctUntilChanged<T>(this, Functions.equalsPredicate(keySelector));
+        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, K>(this, keySelector, ObjectHelper.equalsPredicate()));
     }
 
     /**
@@ -6380,7 +6380,7 @@ public final void blockingSubscribe(Observer<? super T> subscriber) {
     @SchedulerSupport(SchedulerSupport.NONE)
     public final Observable<T> distinctUntilChanged(BiPredicate<? super T, ? super T> comparer) {
         ObjectHelper.requireNonNull(comparer, "comparer is null");
-        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T>(this, comparer));
+        return RxJavaPlugins.onAssembly(new ObservableDistinctUntilChanged<T, T>(this, Functions.<T>identity(), comparer));
     }
 
     /**
diff --git a/src/main/java/io/reactivex/internal/functions/Functions.java b/src/main/java/io/reactivex/internal/functions/Functions.java
index e3dc91b2f1..9a6337316c 100644
--- a/src/main/java/io/reactivex/internal/functions/Functions.java
+++ b/src/main/java/io/reactivex/internal/functions/Functions.java
@@ -639,32 +639,6 @@ public int compare(Object o1, Object o2) {
         return new ListSorter<T>(comparator);
     }
 
-    static final BiPredicate<Object, Object> DEFAULT_EQUALS_PREDICATE = equalsPredicate(Functions.identity());
-
-    @SuppressWarnings("unchecked")
-    public static <T> BiPredicate<T, T> equalsPredicate() {
-        return (BiPredicate<T, T>)DEFAULT_EQUALS_PREDICATE;
-    }
-
-    static final class KeyedEqualsPredicate<T, K> implements BiPredicate<T, T> {
-        final Function<? super T, K> keySelector;
-
-        KeyedEqualsPredicate(Function<? super T, K> keySelector) {
-            this.keySelector = keySelector;
-        }
-
-        @Override
-        public boolean test(T t1, T t2) throws Exception {
-            K k1 = ObjectHelper.requireNonNull(keySelector.apply(t1), "The keySelector returned a null key");
-            K k2 = ObjectHelper.requireNonNull(keySelector.apply(t2), "The keySelector returned a null key");
-            return ObjectHelper.equals(k1, k2);
-        }
-    }
-
-    public static <T, K> BiPredicate<T, T> equalsPredicate(Function<? super T, K> keySelector) {
-        return new KeyedEqualsPredicate<T, K>(keySelector);
-    }
-
     public static final Consumer<Subscription> REQUEST_MAX = new Consumer<Subscription>() {
         @Override
         public void accept(Subscription t) throws Exception {
diff --git a/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged.java b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged.java
index 6ed807ffe1..c0155b9aa7 100644
--- a/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged.java
+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged.java
@@ -15,16 +15,19 @@
 
 import org.reactivestreams.*;
 
-import io.reactivex.functions.BiPredicate;
+import io.reactivex.functions.*;
 import io.reactivex.internal.fuseable.ConditionalSubscriber;
 import io.reactivex.internal.subscribers.*;
 
-public final class FlowableDistinctUntilChanged<T> extends AbstractFlowableWithUpstream<T, T> {
+public final class FlowableDistinctUntilChanged<T, K> extends AbstractFlowableWithUpstream<T, T> {
 
-    final BiPredicate<? super T, ? super T> comparer;
+    final Function<? super T, K> keySelector;
 
-    public FlowableDistinctUntilChanged(Publisher<T> source, BiPredicate<? super T, ? super T> comparer) {
+    final BiPredicate<? super K, ? super K> comparer;
+
+    public FlowableDistinctUntilChanged(Publisher<T> source, Function<? super T, K> keySelector, BiPredicate<? super K, ? super K> comparer) {
         super(source);
+        this.keySelector = keySelector;
         this.comparer = comparer;
     }
 
@@ -32,24 +35,29 @@ public FlowableDistinctUntilChanged(Publisher<T> source, BiPredicate<? super T,
     protected void subscribeActual(Subscriber<? super T> s) {
         if (s instanceof ConditionalSubscriber) {
             ConditionalSubscriber<? super T> cs = (ConditionalSubscriber<? super T>) s;
-            source.subscribe(new DistinctUntilChangedConditionalSubscriber<T>(cs, comparer));
+            source.subscribe(new DistinctUntilChangedConditionalSubscriber<T, K>(cs, keySelector, comparer));
         } else {
-            source.subscribe(new DistinctUntilChangedSubscriber<T>(s, comparer));
+            source.subscribe(new DistinctUntilChangedSubscriber<T, K>(s, keySelector, comparer));
         }
     }
 
-    static final class DistinctUntilChangedSubscriber<T> extends BasicFuseableSubscriber<T, T>
+    static final class DistinctUntilChangedSubscriber<T, K> extends BasicFuseableSubscriber<T, T>
     implements ConditionalSubscriber<T> {
 
-        final BiPredicate<? super T, ? super T> comparer;
 
-        T last;
+        final Function<? super T, K> keySelector;
+
+        final BiPredicate<? super K, ? super K> comparer;
+
+        K last;
 
         boolean hasValue;
 
         DistinctUntilChangedSubscriber(Subscriber<? super T> actual,
-                BiPredicate<? super T, ? super T> comparer) {
+                Function<? super T, K> keySelector,
+                BiPredicate<? super K, ? super K> comparer) {
             super(actual);
+            this.keySelector = keySelector;
             this.comparer = comparer;
         }
 
@@ -70,23 +78,25 @@ public boolean tryOnNext(T t) {
                 return true;
             }
 
-            if (hasValue) {
-                boolean equal;
-                try {
-                    equal = comparer.test(last, t);
-                } catch (Throwable ex) {
-                    fail(ex);
-                    return false;
-                }
-                last = t;
-                if (equal) {
-                    return false;
+            K key;
+
+            try {
+                key = keySelector.apply(t);
+                if (hasValue) {
+                    boolean equal = comparer.test(last, key);
+                    last = key;
+                    if (equal) {
+                        return false;
+                    }
+                } else {
+                    hasValue = true;
+                    last = key;
                 }
-                actual.onNext(t);
-                return true;
+            } catch (Throwable ex) {
+               fail(ex);
+               return true;
             }
-            hasValue = true;
-            last = t;
+
             actual.onNext(t);
             return true;
         }
@@ -103,17 +113,18 @@ public T poll() throws Exception {
                 if (v == null) {
                     return null;
                 }
+                K key = keySelector.apply(v);
                 if (!hasValue) {
                     hasValue = true;
-                    last = v;
+                    last = key;
                     return v;
                 }
 
-                if (!comparer.test(last, v)) {
-                    last = v;
+                if (!comparer.test(last, key)) {
+                    last = key;
                     return v;
                 }
-                last = v;
+                last = key;
                 if (sourceMode != SYNC) {
                     s.request(1);
                 }
@@ -122,17 +133,21 @@ public T poll() throws Exception {
 
     }
 
-    static final class DistinctUntilChangedConditionalSubscriber<T> extends BasicFuseableConditionalSubscriber<T, T> {
+    static final class DistinctUntilChangedConditionalSubscriber<T, K> extends BasicFuseableConditionalSubscriber<T, T> {
+
+        final Function<? super T, K> keySelector;
 
-        final BiPredicate<? super T, ? super T> comparer;
+        final BiPredicate<? super K, ? super K> comparer;
 
-        T last;
+        K last;
 
         boolean hasValue;
 
         DistinctUntilChangedConditionalSubscriber(ConditionalSubscriber<? super T> actual,
-                BiPredicate<? super T, ? super T> comparer) {
+                Function<? super T, K> keySelector,
+                BiPredicate<? super K, ? super K> comparer) {
             super(actual);
+            this.keySelector = keySelector;
             this.comparer = comparer;
         }
 
@@ -152,20 +167,27 @@ public boolean tryOnNext(T t) {
                 return actual.tryOnNext(t);
             }
 
-            if (hasValue) {
-                boolean equal;
-                try {
-                    equal = comparer.test(last, t);
-                } catch (Throwable ex) {
-                    fail(ex);
-                    return false;
+            K key;
+
+            try {
+                key = keySelector.apply(t);
+                if (hasValue) {
+                    boolean equal = comparer.test(last, key);
+                    last = key;
+                    if (equal) {
+                        return false;
+                    }
+                } else {
+                    hasValue = true;
+                    last = key;
                 }
-                last = t;
-                return !equal && actual.tryOnNext(t);
+            } catch (Throwable ex) {
+               fail(ex);
+               return true;
             }
-            hasValue = true;
-            last = t;
-            return actual.tryOnNext(t);
+
+            actual.onNext(t);
+            return true;
         }
 
         @Override
@@ -180,16 +202,18 @@ public T poll() throws Exception {
                 if (v == null) {
                     return null;
                 }
+                K key = keySelector.apply(v);
                 if (!hasValue) {
                     hasValue = true;
-                    last = v;
+                    last = key;
                     return v;
                 }
-                if (!comparer.test(last, v)) {
-                    last = v;
+
+                if (!comparer.test(last, key)) {
+                    last = key;
                     return v;
                 }
-                last = v;
+                last = key;
                 if (sourceMode != SYNC) {
                     s.request(1);
                 }
diff --git a/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChanged.java b/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChanged.java
index ea1e77502f..ae24b357f9 100644
--- a/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChanged.java
+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChanged.java
@@ -14,34 +14,41 @@
 package io.reactivex.internal.operators.observable;
 
 import io.reactivex.*;
-import io.reactivex.functions.BiPredicate;
+import io.reactivex.functions.*;
 import io.reactivex.internal.observers.BasicFuseableObserver;
 
-public final class ObservableDistinctUntilChanged<T> extends AbstractObservableWithUpstream<T, T> {
+public final class ObservableDistinctUntilChanged<T, K> extends AbstractObservableWithUpstream<T, T> {
 
-    final BiPredicate<? super T, ? super T> comparer;
+    final Function<? super T, K> keySelector;
 
-    public ObservableDistinctUntilChanged(ObservableSource<T> source, BiPredicate<? super T, ? super T> comparer) {
+    final BiPredicate<? super K, ? super K> comparer;
+
+    public ObservableDistinctUntilChanged(ObservableSource<T> source, Function<? super T, K> keySelector, BiPredicate<? super K, ? super K> comparer) {
         super(source);
+        this.keySelector = keySelector;
         this.comparer = comparer;
     }
 
     @Override
     protected void subscribeActual(Observer<? super T> s) {
-        source.subscribe(new DistinctUntilChangedObserver<T>(s, comparer));
+        source.subscribe(new DistinctUntilChangedObserver<T, K>(s, keySelector, comparer));
     }
 
-    static final class DistinctUntilChangedObserver<T> extends BasicFuseableObserver<T, T> {
+    static final class DistinctUntilChangedObserver<T, K> extends BasicFuseableObserver<T, T> {
+
+        final Function<? super T, K> keySelector;
 
-        final BiPredicate<? super T, ? super T> comparer;
+        final BiPredicate<? super K, ? super K> comparer;
 
-        T last;
+        K last;
 
         boolean hasValue;
 
         DistinctUntilChangedObserver(Observer<? super T> actual,
-                BiPredicate<? super T, ? super T> comparer) {
+                Function<? super T, K> keySelector,
+                BiPredicate<? super K, ? super K> comparer) {
             super(actual);
+            this.keySelector = keySelector;
             this.comparer = comparer;
         }
 
@@ -55,24 +62,27 @@ public void onNext(T t) {
                 return;
             }
 
-            if (hasValue) {
-                boolean equal;
-                try {
-                    equal = comparer.test(last, t);
-                } catch (Throwable ex) {
-                    fail(ex);
-                    return;
-                }
-                last = t;
-                if (equal) {
-                    return;
+            K key;
+
+            try {
+                key = keySelector.apply(t);
+                if (hasValue) {
+                    boolean equal = comparer.test(last, key);
+                    last = key;
+                    if (equal) {
+                        return;
+                    }
+                } else {
+                    hasValue = true;
+                    last = key;
                 }
-                actual.onNext(t);
-                return;
+            } catch (Throwable ex) {
+               fail(ex);
+               return;
             }
-            hasValue = true;
-            last = t;
+
             actual.onNext(t);
+            return;
         }
 
         @Override
@@ -87,17 +97,18 @@ public T poll() throws Exception {
                 if (v == null) {
                     return null;
                 }
+                K key = keySelector.apply(v);
                 if (!hasValue) {
                     hasValue = true;
-                    last = v;
+                    last = key;
                     return v;
                 }
 
-                if (!comparer.test(last, v)) {
-                    last = v;
+                if (!comparer.test(last, key)) {
+                    last = key;
                     return v;
                 }
-                last = v;
+                last = key;
             }
         }
 
diff --git a/src/test/java/io/reactivex/flowable/FlowableNullTests.java b/src/test/java/io/reactivex/flowable/FlowableNullTests.java
index 16e52117c2..01cbf4f2c2 100644
--- a/src/test/java/io/reactivex/flowable/FlowableNullTests.java
+++ b/src/test/java/io/reactivex/flowable/FlowableNullTests.java
@@ -1167,14 +1167,14 @@ public void distinctUntilChangedBiPredicateNull() {
         just1.distinctUntilChanged((BiPredicate<Integer, Integer>)null);
     }
 
-    @Test(expected = NullPointerException.class)
+    @Test
     public void distinctUntilChangedFunctionReturnsNull() {
         Flowable.range(1, 2).distinctUntilChanged(new Function<Integer, Object>() {
             @Override
             public Object apply(Integer v) {
                 return null;
             }
-        }).blockingSubscribe();
+        }).test().assertResult(1);
     }
 
     @Test(expected = NullPointerException.class)
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChangedTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChangedTest.java
index cb8c5aa978..52fd6e336f 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChangedTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDistinctUntilChangedTest.java
@@ -30,7 +30,7 @@
 import io.reactivex.internal.fuseable.*;
 import io.reactivex.internal.subscriptions.BooleanSubscription;
 import io.reactivex.plugins.RxJavaPlugins;
-import io.reactivex.processors.UnicastProcessor;
+import io.reactivex.processors.*;
 import io.reactivex.subscribers.*;
 
 public class FlowableDistinctUntilChangedTest {
@@ -340,5 +340,31 @@ public boolean test(Integer a, Integer b) throws Exception {
         } finally {
             RxJavaPlugins.reset();
         }
-   }
+    }
+
+    class Mutable {
+        int value;
+    }
+
+    @Test
+    public void mutableWithSelector() {
+        Mutable m = new Mutable();
+
+        PublishProcessor<Mutable> pp = PublishProcessor.create();
+
+        TestSubscriber<Mutable> ts = pp.distinctUntilChanged(new Function<Mutable, Object>() {
+            @Override
+            public Object apply(Mutable m) throws Exception {
+                return m.value;
+            }
+        })
+        .test();
+
+        pp.onNext(m);
+        m.value = 1;
+        pp.onNext(m);
+        pp.onComplete();
+
+        ts.assertResult(m, m);
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChangedTest.java b/src/test/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChangedTest.java
index 434d6b70a8..48ac37cafd 100644
--- a/src/test/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChangedTest.java
+++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableDistinctUntilChangedTest.java
@@ -29,7 +29,7 @@
 import io.reactivex.internal.fuseable.QueueDisposable;
 import io.reactivex.observers.*;
 import io.reactivex.plugins.RxJavaPlugins;
-import io.reactivex.subjects.UnicastSubject;
+import io.reactivex.subjects.*;
 
 public class ObservableDistinctUntilChangedTest {
 
@@ -248,4 +248,30 @@ public boolean test(Integer a, Integer b) throws Exception {
             RxJavaPlugins.reset();
         }
    }
+
+    class Mutable {
+        int value;
+    }
+
+    @Test
+    public void mutableWithSelector() {
+        Mutable m = new Mutable();
+
+        PublishSubject<Mutable> pp = PublishSubject.create();
+
+        TestObserver<Mutable> ts = pp.distinctUntilChanged(new Function<Mutable, Object>() {
+            @Override
+            public Object apply(Mutable m) throws Exception {
+                return m.value;
+            }
+        })
+        .test();
+
+        pp.onNext(m);
+        m.value = 1;
+        pp.onNext(m);
+        pp.onComplete();
+
+        ts.assertResult(m, m);
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/observable/ObservableNullTests.java b/src/test/java/io/reactivex/observable/ObservableNullTests.java
index 8aedbb83a8..5dda9022cf 100644
--- a/src/test/java/io/reactivex/observable/ObservableNullTests.java
+++ b/src/test/java/io/reactivex/observable/ObservableNullTests.java
@@ -1257,14 +1257,14 @@ public void distinctUntilChangedBiPredicateNull() {
         just1.distinctUntilChanged((BiPredicate<Object, Object>)null);
     }
 
-    @Test(expected = NullPointerException.class)
+    @Test
     public void distinctUntilChangedFunctionReturnsNull() {
         Observable.range(1, 2).distinctUntilChanged(new Function<Integer, Object>() {
             @Override
             public Object apply(Integer v) {
                 return null;
             }
-        }).blockingSubscribe();
+        }).test().assertResult(1);
     }
 
     @Test(expected = NullPointerException.class)
