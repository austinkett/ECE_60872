diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index f1df79e98c..f7f21b8856 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -554,10 +554,10 @@ public static int bufferSize() {
         if (count == 0) {
             return empty();
         } else
-            if (count == 1) {
-                return just(start);
-            }
-        if (start + (long)count > Integer.MAX_VALUE) {
+        if (count == 1) {
+            return just(start);
+        } else
+        if ((long)start + (count - 1) > Integer.MAX_VALUE) {
             throw new IllegalArgumentException("Integer overflow");
         }
         return create(new PublisherRangeSource(start, count));
diff --git a/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java b/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java
index 152a6b749a..83a63c0cac 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherIterableSource.java
@@ -35,6 +35,7 @@
     public PublisherIterableSource(Iterable<? extends T> source) {
         this.source = source;
     }
+    
     @Override
     public void subscribe(Subscriber<? super T> s) {
         Iterator<? extends T> it;
@@ -44,6 +45,10 @@ public void subscribe(Subscriber<? super T> s) {
             EmptySubscription.error(e, s);
             return;
         }
+        if (!it.hasNext()) {
+            EmptySubscription.complete(s);
+            return;
+        }
         s.onSubscribe(new IteratorSourceSubscription<>(it, s));
     }
     
diff --git a/src/main/java/io/reactivex/internal/operators/PublisherRangeSource.java b/src/main/java/io/reactivex/internal/operators/PublisherRangeSource.java
index a9c616d88c..59936a8bc0 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherRangeSource.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherRangeSource.java
@@ -28,10 +28,10 @@
  */
 public final class PublisherRangeSource implements Publisher<Integer> {
     final int start;
-    final int end;
+    final long end;
     public PublisherRangeSource(int start, int count) {
         this.start = start;
-        this.end = start + (count - 1);
+        this.end = (long)start + (count - 1);
     }
     @Override
     public void subscribe(Subscriber<? super Integer> s) {
@@ -41,13 +41,13 @@ public void subscribe(Subscriber<? super Integer> s) {
     static final class RangeSubscription extends AtomicLong implements Subscription {
         /** */
         private static final long serialVersionUID = 7600071995978874818L;
-        final int end;
+        final long end;
         final Subscriber<? super Integer> actual;
 
         long index;
         volatile boolean cancelled;
         
-        public RangeSubscription(Subscriber<? super Integer> actual, int start, int end) {
+        public RangeSubscription(Subscriber<? super Integer> actual, int start, long end) {
             this.actual = actual;
             this.index = start;
             this.end = end;
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeFromIterableTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeFromIterableTest.java
new file mode 100644
index 0000000000..7eae1b5107
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeFromIterableTest.java
@@ -0,0 +1,322 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+import org.junit.Test;
+import org.mockito.Mockito;
+import org.reactivestreams.Subscriber;
+
+import io.reactivex.Observable;
+import io.reactivex.Observer;
+import io.reactivex.TestHelper;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OnSubscribeFromIterableTest {
+
+    @Test(expected = NullPointerException.class)
+    public void testNull() {
+        Observable.fromIterable(null);
+    }
+    
+    @Test
+    public void testListIterable() {
+        Observable<String> observable = Observable.fromIterable(Arrays.<String> asList("one", "two", "three"));
+
+        Subscriber<String> observer = TestHelper.mockSubscriber();
+        
+        observable.subscribe(observer);
+        
+        verify(observer, times(1)).onNext("one");
+        verify(observer, times(1)).onNext("two");
+        verify(observer, times(1)).onNext("three");
+        verify(observer, Mockito.never()).onError(any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+    }
+
+    /**
+     * This tests the path that can not optimize based on size so must use setProducer.
+     */
+    @Test
+    public void testRawIterable() {
+        Iterable<String> it = new Iterable<String>() {
+
+            @Override
+            public Iterator<String> iterator() {
+                return new Iterator<String>() {
+
+                    int i = 0;
+
+                    @Override
+                    public boolean hasNext() {
+                        return i < 3;
+                    }
+
+                    @Override
+                    public String next() {
+                        return String.valueOf(++i);
+                    }
+
+                    @Override
+                    public void remove() {
+                    }
+
+                };
+            }
+
+        };
+        Observable<String> observable = Observable.fromIterable(it);
+
+        Subscriber<String> observer = TestHelper.mockSubscriber();
+
+        observable.subscribe(observer);
+        
+        verify(observer, times(1)).onNext("1");
+        verify(observer, times(1)).onNext("2");
+        verify(observer, times(1)).onNext("3");
+        verify(observer, Mockito.never()).onError(any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+    }
+
+    @Test
+    public void testObservableFromIterable() {
+        Observable<String> observable = Observable.fromIterable(Arrays.<String> asList("one", "two", "three"));
+
+        Subscriber<String> observer = TestHelper.mockSubscriber();
+
+        observable.subscribe(observer);
+        
+        verify(observer, times(1)).onNext("one");
+        verify(observer, times(1)).onNext("two");
+        verify(observer, times(1)).onNext("three");
+        verify(observer, Mockito.never()).onError(any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+    }
+
+    @Test
+    public void testBackpressureViaRequest() {
+        ArrayList<Integer> list = new ArrayList<>(Observable.bufferSize());
+        for (int i = 1; i <= Observable.bufferSize() + 1; i++) {
+            list.add(i);
+        }
+        Observable<Integer> o = Observable.fromIterable(list);
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        ts.assertNoValues();
+        ts.request(1);
+        
+        o.subscribe(ts);
+        
+        ts.assertValue(1);
+        ts.request(2);
+        ts.assertValues(1, 2, 3);
+        ts.request(3);
+        ts.assertValues(1, 2, 3, 4, 5, 6);
+        ts.request(list.size());
+        ts.assertTerminated();
+    }
+
+    @Test
+    public void testNoBackpressure() {
+        Observable<Integer> o = Observable.fromIterable(Arrays.asList(1, 2, 3, 4, 5));
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        ts.assertNoValues();
+        ts.request(Long.MAX_VALUE); // infinite
+        
+        o.subscribe(ts);
+        
+        ts.assertValues(1, 2, 3, 4, 5);
+        ts.assertTerminated();
+    }
+
+    @Test
+    public void testSubscribeMultipleTimes() {
+        Observable<Integer> o = Observable.fromIterable(Arrays.asList(1, 2, 3));
+        
+        for (int i = 0; i < 10; i++) {
+            TestSubscriber<Integer> ts = new TestSubscriber<>();
+            
+            o.subscribe(ts);
+            
+            ts.assertValues(1, 2, 3);
+            ts.assertNoErrors();
+            ts.assertComplete();
+        }    
+    }
+    
+    @Test
+    public void testFromIterableRequestOverflow() throws InterruptedException {
+        Observable<Integer> o = Observable.fromIterable(Arrays.asList(1,2,3,4));
+        
+        final int expectedCount = 4;
+        final CountDownLatch latch = new CountDownLatch(expectedCount);
+        
+        o.subscribeOn(Schedulers.computation())
+        .subscribe(new Observer<Integer>() {
+            
+            @Override
+            public void onStart() {
+                request(2);
+            }
+
+            @Override
+            public void onComplete() {
+                //ignore
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                throw new RuntimeException(e);
+            }
+
+            @Override
+            public void onNext(Integer t) {
+                latch.countDown();
+                request(Long.MAX_VALUE-1);
+            }});
+        assertTrue(latch.await(10, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testFromEmptyIterableWhenZeroRequestedShouldStillEmitOnCompletedEagerly() {
+        
+        final AtomicBoolean completed = new AtomicBoolean(false);
+        
+        Observable.fromIterable(Collections.emptyList()).subscribe(new Observer<Object>() {
+
+            @Override
+            public void onStart() {
+//                request(0);
+            }
+            
+            @Override
+            public void onComplete() {
+                completed.set(true);
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                
+            }
+
+            @Override
+            public void onNext(Object t) {
+                
+            }});
+        assertTrue(completed.get());
+    }
+    
+    @Test
+    public void testDoesNotCallIteratorHasNextMoreThanRequiredWithBackpressure() {
+        final AtomicBoolean called = new AtomicBoolean(false);
+        Iterable<Integer> iterable = new Iterable<Integer>() {
+
+            @Override
+            public Iterator<Integer> iterator() {
+                return new Iterator<Integer>() {
+
+                    int count = 1;
+                    
+                    @Override
+                    public void remove() {
+                        // ignore
+                    }
+
+                    @Override
+                    public boolean hasNext() {
+                        if (count > 1) {
+                            called.set(true);
+                            return false;
+                        } else
+                            return true;
+                    }
+
+                    @Override
+                    public Integer next() {
+                        return count++;
+                    }
+
+                };
+            }
+        };
+        Observable.fromIterable(iterable).take(1).subscribe();
+        assertFalse(called.get());
+    }
+
+    @Test
+    public void testDoesNotCallIteratorHasNextMoreThanRequiredFastPath() {
+        final AtomicBoolean called = new AtomicBoolean(false);
+        Iterable<Integer> iterable = new Iterable<Integer>() {
+
+            @Override
+            public Iterator<Integer> iterator() {
+                return new Iterator<Integer>() {
+
+                    @Override
+                    public void remove() {
+                        // ignore
+                    }
+
+                    int count = 1;
+
+                    @Override
+                    public boolean hasNext() {
+                        if (count > 1) {
+                            called.set(true);
+                            return false;
+                        } else
+                            return true;
+                    }
+
+                    @Override
+                    public Integer next() {
+                        return count++;
+                    }
+
+                };
+            }
+        };
+        Observable.fromIterable(iterable).subscribe(new Observer<Integer>() {
+
+            @Override
+            public void onComplete() {
+
+            }
+
+            @Override
+            public void onError(Throwable e) {
+
+            }
+
+            @Override
+            public void onNext(Integer t) {
+                // unsubscribe on first emission
+                cancel();
+            }
+        });
+        assertFalse(called.get());
+    }
+    
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeRangeTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeRangeTest.java
new file mode 100644
index 0000000000..a071a78fa2
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeRangeTest.java
@@ -0,0 +1,265 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.atomic.*;
+
+import org.junit.Test;
+import org.reactivestreams.Subscriber;
+
+import io.reactivex.Observable;
+import io.reactivex.Observer;
+import io.reactivex.TestHelper;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OnSubscribeRangeTest {
+
+    @Test
+    public void testRangeStartAt2Count3() {
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        
+        Observable.range(2, 3).subscribe(observer);
+
+        verify(observer, times(1)).onNext(2);
+        verify(observer, times(1)).onNext(3);
+        verify(observer, times(1)).onNext(4);
+        verify(observer, never()).onNext(5);
+        verify(observer, never()).onError(org.mockito.Matchers.any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+    }
+
+    @Test
+    public void testRangeUnsubscribe() {
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        
+        final AtomicInteger count = new AtomicInteger();
+        
+        Observable.range(1, 1000).doOnNext(t1 -> count.incrementAndGet())
+        .take(3).subscribe(observer);
+
+        verify(observer, times(1)).onNext(1);
+        verify(observer, times(1)).onNext(2);
+        verify(observer, times(1)).onNext(3);
+        verify(observer, never()).onNext(4);
+        verify(observer, never()).onError(org.mockito.Matchers.any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+        assertEquals(3, count.get());
+    }
+
+    @Test
+    public void testRangeWithZero() {
+        Observable.range(1, 0);
+    }
+
+    @Test
+    public void testRangeWithOverflow2() {
+        Observable.range(Integer.MAX_VALUE, 0);
+    }
+
+    @Test
+    public void testRangeWithOverflow3() {
+        Observable.range(1, Integer.MAX_VALUE);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testRangeWithOverflow4() {
+        Observable.range(2, Integer.MAX_VALUE);
+    }
+
+    @Test
+    public void testRangeWithOverflow5() {
+        assertFalse(Observable.range(Integer.MIN_VALUE, 0).toBlocking().iterator().hasNext());
+    }
+
+    @Test
+    public void testBackpressureViaRequest() {
+        Observable<Integer> o = Observable.range(1, Observable.bufferSize());
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        ts.assertNoValues();
+        ts.request(1);
+        
+        o.subscribe(ts);
+        
+        ts.assertValue(1);
+        
+        ts.request(2);
+        ts.assertValues(1, 2, 3);
+        
+        ts.request(3);
+        ts.assertValues(1, 2, 3, 4, 5, 6);
+        
+        ts.request(Observable.bufferSize());
+        ts.assertTerminated();
+    }
+
+    @Test
+    public void testNoBackpressure() {
+        ArrayList<Integer> list = new ArrayList<>(Observable.bufferSize() * 2);
+        for (int i = 1; i <= Observable.bufferSize() * 2 + 1; i++) {
+            list.add(i);
+        }
+
+        Observable<Integer> o = Observable.range(1, list.size());
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        ts.assertNoValues();
+        ts.request(Long.MAX_VALUE); // infinite
+        
+        o.subscribe(ts);
+        
+        ts.assertValueSequence(list);
+        ts.assertTerminated();
+    }
+    void testWithBackpressureOneByOne(int start) {
+        Observable<Integer> source = Observable.range(start, 100);
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        ts.request(1);
+        source.subscribe(ts);
+        
+        List<Integer> list = new ArrayList<>(100);
+        for (int i = 0; i < 100; i++) {
+            list.add(i + start);
+            ts.request(1);
+        }
+        ts.assertValueSequence(list);
+        ts.assertTerminated();
+    }
+    void testWithBackpressureAllAtOnce(int start) {
+        Observable<Integer> source = Observable.range(start, 100);
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        ts.request(100);
+        source.subscribe(ts);
+        
+        List<Integer> list = new ArrayList<>(100);
+        for (int i = 0; i < 100; i++) {
+            list.add(i + start);
+        }
+        ts.assertValueSequence(list);
+        ts.assertTerminated();
+    }
+    @Test
+    public void testWithBackpressure1() {
+        for (int i = 0; i < 100; i++) {
+            testWithBackpressureOneByOne(i);
+        }
+    }
+    @Test
+    public void testWithBackpressureAllAtOnce() {
+        for (int i = 0; i < 100; i++) {
+            testWithBackpressureAllAtOnce(i);
+        }
+    }
+    @Test
+    public void testWithBackpressureRequestWayMore() {
+        Observable<Integer> source = Observable.range(50, 100);
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        ts.request(150);
+        source.subscribe(ts);
+        
+        List<Integer> list = new ArrayList<>(100);
+        for (int i = 0; i < 100; i++) {
+            list.add(i + 50);
+        }
+        
+        ts.request(50); // and then some
+        
+        ts.assertValueSequence(list);
+        ts.assertTerminated();
+    }
+    
+    @Test
+    public void testRequestOverflow() {
+        final AtomicInteger count = new AtomicInteger();
+        int n = 10;
+        Observable.range(1, n).subscribe(new Observer<Integer>() {
+
+            @Override
+            public void onStart() {
+                request(2);
+            }
+            
+            @Override
+            public void onComplete() {
+                //do nothing
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                throw new RuntimeException(e);
+            }
+
+            @Override
+            public void onNext(Integer t) {
+                count.incrementAndGet();
+                request(Long.MAX_VALUE - 1);
+            }});
+        assertEquals(n, count.get());
+    }
+    
+    @Test
+    public void testEmptyRangeSendsOnCompleteEagerlyWithRequestZero() {
+        final AtomicBoolean completed = new AtomicBoolean(false);
+        Observable.range(1, 0).subscribe(new Observer<Integer>() {
+
+            @Override
+            public void onStart() {
+//                request(0);
+            }
+            
+            @Override
+            public void onComplete() {
+                completed.set(true);
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                
+            }
+
+            @Override
+            public void onNext(Integer t) {
+                
+            }});
+        assertTrue(completed.get());
+    }
+    
+    @Test(timeout = 1000)
+    public void testNearMaxValueWithoutBackpressure() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        Observable.range(Integer.MAX_VALUE - 1, 2).subscribe(ts);
+        
+        ts.assertComplete();
+        ts.assertNoErrors();
+        ts.assertValues(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);
+    }
+    @Test(timeout = 1000)
+    public void testNearMaxValueWithBackpressure() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>(3L);
+        Observable.range(Integer.MAX_VALUE - 1, 2).subscribe(ts);
+        
+        ts.assertComplete();
+        ts.assertNoErrors();
+        ts.assertValues(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);
+    }
+}
\ No newline at end of file
