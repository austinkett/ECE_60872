diff --git a/src/main/java/io/reactivex/internal/operators/OperatorTake.java b/src/main/java/io/reactivex/internal/operators/OperatorTake.java
index 42d262e8a9..e31ef36f38 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorTake.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorTake.java
@@ -62,9 +62,10 @@ public void onSubscribe(Subscription s) {
         }
         @Override
         public void onNext(T t) {
-            if (!done) {
+            if (!done && remaining-- > 0) {
+                boolean stop = remaining == 0;
                 actual.onNext(t);
-                if (--remaining == 0L) {
+                if (stop) {
                     onComplete();
                 }
             }
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java b/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java
index 1de2f8b290..9d3c8a77d7 100644
--- a/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java
+++ b/src/test/java/io/reactivex/internal/operators/OperatorTakeTest.java
@@ -30,6 +30,7 @@
 import io.reactivex.exceptions.TestException;
 import io.reactivex.internal.subscriptions.*;
 import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subjects.PublishSubject;
 import io.reactivex.subscribers.TestSubscriber;
 
 public class OperatorTakeTest {
@@ -420,4 +421,19 @@ public void onNext(Integer t) {
         ts.assertError(TestException.class);
         ts.assertNotComplete();
     }
+    
+    @Test
+    public void testReentrantTake() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        source.take(1).doOnNext(v -> source.onNext(2)).subscribe(ts);
+        
+        source.onNext(1);
+        
+        ts.assertValue(1);
+        ts.assertNoErrors();
+        ts.assertComplete();
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/nbp/NbpOperatorTakeTest.java b/src/test/java/io/reactivex/internal/operators/nbp/NbpOperatorTakeTest.java
index c168bfb669..7f0187d9c3 100644
--- a/src/test/java/io/reactivex/internal/operators/nbp/NbpOperatorTakeTest.java
+++ b/src/test/java/io/reactivex/internal/operators/nbp/NbpOperatorTakeTest.java
@@ -31,6 +31,7 @@
 import io.reactivex.exceptions.TestException;
 import io.reactivex.internal.disposables.EmptyDisposable;
 import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subjects.nbp.NbpPublishSubject;
 import io.reactivex.subscribers.nbp.NbpTestSubscriber;
 
 public class NbpOperatorTakeTest {
@@ -338,4 +339,19 @@ public void onNext(Integer t) {
         ts.assertError(TestException.class);
         ts.assertNotComplete();
     }
+    
+    @Test
+    public void testReentrantTake() {
+        NbpPublishSubject<Integer> source = NbpPublishSubject.create();
+        
+        NbpTestSubscriber<Integer> ts = new NbpTestSubscriber<>();
+        
+        source.take(1).doOnNext(v -> source.onNext(2)).subscribe(ts);
+        
+        source.onNext(1);
+        
+        ts.assertValue(1);
+        ts.assertNoErrors();
+        ts.assertComplete();
+    }
 }
\ No newline at end of file
