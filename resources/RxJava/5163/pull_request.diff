diff --git a/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java
index 0a7b672030..525543838e 100644
--- a/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java
+++ b/src/main/java/io/reactivex/internal/observers/ConsumerSingleObserver.java
@@ -40,6 +40,7 @@ public ConsumerSingleObserver(Consumer<? super T> onSuccess, Consumer<? super Th
 
     @Override
     public void onError(Throwable e) {
+        lazySet(DisposableHelper.DISPOSED);
         try {
             onError.accept(e);
         } catch (Throwable ex) {
@@ -55,6 +56,7 @@ public void onSubscribe(Disposable d) {
 
     @Override
     public void onSuccess(T value) {
+        lazySet(DisposableHelper.DISPOSED);
         try {
             onSuccess.accept(value);
         } catch (Throwable ex) {
diff --git a/src/test/java/io/reactivex/single/SingleSubscribeTest.java b/src/test/java/io/reactivex/single/SingleSubscribeTest.java
index 9003fd3008..aac913f6e5 100644
--- a/src/test/java/io/reactivex/single/SingleSubscribeTest.java
+++ b/src/test/java/io/reactivex/single/SingleSubscribeTest.java
@@ -217,4 +217,14 @@ public void methodTestNoCancel() {
 
         assertTrue(ps.hasObservers());
     }
+
+    @Test
+    public void successIsDisposed() {
+        assertTrue(Single.just(1).subscribe().isDisposed());
+    }
+
+    @Test
+    public void errorIsDisposed() {
+        assertTrue(Single.error(new TestException()).subscribe(Functions.emptyConsumer(), Functions.emptyConsumer()).isDisposed());
+    }
 }
