diff --git a/src/main/java/rx/Observable.java b/src/main/java/rx/Observable.java
index 3520f5d808..4ae2bfa3d3 100644
--- a/src/main/java/rx/Observable.java
+++ b/src/main/java/rx/Observable.java
@@ -2547,7 +2547,7 @@ public final Boolean call(T first, T second) {
     }
 
     /**
-     * Constructs an Observable that creates a dependent resource object.
+     * Constructs an Observable that creates a dependent resource object which is disposed of on unsubscription.
      * <p>
      * <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt="">
      * <dl>
@@ -2568,7 +2568,42 @@ public final Boolean call(T first, T second) {
             final Func0<Resource> resourceFactory,
             final Func1<? super Resource, ? extends Observable<? extends T>> observableFactory,
             final Action1<? super Resource> disposeAction) {
-        return create(new OnSubscribeUsing<T, Resource>(resourceFactory, observableFactory, disposeAction));
+        return using(resourceFactory, observableFactory, disposeAction, false);
+    }
+    
+    /**
+     * Constructs an Observable that creates a dependent resource object which is disposed of just before 
+     * termination if <code>disposeEagerly</code> is set to true and unsubscription does not occur before termination. Otherwise
+     * resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous observable
+     * that resuses resources. <code>disposeAction</code> will only be called once per subscription.
+     * <p>
+     * <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt="">
+     * <dl>
+     *  <dt><b>Scheduler:</b></dt>
+     *  <dd>{@code using} does not operate by default on a particular {@link Scheduler}.</dd>
+     * </dl>
+     * 
+     * @param resourceFactory
+     *            the factory function to create a resource object that depends on the Observable
+     * @param observableFactory
+     *            the factory function to create an Observable
+     * @param disposeAction
+     *            the function that will dispose of the resource
+     * @param disposeEagerly
+     *            if true then disposal will happen either on unsubscription or just before emission of 
+     *            a terminal event (onComplete or onError).
+     * @return the Observable whose lifetime controls the lifetime of the dependent resource object
+     * @see <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
+     * @Experimental The behavior of this can change at any time.
+     * @since (if this graduates from Experimental/Beta to supported, replace
+     *        this parenthetical with the release number)
+     */
+    @Experimental
+    public final static <T, Resource> Observable<T> using(
+            final Func0<Resource> resourceFactory,
+            final Func1<? super Resource, ? extends Observable<? extends T>> observableFactory,
+            final Action1<? super Resource> disposeAction, boolean disposeEagerly) {
+        return create(new OnSubscribeUsing<T, Resource>(resourceFactory, observableFactory, disposeAction, disposeEagerly));
     }
 
     /**
diff --git a/src/main/java/rx/internal/operators/OnSubscribeUsing.java b/src/main/java/rx/internal/operators/OnSubscribeUsing.java
index f4a1bc0391..8c29d632d9 100644
--- a/src/main/java/rx/internal/operators/OnSubscribeUsing.java
+++ b/src/main/java/rx/internal/operators/OnSubscribeUsing.java
@@ -15,14 +15,18 @@
  */
 package rx.internal.operators;
 
+import java.util.Arrays;
+import java.util.concurrent.atomic.AtomicBoolean;
+
 import rx.Observable;
 import rx.Observable.OnSubscribe;
 import rx.Subscriber;
+import rx.Subscription;
+import rx.exceptions.CompositeException;
 import rx.functions.Action0;
 import rx.functions.Action1;
 import rx.functions.Func0;
 import rx.functions.Func1;
-import rx.subscriptions.Subscriptions;
 
 /**
  * Constructs an observable sequence that depends on a resource object.
@@ -32,35 +36,103 @@
     private final Func0<Resource> resourceFactory;
     private final Func1<? super Resource, ? extends Observable<? extends T>> observableFactory;
     private final Action1<? super Resource> dispose;
+    private final boolean disposeEagerly;
 
     public OnSubscribeUsing(Func0<Resource> resourceFactory,
             Func1<? super Resource, ? extends Observable<? extends T>> observableFactory,
-            Action1<? super Resource> dispose) {
+            Action1<? super Resource> dispose, boolean disposeEagerly) {
         this.resourceFactory = resourceFactory;
         this.observableFactory = observableFactory;
         this.dispose = dispose;
+        this.disposeEagerly = disposeEagerly;
     }
 
     @Override
     public void call(Subscriber<? super T> subscriber) {
-        try {
-            final Resource resource = resourceFactory.call();
-            subscriber.add(Subscriptions.create(new Action0() {
 
-                @Override
-                public void call() {
-                    dispose.call(resource);
-                }
+        try {
 
-            }));
-            Observable<? extends T> observable = observableFactory.call(resource);
-            observable.subscribe(subscriber);
+            // create the resource
+            final Resource resource = resourceFactory.call();
+            // create an action/subscription that disposes only once
+            final DisposeAction<Resource> disposeOnceOnly = new DisposeAction<Resource>(dispose,
+                    resource);
+            // dispose on unsubscription
+            subscriber.add(disposeOnceOnly);
+            // create the observable
+            final Observable<? extends T> source = observableFactory
+            // create the observable
+                    .call(resource);
+            final Observable<? extends T> observable;
+            // supplement with on termination disposal if requested
+            if (disposeEagerly)
+                observable = source
+                // dispose on completion or error
+                        .doOnTerminate(disposeOnceOnly);
+            else
+                observable = source;
+            try {
+                // start
+                observable.unsafeSubscribe(subscriber);
+            } catch (Throwable e) {
+                Throwable disposeError = disposeEagerlyIfRequested(disposeOnceOnly);
+                if (disposeError != null)
+                    subscriber.onError(new CompositeException(Arrays.asList(e, disposeError)));
+                else
+                    // propagate error
+                    subscriber.onError(e);
+            }
         } catch (Throwable e) {
-            // eagerly call unsubscribe since this operator is specifically about resource management
-            subscriber.unsubscribe();
             // then propagate error
             subscriber.onError(e);
         }
     }
 
+    private Throwable disposeEagerlyIfRequested(final Action0 disposeOnceOnly) {
+        if (disposeEagerly)
+            try {
+                disposeOnceOnly.call();
+                return null;
+            } catch (Throwable e) {
+                return e;
+            }
+        else
+            return null;
+    }
+
+    private static final class DisposeAction<Resource> extends AtomicBoolean implements Action0,
+            Subscription {
+        private static final long serialVersionUID = 4262875056400218316L;
+
+        private Action1<? super Resource> dispose;
+        private Resource resource;
+
+        private DisposeAction(Action1<? super Resource> dispose, Resource resource) {
+            this.dispose = dispose;
+            this.resource = resource;
+            lazySet(false); // StoreStore barrier
+        }
+
+        @Override
+        public void call() {
+            if (compareAndSet(false, true)) {
+                try {
+                    dispose.call(resource);
+                } finally {
+                    resource = null;
+                    dispose = null;
+                }
+            }
+        }
+
+        @Override
+        public boolean isUnsubscribed() {
+            return get();
+        }
+
+        @Override
+        public void unsubscribe() {
+            call();
+        }
+    }
 }
diff --git a/src/test/java/rx/internal/operators/OnSubscribeUsingTest.java b/src/test/java/rx/internal/operators/OnSubscribeUsingTest.java
index ee541fbc7f..c66e43e246 100644
--- a/src/test/java/rx/internal/operators/OnSubscribeUsingTest.java
+++ b/src/test/java/rx/internal/operators/OnSubscribeUsingTest.java
@@ -15,6 +15,7 @@
  */
 package rx.internal.operators;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.mock;
@@ -22,6 +23,10 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import org.junit.Test;
 import org.mockito.InOrder;
 
@@ -53,18 +58,27 @@ public void call(Resource r) {
         }
 
     }
-    
+
     private final Action1<Subscription> disposeSubscription = new Action1<Subscription>() {
 
         @Override
         public void call(Subscription s) {
             s.unsubscribe();
         }
-        
+
     };
 
     @Test
     public void testUsing() {
+        performTestUsing(false);
+    }
+
+    @Test
+    public void testUsingEagerly() {
+        performTestUsing(true);
+    }
+
+    private void performTestUsing(boolean disposeEagerly) {
         final Resource resource = mock(Resource.class);
         when(resource.getTextFromWeb()).thenReturn("Hello world!");
 
@@ -84,7 +98,8 @@ public Resource call() {
 
         @SuppressWarnings("unchecked")
         Observer<String> observer = mock(Observer.class);
-        Observable<String> observable = Observable.using(resourceFactory, observableFactory, new DisposeAction());
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), disposeEagerly);
         observable.subscribe(observer);
 
         InOrder inOrder = inOrder(observer);
@@ -99,6 +114,15 @@ public Resource call() {
 
     @Test
     public void testUsingWithSubscribingTwice() {
+        performTestUsingWithSubscribingTwice(false);
+    }
+
+    @Test
+    public void testUsingWithSubscribingTwiceDisposeEagerly() {
+        performTestUsingWithSubscribingTwice(true);
+    }
+
+    private void performTestUsingWithSubscribingTwice(boolean disposeEagerly) {
         // When subscribe is called, a new resource should be created.
         Func0<Resource> resourceFactory = new Func0<Resource>() {
             @Override
@@ -115,7 +139,7 @@ public String getTextFromWeb() {
                         }
                         return "Nothing";
                     }
-                    
+
                     @Override
                     public void dispose() {
                         // do nothing
@@ -134,7 +158,8 @@ public void dispose() {
 
         @SuppressWarnings("unchecked")
         Observer<String> observer = mock(Observer.class);
-        Observable<String> observable = Observable.using(resourceFactory, observableFactory, new DisposeAction());
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), disposeEagerly);
         observable.subscribe(observer);
         observable.subscribe(observer);
 
@@ -152,6 +177,15 @@ public void dispose() {
 
     @Test(expected = TestException.class)
     public void testUsingWithResourceFactoryError() {
+        performTestUsingWithResourceFactoryError(false);
+    }
+
+    @Test(expected = TestException.class)
+    public void testUsingWithResourceFactoryErrorDisposeEagerly() {
+        performTestUsingWithResourceFactoryError(true);
+    }
+
+    private void performTestUsingWithResourceFactoryError(boolean disposeEagerly) {
         Func0<Subscription> resourceFactory = new Func0<Subscription>() {
             @Override
             public Subscription call() {
@@ -165,12 +199,22 @@ public Subscription call() {
                 return Observable.empty();
             }
         };
-        
-        Observable.using(resourceFactory, observableFactory, disposeSubscription).toBlocking().last();
+
+        Observable.using(resourceFactory, observableFactory, disposeSubscription).toBlocking()
+                .last();
     }
 
     @Test
     public void testUsingWithObservableFactoryError() {
+        performTestUsingWithObservableFactoryError(false);
+    }
+
+    @Test
+    public void testUsingWithObservableFactoryErrorDisposeEagerly() {
+        performTestUsingWithObservableFactoryError(true);
+    }
+
+    private void performTestUsingWithObservableFactoryError(boolean disposeEagerly) {
         final Action0 unsubscribe = mock(Action0.class);
         Func0<Subscription> resourceFactory = new Func0<Subscription>() {
             @Override
@@ -185,9 +229,10 @@ public Subscription call() {
                 throw new TestException();
             }
         };
-        
+
         try {
-            Observable.using(resourceFactory, observableFactory, disposeSubscription).toBlocking().last();
+            Observable.using(resourceFactory, observableFactory, disposeSubscription).toBlocking()
+                    .last();
             fail("Should throw a TestException when the observableFactory throws it");
         } catch (TestException e) {
             // Make sure that unsubscribe is called so that users can close
@@ -198,6 +243,15 @@ public Subscription call() {
 
     @Test
     public void testUsingWithObservableFactoryErrorInOnSubscribe() {
+        performTestUsingWithObservableFactoryErrorInOnSubscribe(false);
+    }
+
+    @Test
+    public void testUsingWithObservableFactoryErrorInOnSubscribeDisposeEagerly() {
+        performTestUsingWithObservableFactoryErrorInOnSubscribe(true);
+    }
+
+    private void performTestUsingWithObservableFactoryErrorInOnSubscribe(boolean disposeEagerly) {
         final Action0 unsubscribe = mock(Action0.class);
         Func0<Subscription> resourceFactory = new Func0<Subscription>() {
             @Override
@@ -217,11 +271,11 @@ public void call(Subscriber<? super Integer> t1) {
                 });
             }
         };
-        
-        
 
         try {
-            Observable.using(resourceFactory, observableFactory, disposeSubscription).toBlocking().last();
+            Observable
+                    .using(resourceFactory, observableFactory, disposeSubscription, disposeEagerly)
+                    .toBlocking().last();
             fail("Should throw a TestException when the observableFactory throws it");
         } catch (TestException e) {
             // Make sure that unsubscribe is called so that users can close
@@ -229,4 +283,153 @@ public void call(Subscriber<? super Integer> t1) {
             verify(unsubscribe, times(1)).call();
         }
     }
+
+    @Test
+    public void testUsingDisposesEagerlyBeforeCompletion() {
+        final List<String> events = new ArrayList<String>();
+        Func0<Resource> resourceFactory = createResourceFactory(events);
+        final Action0 completion = createOnCompletedAction(events);
+        final Action0 unsub =createUnsubAction(events);
+
+        Func1<Resource, Observable<String>> observableFactory = new Func1<Resource, Observable<String>>() {
+            @Override
+            public Observable<String> call(Resource resource) {
+                return Observable.from(resource.getTextFromWeb().split(" "));
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        Observer<String> observer = mock(Observer.class);
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), true).doOnUnsubscribe(unsub)
+                .doOnCompleted(completion);
+        observable.subscribe(observer);
+
+        assertEquals(Arrays.asList("disposed", "completed", "unsub"), events);
+
+    }
+
+    @Test
+    public void testUsingDoesNotDisposesEagerlyBeforeCompletion() {
+        final List<String> events = new ArrayList<String>();
+        Func0<Resource> resourceFactory = createResourceFactory(events);
+        final Action0 completion = createOnCompletedAction(events);
+        final Action0 unsub =createUnsubAction(events);
+
+        Func1<Resource, Observable<String>> observableFactory = new Func1<Resource, Observable<String>>() {
+            @Override
+            public Observable<String> call(Resource resource) {
+                return Observable.from(resource.getTextFromWeb().split(" "));
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        Observer<String> observer = mock(Observer.class);
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), false).doOnUnsubscribe(unsub)
+                .doOnCompleted(completion);
+        observable.subscribe(observer);
+
+        assertEquals(Arrays.asList("completed", "unsub", "disposed"), events);
+
+    }
+
+    
+    
+    @Test
+    public void testUsingDisposesEagerlyBeforeError() {
+        final List<String> events = new ArrayList<String>();
+        Func0<Resource> resourceFactory = createResourceFactory(events);
+        final Action1<Throwable> onError = createOnErrorAction(events);
+        final Action0 unsub = createUnsubAction(events);
+        
+        Func1<Resource, Observable<String>> observableFactory = new Func1<Resource, Observable<String>>() {
+            @Override
+            public Observable<String> call(Resource resource) {
+                return Observable.from(resource.getTextFromWeb().split(" ")).concatWith(Observable.<String>error(new RuntimeException()));
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        Observer<String> observer = mock(Observer.class);
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), true).doOnUnsubscribe(unsub)
+                .doOnError(onError);
+        observable.subscribe(observer);
+
+        assertEquals(Arrays.asList("disposed", "error", "unsub"), events);
+
+    }
+    
+    @Test
+    public void testUsingDoesNotDisposesEagerlyBeforeError() {
+        final List<String> events = new ArrayList<String>();
+        Func0<Resource> resourceFactory = createResourceFactory(events);
+        final Action1<Throwable> onError = createOnErrorAction(events);
+        final Action0 unsub = createUnsubAction(events);
+        
+        Func1<Resource, Observable<String>> observableFactory = new Func1<Resource, Observable<String>>() {
+            @Override
+            public Observable<String> call(Resource resource) {
+                return Observable.from(resource.getTextFromWeb().split(" ")).concatWith(Observable.<String>error(new RuntimeException()));
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        Observer<String> observer = mock(Observer.class);
+        Observable<String> observable = Observable.using(resourceFactory, observableFactory,
+                new DisposeAction(), false).doOnUnsubscribe(unsub)
+                .doOnError(onError);
+        observable.subscribe(observer);
+
+        assertEquals(Arrays.asList("error", "unsub", "disposed"), events);
+    }
+
+    private static Action0 createUnsubAction(final List<String> events) {
+        return new Action0() {
+            @Override
+            public void call() {
+                events.add("unsub");
+            }
+        };
+    }
+
+    private static Action1<Throwable> createOnErrorAction(final List<String> events) {
+        return new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                events.add("error");
+            }
+        };
+    }
+
+    private static Func0<Resource> createResourceFactory(final List<String> events) {
+        return new Func0<Resource>() {
+            @Override
+            public Resource call() {
+                return new Resource() {
+
+                    @Override
+                    public String getTextFromWeb() {
+                        return "hello world";
+                    }
+
+                    @Override
+                    public void dispose() {
+                        events.add("disposed");
+                    }
+                };
+            }
+        };
+    }
+    
+    private static Action0 createOnCompletedAction(final List<String> events) {
+        return new Action0() {
+            @Override
+            public void call() {
+                events.add("completed");
+            }
+        };
+    }
+    
 }
