diff --git a/src/main/java/rx/internal/operators/OperatorSwitch.java b/src/main/java/rx/internal/operators/OperatorSwitch.java
index 7d706f2a95..551c2477aa 100644
--- a/src/main/java/rx/internal/operators/OperatorSwitch.java
+++ b/src/main/java/rx/internal/operators/OperatorSwitch.java
@@ -20,7 +20,7 @@
 import rx.*;
 import rx.Observable;
 import rx.Observable.Operator;
-import rx.exceptions.CompositeException;
+import rx.exceptions.*;
 import rx.internal.producers.ProducerArbiter;
 import rx.plugins.RxJavaPlugins;
 import rx.subscriptions.SerialSubscription;
@@ -45,6 +45,9 @@
         static final OperatorSwitch<Object> INSTANCE = new OperatorSwitch<Object>(true);
     }
     /**
+     * Returns a singleton instance of the operator based on the delayError parameter.
+     * @param <T> the value type
+     * @param delayError should the errors of the inner sources delayed until the main sequence completes?
      * @return a singleton instance of this stateless operator.
      */
     @SuppressWarnings({ "unchecked" })
@@ -104,7 +107,9 @@ void init() {
                 @Override
                 public void request(long n) {
                     if (n > 0) {
-                        arbiter.request(n);
+                        synchronized (this) {
+                            arbiter.request(n);
+                        }
                     }
                 }
             });
@@ -117,6 +122,8 @@ public void onNext(Observable<? extends T> t) {
                 long id = ++index;
                 inner = new InnerSubscriber<T>(id, this);
                 innerActive = true;
+                
+                arbiter.setProducer(null);
             }
             ssub.set(inner);
             
@@ -136,6 +143,10 @@ public void onError(Throwable e) {
                 if (delayError && innerActive) {
                     return;
                 }
+                if (!delayError) {
+                    index = Long.MAX_VALUE;
+                    arbiter.setProducer(null);
+                }
                 emitting = true;
             }
             
@@ -202,7 +213,12 @@ void emit(T value, long id) {
                 emitting = true;
             }
             
-            child.onNext(value);
+            try {
+                child.onNext(value);
+            } catch (Throwable ex) {
+                Exceptions.throwOrReport(ex, child, value);
+                return;
+            }
             
             arbiter.produced(1);
             
@@ -225,6 +241,7 @@ void emit(T value, long id) {
                     localMainDone = mainDone;
                     localQueue = queue;
                     localActive = innerActive;
+                    queue = null;
                 }
                 
                 if (!delayError && localError != null) {
@@ -248,7 +265,12 @@ void emit(T value, long id) {
                             return;
                         }
 
-                        child.onNext(v);
+                        try {
+                            child.onNext(v);
+                        } catch (Throwable ex) {
+                            Exceptions.throwOrReport(ex, child, v);
+                            return;
+                        }
                         n++;
                     }
                     
@@ -261,6 +283,8 @@ void error(Throwable e, long id) {
             boolean drop;
             synchronized (this) {
                 if (id == index) {
+                    arbiter.setProducer(null);
+
                     innerActive = false;
                     
                     e = updateError(e);
@@ -293,6 +317,9 @@ void complete(long id) {
                 if (id != index) {
                     return;
                 }
+                
+                arbiter.setProducer(null);
+                
                 innerActive = false;
                 
                 if (emitting) {
@@ -317,6 +344,14 @@ void complete(long id) {
         void pluginError(Throwable e) {
             RxJavaPlugins.getInstance().getErrorHandler().handleError(e);
         }
+        
+        void innerProducer(Producer p, long id) {
+            synchronized (this) {
+                if (this.index == id) {
+                    arbiter.setProducer(p);
+                }
+            }
+        }
     }
     
     private static final class InnerSubscriber<T> extends Subscriber<T> {
@@ -332,7 +367,7 @@ void pluginError(Throwable e) {
         
         @Override
         public void setProducer(Producer p) {
-            parent.arbiter.setProducer(p);
+            parent.innerProducer(p, id);
         }
 
         @Override
diff --git a/src/test/java/rx/internal/operators/OperatorSwitchTest.java b/src/test/java/rx/internal/operators/OperatorSwitchTest.java
index 55170ab9ff..aea70041a8 100644
--- a/src/test/java/rx/internal/operators/OperatorSwitchTest.java
+++ b/src/test/java/rx/internal/operators/OperatorSwitchTest.java
@@ -19,6 +19,7 @@
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
+import java.lang.ref.WeakReference;
 import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -32,7 +33,7 @@
 import rx.exceptions.*;
 import rx.functions.*;
 import rx.observers.TestSubscriber;
-import rx.schedulers.TestScheduler;
+import rx.schedulers.*;
 import rx.subjects.PublishSubject;
 
 public class OperatorSwitchTest {
@@ -654,7 +655,7 @@ public void call(Long n) {
         ts.requestMore(Long.MAX_VALUE - 1);
         ts.awaitTerminalEvent();
         assertTrue(ts.getOnNextEvents().size() > 0);
-        assertEquals(5, requests.size());
+        assertEquals(4, requests.size()); // depends on the request pattern
         assertEquals(Long.MAX_VALUE, (long) requests.get(requests.size()-1));
     }
 
@@ -790,4 +791,97 @@ public void backpressureWithSwitch() {
         ts.assertCompleted();
     }
 
+    Object ref;
+    
+    @Test
+    public void producerIsNotRetained() throws Exception {
+        ref = new Object();
+        
+        WeakReference<Object> wr = new WeakReference<Object>(ref);
+        
+        PublishSubject<Observable<Object>> ps = PublishSubject.create();
+        
+        Subscriber<Object> observer = new Subscriber<Object>() {
+            @Override
+            public void onCompleted() {
+            }
+
+            @Override
+            public void onError(Throwable e) {
+            }
+
+            @Override
+            public void onNext(Object t) {
+            }
+        };
+        
+        Observable.switchOnNext(ps).subscribe(observer);
+        
+        ps.onNext(Observable.just(ref));
+        
+        ref = null;
+        
+        System.gc();
+        
+        Thread.sleep(500);
+        
+        Assert.assertNotNull(observer); // retain every other referenec in the pipeline
+        Assert.assertNotNull(ps);
+        Assert.assertNull("Object retained!", wr.get());
+    }
+
+    @Test
+    public void switchAsyncHeavilyLoop() {
+        for (int i = 0; i < 1000; i++) {
+            switchAsyncHeavily();
+        }
+    }
+    
+    @Test
+    public void switchAsyncHeavily() {
+        for (int i = 1; i < 1024; i *= 2) {
+            System.out.println("switchAsyncHeavily >> " + i);
+            
+            final Queue<Throwable> q = new ConcurrentLinkedQueue<Throwable>();
+            
+            final int j = i;
+            TestSubscriber<Integer> ts = new TestSubscriber<Integer>(i) {
+                int count;
+                @Override
+                public void onNext(Integer t) {
+                    super.onNext(t);
+                    if (++count == j) {
+                        count = 0;
+                        requestMore(j);
+                    }
+                }
+            };
+            
+            Observable.range(1, 25000)
+            .observeOn(Schedulers.computation(), i)
+            .switchMap(new Func1<Integer, Observable<Integer>>() {
+                @Override
+                public Observable<Integer> call(Integer v) {
+                    return Observable.range(1, 1000).observeOn(Schedulers.computation(), j)
+                            .doOnError(new Action1<Throwable>() {
+                                @Override
+                                public void call(Throwable e) {
+                                    q.add(e);
+                                }
+                            });
+                }
+            })
+            .timeout(10, TimeUnit.SECONDS)
+            .subscribe(ts);
+            
+            ts.awaitTerminalEvent(30, TimeUnit.SECONDS);
+            if (!q.isEmpty()) {
+                throw new AssertionError("Dropped exceptions", new CompositeException(q));
+            }
+            ts.assertNoErrors();
+            if (ts.getOnCompletedEvents().size() == 0) {
+                fail("switchAsyncHeavily timed out @ " + j + " (" + ts.getOnNextEvents().size() + " onNexts received)");
+            }
+        }
+    }
 }
