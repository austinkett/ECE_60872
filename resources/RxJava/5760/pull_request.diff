diff --git a/src/main/java/io/reactivex/processors/AsyncProcessor.java b/src/main/java/io/reactivex/processors/AsyncProcessor.java
index 4aa6ec549c..c728d9eb1b 100644
--- a/src/main/java/io/reactivex/processors/AsyncProcessor.java
+++ b/src/main/java/io/reactivex/processors/AsyncProcessor.java
@@ -15,10 +15,12 @@
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicReference;
 
+import org.reactivestreams.*;
+
 import io.reactivex.annotations.*;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.internal.subscriptions.DeferredScalarSubscription;
 import io.reactivex.plugins.RxJavaPlugins;
-import org.reactivestreams.*;
 
 /**
  * Processor that emits the very last value followed by a completion event or the received error
@@ -77,32 +79,17 @@ public void onSubscribe(Subscription s) {
 
     @Override
     public void onNext(T t) {
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             return;
         }
-        if (t == null) {
-            nullOnNext();
-            return;
-        }
         value = t;
     }
 
-    @SuppressWarnings("unchecked")
-    void nullOnNext() {
-        value = null;
-        Throwable ex = new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-        error = ex;
-        for (AsyncSubscription<T> as : subscribers.getAndSet(TERMINATED)) {
-            as.onError(ex);
-        }
-    }
-
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/processors/BehaviorProcessor.java b/src/main/java/io/reactivex/processors/BehaviorProcessor.java
index eb9d3196e7..e161727bb3 100644
--- a/src/main/java/io/reactivex/processors/BehaviorProcessor.java
+++ b/src/main/java/io/reactivex/processors/BehaviorProcessor.java
@@ -175,10 +175,8 @@ public void onSubscribe(Subscription s) {
 
     @Override
     public void onNext(T t) {
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (terminalEvent.get() != null) {
             return;
         }
@@ -191,9 +189,7 @@ public void onNext(T t) {
 
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (!terminalEvent.compareAndSet(null, t)) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/processors/FlowableProcessor.java b/src/main/java/io/reactivex/processors/FlowableProcessor.java
index e5fe4ad838..8135afa784 100644
--- a/src/main/java/io/reactivex/processors/FlowableProcessor.java
+++ b/src/main/java/io/reactivex/processors/FlowableProcessor.java
@@ -13,10 +13,11 @@
 
 package io.reactivex.processors;
 
-import io.reactivex.*;
-import io.reactivex.annotations.NonNull;
 import org.reactivestreams.Processor;
 
+import io.reactivex.*;
+import io.reactivex.annotations.*;
+
 /**
  * Represents a Subscriber and a Flowable (Publisher) at the same time, allowing
  * multicasting events from a single source to multiple child Subscribers.
@@ -28,45 +29,47 @@
 public abstract class FlowableProcessor<T> extends Flowable<T> implements Processor<T, T>, FlowableSubscriber<T> {
 
     /**
-     * Returns true if the subject has subscribers.
+     * Returns true if the FlowableProcessor has subscribers.
      * <p>The method is thread-safe.
-     * @return true if the subject has subscribers
+     * @return true if the FlowableProcessor has subscribers
      */
     public abstract boolean hasSubscribers();
 
     /**
-     * Returns true if the subject has reached a terminal state through an error event.
+     * Returns true if the FlowableProcessor has reached a terminal state through an error event.
      * <p>The method is thread-safe.
-     * @return true if the subject has reached a terminal state through an error event
+     * @return true if the FlowableProcessor has reached a terminal state through an error event
      * @see #getThrowable()
      * @see #hasComplete()
      */
     public abstract boolean hasThrowable();
 
     /**
-     * Returns true if the subject has reached a terminal state through a complete event.
+     * Returns true if the FlowableProcessor has reached a terminal state through a complete event.
      * <p>The method is thread-safe.
-     * @return true if the subject has reached a terminal state through a complete event
+     * @return true if the FlowableProcessor has reached a terminal state through a complete event
      * @see #hasThrowable()
      */
     public abstract boolean hasComplete();
 
     /**
-     * Returns the error that caused the Subject to terminate or null if the Subject
+     * Returns the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor
      * hasn't terminated yet.
      * <p>The method is thread-safe.
-     * @return the error that caused the Subject to terminate or null if the Subject
+     * @return the error that caused the FlowableProcessor to terminate or null if the FlowableProcessor
      * hasn't terminated yet
      */
+    @Nullable
     public abstract Throwable getThrowable();
 
     /**
-     * Wraps this Subject and serializes the calls to the onSubscribe, onNext, onError and
+     * Wraps this FlowableProcessor and serializes the calls to the onSubscribe, onNext, onError and
      * onComplete methods, making them thread-safe.
      * <p>The method is thread-safe.
-     * @return the wrapped and serialized subject
+     * @return the wrapped and serialized FlowableProcessor
      */
     @NonNull
+    @CheckReturnValue
     public final FlowableProcessor<T> toSerialized() {
         if (this instanceof SerializedProcessor) {
             return this;
diff --git a/src/main/java/io/reactivex/processors/PublishProcessor.java b/src/main/java/io/reactivex/processors/PublishProcessor.java
index b9341ce961..88781c45eb 100644
--- a/src/main/java/io/reactivex/processors/PublishProcessor.java
+++ b/src/main/java/io/reactivex/processors/PublishProcessor.java
@@ -18,6 +18,7 @@
 
 import io.reactivex.annotations.*;
 import io.reactivex.exceptions.MissingBackpressureException;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.internal.util.BackpressureHelper;
 import io.reactivex.plugins.RxJavaPlugins;
@@ -186,13 +187,10 @@ public void onSubscribe(Subscription s) {
 
     @Override
     public void onNext(T t) {
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             return;
         }
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
         for (PublishSubscription<T> s : subscribers.get()) {
             s.onNext(t);
         }
@@ -201,13 +199,11 @@ public void onNext(T t) {
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable t) {
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             RxJavaPlugins.onError(t);
             return;
         }
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
         error = t;
 
         for (PublishSubscription<T> s : subscribers.getAndSet(TERMINATED)) {
diff --git a/src/main/java/io/reactivex/processors/ReplayProcessor.java b/src/main/java/io/reactivex/processors/ReplayProcessor.java
index 8021170a45..d4aeba6ebb 100644
--- a/src/main/java/io/reactivex/processors/ReplayProcessor.java
+++ b/src/main/java/io/reactivex/processors/ReplayProcessor.java
@@ -267,10 +267,8 @@ public void onSubscribe(Subscription s) {
 
     @Override
     public void onNext(T t) {
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (done) {
             return;
         }
@@ -286,9 +284,8 @@ public void onNext(T t) {
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (done) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/processors/UnicastProcessor.java b/src/main/java/io/reactivex/processors/UnicastProcessor.java
index 8334aa07c5..5c4717c5aa 100644
--- a/src/main/java/io/reactivex/processors/UnicastProcessor.java
+++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java
@@ -339,12 +339,9 @@ public void onSubscribe(Subscription s) {
 
     @Override
     public void onNext(T t) {
-        if (done || cancelled) {
-            return;
-        }
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
 
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
+        if (done || cancelled) {
             return;
         }
 
@@ -354,15 +351,13 @@ public void onNext(T t) {
 
     @Override
     public void onError(Throwable t) {
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (done || cancelled) {
             RxJavaPlugins.onError(t);
             return;
         }
 
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
-
         error = t;
         done = true;
 
diff --git a/src/main/java/io/reactivex/subjects/AsyncSubject.java b/src/main/java/io/reactivex/subjects/AsyncSubject.java
index 9b9cf0d423..0561144387 100644
--- a/src/main/java/io/reactivex/subjects/AsyncSubject.java
+++ b/src/main/java/io/reactivex/subjects/AsyncSubject.java
@@ -13,12 +13,13 @@
 
 package io.reactivex.subjects;
 
-import io.reactivex.annotations.CheckReturnValue;
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicReference;
 
 import io.reactivex.Observer;
+import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.internal.observers.DeferredScalarDisposable;
 import io.reactivex.plugins.RxJavaPlugins;
 
@@ -75,32 +76,17 @@ public void onSubscribe(Disposable s) {
 
     @Override
     public void onNext(T t) {
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             return;
         }
-        if (t == null) {
-            nullOnNext();
-            return;
-        }
         value = t;
     }
 
-    @SuppressWarnings("unchecked")
-    void nullOnNext() {
-        value = null;
-        Throwable ex = new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-        error = ex;
-        for (AsyncDisposable<T> as : subscribers.getAndSet(TERMINATED)) {
-            as.onError(ex);
-        }
-    }
-
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/subjects/BehaviorSubject.java b/src/main/java/io/reactivex/subjects/BehaviorSubject.java
index 8a80cf4a24..85ef6af409 100644
--- a/src/main/java/io/reactivex/subjects/BehaviorSubject.java
+++ b/src/main/java/io/reactivex/subjects/BehaviorSubject.java
@@ -171,10 +171,8 @@ public void onSubscribe(Disposable s) {
 
     @Override
     public void onNext(T t) {
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (terminalEvent.get() != null) {
             return;
         }
@@ -187,9 +185,7 @@ public void onNext(T t) {
 
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (!terminalEvent.compareAndSet(null, t)) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/subjects/CompletableSubject.java b/src/main/java/io/reactivex/subjects/CompletableSubject.java
index dad98fc11d..2f0e209624 100644
--- a/src/main/java/io/reactivex/subjects/CompletableSubject.java
+++ b/src/main/java/io/reactivex/subjects/CompletableSubject.java
@@ -16,8 +16,9 @@
 import java.util.concurrent.atomic.*;
 
 import io.reactivex.*;
-import io.reactivex.annotations.*;
+import io.reactivex.annotations.CheckReturnValue;
 import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 /**
@@ -66,9 +67,7 @@ public void onSubscribe(Disposable d) {
 
     @Override
     public void onError(Throwable e) {
-        if (e == null) {
-            e = new NullPointerException("Null errors are not allowed in 2.x");
-        }
+        ObjectHelper.requireNonNull(e, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (once.compareAndSet(false, true)) {
             this.error = e;
             for (CompletableDisposable md : observers.getAndSet(TERMINATED)) {
diff --git a/src/main/java/io/reactivex/subjects/MaybeSubject.java b/src/main/java/io/reactivex/subjects/MaybeSubject.java
index c1cda23955..7f303deefc 100644
--- a/src/main/java/io/reactivex/subjects/MaybeSubject.java
+++ b/src/main/java/io/reactivex/subjects/MaybeSubject.java
@@ -18,6 +18,7 @@
 import io.reactivex.*;
 import io.reactivex.annotations.*;
 import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 /**
@@ -73,10 +74,7 @@ public void onSubscribe(Disposable d) {
     @SuppressWarnings("unchecked")
     @Override
     public void onSuccess(T value) {
-        if (value == null) {
-            onError(new NullPointerException("Null values are not allowed in 2.x"));
-            return;
-        }
+        ObjectHelper.requireNonNull(value, "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (once.compareAndSet(false, true)) {
             this.value = value;
             for (MaybeDisposable<T> md : observers.getAndSet(TERMINATED)) {
@@ -88,9 +86,7 @@ public void onSuccess(T value) {
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable e) {
-        if (e == null) {
-            e = new NullPointerException("Null errors are not allowed in 2.x");
-        }
+        ObjectHelper.requireNonNull(e, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (once.compareAndSet(false, true)) {
             this.error = e;
             for (MaybeDisposable<T> md : observers.getAndSet(TERMINATED)) {
diff --git a/src/main/java/io/reactivex/subjects/PublishSubject.java b/src/main/java/io/reactivex/subjects/PublishSubject.java
index 4608afc432..ad0f66d14c 100644
--- a/src/main/java/io/reactivex/subjects/PublishSubject.java
+++ b/src/main/java/io/reactivex/subjects/PublishSubject.java
@@ -18,6 +18,7 @@
 
 import io.reactivex.Observer;
 import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 /**
@@ -172,13 +173,11 @@ public void onSubscribe(Disposable s) {
 
     @Override
     public void onNext(T t) {
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+
         if (subscribers.get() == TERMINATED) {
             return;
         }
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
         for (PublishDisposable<T> s : subscribers.get()) {
             s.onNext(t);
         }
@@ -187,13 +186,11 @@ public void onNext(T t) {
     @SuppressWarnings("unchecked")
     @Override
     public void onError(Throwable t) {
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (subscribers.get() == TERMINATED) {
             RxJavaPlugins.onError(t);
             return;
         }
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
         error = t;
 
         for (PublishDisposable<T> s : subscribers.getAndSet(TERMINATED)) {
diff --git a/src/main/java/io/reactivex/subjects/ReplaySubject.java b/src/main/java/io/reactivex/subjects/ReplaySubject.java
index d5bd4bac51..52d0616884 100644
--- a/src/main/java/io/reactivex/subjects/ReplaySubject.java
+++ b/src/main/java/io/reactivex/subjects/ReplaySubject.java
@@ -252,10 +252,7 @@ public void onSubscribe(Disposable s) {
 
     @Override
     public void onNext(T t) {
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (done) {
             return;
         }
@@ -270,9 +267,7 @@ public void onNext(T t) {
 
     @Override
     public void onError(Throwable t) {
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (done) {
             RxJavaPlugins.onError(t);
             return;
diff --git a/src/main/java/io/reactivex/subjects/SingleSubject.java b/src/main/java/io/reactivex/subjects/SingleSubject.java
index 4c486eac97..d09d1f436c 100644
--- a/src/main/java/io/reactivex/subjects/SingleSubject.java
+++ b/src/main/java/io/reactivex/subjects/SingleSubject.java
@@ -18,6 +18,7 @@
 import io.reactivex.*;
 import io.reactivex.annotations.*;
 import io.reactivex.disposables.Disposable;
+import io.reactivex.internal.functions.ObjectHelper;
 import io.reactivex.plugins.RxJavaPlugins;
 
 /**
@@ -74,10 +75,7 @@ public void onSubscribe(@NonNull Disposable d) {
     @SuppressWarnings("unchecked")
     @Override
     public void onSuccess(@NonNull T value) {
-        if (value == null) {
-            onError(new NullPointerException("Null values are not allowed in 2.x"));
-            return;
-        }
+        ObjectHelper.requireNonNull(value, "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (once.compareAndSet(false, true)) {
             this.value = value;
             for (SingleDisposable<T> md : observers.getAndSet(TERMINATED)) {
@@ -89,9 +87,7 @@ public void onSuccess(@NonNull T value) {
     @SuppressWarnings("unchecked")
     @Override
     public void onError(@NonNull Throwable e) {
-        if (e == null) {
-            e = new NullPointerException("Null errors are not allowed in 2.x");
-        }
+        ObjectHelper.requireNonNull(e, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (once.compareAndSet(false, true)) {
             this.error = e;
             for (SingleDisposable<T> md : observers.getAndSet(TERMINATED)) {
diff --git a/src/main/java/io/reactivex/subjects/UnicastSubject.java b/src/main/java/io/reactivex/subjects/UnicastSubject.java
index 69543bd752..a254eaa853 100644
--- a/src/main/java/io/reactivex/subjects/UnicastSubject.java
+++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java
@@ -227,26 +227,21 @@ public void onSubscribe(Disposable s) {
 
     @Override
     public void onNext(T t) {
+        ObjectHelper.requireNonNull(t, "onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (done || disposed) {
             return;
         }
-        if (t == null) {
-            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
-            return;
-        }
         queue.offer(t);
         drain();
     }
 
     @Override
     public void onError(Throwable t) {
+        ObjectHelper.requireNonNull(t, "onError called with null. Null values are generally not allowed in 2.x operators and sources.");
         if (done || disposed) {
             RxJavaPlugins.onError(t);
             return;
         }
-        if (t == null) {
-            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-        }
         error = t;
         done = true;
 
diff --git a/src/test/java/io/reactivex/processors/AsyncProcessorTest.java b/src/test/java/io/reactivex/processors/AsyncProcessorTest.java
index a3d17873e3..8e564efcbe 100644
--- a/src/test/java/io/reactivex/processors/AsyncProcessorTest.java
+++ b/src/test/java/io/reactivex/processors/AsyncProcessorTest.java
@@ -35,7 +35,7 @@
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.*;
 
-public class AsyncProcessorTest extends DelayedFlowableProcessorTest<Object> {
+public class AsyncProcessorTest extends FlowableProcessorTest<Object> {
 
     private final Throwable testException = new Throwable();
 
diff --git a/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java
index 1a58aaf004..496c75c8fa 100644
--- a/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java
+++ b/src/test/java/io/reactivex/processors/BehaviorProcessorTest.java
@@ -39,7 +39,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.*;
 
-public class BehaviorProcessorTest extends DelayedFlowableProcessorTest<Object> {
+public class BehaviorProcessorTest extends FlowableProcessorTest<Object> {
 
     private final Throwable testException = new Throwable();
 
diff --git a/src/test/java/io/reactivex/processors/DelayedFlowableProcessorTest.java b/src/test/java/io/reactivex/processors/DelayedFlowableProcessorTest.java
deleted file mode 100644
index 484335870d..0000000000
--- a/src/test/java/io/reactivex/processors/DelayedFlowableProcessorTest.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/**
- * Copyright (c) 2016-present, RxJava Contributors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
- * the License for the specific language governing permissions and limitations under the License.
- */
-
-package io.reactivex.processors;
-
-import io.reactivex.subscribers.TestSubscriber;
-import org.junit.Test;
-
-import static org.junit.Assert.assertFalse;
-
-public abstract class DelayedFlowableProcessorTest<T> extends FlowableProcessorTest<T> {
-
-    @Test
-    public void onNextNullDelayed() {
-        final FlowableProcessor<T> p = create();
-
-        TestSubscriber<T> ts = p.test();
-
-        p.onNext(null);
-
-
-
-        ts
-                .assertNoValues()
-                .assertError(NullPointerException.class)
-                .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNullDelayed() {
-        final FlowableProcessor<T> p = create();
-
-        TestSubscriber<T> ts = p.test();
-
-        p.onError(null);
-        assertFalse(p.hasSubscribers());
-
-        ts
-                .assertNoValues()
-                .assertError(NullPointerException.class)
-                .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-}
diff --git a/src/test/java/io/reactivex/processors/FlowableProcessorTest.java b/src/test/java/io/reactivex/processors/FlowableProcessorTest.java
index bd37deb282..71946677ed 100644
--- a/src/test/java/io/reactivex/processors/FlowableProcessorTest.java
+++ b/src/test/java/io/reactivex/processors/FlowableProcessorTest.java
@@ -13,6 +13,8 @@
 
 package io.reactivex.processors;
 
+import static org.junit.Assert.*;
+
 import org.junit.Test;
 
 public abstract class FlowableProcessorTest<T> {
@@ -21,25 +23,29 @@
 
     @Test
     public void onNextNull() {
-        final FlowableProcessor<T> p = create();
+        FlowableProcessor<T> p = create();
 
-        p.onNext(null);
+        try {
+            p.onNext(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onNext called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
 
-        p.test()
-                .assertNoValues()
-                .assertError(NullPointerException.class)
-                .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+        p.test().assertEmpty().cancel();
     }
 
     @Test
     public void onErrorNull() {
-        final FlowableProcessor<T> p = create();
+        FlowableProcessor<T> p = create();
 
-        p.onError(null);
+        try {
+            p.onError(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onError called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
 
-        p.test()
-                .assertNoValues()
-                .assertError(NullPointerException.class)
-                .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+        p.test().assertEmpty().cancel();
     }
 }
diff --git a/src/test/java/io/reactivex/processors/UnicastProcessorTest.java b/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
index fbec729694..5b3ab53ed4 100644
--- a/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
+++ b/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
@@ -30,7 +30,7 @@
 
 import static org.junit.Assert.*;
 
-public class UnicastProcessorTest extends DelayedFlowableProcessorTest<Object> {
+public class UnicastProcessorTest extends FlowableProcessorTest<Object> {
 
     @Override
     protected FlowableProcessor<Object> create() {
diff --git a/src/test/java/io/reactivex/subjects/AsyncSubjectTest.java b/src/test/java/io/reactivex/subjects/AsyncSubjectTest.java
index 8332c0cb87..04735b2c68 100644
--- a/src/test/java/io/reactivex/subjects/AsyncSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/AsyncSubjectTest.java
@@ -31,10 +31,15 @@
 import io.reactivex.observers.*;
 import io.reactivex.schedulers.Schedulers;
 
-public class AsyncSubjectTest {
+public class AsyncSubjectTest extends SubjectTest<Integer> {
 
     private final Throwable testException = new Throwable();
 
+    @Override
+    protected Subject<Integer> create() {
+        return AsyncSubject.create();
+    }
+
     @Test
     public void testNeverCompleted() {
         AsyncSubject<String> subject = AsyncSubject.create();
@@ -422,58 +427,6 @@ public void fusionOfflie() {
         .assertResult(1);
     }
 
-    @Test
-    public void onNextNull() {
-        final AsyncSubject<Object> s = AsyncSubject.create();
-
-        s.onNext(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNull() {
-        final AsyncSubject<Object> s = AsyncSubject.create();
-
-        s.onError(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onNextNullDelayed() {
-        final AsyncSubject<Object> p = AsyncSubject.create();
-
-        TestObserver<Object> ts = p.test();
-
-        p.onNext(null);
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNullDelayed() {
-        final AsyncSubject<Object> p = AsyncSubject.create();
-
-        TestObserver<Object> ts = p.test();
-
-        p.onError(null);
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
     @Test
     public void onSubscribeAfterDone() {
         AsyncSubject<Object> p = AsyncSubject.create();
diff --git a/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java b/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java
index 62941ef5e0..2e2cc2f05e 100644
--- a/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/BehaviorSubjectTest.java
@@ -32,10 +32,15 @@
 import io.reactivex.plugins.RxJavaPlugins;
 import io.reactivex.schedulers.Schedulers;
 
-public class BehaviorSubjectTest {
+public class BehaviorSubjectTest extends SubjectTest<Integer> {
 
     private final Throwable testException = new Throwable();
 
+    @Override
+    protected Subject<Integer> create() {
+        return BehaviorSubject.create();
+    }
+
     @Test
     public void testThatSubscriberReceivesDefaultValueAndSubsequentEvents() {
         BehaviorSubject<String> subject = BehaviorSubject.createDefault("default");
@@ -563,66 +568,6 @@ public void testCurrentStateMethodsError() {
         assertTrue(as.getThrowable() instanceof TestException);
     }
 
-    @Test
-    public void onNextNull() {
-        final BehaviorSubject<Object> s = BehaviorSubject.create();
-
-        s.onNext(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNull() {
-        final BehaviorSubject<Object> s = BehaviorSubject.create();
-
-        s.onError(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onNextNullDelayed() {
-        final BehaviorSubject<Object> p = BehaviorSubject.create();
-
-        TestObserver<Object> ts = p.test();
-
-        assertTrue(p.hasObservers());
-
-        p.onNext(null);
-
-        assertFalse(p.hasObservers());
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNullDelayed() {
-        final BehaviorSubject<Object> p = BehaviorSubject.create();
-
-        TestObserver<Object> ts = p.test();
-
-        assertTrue(p.hasObservers());
-
-        p.onError(null);
-
-        assertFalse(p.hasObservers());
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
     @Test
     public void cancelOnArrival() {
         BehaviorSubject<Object> p = BehaviorSubject.create();
diff --git a/src/test/java/io/reactivex/subjects/CompletableSubjectTest.java b/src/test/java/io/reactivex/subjects/CompletableSubjectTest.java
index c2c13fd5d3..b569457c16 100644
--- a/src/test/java/io/reactivex/subjects/CompletableSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/CompletableSubjectTest.java
@@ -125,11 +125,14 @@ public void complete() {
     public void nullThrowable() {
         CompletableSubject cs = CompletableSubject.create();
 
-        TestObserver<Void> to = cs.test();
-
-        cs.onError(null);
+        try {
+            cs.onError(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onError called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
 
-        to.assertFailure(NullPointerException.class);
+        cs.test().assertEmpty().cancel();;
     }
 
     @Test
diff --git a/src/test/java/io/reactivex/subjects/MaybeSubjectTest.java b/src/test/java/io/reactivex/subjects/MaybeSubjectTest.java
index 8d40960d19..c7b8b4f4c5 100644
--- a/src/test/java/io/reactivex/subjects/MaybeSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/MaybeSubjectTest.java
@@ -176,28 +176,6 @@ public void complete() {
         assertEquals(0, ms.observerCount());
     }
 
-    @Test
-    public void nullValue() {
-        MaybeSubject<Integer> ms = MaybeSubject.create();
-
-        TestObserver<Integer> to = ms.test();
-
-        ms.onSuccess(null);
-
-        to.assertFailure(NullPointerException.class);
-    }
-
-    @Test
-    public void nullThrowable() {
-        MaybeSubject<Integer> ms = MaybeSubject.create();
-
-        TestObserver<Integer> to = ms.test();
-
-        ms.onError(null);
-
-        to.assertFailure(NullPointerException.class);
-    }
-
     @Test
     public void cancelOnArrival() {
         MaybeSubject.create()
diff --git a/src/test/java/io/reactivex/subjects/PublishSubjectTest.java b/src/test/java/io/reactivex/subjects/PublishSubjectTest.java
index c7b6d2810d..459f075f96 100644
--- a/src/test/java/io/reactivex/subjects/PublishSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/PublishSubjectTest.java
@@ -30,7 +30,12 @@
 import io.reactivex.observers.*;
 import io.reactivex.schedulers.Schedulers;
 
-public class PublishSubjectTest {
+public class PublishSubjectTest extends SubjectTest<Integer> {
+
+    @Override
+    protected Subject<Integer> create() {
+        return PublishSubject.create();
+    }
 
     @Test
     public void testCompleted() {
@@ -667,30 +672,6 @@ public void subscribeToAfterComplete() {
         assertFalse(pp2.hasObservers());
     }
 
-    @Test
-    public void nullOnNext() {
-        PublishSubject<Integer> pp = PublishSubject.create();
-
-        TestObserver<Integer> ts = pp.test();
-
-        assertTrue(pp.hasObservers());
-
-        pp.onNext(null);
-
-        ts.assertFailure(NullPointerException.class);
-    }
-
-    @Test
-    public void nullOnError() {
-        PublishSubject<Integer> pp = PublishSubject.create();
-
-        TestObserver<Integer> ts = pp.test();
-
-        pp.onError(null);
-
-        ts.assertFailure(NullPointerException.class);
-    }
-
     @Test
     public void subscribedTo() {
         PublishSubject<Integer> pp = PublishSubject.create();
@@ -706,28 +687,4 @@ public void subscribedTo() {
 
         ts.assertResult(1, 2);
     }
-
-    @Test
-    public void onNextNull() {
-        final PublishSubject<Object> s = PublishSubject.create();
-
-        s.onNext(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNull() {
-        final PublishSubject<Object> s = PublishSubject.create();
-
-        s.onError(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
 }
diff --git a/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java b/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java
index 0f5e1032ab..2739b24aae 100644
--- a/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/ReplaySubjectTest.java
@@ -31,10 +31,15 @@
 import io.reactivex.observers.*;
 import io.reactivex.schedulers.*;
 
-public class ReplaySubjectTest {
+public class ReplaySubjectTest extends SubjectTest<Integer> {
 
     private final Throwable testException = new Throwable();
 
+    @Override
+    protected Subject<Integer> create() {
+        return ReplaySubject.create();
+    }
+
     @Test
     public void testCompleted() {
         ReplaySubject<String> subject = ReplaySubject.create();
@@ -951,30 +956,6 @@ public void peekStateTimeAndSizeValueExpired() {
         assertNull(rp.getValues(new Integer[2])[0]);
     }
 
-    @Test
-    public void onNextNull() {
-        final ReplaySubject<Object> s = ReplaySubject.create();
-
-        s.onNext(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNull() {
-        final ReplaySubject<Object> s = ReplaySubject.create();
-
-        s.onError(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
     @Test
     public void capacityHint() {
         ReplaySubject<Integer> rp = ReplaySubject.create(8);
diff --git a/src/test/java/io/reactivex/subjects/SingleSubjectTest.java b/src/test/java/io/reactivex/subjects/SingleSubjectTest.java
index 1ddf762f51..19d6ab6a64 100644
--- a/src/test/java/io/reactivex/subjects/SingleSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/SingleSubjectTest.java
@@ -131,22 +131,28 @@ public void error() {
     public void nullValue() {
         SingleSubject<Integer> ss = SingleSubject.create();
 
-        TestObserver<Integer> to = ss.test();
-
-        ss.onSuccess(null);
+        try {
+            ss.onSuccess(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onSuccess called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
 
-        to.assertFailure(NullPointerException.class);
+        ss.test().assertEmpty().cancel();
     }
 
     @Test
     public void nullThrowable() {
         SingleSubject<Integer> ss = SingleSubject.create();
 
-        TestObserver<Integer> to = ss.test();
-
-        ss.onError(null);
+        try {
+            ss.onError(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onError called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
 
-        to.assertFailure(NullPointerException.class);
+        ss.test().assertEmpty().cancel();
     }
 
     @Test
diff --git a/src/test/java/io/reactivex/subjects/SubjectTest.java b/src/test/java/io/reactivex/subjects/SubjectTest.java
new file mode 100644
index 0000000000..a50a17781b
--- /dev/null
+++ b/src/test/java/io/reactivex/subjects/SubjectTest.java
@@ -0,0 +1,51 @@
+/**
+ * Copyright (c) 2016-present, RxJava Contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.subjects;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public abstract class SubjectTest<T> {
+
+    protected abstract Subject<T> create();
+
+    @Test
+    public void onNextNull() {
+        Subject<T> p = create();
+
+        try {
+            p.onNext(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onNext called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
+
+        p.test().assertEmpty().cancel();
+    }
+
+    @Test
+    public void onErrorNull() {
+        Subject<T> p = create();
+
+        try {
+            p.onError(null);
+            fail("No NullPointerException thrown");
+        } catch (NullPointerException ex) {
+            assertEquals("onError called with null. Null values are generally not allowed in 2.x operators and sources.", ex.getMessage());
+        }
+
+        p.test().assertEmpty().cancel();
+    }
+}
diff --git a/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java b/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
index 1788638967..12f838ee99 100644
--- a/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
@@ -29,7 +29,12 @@
 import io.reactivex.schedulers.Schedulers;
 import static org.mockito.Mockito.mock;
 
-public class UnicastSubjectTest {
+public class UnicastSubjectTest extends SubjectTest<Integer> {
+
+    @Override
+    protected Subject<Integer> create() {
+        return UnicastSubject.create();
+    }
 
     @Test
     public void fusionLive() {
@@ -216,64 +221,6 @@ public void zeroCapacityHint() {
         UnicastSubject.create(0);
     }
 
-    @Test
-    public void onNextNull() {
-        final UnicastSubject<Object> s = UnicastSubject.create();
-
-        s.onNext(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNull() {
-        final UnicastSubject<Object> s = UnicastSubject.create();
-
-        s.onError(null);
-
-        s.test()
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onNextNullDelayed() {
-        final UnicastSubject<Object> p = UnicastSubject.create();
-
-        TestObserver<Object> ts = p.test();
-
-        p.onNext(null);
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
-    @Test
-    public void onErrorNullDelayed() {
-        final UnicastSubject<Object> p = UnicastSubject.create();
-
-        assertFalse(p.hasObservers());
-
-        TestObserver<Object> ts = p.test();
-
-        assertTrue(p.hasObservers());
-
-        p.onError(null);
-
-        assertFalse(p.hasObservers());
-
-        ts
-            .assertNoValues()
-            .assertError(NullPointerException.class)
-            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
-    }
-
     @Test
     public void completeCancelRace() {
         for (int i = 0; i < 500; i++) {
diff --git a/src/test/java/io/reactivex/tck/RefCountProcessor.java b/src/test/java/io/reactivex/tck/RefCountProcessor.java
new file mode 100644
index 0000000000..43fc5d4064
--- /dev/null
+++ b/src/test/java/io/reactivex/tck/RefCountProcessor.java
@@ -0,0 +1,219 @@
+/**
+ * Copyright (c) 2016-present, RxJava Contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.tck;
+
+import java.util.concurrent.atomic.*;
+
+import org.reactivestreams.*;
+
+import io.reactivex.FlowableSubscriber;
+import io.reactivex.internal.subscriptions.*;
+import io.reactivex.processors.FlowableProcessor;
+
+/**
+ * A FlowableProcessor wrapper that disposes the Subscription set via
+ * onSubscribe if the number of subscribers reaches zero.
+ *
+ * @param <T> the upstream and downstream value type
+ * @since 2.1.8
+ */
+/* public */final class RefCountProcessor<T> extends FlowableProcessor<T> implements Subscription {
+
+    final FlowableProcessor<T> actual;
+
+    final AtomicReference<Subscription> upstream;
+
+    final AtomicReference<RefCountSubscriber<T>[]> subscribers;
+
+    @SuppressWarnings("rawtypes")
+    static final RefCountSubscriber[] EMPTY = new RefCountSubscriber[0];
+
+    @SuppressWarnings("rawtypes")
+    static final RefCountSubscriber[] TERMINATED = new RefCountSubscriber[0];
+
+    @SuppressWarnings("unchecked")
+    RefCountProcessor(FlowableProcessor<T> actual) {
+        this.actual = actual;
+        this.upstream = new AtomicReference<Subscription>();
+        this.subscribers = new AtomicReference<RefCountSubscriber<T>[]>(EMPTY);
+    }
+
+    @Override
+    public void onSubscribe(Subscription s) {
+        if (SubscriptionHelper.setOnce(upstream, s)) {
+            actual.onSubscribe(this);
+        }
+    }
+
+    @Override
+    public void onNext(T t) {
+        actual.onNext(t);
+    }
+
+    @Override
+    public void onError(Throwable t) {
+        upstream.lazySet(SubscriptionHelper.CANCELLED);
+        actual.onError(t);
+    }
+
+    @Override
+    public void onComplete() {
+        upstream.lazySet(SubscriptionHelper.CANCELLED);
+        actual.onComplete();
+    }
+
+    @Override
+    protected void subscribeActual(Subscriber<? super T> s) {
+        RefCountSubscriber<T> rcs = new RefCountSubscriber<T>(s, this);
+        if (!add(rcs)) {
+            EmptySubscription.error(new IllegalStateException("RefCountProcessor terminated"), s);
+            return;
+        }
+        actual.subscribe(rcs);
+    }
+
+    @Override
+    public boolean hasComplete() {
+        return actual.hasComplete();
+    }
+
+    @Override
+    public boolean hasThrowable() {
+        return actual.hasThrowable();
+    }
+
+    @Override
+    public Throwable getThrowable() {
+        return actual.getThrowable();
+    }
+
+    @Override
+    public boolean hasSubscribers() {
+        return actual.hasSubscribers();
+    }
+
+    @Override
+    public void cancel() {
+        SubscriptionHelper.cancel(upstream);
+    }
+
+    @Override
+    public void request(long n) {
+        upstream.get().request(n);
+    }
+
+    boolean add(RefCountSubscriber<T> rcs) {
+        for (;;) {
+            RefCountSubscriber<T>[] a = subscribers.get();
+            if (a == TERMINATED) {
+                return false;
+            }
+            int n = a.length;
+            @SuppressWarnings("unchecked")
+            RefCountSubscriber<T>[] b = new RefCountSubscriber[n + 1];
+            System.arraycopy(a, 0, b, 0, n);
+            b[n] = rcs;
+            if (subscribers.compareAndSet(a, b)) {
+                return true;
+            }
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    void remove(RefCountSubscriber<T> rcs) {
+        for (;;) {
+            RefCountSubscriber<T>[] a = subscribers.get();
+            int n = a.length;
+            if (n == 0) {
+                break;
+            }
+            int j = -1;
+
+            for (int i = 0; i < n; i++) {
+                if (rcs == a[i]) {
+                    j = i;
+                    break;
+                }
+            }
+
+            if (j < 0) {
+                break;
+            }
+
+            RefCountSubscriber<T>[] b;
+            if (n == 1) {
+                b = TERMINATED;
+            } else {
+                b = new RefCountSubscriber[n - 1];
+                System.arraycopy(a, 0, b, 0, j);
+                System.arraycopy(a, j + 1, b, j, n - j - 1);
+            }
+            if (subscribers.compareAndSet(a, b)) {
+                if (b == TERMINATED) {
+                    cancel();
+                }
+                break;
+            }
+        }
+    }
+
+    static final class RefCountSubscriber<T> extends AtomicBoolean implements FlowableSubscriber<T>, Subscription {
+
+        private static final long serialVersionUID = -4317488092687530631L;
+
+        final Subscriber<? super T> actual;
+
+        final RefCountProcessor<T> parent;
+
+        Subscription upstream;
+
+        RefCountSubscriber(Subscriber<? super T> actual, RefCountProcessor<T> parent) {
+            this.actual = actual;
+            this.parent = parent;
+        }
+
+        @Override
+        public void request(long n) {
+            upstream.request(n);
+        }
+
+        @Override
+        public void cancel() {
+            lazySet(true);
+            upstream.cancel();
+            parent.remove(this);
+        }
+
+        @Override
+        public void onSubscribe(Subscription s) {
+            this.upstream = s;
+            actual.onSubscribe(this);
+        }
+
+        @Override
+        public void onNext(T t) {
+            actual.onNext(t);
+        }
+
+        @Override
+        public void onError(Throwable t) {
+            actual.onError(t);
+        }
+
+        @Override
+        public void onComplete() {
+            actual.onComplete();
+        }
+    }
+}
diff --git a/src/test/java/io/reactivex/tck/UnicastProcessorTckTest.java b/src/test/java/io/reactivex/tck/UnicastProcessorTckTest.java
new file mode 100644
index 0000000000..e6490905ea
--- /dev/null
+++ b/src/test/java/io/reactivex/tck/UnicastProcessorTckTest.java
@@ -0,0 +1,64 @@
+/**
+ * Copyright (c) 2016-present, RxJava Contributors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.tck;
+
+import java.util.concurrent.*;
+
+import org.reactivestreams.*;
+import org.reactivestreams.tck.*;
+import org.testng.annotations.Test;
+
+import io.reactivex.exceptions.TestException;
+import io.reactivex.processors.UnicastProcessor;
+
+@Test
+public class UnicastProcessorTckTest extends IdentityProcessorVerification<Integer> {
+
+    public UnicastProcessorTckTest() {
+        super(new TestEnvironment(50));
+    }
+
+    @Override
+    public Processor<Integer, Integer> createIdentityProcessor(int bufferSize) {
+        UnicastProcessor<Integer> up = UnicastProcessor.create();
+        return new RefCountProcessor<Integer>(up);
+    }
+
+    @Override
+    public Publisher<Integer> createFailedPublisher() {
+        UnicastProcessor<Integer> up = UnicastProcessor.create();
+        up.onError(new TestException());
+        return up;
+    }
+
+    @Override
+    public ExecutorService publisherExecutorService() {
+        return Executors.newCachedThreadPool();
+    }
+
+    @Override
+    public Integer createElement(int element) {
+        return element;
+    }
+
+    @Override
+    public long maxSupportedSubscribers() {
+        return 1;
+    }
+
+    @Override
+    public long maxElementsFromPublisher() {
+        return 1024;
+    }
+}
