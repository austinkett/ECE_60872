diff --git a/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java
index 658f941430..cd51f22a9d 100644
--- a/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java
+++ b/src/main/java/rx/internal/operators/OnSubscribeCombineLatest.java
@@ -83,7 +83,7 @@ public void call(final Subscriber<? super R> child) {
         private final MultiSourceRequestableSubscriber<T, R>[] subscribers;
 
         /* following are guarded by WIP */
-        private final RxRingBuffer buffer = RxRingBuffer.getSpmcInstance();
+        private final RxRingBuffer buffer = RxRingBuffer.getSpscInstance();
         private final Object[] collectedValues;
         private final BitSet haveValues;
         private volatile int haveValuesCount; // does this need to be volatile or is WIP sufficient?
diff --git a/src/main/java/rx/internal/operators/OperatorMerge.java b/src/main/java/rx/internal/operators/OperatorMerge.java
index 297a4412f9..755348fda2 100644
--- a/src/main/java/rx/internal/operators/OperatorMerge.java
+++ b/src/main/java/rx/internal/operators/OperatorMerge.java
@@ -282,7 +282,7 @@ private void handleScalarSynchronousObservableWithRequestLimits(ScalarSynchronou
 
         private void initScalarValueQueueIfNeeded() {
             if (scalarValueQueue == null) {
-                scalarValueQueue = RxRingBuffer.getSpmcInstance();
+                scalarValueQueue = RxRingBuffer.getSpscInstance();
                 add(scalarValueQueue);
             }
         }
@@ -531,7 +531,7 @@ public void request(long n) {
         @SuppressWarnings("rawtypes")
         static final AtomicIntegerFieldUpdater<InnerSubscriber> ONCE_TERMINATED = AtomicIntegerFieldUpdater.newUpdater(InnerSubscriber.class, "terminated");
 
-        private final RxRingBuffer q = RxRingBuffer.getSpmcInstance();
+        private final RxRingBuffer q = RxRingBuffer.getSpscInstance();
 
         public InnerSubscriber(MergeSubscriber<T> parent, MergeProducer<T> producer) {
             this.parentSubscriber = parent;
@@ -627,7 +627,7 @@ private void emit(T t, boolean complete) {
                     } else {
                         // this needs to check q.count() as draining above may not have drained the full queue
                         // perf tests show this to be okay, though different queue implementations could perform poorly with this
-                        if (producer.requested > 0 && q.count() == 0) {
+                        if (producer.requested > 0 && q.isEmpty()) {
                             if (complete) {
                                 parentSubscriber.completeInner(this);
                             } else {
diff --git a/src/main/java/rx/internal/operators/OperatorPublish.java b/src/main/java/rx/internal/operators/OperatorPublish.java
index 6e2328e012..c258c2f9b6 100644
--- a/src/main/java/rx/internal/operators/OperatorPublish.java
+++ b/src/main/java/rx/internal/operators/OperatorPublish.java
@@ -135,7 +135,7 @@ public void call() {
         private final RequestHandler<T> requestHandler;
         private final AtomicLong originOutstanding = new AtomicLong();
         private final long THRESHOLD = RxRingBuffer.SIZE / 4;
-        private final RxRingBuffer buffer = RxRingBuffer.getSpmcInstance();
+        private final RxRingBuffer buffer = RxRingBuffer.getSpscInstance();
 
         OriginSubscriber(RequestHandler<T> requestHandler) {
             this.requestHandler = requestHandler;
diff --git a/src/main/java/rx/internal/operators/OperatorZip.java b/src/main/java/rx/internal/operators/OperatorZip.java
index 2c28eb0112..02bc787795 100644
--- a/src/main/java/rx/internal/operators/OperatorZip.java
+++ b/src/main/java/rx/internal/operators/OperatorZip.java
@@ -293,7 +293,7 @@ void tick() {
         @SuppressWarnings("rawtypes")
         final class InnerSubscriber extends Subscriber {
             // Concurrent* since we need to read it from across threads
-            final RxRingBuffer items = RxRingBuffer.getSpmcInstance();
+            final RxRingBuffer items = RxRingBuffer.getSpscInstance();
 
             @Override
             public void onStart() {
diff --git a/src/main/java/rx/internal/util/RxRingBuffer.java b/src/main/java/rx/internal/util/RxRingBuffer.java
index 389793c1c3..be6211dc18 100644
--- a/src/main/java/rx/internal/util/RxRingBuffer.java
+++ b/src/main/java/rx/internal/util/RxRingBuffer.java
@@ -21,20 +21,17 @@
 import rx.Subscription;
 import rx.exceptions.MissingBackpressureException;
 import rx.internal.operators.NotificationLite;
-import rx.internal.util.unsafe.SpmcArrayQueue;
-import rx.internal.util.unsafe.SpscArrayQueue;
-import rx.internal.util.unsafe.UnsafeAccess;
+import rx.internal.util.unsafe.*;
 
 /**
  * This assumes Spsc or Spmc usage. This means only a single producer calling the on* methods. This is the Rx contract of an Observer.
  * Concurrent invocations of on* methods will not be thread-safe.
  */
-public class RxRingBuffer implements Subscription {
+public final class RxRingBuffer implements Subscription {
 
     public static RxRingBuffer getSpscInstance() {
         if (UnsafeAccess.isUnsafeAvailable()) {
-            // TODO the SpscArrayQueue isn't ready yet so using SpmcArrayQueue for now
-            return new RxRingBuffer(SPMC_POOL, SIZE);
+            return new RxRingBuffer(SPSC_POOL, SIZE);
         } else {
             return new RxRingBuffer();
         }
@@ -288,12 +285,15 @@ public static RxRingBuffer getSpmcInstance() {
     private static ObjectPool<Queue<Object>> SPMC_POOL = new ObjectPool<Queue<Object>>() {
 
         @Override
-        protected SpmcArrayQueue<Object> createObject() {
+        protected Queue<Object> createObject() {
             return new SpmcArrayQueue<Object>(SIZE);
         }
 
     };
-    
+
+    private final SWSRPhaser writerPhaser = new SWSRPhaser();
+    private final SWSRPhaser readerPhaser = new SWSRPhaser();
+
     private RxRingBuffer(Queue<Object> queue, int size) {
         this.queue = queue;
         this.pool = null;
@@ -306,7 +306,14 @@ private RxRingBuffer(ObjectPool<Queue<Object>> pool, int size) {
         this.size = size;
     }
 
-    public void release() {
+    public synchronized void release() {
+        SWSRPhaser rp = readerPhaser;
+        if (rp.isOddPhase()) {
+            return;
+        }
+        rp.flipPhase(-1);
+        SWSRPhaser wp = writerPhaser;
+        wp.flipPhase(-1);
         if (pool != null) {
             Queue<Object> q = queue;
             q.clear();
@@ -331,43 +338,57 @@ public void unsubscribe() {
      *             if more onNext are sent than have been requested
      */
     public void onNext(Object o) throws MissingBackpressureException {
-        if (queue == null) {
-            throw new IllegalStateException("This instance has been unsubscribed and the queue is no longer usable.");
-        }
-        if (!queue.offer(on.next(o))) {
-            throw new MissingBackpressureException();
+        Queue<Object> q = queue;
+        SWSRPhaser phaser = writerPhaser;
+        long criticalValueAtEnter = phaser.writerCriticalSectionEnter();
+        try {
+            if (criticalValueAtEnter < 0) {
+                throw new IllegalStateException("This instance has been unsubscribed and the queue is no longer usable.");
+            }
+            if (!q.offer(on.next(o))) {
+                throw new MissingBackpressureException();
+            }
+        } finally {
+            phaser.writerCriticalSectionExit(criticalValueAtEnter);
         }
     }
 
     public void onCompleted() {
-        // we ignore terminal events if we already have one
-        if (terminalState == null) {
-            terminalState = on.completed();
+        SWSRPhaser phaser = writerPhaser;
+        long criticalValueAtEnter = phaser.writerCriticalSectionEnter();
+        try {
+            if (criticalValueAtEnter < 0) {
+                throw new IllegalStateException("This instance has been unsubscribed and the queue is no longer usable.");
+            }
+            // we ignore terminal events if we already have one
+            if (terminalState == null) {
+                terminalState = on.completed();
+            }
+        } finally {
+            phaser.writerCriticalSectionExit(criticalValueAtEnter);
         }
     }
 
     public void onError(Throwable t) {
-        // we ignore terminal events if we already have one
-        if (terminalState == null) {
-            terminalState = on.error(t);
+        SWSRPhaser phaser = writerPhaser;
+        long criticalValueAtEnter = phaser.writerCriticalSectionEnter();
+        try {
+            if (criticalValueAtEnter < 0) {
+                throw new IllegalStateException("This instance has been unsubscribed and the queue is no longer usable.");
+            }
+            // we ignore terminal events if we already have one
+            if (terminalState == null) {
+                terminalState = on.error(t);
+            }
+        } finally {
+            phaser.writerCriticalSectionExit(criticalValueAtEnter);
         }
     }
 
-    public int available() {
-        return size - count();
-    }
-
     public int capacity() {
         return size;
     }
 
-    public int count() {
-        if (queue == null) {
-            return 0;
-        }
-        return queue.size();
-    }
-
     public boolean isEmpty() {
         if (queue == null) {
             return true;
@@ -376,69 +397,83 @@ public boolean isEmpty() {
     }
 
     public Object poll() {
-        if (queue == null) {
-            // we are unsubscribed and have released the undelrying queue
-            return null;
-        }
-        Object o;
-        o = queue.poll();
-        /*
-         * benjchristensen July 10 2014 => The check for 'queue.isEmpty()' came from a very rare concurrency bug where poll()
-         * is invoked, then an "onNext + onCompleted/onError" arrives before hitting the if check below. In that case,
-         * "o == null" and there is a terminal state, but now "queue.isEmpty()" and we should NOT return the terminalState.
-         * 
-         * The queue.size() check is a double-check that works to handle this, without needing to synchronize poll with on*
-         * or needing to enqueue terminalState.
-         * 
-         * This did make me consider eliminating the 'terminalState' ref and enqueuing it ... but then that requires
-         * a +1 of the size, or -1 of how many onNext can be sent. See comment on 'terminalState' above for why it
-         * is currently the way it is.
-         */
-        if (o == null && terminalState != null && queue.isEmpty()) {
-            o = terminalState;
-            // once emitted we clear so a poll loop will finish
-            terminalState = null;
+        Queue<Object> q = queue;
+        SWSRPhaser phaser = readerPhaser;
+        long criticalValueAtEnter = phaser.writerCriticalSectionEnter();
+        try {
+            if (criticalValueAtEnter < 0) {
+                // we are unsubscribed and have released the undelrying queue
+                return null;
+            }
+            Object o;
+            o = q.poll();
+            /*
+             * benjchristensen July 10 2014 => The check for 'queue.isEmpty()' came from a very rare concurrency bug where poll()
+             * is invoked, then an "onNext + onCompleted/onError" arrives before hitting the if check below. In that case,
+             * "o == null" and there is a terminal state, but now "queue.isEmpty()" and we should NOT return the terminalState.
+             * 
+             * The queue.size() check is a double-check that works to handle this, without needing to synchronize poll with on*
+             * or needing to enqueue terminalState.
+             * 
+             * This did make me consider eliminating the 'terminalState' ref and enqueuing it ... but then that requires
+             * a +1 of the size, or -1 of how many onNext can be sent. See comment on 'terminalState' above for why it
+             * is currently the way it is.
+             */
+            if (o == null && terminalState != null && q.isEmpty()) {
+                o = terminalState;
+                // once emitted we clear so a poll loop will finish
+                terminalState = null;
+            }
+            return o;
+        } finally {
+            phaser.writerCriticalSectionExit(criticalValueAtEnter);
         }
-        return o;
     }
 
     public Object peek() {
-        if (queue == null) {
-            // we are unsubscribed and have released the undelrying queue
-            return null;
-        }
-        Object o;
-        o = queue.peek();
-        if (o == null && terminalState != null && queue.isEmpty()) {
-            o = terminalState;
+        Queue<Object> q = queue;
+        SWSRPhaser phaser = readerPhaser;
+        long criticalValueAtEnter = phaser.writerCriticalSectionEnter();
+        try {
+            if (criticalValueAtEnter < 0) {
+                // we are unsubscribed and have released the undelrying queue
+                return null;
+            }
+            Object o;
+            o = q.peek();
+            if (o == null && terminalState != null && q.isEmpty()) {
+                o = terminalState;
+            }
+            return o;
+        } finally {
+            phaser.writerCriticalSectionExit(criticalValueAtEnter);
         }
-        return o;
     }
 
-    public boolean isCompleted(Object o) {
+    public static boolean isCompleted(Object o) {
         return on.isCompleted(o);
     }
 
-    public boolean isError(Object o) {
+    public static boolean isError(Object o) {
         return on.isError(o);
     }
 
-    public Object getValue(Object o) {
+    public static Object getValue(Object o) {
         return on.getValue(o);
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
-    public boolean accept(Object o, Observer child) {
+    public static boolean accept(Object o, Observer child) {
         return on.accept(child, o);
     }
 
-    public Throwable asError(Object o) {
+    public static Throwable asError(Object o) {
         return on.getError(o);
     }
 
     @Override
     public boolean isUnsubscribed() {
-        return queue == null;
+        return writerPhaser.isOddPhase();
     }
 
 }
diff --git a/src/main/java/rx/internal/util/SWSRPhaser.java b/src/main/java/rx/internal/util/SWSRPhaser.java
new file mode 100644
index 0000000000..570cf7031c
--- /dev/null
+++ b/src/main/java/rx/internal/util/SWSRPhaser.java
@@ -0,0 +1,87 @@
+package rx.internal.util;
+
+/**
+* Written by Gil Tene of Azul Systems, and released to the public domain,
+* as explained at http://creativecommons.org/publicdomain/zero/1.0/
+* 
+* Originally from https://gist.github.com/giltene/b3e5490c2d7edb232644
+* Explained at http://stuff-gil-says.blogspot.com/2014/11/writerreaderphaser-story-about-new.html
+*/
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLongFieldUpdater;
+
+/**
+* Single-Writer Single-Reader Phaser. 
+*/
+public final class SWSRPhaser {
+   private volatile long startEpoch = 0;
+   private volatile long evenEndEpoch = 0;
+   private volatile long oddEndEpoch = Long.MIN_VALUE;
+
+   private static final AtomicLongFieldUpdater<SWSRPhaser> startEpochUpdater =
+           AtomicLongFieldUpdater.newUpdater(SWSRPhaser.class, "startEpoch");
+   private static final AtomicLongFieldUpdater<SWSRPhaser> evenEndEpochUpdater =
+           AtomicLongFieldUpdater.newUpdater(SWSRPhaser.class, "evenEndEpoch");
+   private static final AtomicLongFieldUpdater<SWSRPhaser> oddEndEpochUpdater =
+           AtomicLongFieldUpdater.newUpdater(SWSRPhaser.class, "oddEndEpoch");
+
+   public long writerCriticalSectionEnter() {
+       return startEpochUpdater.getAndIncrement(this);
+   }
+
+   public void writerCriticalSectionExit(long criticalValueAtEnter) {
+       if (criticalValueAtEnter < 0) {
+           oddEndEpochUpdater.lazySet(this, criticalValueAtEnter + 1);
+       } else {
+           evenEndEpochUpdater.lazySet(this, criticalValueAtEnter + 1);
+       }
+   }
+
+   public boolean isEvenPhase() {
+       return startEpoch >= 0;
+   }
+   public boolean isOddPhase() {
+       return startEpoch < 0;
+   }
+   
+   public long flipPhase(long yieldTimeNsec) {
+       boolean nextPhaseIsEven = (startEpoch < 0); // Current phase is odd...
+
+       long initialStartValue;
+       // First, clear currently unused [next] phase end epoch (to proper initial value for phase):
+       if (nextPhaseIsEven) {
+           initialStartValue = 0;
+           evenEndEpochUpdater.lazySet(this, 0);
+       } else {
+           initialStartValue = Long.MIN_VALUE;
+           oddEndEpochUpdater.lazySet(this, Long.MIN_VALUE);
+       }
+
+       // Next, reset start value, indicating new phase, and retain value at flip:
+       long startValueAtFlip = startEpochUpdater.getAndSet(this, initialStartValue);
+
+       // Now, spin until previous phase end value catches up with start value at flip:
+       boolean caughtUp = false;
+       do {
+           if (nextPhaseIsEven) {
+               caughtUp = (oddEndEpoch == startValueAtFlip);
+           } else {
+               caughtUp = (evenEndEpoch == startValueAtFlip);
+           }
+           if (!caughtUp) {
+               if (yieldTimeNsec == 0) {
+                   Thread.yield();
+               } else 
+               if (yieldTimeNsec > 0) {
+                   try {
+                       TimeUnit.NANOSECONDS.sleep(yieldTimeNsec);
+                   } catch (InterruptedException ex) {
+                   }
+               }
+           }
+       } while (!caughtUp);
+       
+       return startValueAtFlip;
+   }
+}
\ No newline at end of file
diff --git a/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java
index f9de0a7b74..1fbdc7797b 100644
--- a/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java
+++ b/src/main/java/rx/internal/util/unsafe/SpscArrayQueue.java
@@ -2,22 +2,21 @@
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- * 
- * Original License: https://github.com/JCTools/JCTools/blob/master/LICENSE
- * Original location: https://github.com/JCTools/JCTools/blob/master/jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java
  */
 package rx.internal.util.unsafe;
 
+import static rx.internal.util.unsafe.UnsafeAccess.UNSAFE;
+
 abstract class SpscArrayQueueColdField<E> extends ConcurrentCircularArrayQueue<E> {
-    private static final Integer MAX_LOOK_AHEAD_STEP = Integer.getInteger("jctoolts.spsc.max.lookahead.step", 4096);
+    private static final Integer MAX_LOOK_AHEAD_STEP = Integer.getInteger("jctools.spsc.max.lookahead.step", 4096);
     protected final int lookAheadStep;
     public SpscArrayQueueColdField(int capacity) {
         super(capacity);
@@ -38,7 +37,7 @@ public SpscArrayQueueL1Pad(int capacity) {
     static {
         try {
             P_INDEX_OFFSET =
-                UnsafeAccess.UNSAFE.objectFieldOffset(SpscArrayQueueProducerFields.class.getDeclaredField("producerIndex"));
+                UNSAFE.objectFieldOffset(SpscArrayQueueProducerFields.class.getDeclaredField("producerIndex"));
         } catch (NoSuchFieldException e) {
             throw new RuntimeException(e);
         }
@@ -50,7 +49,7 @@ public SpscArrayQueueProducerFields(int capacity) {
         super(capacity);
     }
     protected final long lvProducerIndex() {
-        return UnsafeAccess.UNSAFE.getLongVolatile(this, P_INDEX_OFFSET);
+        return UNSAFE.getLongVolatile(this, P_INDEX_OFFSET);
     }
 }
 
@@ -69,7 +68,7 @@ public SpscArrayQueueL2Pad(int capacity) {
     static {
         try {
             C_INDEX_OFFSET =
-                UnsafeAccess.UNSAFE.objectFieldOffset(SpscArrayQueueConsumerField.class.getDeclaredField("consumerIndex"));
+                UNSAFE.objectFieldOffset(SpscArrayQueueConsumerField.class.getDeclaredField("consumerIndex"));
         } catch (NoSuchFieldException e) {
             throw new RuntimeException(e);
         }
@@ -78,7 +77,7 @@ public SpscArrayQueueConsumerField(int capacity) {
         super(capacity);
     }
     protected final long lvConsumerIndex() {
-        return UnsafeAccess.UNSAFE.getLongVolatile(this, C_INDEX_OFFSET);
+        return UNSAFE.getLongVolatile(this, C_INDEX_OFFSET);
     }
 }
 
@@ -92,14 +91,16 @@ public SpscArrayQueueL3Pad(int capacity) {
 }
 
 /**
- * A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.</br> This implementation is a mashup of the
- * <a href="http://sourceforge.net/projects/mc-fastflow/">Fast Flow</a> algorithm with an optimization of the offer
- * method taken from the <a href="http://staff.ustc.edu.cn/~bhua/publications/IJPP_draft.pdf">BQueue</a> algorithm (a
- * variation on Fast Flow).<br>
- * For convenience the relevant papers are available in the resources folder:</br>
- * <i>2010 - Pisa - SPSC Queues on Shared Cache Multi-Core Systems.pdf</br>
- * 2012 - Junchang- BQueue- Efficient and Practical Queuing.pdf </br></i>
- * This implementation is wait free.
+ * A Single-Producer-Single-Consumer queue backed by a pre-allocated buffer.
+ * <p>
+ * This implementation is a mashup of the <a href="http://sourceforge.net/projects/mc-fastflow/">Fast Flow</a>
+ * algorithm with an optimization of the offer method taken from the <a
+ * href="http://staff.ustc.edu.cn/~bhua/publications/IJPP_draft.pdf">BQueue</a> algorithm (a variation on Fast
+ * Flow), and adjusted to comply with Queue.offer semantics with regards to capacity.<br>
+ * For convenience the relevant papers are available in the resources folder:<br>
+ * <i>2010 - Pisa - SPSC Queues on Shared Cache Multi-Core Systems.pdf<br>
+ * 2012 - Junchang- BQueue- Efficient and Practical Queuing.pdf <br>
+ * </i> This implementation is wait free.
  * 
  * @author nitsanw
  * 
@@ -123,13 +124,15 @@ public boolean offer(final E e) {
         }
         // local load of field to avoid repeated loads after volatile reads
         final E[] lElementBuffer = buffer;
+        final long offset = calcElementOffset(producerIndex);
         if (producerIndex >= producerLookAhead) {
-            if (null != lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad
+            if (null == lvElement(lElementBuffer, calcElementOffset(producerIndex + lookAheadStep))) {// LoadLoad
+                producerLookAhead = producerIndex + lookAheadStep;
+            }
+            else if (null != lvElement(lElementBuffer, offset)){
                 return false;
             }
-            producerLookAhead = producerIndex + lookAheadStep;
         }
-        long offset = calcElementOffset(producerIndex);
         producerIndex++; // do increment here so the ordered store give both a barrier 
         soElement(lElementBuffer, offset, e);// StoreStore
         return true;
@@ -181,4 +184,4 @@ public int size() {
             }
         }
     }
-}
+}
\ No newline at end of file
