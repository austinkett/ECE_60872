diff --git a/src/main/java/io/reactivex/internal/operators/PublisherAmb.java b/src/main/java/io/reactivex/internal/operators/PublisherAmb.java
index 9eb71b006c..8c79117858 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherAmb.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherAmb.java
@@ -116,6 +116,13 @@ public boolean win(int index) {
             int w = winner;
             if (w == 0) {
                 if (WINNER.compareAndSet(this, 0, index)) {
+                    AmbInnerSubscriber<T>[] a = subscribers;
+                    int n = a.length;
+                    for (int i = 0; i < n; i++) {
+                        if (i + 1 != index) {
+                            a[i].cancel();
+                        }
+                    }
                     return true;
                 }
                 return false;
@@ -189,6 +196,9 @@ public void request(long n) {
             if (s != null) {
                 s.request(n);
             } else {
+                if (SubscriptionHelper.validateRequest(n)) {
+                    return;
+                }
                 BackpressureHelper.add(MISSED_REQUESTED, this, n);
                 s = get();
                 if (s != null && s != CANCELLED) {
diff --git a/src/main/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmb.java b/src/main/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmb.java
index 50187efb19..72e92a0640 100644
--- a/src/main/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmb.java
+++ b/src/main/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmb.java
@@ -100,6 +100,13 @@ public boolean win(int index) {
             int w = winner;
             if (w == 0) {
                 if (WINNER.compareAndSet(this, 0, index)) {
+                    AmbInnerSubscriber<T>[] a = subscribers;
+                    int n = a.length;
+                    for (int i = 0; i < n; i++) {
+                        if (i + 1 != index) {
+                            a[i].dispose();
+                        }
+                    }
                     return true;
                 }
                 return false;
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeAmbTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeAmbTest.java
index 7e08b23b33..ce77011447 100644
--- a/src/test/java/io/reactivex/internal/operators/OnSubscribeAmbTest.java
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeAmbTest.java
@@ -13,7 +13,7 @@
 
 package io.reactivex.internal.operators;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 import java.io.IOException;
@@ -28,6 +28,7 @@
 import io.reactivex.*;
 import io.reactivex.disposables.CompositeDisposable;
 import io.reactivex.schedulers.*;
+import io.reactivex.subjects.PublishSubject;
 import io.reactivex.subscribers.TestSubscriber;
 
 public class OnSubscribeAmbTest {
@@ -277,5 +278,26 @@ public void testSynchronousSources() {
         }).ambWith(Observable.just(2)).toBlocking().single();
         assertEquals(1, result);
     }
-    
+ 
+    @Test
+    public void testAmbCancelsOthers() {
+        PublishSubject<Integer> source1 = PublishSubject.create();
+        PublishSubject<Integer> source2 = PublishSubject.create();
+        PublishSubject<Integer> source3 = PublishSubject.create();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        Observable.amb(source1, source2, source3).subscribe(ts);
+        
+        assertTrue("Source 1 doesn't have subscribers!", source1.hasSubscribers());
+        assertTrue("Source 2 doesn't have subscribers!", source2.hasSubscribers());
+        assertTrue("Source 3 doesn't have subscribers!", source3.hasSubscribers());
+        
+        source1.onNext(1);
+
+        assertTrue("Source 1 doesn't have subscribers!", source1.hasSubscribers());
+        assertFalse("Source 2 still has subscribers!", source2.hasSubscribers());
+        assertFalse("Source 2 still has subscribers!", source3.hasSubscribers());
+        
+    }
 }
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmbTest.java b/src/test/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmbTest.java
index b35466cb28..13a8aeb367 100644
--- a/src/test/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmbTest.java
+++ b/src/test/java/io/reactivex/internal/operators/nbp/NbpOnSubscribeAmbTest.java
@@ -13,7 +13,7 @@
 
 package io.reactivex.internal.operators.nbp;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 import java.io.IOException;
@@ -28,6 +28,7 @@
 import io.reactivex.NbpObservable.*;
 import io.reactivex.disposables.*;
 import io.reactivex.schedulers.*;
+import io.reactivex.subjects.nbp.NbpPublishSubject;
 import io.reactivex.subscribers.nbp.NbpTestSubscriber;
 
 public class NbpOnSubscribeAmbTest {
@@ -178,5 +179,26 @@ public void testSynchronousSources() {
         }).ambWith(NbpObservable.just(2)).toBlocking().single();
         assertEquals(1, result);
     }
-    
+
+    @Test
+    public void testAmbCancelsOthers() {
+        NbpPublishSubject<Integer> source1 = NbpPublishSubject.create();
+        NbpPublishSubject<Integer> source2 = NbpPublishSubject.create();
+        NbpPublishSubject<Integer> source3 = NbpPublishSubject.create();
+        
+        NbpTestSubscriber<Integer> ts = new NbpTestSubscriber<>();
+        
+        NbpObservable.amb(source1, source2, source3).subscribe(ts);
+        
+        assertTrue("Source 1 doesn't have subscribers!", source1.hasSubscribers());
+        assertTrue("Source 2 doesn't have subscribers!", source2.hasSubscribers());
+        assertTrue("Source 3 doesn't have subscribers!", source3.hasSubscribers());
+        
+        source1.onNext(1);
+
+        assertTrue("Source 1 doesn't have subscribers!", source1.hasSubscribers());
+        assertFalse("Source 2 still has subscribers!", source2.hasSubscribers());
+        assertFalse("Source 2 still has subscribers!", source3.hasSubscribers());
+        
+    }
 }
\ No newline at end of file
