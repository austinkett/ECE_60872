diff --git a/src/main/java/io/reactivex/Flowable.java b/src/main/java/io/reactivex/Flowable.java
index c22deefed5..427f73a6aa 100644
--- a/src/main/java/io/reactivex/Flowable.java
+++ b/src/main/java/io/reactivex/Flowable.java
@@ -579,11 +579,11 @@ public Throwable call() {
     }
 
     @BackpressureSupport(BackpressureKind.FULL)
-    @SchedulerSupport(SchedulerSupport.IO)
+    @SchedulerSupport(SchedulerSupport.CUSTOM)
     public static <T> Flowable<T> fromFuture(Future<? extends T> future, Scheduler scheduler) {
         Objects.requireNonNull(scheduler, "scheduler is null");
         Flowable<T> o = fromFuture(future);
-        return o.subscribeOn(Schedulers.io());
+        return o.subscribeOn(scheduler);
     }
 
     @BackpressureSupport(BackpressureKind.FULL)
diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index 5af299280e..809c086db0 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -437,11 +437,11 @@ public Throwable call() {
         return o.subscribeOn(scheduler);
     }
 
-    @SchedulerSupport(SchedulerSupport.IO)
+    @SchedulerSupport(SchedulerSupport.CUSTOM)
     public static <T> Observable<T> fromFuture(Future<? extends T> future, Scheduler scheduler) {
         Objects.requireNonNull(scheduler, "scheduler is null");
         Observable<T> o = fromFuture(future);
-        return o.subscribeOn(Schedulers.io());
+        return o.subscribeOn(scheduler);
     }
 
     public static <T> Observable<T> fromIterable(Iterable<? extends T> source) {
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java
index bbee37e8e8..2e66a6c118 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableToObservableFutureTest.java
@@ -23,7 +23,7 @@
 import org.reactivestreams.Subscriber;
 
 import io.reactivex.*;
-import io.reactivex.schedulers.Schedulers;
+import io.reactivex.schedulers.*;
 import io.reactivex.subscribers.TestSubscriber;
 
 public class FlowableToObservableFutureTest {
@@ -49,6 +49,27 @@ public void testSuccess() throws Exception {
         verify(future, times(1)).cancel(true);
     }
 
+    @Test
+    public void testSuccessOperatesOnSuppliedScheduler() throws Exception {
+        @SuppressWarnings("unchecked")
+        Future<Object> future = mock(Future.class);
+        Object value = new Object();
+        when(future.get()).thenReturn(value);
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+
+        TestScheduler scheduler = new TestScheduler();
+        TestSubscriber<Object> ts = new TestSubscriber<Object>(o);
+
+        Flowable.fromFuture(future, scheduler).subscribe(ts);
+
+        verify(o, never()).onNext(value);
+
+        scheduler.triggerActions();
+
+        verify(o, times(1)).onNext(value);
+    }
+
     @Test
     public void testFailure() throws Exception {
         @SuppressWarnings("unchecked")
diff --git a/src/test/java/io/reactivex/internal/operators/observable/ObservableToFutureTest.java b/src/test/java/io/reactivex/internal/operators/observable/ObservableToFutureTest.java
index dc35bc0e2a..22c7d4b1f6 100644
--- a/src/test/java/io/reactivex/internal/operators/observable/ObservableToFutureTest.java
+++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableToFutureTest.java
@@ -23,7 +23,7 @@
 
 import io.reactivex.*;
 import io.reactivex.observers.TestObserver;
-import io.reactivex.schedulers.Schedulers;
+import io.reactivex.schedulers.*;
 
 public class ObservableToFutureTest {
 
@@ -48,6 +48,27 @@ public void testSuccess() throws Exception {
         verify(future, times(1)).cancel(true);
     }
 
+    @Test
+    public void testSuccessOperatesOnSuppliedScheduler() throws Exception {
+        @SuppressWarnings("unchecked")
+        Future<Object> future = mock(Future.class);
+        Object value = new Object();
+        when(future.get()).thenReturn(value);
+
+        Observer<Object> o = TestHelper.mockObserver();
+
+        TestScheduler scheduler = new TestScheduler();
+        TestObserver<Object> ts = new TestObserver<Object>(o);
+
+        Observable.fromFuture(future, scheduler).subscribe(ts);
+
+        verify(o, never()).onNext(value);
+
+        scheduler.triggerActions();
+
+        verify(o, times(1)).onNext(value);
+    }
+
     @Test
     public void testFailure() throws Exception {
         @SuppressWarnings("unchecked")
