diff --git a/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java
index b7241ea4ac..4dc499ce2d 100644
--- a/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java
+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimer.java
@@ -73,8 +73,8 @@ public void cancel() {
         public void run() {
             if (get() != DisposableHelper.DISPOSED) {
                 if (requested) {
-                    actual.onNext(0L);
                     lazySet(EmptyDisposable.INSTANCE);
+                    actual.onNext(0L);
                     actual.onComplete();
                 } else {
                     lazySet(EmptyDisposable.INSTANCE);
diff --git a/src/main/java/io/reactivex/internal/operators/observable/ObservableTimer.java b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimer.java
index 1414da06f6..a44d15cd6e 100644
--- a/src/main/java/io/reactivex/internal/operators/observable/ObservableTimer.java
+++ b/src/main/java/io/reactivex/internal/operators/observable/ObservableTimer.java
@@ -64,8 +64,8 @@ public boolean isDisposed() {
         @Override
         public void run() {
             if (!isDisposed()) {
-                actual.onNext(0L);
                 lazySet(EmptyDisposable.INSTANCE);
+                actual.onNext(0L);
                 actual.onComplete();
             }
         }
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOtherTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOtherTest.java
index 23f9e31cd6..04c4d6fe5b 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOtherTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOtherTest.java
@@ -12,6 +12,7 @@
  */
 package io.reactivex.internal.operators.flowable;
 
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.*;
 
 import org.junit.*;
@@ -319,4 +320,21 @@ public Object apply(Flowable<Integer> o) throws Exception {
             }
         }, false, 1, 1, 1);
     }
+
+    @Test
+    public void afterDelayNoInterrupt() {
+        final TestSubscriber<Boolean> observer = TestSubscriber.create();
+        Flowable.<Boolean>create(new FlowableOnSubscribe<Boolean>() {
+            @Override
+            public void subscribe(FlowableEmitter<Boolean> emitter) throws Exception {
+              emitter.onNext(Thread.interrupted());
+              emitter.onComplete();
+            }
+        }, BackpressureStrategy.MISSING)
+        .delaySubscription(100, TimeUnit.MICROSECONDS)
+        .subscribe(observer);
+
+        observer.awaitTerminalEvent();
+        observer.assertValue(false);
+    }
 }
diff --git a/src/test/java/io/reactivex/internal/operators/observable/ObservableDelaySubscriptionOtherTest.java b/src/test/java/io/reactivex/internal/operators/observable/ObservableDelaySubscriptionOtherTest.java
index fe68ebccf7..3dc42b0acb 100644
--- a/src/test/java/io/reactivex/internal/operators/observable/ObservableDelaySubscriptionOtherTest.java
+++ b/src/test/java/io/reactivex/internal/operators/observable/ObservableDelaySubscriptionOtherTest.java
@@ -13,6 +13,7 @@
 
 package io.reactivex.internal.operators.observable;
 
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.junit.*;
@@ -200,4 +201,21 @@ public Object apply(Observable<Integer> o) throws Exception {
             }
         }, false, 1, 1, 1);
     }
+
+    @Test
+    public void afterDelayNoInterrupt() {
+        final TestObserver<Boolean> observer = TestObserver.create();
+        Observable.<Boolean>create(new ObservableOnSubscribe<Boolean>() {
+            @Override
+            public void subscribe(ObservableEmitter<Boolean> emitter) throws Exception {
+              emitter.onNext(Thread.interrupted());
+              emitter.onComplete();
+            }
+        })
+        .delaySubscription(100, TimeUnit.MICROSECONDS)
+        .subscribe(observer);
+
+        observer.awaitTerminalEvent();
+        observer.assertValue(false);
+    }
 }
