diff --git a/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java b/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java
index e1a0f51c4c..6b2ad7f68b 100644
--- a/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java
+++ b/src/main/java/io/reactivex/subscribers/SerializedSubscriber.java
@@ -98,6 +98,7 @@ public void onError(Throwable t) {
                 reportError = true;
             } else
             if (emitting) {
+                done = true;
                 AppendOnlyLinkedArrayList<Object> q = queue;
                 if (q == null) {
                     q = new AppendOnlyLinkedArrayList<>(QUEUE_LINK_SIZE);
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorSerializeTest.java b/src/test/java/io/reactivex/internal/operators/OperatorSerializeTest.java
new file mode 100644
index 0000000000..9ea94ac061
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorSerializeTest.java
@@ -0,0 +1,389 @@
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.*;
+import org.reactivestreams.*;
+
+import io.reactivex.*;
+import io.reactivex.internal.subscriptions.EmptySubscription;
+
+public class OperatorSerializeTest {
+
+    Subscriber<String> observer;
+
+    @Before
+    public void before() {
+        observer = TestHelper.mockSubscriber();
+    }
+
+    @Test
+    public void testSingleThreadedBasic() {
+        TestSingleThreadedObservable onSubscribe = new TestSingleThreadedObservable("one", "two", "three");
+        Observable<String> w = Observable.create(onSubscribe);
+
+        w.serialize().subscribe(observer);
+        onSubscribe.waitToFinish();
+
+        verify(observer, times(1)).onNext("one");
+        verify(observer, times(1)).onNext("two");
+        verify(observer, times(1)).onNext("three");
+        verify(observer, never()).onError(any(Throwable.class));
+        verify(observer, times(1)).onComplete();
+        // non-deterministic because unsubscribe happens after 'waitToFinish' releases
+        // so commenting out for now as this is not a critical thing to test here
+        //            verify(s, times(1)).unsubscribe();
+    }
+
+    @Test
+    public void testMultiThreadedBasic() {
+        TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable("one", "two", "three");
+        Observable<String> w = Observable.create(onSubscribe);
+
+        BusyObserver busyobserver = new BusyObserver();
+
+        w.serialize().subscribe(busyobserver);
+        onSubscribe.waitToFinish();
+
+        assertEquals(3, busyobserver.onNextCount.get());
+        assertFalse(busyobserver.onError);
+        assertTrue(busyobserver.onCompleted);
+        // non-deterministic because unsubscribe happens after 'waitToFinish' releases
+        // so commenting out for now as this is not a critical thing to test here
+        //            verify(s, times(1)).unsubscribe();
+
+        // we can have concurrency ...
+        assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);
+        // ... but the onNext execution should be single threaded
+        assertEquals(1, busyobserver.maxConcurrentThreads.get());
+    }
+
+    @Test
+    public void testMultiThreadedWithNPE() {
+        TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable("one", "two", "three", null);
+        Observable<String> w = Observable.create(onSubscribe);
+
+        BusyObserver busyobserver = new BusyObserver();
+
+        w.serialize().subscribe(busyobserver);
+        onSubscribe.waitToFinish();
+
+        System.out.println("maxConcurrentThreads: " + onSubscribe.maxConcurrentThreads.get());
+
+        // we can't know how many onNext calls will occur since they each run on a separate thread
+        // that depends on thread scheduling so 0, 1, 2 and 3 are all valid options
+        // assertEquals(3, busyobserver.onNextCount.get());
+        assertTrue(busyobserver.onNextCount.get() < 4);
+        assertTrue(busyobserver.onError);
+        // no onCompleted because onError was invoked
+        assertFalse(busyobserver.onCompleted);
+        // non-deterministic because unsubscribe happens after 'waitToFinish' releases
+        // so commenting out for now as this is not a critical thing to test here
+        //verify(s, times(1)).unsubscribe();
+
+        // we can have concurrency ...
+        assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);
+        // ... but the onNext execution should be single threaded
+        assertEquals(1, busyobserver.maxConcurrentThreads.get());
+    }
+
+    @Test
+    public void testMultiThreadedWithNPEinMiddle() {
+        boolean lessThan9 = false;
+        for (int i = 0; i < 3; i++) {
+            TestMultiThreadedObservable onSubscribe = new TestMultiThreadedObservable("one", "two", "three", null, "four", "five", "six", "seven", "eight", "nine");
+            Observable<String> w = Observable.create(onSubscribe);
+    
+            BusyObserver busyobserver = new BusyObserver();
+    
+            w.serialize().subscribe(busyobserver);
+            onSubscribe.waitToFinish();
+    
+            System.out.println("maxConcurrentThreads: " + onSubscribe.maxConcurrentThreads.get());
+            // this should not always be the full number of items since the error should (very often) 
+            // stop it before it completes all 9
+            System.out.println("onNext count: " + busyobserver.onNextCount.get());
+            if (busyobserver.onNextCount.get() < 9) {
+                lessThan9 = true;
+            }
+            assertTrue(busyobserver.onError);
+            // no onCompleted because onError was invoked
+            assertFalse(busyobserver.onCompleted);
+            // non-deterministic because unsubscribe happens after 'waitToFinish' releases
+            // so commenting out for now as this is not a critical thing to test here
+            // verify(s, times(1)).unsubscribe();
+    
+            // we can have concurrency ...
+            assertTrue(onSubscribe.maxConcurrentThreads.get() > 1);
+            // ... but the onNext execution should be single threaded
+            assertEquals(1, busyobserver.maxConcurrentThreads.get());
+        }
+        assertTrue(lessThan9);
+    }
+    
+    /**
+     * A thread that will pass data to onNext
+     */
+    public static class OnNextThread implements Runnable {
+
+        private final Observer<String> observer;
+        private final int numStringsToSend;
+
+        OnNextThread(Observer<String> observer, int numStringsToSend) {
+            this.observer = observer;
+            this.numStringsToSend = numStringsToSend;
+        }
+
+        @Override
+        public void run() {
+            for (int i = 0; i < numStringsToSend; i++) {
+                observer.onNext("aString");
+            }
+        }
+    }
+
+    /**
+     * A thread that will call onError or onNext
+     */
+    public static class CompletionThread implements Runnable {
+
+        private final Observer<String> observer;
+        private final TestConcurrencyobserverEvent event;
+        private final Future<?>[] waitOnThese;
+
+        CompletionThread(Observer<String> observer, TestConcurrencyobserverEvent event, Future<?>... waitOnThese) {
+            this.observer = observer;
+            this.event = event;
+            this.waitOnThese = waitOnThese;
+        }
+
+        @Override
+        public void run() {
+            /* if we have 'waitOnThese' futures, we'll wait on them before proceeding */
+            if (waitOnThese != null) {
+                for (Future<?> f : waitOnThese) {
+                    try {
+                        f.get();
+                    } catch (Throwable e) {
+                        System.err.println("Error while waiting on future in CompletionThread");
+                    }
+                }
+            }
+
+            /* send the event */
+            if (event == TestConcurrencyobserverEvent.onError) {
+                observer.onError(new RuntimeException("mocked exception"));
+            } else if (event == TestConcurrencyobserverEvent.onCompleted) {
+                observer.onComplete();
+
+            } else {
+                throw new IllegalArgumentException("Expecting either onError or onCompleted");
+            }
+        }
+    }
+
+    private static enum TestConcurrencyobserverEvent {
+        onCompleted, onError, onNext
+    }
+
+    /**
+     * This spawns a single thread for the subscribe execution
+     */
+    private static class TestSingleThreadedObservable implements Publisher<String> {
+
+        final String[] values;
+        private Thread t = null;
+
+        public TestSingleThreadedObservable(final String... values) {
+            this.values = values;
+
+        }
+
+        @Override
+        public void subscribe(final Subscriber<? super String> observer) {
+            observer.onSubscribe(EmptySubscription.INSTANCE);
+            System.out.println("TestSingleThreadedObservable subscribed to ...");
+            t = new Thread(new Runnable() {
+
+                @Override
+                public void run() {
+                    try {
+                        System.out.println("running TestSingleThreadedObservable thread");
+                        for (String s : values) {
+                            System.out.println("TestSingleThreadedObservable onNext: " + s);
+                            observer.onNext(s);
+                        }
+                        observer.onComplete();
+                    } catch (Throwable e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+
+            });
+            System.out.println("starting TestSingleThreadedObservable thread");
+            t.start();
+            System.out.println("done starting TestSingleThreadedObservable thread");
+        }
+
+        public void waitToFinish() {
+            try {
+                t.join();
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+        }
+
+    }
+
+    /**
+     * This spawns a thread for the subscription, then a separate thread for each onNext call.
+     */
+    private static class TestMultiThreadedObservable implements Publisher<String> {
+        final String[] values;
+        Thread t = null;
+        AtomicInteger threadsRunning = new AtomicInteger();
+        AtomicInteger maxConcurrentThreads = new AtomicInteger();
+        ExecutorService threadPool;
+
+        public TestMultiThreadedObservable(String... values) {
+            this.values = values;
+            this.threadPool = Executors.newCachedThreadPool();
+        }
+
+        @Override
+        public void subscribe(final Subscriber<? super String> observer) {
+            observer.onSubscribe(EmptySubscription.INSTANCE);
+            System.out.println("TestMultiThreadedObservable subscribed to ...");
+            final NullPointerException npe = new NullPointerException();
+            t = new Thread(new Runnable() {
+
+                @Override
+                public void run() {
+                    try {
+                        System.out.println("running TestMultiThreadedObservable thread");
+                        for (final String s : values) {
+                            threadPool.execute(new Runnable() {
+
+                                @Override
+                                public void run() {
+                                    threadsRunning.incrementAndGet();
+                                    try {
+                                        // perform onNext call
+                                        if (s == null) {
+                                            System.out.println("TestMultiThreadedObservable onNext: null");
+                                            // force an error
+                                            throw npe;
+                                        } else 
+                                            System.out.println("TestMultiThreadedObservable onNext: " + s);
+                                        observer.onNext(s);
+                                        // capture 'maxThreads'
+                                        int concurrentThreads = threadsRunning.get();
+                                        int maxThreads = maxConcurrentThreads.get();
+                                        if (concurrentThreads > maxThreads) {
+                                            maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);
+                                        }
+                                    } catch (Throwable e) {
+                                        observer.onError(e);
+                                    } finally {
+                                        threadsRunning.decrementAndGet();
+                                    }
+                                }
+                            });
+                        }
+                        // we are done spawning threads
+                        threadPool.shutdown();
+                    } catch (Throwable e) {
+                        throw new RuntimeException(e);
+                    }
+
+                    // wait until all threads are done, then mark it as COMPLETED
+                    try {
+                        // wait for all the threads to finish
+                        threadPool.awaitTermination(2, TimeUnit.SECONDS);
+                    } catch (InterruptedException e) {
+                        throw new RuntimeException(e);
+                    }
+                    observer.onComplete();
+                }
+            });
+            System.out.println("starting TestMultiThreadedObservable thread");
+            t.start();
+            System.out.println("done starting TestMultiThreadedObservable thread");
+        }
+
+        public void waitToFinish() {
+            try {
+                t.join();
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    private static class BusyObserver extends Observer<String> {
+        volatile boolean onCompleted = false;
+        volatile boolean onError = false;
+        AtomicInteger onNextCount = new AtomicInteger();
+        AtomicInteger threadsRunning = new AtomicInteger();
+        AtomicInteger maxConcurrentThreads = new AtomicInteger();
+
+        @Override
+        public void onComplete() {
+            threadsRunning.incrementAndGet();
+
+            System.out.println(">>> Busyobserver received onCompleted");
+            onCompleted = true;
+
+            int concurrentThreads = threadsRunning.get();
+            int maxThreads = maxConcurrentThreads.get();
+            if (concurrentThreads > maxThreads) {
+                maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);
+            }
+            threadsRunning.decrementAndGet();
+        }
+
+        @Override
+        public void onError(Throwable e) {
+            threadsRunning.incrementAndGet();
+
+            System.out.println(">>> Busyobserver received onError: " + e.getMessage());
+            onError = true;
+
+            int concurrentThreads = threadsRunning.get();
+            int maxThreads = maxConcurrentThreads.get();
+            if (concurrentThreads > maxThreads) {
+                maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);
+            }
+            threadsRunning.decrementAndGet();
+        }
+
+        @Override
+        public void onNext(String args) {
+            threadsRunning.incrementAndGet();
+            try {
+                onNextCount.incrementAndGet();
+                System.out.println(">>> Busyobserver received onNext: " + args);
+                try {
+                    // simulate doing something computational
+                    Thread.sleep(200);
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            } finally {
+                // capture 'maxThreads'
+                int concurrentThreads = threadsRunning.get();
+                int maxThreads = maxConcurrentThreads.get();
+                if (concurrentThreads > maxThreads) {
+                    maxConcurrentThreads.compareAndSet(maxThreads, concurrentThreads);
+                }
+                threadsRunning.decrementAndGet();
+            }
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorSingleTest.java b/src/test/java/io/reactivex/internal/operators/OperatorSingleTest.java
new file mode 100644
index 0000000000..f17ce9fa26
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorSingleTest.java
@@ -0,0 +1,416 @@
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.isA;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.function.*;
+
+import org.junit.Test;
+import org.mockito.InOrder;
+import org.reactivestreams.Subscriber;
+
+import io.reactivex.Observable;
+import io.reactivex.Observer;
+import io.reactivex.TestHelper;
+
+public class OperatorSingleTest {
+
+    @Test
+    public void testSingle() {
+        Observable<Integer> observable = Observable.just(1).single();
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(1);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleWithTooManyElements() {
+        Observable<Integer> observable = Observable.just(1, 2).single();
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(IllegalArgumentException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleWithEmpty() {
+        Observable<Integer> observable = Observable.<Integer> empty().single();
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(NoSuchElementException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+    
+    @Test
+    public void testSingleDoesNotRequestMoreThanItNeedsToEmitItem() {
+        final AtomicLong request = new AtomicLong();
+        Observable.just(1).doOnRequest(new LongConsumer() {
+            @Override
+            public void accept(long n) {
+                request.addAndGet(n);
+            }
+        }).toBlocking().single();
+        // FIXME single now triggers fast-path
+        assertEquals(Long.MAX_VALUE, request.get());
+    }
+
+    @Test
+    public void testSingleDoesNotRequestMoreThanItNeedsToEmitErrorFromEmpty() {
+        final AtomicLong request = new AtomicLong();
+        try {
+            Observable.empty().doOnRequest(new LongConsumer() {
+                @Override
+                public void accept(long n) {
+                    request.addAndGet(n);
+                }
+            }).toBlocking().single();
+        } catch (NoSuchElementException e) {
+            // FIXME single now triggers fast-path
+            assertEquals(Long.MAX_VALUE, request.get());
+        }
+    }
+
+    @Test
+    public void testSingleDoesNotRequestMoreThanItNeedsToEmitErrorFromMoreThanOne() {
+        final AtomicLong request = new AtomicLong();
+        try {
+            Observable.just(1, 2).doOnRequest(new LongConsumer() {
+                @Override
+                public void accept(long n) {
+                    request.addAndGet(n);
+                }
+            }).toBlocking().single();
+        } catch (IllegalArgumentException e) {
+            // FIXME single now triggers fast-path
+            assertEquals(Long.MAX_VALUE, request.get());
+        }
+    }
+    
+    @Test
+    public void testSingleDoesNotRequestMoreThanItNeedsIf1Then2Requested() {
+        final List<Long> requests = new ArrayList<>();
+        Observable.just(1)
+        //
+                .doOnRequest(new LongConsumer() {
+                    @Override
+                    public void accept(long n) {
+                        requests.add(n);
+                    }
+                })
+                //
+                .single()
+                //
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onStart() {
+                        request(1);
+                    }
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                        request(2);
+                    }
+                });
+        // FIXME single now triggers fast-path
+        assertEquals(Arrays.asList(Long.MAX_VALUE, Long.MAX_VALUE), requests);
+    }
+    
+    @Test
+    public void testSingleDoesNotRequestMoreThanItNeedsIf3Requested() {
+        final List<Long> requests = new ArrayList<>();
+        Observable.just(1)
+        //
+                .doOnRequest(new LongConsumer() {
+                    @Override
+                    public void accept(long n) {
+                        requests.add(n);
+                    }
+                })
+                //
+                .single()
+                //
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onStart() {
+                        request(3);
+                    }
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                    }
+                });
+        // FIXME single now triggers fast-path
+        assertEquals(Arrays.asList(Long.MAX_VALUE), requests);
+    }
+    
+    @Test
+    public void testSingleRequestsExactlyWhatItNeedsIf1Requested() {
+        final List<Long> requests = new ArrayList<>();
+        Observable.just(1)
+        //
+                .doOnRequest(new LongConsumer() {
+                    @Override
+                    public void accept(long n) {
+                        requests.add(n);
+                    }
+                })
+                //
+                .single()
+                //
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onStart() {
+                        request(1);
+                    }
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                    }
+                });
+        // FIXME single now triggers fast-path
+        assertEquals(Arrays.asList(Long.MAX_VALUE), requests);
+    }
+
+
+    @Test
+    public void testSingleWithPredicate() {
+        Observable<Integer> observable = Observable.just(1, 2)
+                .filter(
+                new Predicate<Integer>() {
+
+                    @Override
+                    public boolean test(Integer t1) {
+                        return t1 % 2 == 0;
+                    }
+                })
+                .single();
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(2);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleWithPredicateAndTooManyElements() {
+        Observable<Integer> observable = Observable.just(1, 2, 3, 4)
+                .filter(
+                new Predicate<Integer>() {
+
+                    @Override
+                    public boolean test(Integer t1) {
+                        return t1 % 2 == 0;
+                    }
+                })
+                .single();
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(IllegalArgumentException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleWithPredicateAndEmpty() {
+        Observable<Integer> observable = Observable.just(1)
+                .filter(
+                new Predicate<Integer>() {
+
+                    @Override
+                    public boolean test(Integer t1) {
+                        return t1 % 2 == 0;
+                    }
+                })
+                .single();
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(NoSuchElementException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefault() {
+        Observable<Integer> observable = Observable.just(1).single(2);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(1);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefaultWithTooManyElements() {
+        Observable<Integer> observable = Observable.just(1, 2).single(3);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(IllegalArgumentException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefaultWithEmpty() {
+        Observable<Integer> observable = Observable.<Integer> empty()
+                .single(1);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(1);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefaultWithPredicate() {
+        Observable<Integer> observable = Observable.just(1, 2)
+                .filter(t1 -> t1 % 2 == 0)
+                .single(4);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(2);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefaultWithPredicateAndTooManyElements() {
+        Observable<Integer> observable = Observable.just(1, 2, 3, 4)
+                .filter(t1 -> t1 % 2 == 0)
+                .single(6);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(
+                isA(IllegalArgumentException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleOrDefaultWithPredicateAndEmpty() {
+        Observable<Integer> observable = Observable.just(1)
+                .filter(t1 -> t1 % 2 == 0)
+                .single(2);
+
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(2);
+        inOrder.verify(observer, times(1)).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void testSingleWithBackpressure() {
+        Observable<Integer> observable = Observable.just(1, 2).single();
+
+        Subscriber<Integer> subscriber = spy(new Observer<Integer>() {
+
+            @Override
+            public void onStart() {
+                request(1);
+            }
+
+            @Override
+            public void onComplete() {
+
+            }
+
+            @Override
+            public void onError(Throwable e) {
+
+            }
+
+            @Override
+            public void onNext(Integer integer) {
+                request(1);
+            }
+        });
+        observable.subscribe(subscriber);
+
+        InOrder inOrder = inOrder(subscriber);
+        inOrder.verify(subscriber, times(1)).onError(isA(IllegalArgumentException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test(timeout = 30000)
+    public void testIssue1527() throws InterruptedException {
+        //https://github.com/ReactiveX/RxJava/pull/1527
+        Observable<Integer> source = Observable.just(1, 2, 3, 4, 5, 6);
+        Observable<Integer> reduced = source.reduce((i1, i2) -> i1 + i2);
+
+        Integer r = reduced.toBlocking().first();
+        assertEquals(21, r.intValue());
+    }
+}
\ No newline at end of file
