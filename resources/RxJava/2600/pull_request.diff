diff --git a/src/main/java/rx/Observable.java b/src/main/java/rx/Observable.java
index 53d86ead3e..561e0873e3 100644
--- a/src/main/java/rx/Observable.java
+++ b/src/main/java/rx/Observable.java
@@ -7282,24 +7282,30 @@ public final void onNext(T args) {
      * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
      */
     public final Subscription subscribe(final Observer<? super T> observer) {
-        return subscribe(new Subscriber<T>() {
+        if (observer instanceof Subscriber) {
+            // this will ensure that we don't drop the Subscriber's subscription from the chain,
+            // as it would otherwise be hidden by the wrapping Subscriber
+            return subscribe((Subscriber) observer);
+        } else {
+            return subscribe(new Subscriber<T>() {
 
-            @Override
-            public void onCompleted() {
-                observer.onCompleted();
-            }
+                @Override
+                public void onCompleted() {
+                    observer.onCompleted();
+                }
 
-            @Override
-            public void onError(Throwable e) {
-                observer.onError(e);
-            }
+                @Override
+                public void onError(Throwable e) {
+                    observer.onError(e);
+                }
 
-            @Override
-            public void onNext(T t) {
-                observer.onNext(t);
-            }
+                @Override
+                public void onNext(T t) {
+                    observer.onNext(t);
+                }
 
-        });
+            });
+        }
     }
 
     /**
diff --git a/src/test/java/rx/ObservableTests.java b/src/test/java/rx/ObservableTests.java
index 41aa61645b..42c7f38444 100644
--- a/src/test/java/rx/ObservableTests.java
+++ b/src/test/java/rx/ObservableTests.java
@@ -1116,4 +1116,12 @@ public void testErrorThrownIssue1685() {
         System.out.println("Done");
     }
 
+    @Test // cf. https://github.com/ReactiveX/RxJava/issues/2599
+    public void testSubscribingSubscriberAsObserverMaintainsSubscriptionChain() {
+        TestSubscriber subscriber = new TestSubscriber();
+        Subscription subscription = Observable.just("event").subscribe((Observer) subscriber);
+        subscription.unsubscribe();
+
+        subscriber.assertUnsubscribed();
+    }
 }
