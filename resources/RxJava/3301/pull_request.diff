diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index af5b6a99fc..ccf17d46d4 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -787,6 +787,14 @@ protected Observable(Publisher<T> onSubscribe) {
         return buffer(count, count, bufferSupplier);
     }
 
+    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit) {
+        return buffer(timespan, timeskip, unit, Schedulers.computation(), ArrayList::new);
+    }
+    
+    public final Observable<List<T>> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler) {
+        return buffer(timespan, timeskip, unit, scheduler, ArrayList::new);
+    }
+    
     public final <U extends Collection<? super T>> Observable<U> buffer(long timespan, long timeskip, TimeUnit unit, Scheduler scheduler, Supplier<U> bufferSupplier) {
         Objects.requireNonNull(unit);
         Objects.requireNonNull(scheduler);
@@ -856,6 +864,12 @@ protected Observable(Publisher<T> onSubscribe) {
         Objects.requireNonNull(bufferSupplier);
         return lift(new OperatorBufferExactBoundary<>(boundary, bufferSupplier));
     }
+    
+    public final <B> Observable<List<T>> buffer(Supplier<? extends Observable<B>> boundarySupplier) {
+        Objects.requireNonNull(boundarySupplier);
+        // TODO implement
+        throw new UnsupportedOperationException();
+    }
 
     public final Observable<T> cache() {
         return CachedObservable.from(this);
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java b/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java
index df2a941cc2..e0b836297b 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorBuffer.java
@@ -44,8 +44,7 @@ public OperatorBuffer(int count, int skip, Supplier<U> bufferSupplier) {
             }
             return EmptySubscriber.INSTANCE;
         }
-        // TODO Auto-generated method stub
-        return null;
+        return new BufferSkipSubscriber<>(t, count, skip, bufferSupplier);
     }
     
     static final class BufferExactSubscriber<T, U extends Collection<? super T>> implements Subscriber<T>, Subscription {
@@ -130,7 +129,7 @@ public void onError(Throwable t) {
         public void onComplete() {
             U b = buffer;
             buffer = null;
-            if (b != null) {
+            if (b != null && !b.isEmpty()) {
                 actual.onNext(b);
             }
             actual.onComplete();
@@ -210,7 +209,7 @@ public void onNext(T t) {
             while (it.hasNext()) {
                 U b = it.next();
                 b.add(t);
-                if (count >= b.size()) {
+                if (count <= b.size()) {
                     it.remove();
                     
                     actual.onNext(b);
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java
index 858b35ccff..deffbb1b56 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferBoundary.java
@@ -114,7 +114,12 @@ public void onError(Throwable t) {
         
         @Override
         public void onComplete() {
-            cancel();
+            if (WINDOWS.decrementAndGet(this) == 0) {
+                complete();
+            }
+        }
+        
+        void complete() {
             List<U> list;
             synchronized (this) {
                 list = new ArrayList<>(buffers);
@@ -209,8 +214,8 @@ void open(Open window) {
         
         void openFinished(Disposable d) {
             if (resources.remove(d)) {
-                if (leave(-1) == 0) {
-                    onComplete();
+                if (WINDOWS.decrementAndGet(this) == 0) {
+                    complete();
                 }
             }
         }
@@ -227,8 +232,8 @@ void close(U b, Disposable d) {
             }
             
             if (resources.remove(d)) {
-                if (leave(-1) == 0) {
-                    onComplete();
+                if (WINDOWS.decrementAndGet(this) == 0) {
+                    complete();
                 }
             }
         }
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorBufferTimed.java b/src/main/java/io/reactivex/internal/operators/OperatorBufferTimed.java
index 665ea38308..3fc388b6f7 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorBufferTimed.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorBufferTimed.java
@@ -126,13 +126,15 @@ public void onSubscribe(Subscription s) {
                 return;
             }
             
+            buffer = b;
+            
             actual.onSubscribe(this);
             
             if (!cancelled) {
                 s.request(Long.MAX_VALUE);
                 
                 Disposable d = scheduler.schedulePeriodicallyDirect(this, timespan, timespan, unit);
-                if (TIMER.compareAndSet(this, null, d)) {
+                if (!TIMER.compareAndSet(this, null, d)) {
                     d.dispose();
                 }
             }
@@ -315,6 +317,14 @@ public void onSubscribe(Subscription s) {
             s.request(Long.MAX_VALUE);
 
             w.schedulePeriodically(this, timeskip, timeskip, unit);
+            
+            w.schedule(() -> {
+                synchronized (this) {
+                    buffers.remove(b);
+                }
+                
+                fastpathOrderedEmitMax(b, false, w);
+            }, timespan, unit);
         }
         
         @Override
@@ -385,7 +395,6 @@ public void run() {
                 actual.onError(new NullPointerException("The supplied buffer is null"));
                 return;
             }
-            
             synchronized (this) {
                 if (cancelled) {
                     return;
@@ -487,17 +496,18 @@ public void onNext(T t) {
                 
                 b.add(t);
                 
-                if (b.size() >= maxSize && restartTimerOnMaxSize) {
-                    buffer = null;
-                    producerIndex++;
-                } else {
+                if (b.size() < maxSize) {
                     return;
                 }
             }
+
+            if (restartTimerOnMaxSize) {
+                buffer = null;
+                producerIndex++;
+                
+                timer.dispose();
+            }
             
-            timer.dispose();
-            
-            actual.onNext(b);
             fastpathOrderedEmitMax(b, false, this);
             
             try {
@@ -513,14 +523,21 @@ public void onNext(T t) {
                 actual.onError(new NullPointerException("The buffer supplied is null"));
                 return;
             }
-            
 
-            synchronized (this) {
-                buffer = b;
-                consumerIndex++;
-            }
+
             
-            timer = w.schedulePeriodically(this, timespan, timespan, unit);
+            if (restartTimerOnMaxSize) {
+                synchronized (this) {
+                    buffer = b;
+                    consumerIndex++;
+                }
+                
+                timer = w.schedulePeriodically(this, timespan, timespan, unit);
+            } else {
+                synchronized (this) {
+                    buffer = b;
+                }
+            }
         }
         
         @Override
diff --git a/src/main/java/io/reactivex/internal/operators/PublisherFutureSource.java b/src/main/java/io/reactivex/internal/operators/PublisherFutureSource.java
index 8966ff8504..24828dcd78 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherFutureSource.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherFutureSource.java
@@ -38,6 +38,8 @@ public void subscribe(Subscriber<? super T> s) {
             T v;
             try {
                 v = unit != null ? future.get(timeout, unit) : future.get();
+            } catch (CancellationException ex) {
+                return; // FIXME not sure about this either
             } catch (ExecutionException ex) {
                 Throwable cause = ex.getCause();
                 if (cause != null) {
diff --git a/src/main/java/io/reactivex/subscribers/TestSubscriber.java b/src/main/java/io/reactivex/subscribers/TestSubscriber.java
index 56468d0899..ee678e8063 100644
--- a/src/main/java/io/reactivex/subscribers/TestSubscriber.java
+++ b/src/main/java/io/reactivex/subscribers/TestSubscriber.java
@@ -411,7 +411,7 @@ public void assertNoErrors() {
         }
         int s = errors.size();
         if (s != 0) {
-            fail(prefix, "Error(s) present", errors);
+            fail(prefix, "Error(s) present: " + errors, errors);
         }
     }
     
diff --git a/src/test/java/io/reactivex/internal/operators/OnSubscribeToObservableFutureTest.java b/src/test/java/io/reactivex/internal/operators/OnSubscribeToObservableFutureTest.java
index ce09602a66..58618b6be7 100644
--- a/src/test/java/io/reactivex/internal/operators/OnSubscribeToObservableFutureTest.java
+++ b/src/test/java/io/reactivex/internal/operators/OnSubscribeToObservableFutureTest.java
@@ -130,6 +130,8 @@ public Object get(long timeout, TimeUnit unit) throws InterruptedException, Exec
         
         futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);
         
+        Thread.sleep(100);
+        
         ts.dispose();
         
         ts.assertNoErrors();
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorBufferTest.java b/src/test/java/io/reactivex/internal/operators/OperatorBufferTest.java
new file mode 100644
index 0000000000..4a0d9c664d
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorBufferTest.java
@@ -0,0 +1,988 @@
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.*;
+import java.util.function.*;
+
+import org.junit.*;
+import org.mockito.*;
+import org.reactivestreams.*;
+
+import io.reactivex.*;
+import io.reactivex.Observable;
+import io.reactivex.Observer;
+import io.reactivex.exceptions.TestException;
+import io.reactivex.internal.subscriptions.EmptySubscription;
+import io.reactivex.schedulers.TestScheduler;
+import io.reactivex.subjects.PublishSubject;
+import io.reactivex.subscribers.*;
+
+public class OperatorBufferTest {
+
+    private Subscriber<List<String>> observer;
+    private TestScheduler scheduler;
+    private Scheduler.Worker innerScheduler;
+
+    @Before
+    public void before() {
+        observer = TestHelper.mockSubscriber();
+        scheduler = new TestScheduler();
+        innerScheduler = scheduler.createWorker();
+    }
+
+    @Test
+    public void testComplete() {
+        Observable<String> source = Observable.empty();
+
+        Observable<List<String>> buffered = source.buffer(3, 3);
+        buffered.subscribe(observer);
+
+        Mockito.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        Mockito.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        Mockito.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testSkipAndCountOverlappingBuffers() {
+        Observable<String> source = Observable.create(new Publisher<String>() {
+            @Override
+            public void subscribe(Subscriber<? super String> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                observer.onNext("one");
+                observer.onNext("two");
+                observer.onNext("three");
+                observer.onNext("four");
+                observer.onNext("five");
+            }
+        });
+
+        Observable<List<String>> buffered = source.buffer(3, 1);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two", "three"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("two", "three", "four"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("three", "four", "five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.never()).onComplete();
+    }
+
+    @Test
+    public void testSkipAndCountGaplessBuffers() {
+        Observable<String> source = Observable.just("one", "two", "three", "four", "five");
+
+        Observable<List<String>> buffered = source.buffer(3, 3);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two", "three"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("four", "five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testSkipAndCountBuffersWithGaps() {
+        Observable<String> source = Observable.just("one", "two", "three", "four", "five");
+
+        Observable<List<String>> buffered = source.buffer(2, 3);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("four", "five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testTimedAndCount() {
+        Observable<String> source = Observable.create(new Publisher<String>() {
+            @Override
+            public void subscribe(Subscriber<? super String> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                push(observer, "one", 10);
+                push(observer, "two", 90);
+                push(observer, "three", 110);
+                push(observer, "four", 190);
+                push(observer, "five", 210);
+                complete(observer, 250);
+            }
+        });
+
+        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, 2, scheduler);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        scheduler.advanceTimeTo(100, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two"));
+
+        scheduler.advanceTimeTo(200, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("three", "four"));
+
+        scheduler.advanceTimeTo(300, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testTimed() {
+        Observable<String> source = Observable.create(new Publisher<String>() {
+            @Override
+            public void subscribe(Subscriber<? super String> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                push(observer, "one", 97);
+                push(observer, "two", 98);
+                /**
+                 * Changed from 100. Because scheduling the cut to 100ms happens before this
+                 * Observable even runs due how lift works, pushing at 100ms would execute after the
+                 * buffer cut.
+                 */
+                push(observer, "three", 99);
+                push(observer, "four", 101);
+                push(observer, "five", 102);
+                complete(observer, 150);
+            }
+        });
+
+        Observable<List<String>> buffered = source.buffer(100, TimeUnit.MILLISECONDS, scheduler);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        scheduler.advanceTimeTo(101, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two", "three"));
+
+        scheduler.advanceTimeTo(201, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("four", "five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testObservableBasedOpenerAndCloser() {
+        Observable<String> source = Observable.create(new Publisher<String>() {
+            @Override
+            public void subscribe(Subscriber<? super String> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                push(observer, "one", 10);
+                push(observer, "two", 60);
+                push(observer, "three", 110);
+                push(observer, "four", 160);
+                push(observer, "five", 210);
+                complete(observer, 500);
+            }
+        });
+
+        Observable<Object> openings = Observable.create(new Publisher<Object>() {
+            @Override
+            public void subscribe(Subscriber<Object> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                push(observer, new Object(), 50);
+                push(observer, new Object(), 200);
+                complete(observer, 250);
+            }
+        });
+
+        Function<Object, Observable<Object>> closer = new Function<Object, Observable<Object>>() {
+            @Override
+            public Observable<Object> apply(Object opening) {
+                return Observable.create(new Publisher<Object>() {
+                    @Override
+                    public void subscribe(Subscriber<? super Object> observer) {
+                        observer.onSubscribe(EmptySubscription.INSTANCE);
+                        push(observer, new Object(), 100);
+                        complete(observer, 101);
+                    }
+                });
+            }
+        };
+
+        Observable<List<String>> buffered = source.buffer(openings, closer);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        scheduler.advanceTimeTo(500, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("two", "three"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    @Ignore("Until this buffer variant gets implemented")
+    public void testObservableBasedCloser() {
+        Observable<String> source = Observable.create(new Publisher<String>() {
+            @Override
+            public void subscribe(Subscriber<? super String> observer) {
+                observer.onSubscribe(EmptySubscription.INSTANCE);
+                push(observer, "one", 10);
+                push(observer, "two", 60);
+                push(observer, "three", 110);
+                push(observer, "four", 160);
+                push(observer, "five", 210);
+                complete(observer, 250);
+            }
+        });
+
+        Supplier<Observable<Object>> closer = new Supplier<Observable<Object>>() {
+            @Override
+            public Observable<Object> get() {
+                return Observable.create(new Publisher<Object>() {
+                    @Override
+                    public void subscribe(Subscriber<? super Object> observer) {
+                        observer.onSubscribe(EmptySubscription.INSTANCE);
+                        push(observer, new Object(), 100);
+                        push(observer, new Object(), 200);
+                        push(observer, new Object(), 300);
+                        complete(observer, 301);
+                    }
+                });
+            }
+        };
+
+        Observable<List<String>> buffered = source.buffer(closer);
+        buffered.subscribe(observer);
+
+        InOrder inOrder = Mockito.inOrder(observer);
+        scheduler.advanceTimeTo(500, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("one", "two"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("three", "four"));
+        inOrder.verify(observer, Mockito.times(1)).onNext(list("five"));
+        inOrder.verify(observer, Mockito.never()).onNext(Mockito.anyListOf(String.class));
+        inOrder.verify(observer, Mockito.never()).onError(Mockito.any(Throwable.class));
+        inOrder.verify(observer, Mockito.times(1)).onComplete();
+    }
+
+    @Test
+    public void testLongTimeAction() throws InterruptedException {
+        final CountDownLatch latch = new CountDownLatch(1);
+        LongTimeAction action = new LongTimeAction(latch);
+        Observable.just(1).buffer(10, TimeUnit.MILLISECONDS, 10)
+                .subscribe(action);
+        latch.await();
+        assertFalse(action.fail);
+    }
+
+    private static class LongTimeAction implements Consumer<List<Integer>> {
+
+        CountDownLatch latch;
+        boolean fail = false;
+
+        public LongTimeAction(CountDownLatch latch) {
+            this.latch = latch;
+        }
+
+        @Override
+        public void accept(List<Integer> t1) {
+            try {
+                if (fail) {
+                    return;
+                }
+                Thread.sleep(200);
+            } catch (InterruptedException e) {
+                fail = true;
+            } finally {
+                latch.countDown();
+            }
+        }
+    }
+
+    private List<String> list(String... args) {
+        List<String> list = new ArrayList<>();
+        for (String arg : args) {
+            list.add(arg);
+        }
+        return list;
+    }
+
+    private <T> void push(final Subscriber<T> observer, final T value, int delay) {
+        innerScheduler.schedule(() -> observer.onNext(value), delay, TimeUnit.MILLISECONDS);
+    }
+
+    private void complete(final Subscriber<?> observer, int delay) {
+        innerScheduler.schedule(observer::onComplete, delay, TimeUnit.MILLISECONDS);
+    }
+
+    @Test
+    public void testBufferStopsWhenUnsubscribed1() {
+        Observable<Integer> source = Observable.never();
+
+        Subscriber<List<Integer>> o = TestHelper.mockSubscriber();
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(o, (Long)null);
+
+        source.buffer(100, 200, TimeUnit.MILLISECONDS, scheduler)
+        .doOnNext(System.out::println)
+        .subscribe(ts);
+
+        InOrder inOrder = Mockito.inOrder(o);
+
+        scheduler.advanceTimeBy(1001, TimeUnit.MILLISECONDS);
+
+        inOrder.verify(o, times(5)).onNext(Arrays.<Integer> asList());
+
+        ts.dispose();
+
+        scheduler.advanceTimeBy(999, TimeUnit.MILLISECONDS);
+
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    @Test
+    public void bufferWithBONormal1() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = Mockito.inOrder(o);
+
+        source.buffer(boundary).subscribe(o);
+
+        source.onNext(1);
+        source.onNext(2);
+        source.onNext(3);
+
+        boundary.onNext(1);
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList(1, 2, 3));
+
+        source.onNext(4);
+        source.onNext(5);
+
+        boundary.onNext(2);
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList(4, 5));
+
+        source.onNext(6);
+        boundary.onComplete();
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList(6));
+
+        inOrder.verify(o).onComplete();
+
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void bufferWithBOEmptyLastViaBoundary() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = Mockito.inOrder(o);
+
+        source.buffer(boundary).subscribe(o);
+
+        boundary.onComplete();
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList());
+
+        inOrder.verify(o).onComplete();
+
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void bufferWithBOEmptyLastViaSource() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = Mockito.inOrder(o);
+
+        source.buffer(boundary).subscribe(o);
+
+        source.onComplete();
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList());
+
+        inOrder.verify(o).onComplete();
+
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void bufferWithBOEmptyLastViaBoth() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = Mockito.inOrder(o);
+
+        source.buffer(boundary).subscribe(o);
+
+        source.onComplete();
+        boundary.onComplete();
+
+        inOrder.verify(o, times(1)).onNext(Arrays.asList());
+
+        inOrder.verify(o).onComplete();
+
+        verify(o, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void bufferWithBOSourceThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+
+        source.buffer(boundary).subscribe(o);
+        source.onNext(1);
+        source.onError(new TestException());
+
+        verify(o).onError(any(TestException.class));
+        verify(o, never()).onComplete();
+        verify(o, never()).onNext(any());
+    }
+
+    @Test
+    public void bufferWithBOBoundaryThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> boundary = PublishSubject.create();
+
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+
+        source.buffer(boundary).subscribe(o);
+
+        source.onNext(1);
+        boundary.onError(new TestException());
+
+        verify(o).onError(any(TestException.class));
+        verify(o, never()).onComplete();
+        verify(o, never()).onNext(any());
+    }
+    @Test(timeout = 2000)
+    public void bufferWithSizeTake1() {
+        Observable<Integer> source = Observable.just(1).repeat();
+        
+        Observable<List<Integer>> result = source.buffer(2).take(1);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        verify(o).onNext(Arrays.asList(1, 1));
+        verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    
+    @Test(timeout = 2000)
+    public void bufferWithSizeSkipTake1() {
+        Observable<Integer> source = Observable.just(1).repeat();
+        
+        Observable<List<Integer>> result = source.buffer(2, 3).take(1);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        verify(o).onNext(Arrays.asList(1, 1));
+        verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    @Test(timeout = 2000)
+    public void bufferWithTimeTake1() {
+        Observable<Long> source = Observable.interval(40, 40, TimeUnit.MILLISECONDS, scheduler);
+        
+        Observable<List<Long>> result = source.buffer(100, TimeUnit.MILLISECONDS, scheduler).take(1);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        scheduler.advanceTimeBy(5, TimeUnit.SECONDS);
+        
+        verify(o).onNext(Arrays.asList(0L, 1L));
+        verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    @Test(timeout = 2000)
+    public void bufferWithTimeSkipTake2() {
+        Observable<Long> source = Observable.interval(40, 40, TimeUnit.MILLISECONDS, scheduler);
+        
+        Observable<List<Long>> result = source.buffer(100, 60, TimeUnit.MILLISECONDS, scheduler).take(2);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+        
+        result.subscribe(o);
+        
+        scheduler.advanceTimeBy(5, TimeUnit.SECONDS);
+        
+        inOrder.verify(o).onNext(Arrays.asList(0L, 1L));
+        inOrder.verify(o).onNext(Arrays.asList(1L, 2L));
+        inOrder.verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    @Test(timeout = 2000)
+    public void bufferWithBoundaryTake2() {
+        Observable<Long> boundary = Observable.interval(60, 60, TimeUnit.MILLISECONDS, scheduler);
+        Observable<Long> source = Observable.interval(40, 40, TimeUnit.MILLISECONDS, scheduler);
+        
+        Observable<List<Long>> result = source.buffer(boundary).take(2);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+        
+        result.subscribe(o);
+        
+        scheduler.advanceTimeBy(5, TimeUnit.SECONDS);
+        
+        inOrder.verify(o).onNext(Arrays.asList(0L));
+        inOrder.verify(o).onNext(Arrays.asList(1L));
+        inOrder.verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+        
+    }
+    
+    @Test(timeout = 2000)
+    public void bufferWithStartEndBoundaryTake2() {
+        Observable<Long> start = Observable.interval(61, 61, TimeUnit.MILLISECONDS, scheduler);
+        Function<Long, Observable<Long>> end = new Function<Long, Observable<Long>>() {
+            @Override
+            public Observable<Long> apply(Long t1) {
+                return Observable.interval(100, 100, TimeUnit.MILLISECONDS, scheduler);
+            }
+        };
+        
+        Observable<Long> source = Observable.interval(40, 40, TimeUnit.MILLISECONDS, scheduler);
+        
+        Observable<List<Long>> result = source.buffer(start, end).take(2);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+        
+        result
+        .doOnNext(System.out::println)
+        .subscribe(o);
+        
+        scheduler.advanceTimeBy(5, TimeUnit.SECONDS);
+        
+        inOrder.verify(o).onNext(Arrays.asList(1L, 2L, 3L));
+        inOrder.verify(o).onNext(Arrays.asList(3L, 4L));
+        inOrder.verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    @Test
+    public void bufferWithSizeThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        
+        Observable<List<Integer>> result = source.buffer(2);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        InOrder inOrder = inOrder(o);
+        
+        result.subscribe(o);
+        
+        source.onNext(1);
+        source.onNext(2);
+        source.onNext(3);
+        source.onError(new TestException());
+        
+        inOrder.verify(o).onNext(Arrays.asList(1, 2));
+        inOrder.verify(o).onError(any(TestException.class));
+        inOrder.verifyNoMoreInteractions();
+        verify(o, never()).onNext(Arrays.asList(3));
+        verify(o, never()).onComplete();
+                
+    }
+    
+    @Test
+    public void bufferWithTimeThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        
+        Observable<List<Integer>> result = source.buffer(100, TimeUnit.MILLISECONDS, scheduler);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+        
+        result.subscribe(o);
+        
+        source.onNext(1);
+        source.onNext(2);
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        source.onNext(3);
+        source.onError(new TestException());
+        scheduler.advanceTimeBy(100, TimeUnit.MILLISECONDS);
+        
+        inOrder.verify(o).onNext(Arrays.asList(1, 2));
+        inOrder.verify(o).onError(any(TestException.class));
+        inOrder.verifyNoMoreInteractions();
+        verify(o, never()).onNext(Arrays.asList(3));
+        verify(o, never()).onComplete();
+                
+    }
+    
+    @Test
+    public void bufferWithTimeAndSize() {
+        Observable<Long> source = Observable.interval(30, 30, TimeUnit.MILLISECONDS, scheduler);
+        
+        Observable<List<Long>> result = source.buffer(100, TimeUnit.MILLISECONDS, 2, scheduler).take(3);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        InOrder inOrder = inOrder(o);
+        
+        result.subscribe(o);
+        
+        scheduler.advanceTimeBy(5, TimeUnit.SECONDS);
+        
+        inOrder.verify(o).onNext(Arrays.asList(0L, 1L));
+        inOrder.verify(o).onNext(Arrays.asList(2L));
+        inOrder.verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+    }
+    @Test
+    public void bufferWithStartEndStartThrows() {
+        PublishSubject<Integer> start = PublishSubject.create();
+        
+        Function<Integer, Observable<Integer>> end = new Function<Integer, Observable<Integer>>() {
+            @Override
+            public Observable<Integer> apply(Integer t1) {
+                return Observable.never();
+            }
+        };
+
+        PublishSubject<Integer> source = PublishSubject.create();
+
+        Observable<List<Integer>> result = source.buffer(start, end);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        start.onNext(1);
+        source.onNext(1);
+        source.onNext(2);
+        start.onError(new TestException());
+        
+        verify(o, never()).onNext(any());
+        verify(o, never()).onComplete();
+        verify(o).onError(any(TestException.class));
+    }
+    @Test
+    public void bufferWithStartEndEndFunctionThrows() {
+        PublishSubject<Integer> start = PublishSubject.create();
+        
+        Function<Integer, Observable<Integer>> end = new Function<Integer, Observable<Integer>>() {
+            @Override
+            public Observable<Integer> apply(Integer t1) {
+                throw new TestException();
+            }
+        };
+
+        PublishSubject<Integer> source = PublishSubject.create();
+
+        Observable<List<Integer>> result = source.buffer(start, end);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        start.onNext(1);
+        source.onNext(1);
+        source.onNext(2);
+        
+        verify(o, never()).onNext(any());
+        verify(o, never()).onComplete();
+        verify(o).onError(any(TestException.class));
+    }
+    @Test
+    public void bufferWithStartEndEndThrows() {
+        PublishSubject<Integer> start = PublishSubject.create();
+        
+        Function<Integer, Observable<Integer>> end = new Function<Integer, Observable<Integer>>() {
+            @Override
+            public Observable<Integer> apply(Integer t1) {
+                return Observable.error(new TestException());
+            }
+        };
+
+        PublishSubject<Integer> source = PublishSubject.create();
+
+        Observable<List<Integer>> result = source.buffer(start, end);
+        
+        Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        result.subscribe(o);
+        
+        start.onNext(1);
+        source.onNext(1);
+        source.onNext(2);
+        
+        verify(o, never()).onNext(any());
+        verify(o, never()).onComplete();
+        verify(o).onError(any(TestException.class));
+    }
+
+    @Test
+    public void testProducerRequestThroughBufferWithSize1() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(3L);
+        
+        final AtomicLong requested = new AtomicLong();
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+
+                    @Override
+                    public void cancel() {
+                        
+                    }
+                    
+                });
+            }
+
+        }).buffer(5, 5).subscribe(ts);
+        assertEquals(15, requested.get());
+
+        ts.request(4);
+        assertEquals(20, requested.get());
+    }
+
+    @Test
+    public void testProducerRequestThroughBufferWithSize2() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>();
+        final AtomicLong requested = new AtomicLong();
+        
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+                    
+                    @Override
+                    public void cancel() {
+                        
+                    }
+
+                });
+            }
+
+        }).buffer(5, 5).subscribe(ts);
+        assertEquals(Long.MAX_VALUE, requested.get());
+    }
+
+    @Test
+    public void testProducerRequestThroughBufferWithSize3() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(3L);
+        final AtomicLong requested = new AtomicLong();
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+
+                    @Override
+                    public void cancel() {
+                        
+                    }
+                    
+                });
+            }
+
+        }).buffer(5, 2).subscribe(ts);
+        assertEquals(9, requested.get());
+        ts.request(3);
+        assertEquals(6, requested.get());
+    }
+
+    @Test
+    public void testProducerRequestThroughBufferWithSize4() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>();
+        final AtomicLong requested = new AtomicLong();
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+
+                    @Override
+                    public void cancel() {
+                        
+                    }
+                    
+                });
+            }
+
+        }).buffer(5, 2).subscribe(ts);
+        assertEquals(Long.MAX_VALUE, requested.get());
+    }
+
+
+    @Test
+    public void testProducerRequestOverflowThroughBufferWithSize1() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(Long.MAX_VALUE >> 1);
+
+        final AtomicLong requested = new AtomicLong();
+        
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+
+                    @Override
+                    public void cancel() {
+                        
+                    }
+                    
+                });
+            }
+
+        }).buffer(3, 3).subscribe(ts);
+        assertEquals(Long.MAX_VALUE, requested.get());
+    }
+
+    @Test
+    public void testProducerRequestOverflowThroughBufferWithSize2() {
+        TestSubscriber<List<Integer>> ts = new TestSubscriber<>(Long.MAX_VALUE >> 1);
+
+        final AtomicLong requested = new AtomicLong();
+        
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                    }
+                    
+                    @Override
+                    public void cancel() {
+                        
+                    }
+
+                });
+            }
+
+        }).buffer(3, 2).subscribe(ts);
+        assertEquals(Long.MAX_VALUE, requested.get());
+    }
+
+    @Test
+    public void testProducerRequestOverflowThroughBufferWithSize3() {
+        final AtomicLong requested = new AtomicLong();
+        Observable.create(new Publisher<Integer>() {
+
+            @Override
+            public void subscribe(final Subscriber<? super Integer> s) {
+                s.onSubscribe(new Subscription() {
+                    AtomicBoolean once = new AtomicBoolean();
+                    @Override
+                    public void request(long n) {
+                        requested.set(n);
+                        if (once.compareAndSet(false, true)) {
+                            s.onNext(1);
+                            s.onNext(2);
+                            s.onNext(3);
+                        }
+                    }
+                    
+                    @Override
+                    public void cancel() {
+                        
+                    }
+
+                });
+            }
+
+        }).buffer(3, 2).subscribe(new Observer<List<Integer>>() {
+
+            @Override
+            public void onStart() {
+                request(Long.MAX_VALUE / 2 - 4);
+            }
+
+            @Override
+            public void onComplete() {
+            }
+
+            @Override
+            public void onError(Throwable e) {
+            }
+
+            @Override
+            public void onNext(List<Integer> t) {
+                request(Long.MAX_VALUE / 2);
+            }
+
+        });
+        // FIXME I'm not sure why this is MAX_VALUE in 1.x because MAX_VALUE/2 is even and thus can't overflow when multiplied by 2
+        assertEquals(Long.MAX_VALUE - 1, requested.get());
+    }
+    @Test(timeout = 3000)
+    public void testBufferWithTimeDoesntUnsubscribeDownstream() throws InterruptedException {
+        final Subscriber<Object> o = TestHelper.mockSubscriber();
+        
+        final CountDownLatch cdl = new CountDownLatch(1);
+        AsyncObserver<Object> s = new AsyncObserver<Object>() {
+            @Override
+            public void onNext(Object t) {
+                o.onNext(t);
+            }
+            @Override
+            public void onError(Throwable e) {
+                o.onError(e);
+                cdl.countDown();
+            }
+            @Override
+            public void onComplete() {
+                o.onComplete();
+                cdl.countDown();
+            }
+        };
+        
+        Observable.range(1, 1).delay(1, TimeUnit.SECONDS).buffer(2, TimeUnit.SECONDS).unsafeSubscribe(s);
+        
+        cdl.await();
+        
+        verify(o).onNext(Arrays.asList(1));
+        verify(o).onComplete();
+        verify(o, never()).onError(any(Throwable.class));
+        
+        assertFalse(s.isDisposed());
+    }
+}
\ No newline at end of file
