diff --git a/src/main/java/rx/observers/SafeSubscriber.java b/src/main/java/rx/observers/SafeSubscriber.java
index 75dab2f020..717946c032 100644
--- a/src/main/java/rx/observers/SafeSubscriber.java
+++ b/src/main/java/rx/observers/SafeSubscriber.java
@@ -19,7 +19,7 @@
 
 import rx.Subscriber;
 import rx.exceptions.*;
-import rx.plugins.RxJavaHooks;
+import rx.plugins.*;
 
 /**
  * {@code SafeSubscriber} is a wrapper around {@code Subscriber} that ensures that the {@code Subscriber}
@@ -146,8 +146,9 @@ public void onNext(T args) {
      *
      * @see <a href="https://github.com/ReactiveX/RxJava/issues/630">the report of this bug</a>
      */
+    @SuppressWarnings("deprecation")
     protected void _onError(Throwable e) { // NOPMD
-        RxJavaHooks.onError(e);
+        RxJavaPlugins.getInstance().getErrorHandler().handleError(e);
         try {
             actual.onError(e);
         } catch (OnErrorNotImplementedException e2) { // NOPMD
diff --git a/src/test/java/rx/plugins/RxJavaHooksTest.java b/src/test/java/rx/plugins/RxJavaHooksTest.java
index b9fc370d69..a3b78678ef 100644
--- a/src/test/java/rx/plugins/RxJavaHooksTest.java
+++ b/src/test/java/rx/plugins/RxJavaHooksTest.java
@@ -1084,4 +1084,25 @@ public Object call(Object t) {
         }
     }
 
+    @Test
+    public void noCallToHooksOnPlainError() {
+
+        final boolean[] called = { false };
+        
+        RxJavaHooks.setOnError(new Action1<Throwable>() {
+            @Override
+            public void call(Throwable t) {
+                called[0] = true;
+            }
+        });
+        
+        try {
+            Observable.error(new TestException())
+            .subscribe(new TestSubscriber<Object>());
+            
+            assertFalse(called[0]);
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
 }
