diff --git a/src/main/java/io/reactivex/processors/UnicastProcessor.java b/src/main/java/io/reactivex/processors/UnicastProcessor.java
index d50c8bb080..020bfb5301 100644
--- a/src/main/java/io/reactivex/processors/UnicastProcessor.java
+++ b/src/main/java/io/reactivex/processors/UnicastProcessor.java
@@ -88,7 +88,7 @@
      *
      * @param <T> the value type
      * @param capacityHint the hint to size the internal unbounded buffer
-     * @param onCancelled the optional callback
+     * @param onCancelled the non null callback
      * @return an UnicastProcessor instance
      */
     public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) {
@@ -113,7 +113,7 @@
      * Creates an UnicastProcessor with the given capacity hint and callback
      * for when the Processor is terminated normally or its single Subscriber cancels.
      * @param capacityHint the capacity hint for the internal, unbounded queue
-     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null allowed
+     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed
      * @since 2.0
      */
     UnicastProcessor(int capacityHint, Runnable onTerminate) {
@@ -274,6 +274,11 @@ public void onNext(T t) {
             return;
         }
 
+        if (t == null) {
+            onError(new NullPointerException("onNext called with null. Null values are generally not allowed in 2.x operators and sources."));
+            return;
+        }
+
         if (!queue.offer(t)) {
             onError(new IllegalStateException("The queue is full"));
             return;
@@ -288,6 +293,10 @@ public void onError(Throwable t) {
             return;
         }
 
+        if (t == null) {
+            t = new NullPointerException("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+        }
+
         error = t;
         done = true;
 
diff --git a/src/main/java/io/reactivex/subjects/UnicastSubject.java b/src/main/java/io/reactivex/subjects/UnicastSubject.java
index 070c4f301a..d773987191 100644
--- a/src/main/java/io/reactivex/subjects/UnicastSubject.java
+++ b/src/main/java/io/reactivex/subjects/UnicastSubject.java
@@ -103,7 +103,7 @@
      *
      * @param <T> the value type
      * @param capacityHint the hint to size the internal unbounded buffer
-     * @param onCancelled the optional callback
+     * @param onCancelled the non null callback
      * @return an UnicastSubject instance
      */
     public static <T> UnicastSubject<T> create(int capacityHint, Runnable onCancelled) {
@@ -127,7 +127,7 @@
      * Creates an UnicastProcessor with the given capacity hint and callback
      * for when the Processor is terminated normally or its single Subscriber cancels.
      * @param capacityHint the capacity hint for the internal, unbounded queue
-     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null allowed
+     * @param onTerminate the callback to run when the Processor is terminated or cancelled, null not allowed
      * @since 2.0
      */
     UnicastSubject(int capacityHint, Runnable onTerminate) {
diff --git a/src/test/java/io/reactivex/processors/UnicastProcessorTest.java b/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
index ecea60f286..9797698537 100644
--- a/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
+++ b/src/test/java/io/reactivex/processors/UnicastProcessorTest.java
@@ -14,9 +14,15 @@
 package io.reactivex.processors;
 
 import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import io.reactivex.internal.fuseable.QueueSubscription;
 import io.reactivex.subscribers.*;
+import io.reactivex.observers.*;
+import io.reactivex.*;
+import io.reactivex.disposables.*;
 
 public class UnicastProcessorTest {
 
@@ -57,4 +63,91 @@ public void fusionOfflie() {
         .assertOf(SubscriberFusion.<Integer>assertFuseable())
         .assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueSubscription.ASYNC))
         .assertResult(1);
-    }}
+    }
+
+    @Test
+    public void onTerminateCalledWhenOnError() {
+        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();
+
+        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {
+            @Override public void run() {
+                didRunOnTerminate.set(true);
+            }
+        });
+
+        assertEquals(false, didRunOnTerminate.get());
+        us.onError(new RuntimeException("some error"));
+        assertEquals(true, didRunOnTerminate.get());
+    }
+
+    @Test
+    public void onTerminateCalledWhenOnComplete() {
+        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();
+
+        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {
+            @Override public void run() {
+                didRunOnTerminate.set(true);
+            }
+        });
+
+        assertEquals(false, didRunOnTerminate.get());
+        us.onComplete();
+        assertEquals(true, didRunOnTerminate.get());
+    }
+
+    @Test
+    public void onTerminateCalledWhenCanceled() {
+        final AtomicBoolean didRunOnTerminate = new AtomicBoolean();
+
+        UnicastProcessor<Integer> us = UnicastProcessor.create(Observable.bufferSize(), new Runnable() {
+            @Override public void run() {
+                didRunOnTerminate.set(true);
+            }
+        });
+
+        final Disposable subscribe = us.subscribe();
+
+        assertEquals(false, didRunOnTerminate.get());
+        subscribe.dispose();
+        assertEquals(true, didRunOnTerminate.get());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void nullOnTerminate() {
+        UnicastProcessor.create(5, null);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void negativeCapacityHint() {
+        UnicastProcessor.create(-1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void zeroCapacityHint() {
+        UnicastProcessor.create(0);
+    }
+
+    @Test
+    public void onNextNull() {
+        final UnicastProcessor<Object> up = UnicastProcessor.create();
+
+        up.onNext(null);
+
+        up.test()
+            .assertNoValues()
+            .assertError(NullPointerException.class)
+            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+    }
+
+    @Test
+    public void onErrorNull() {
+        final UnicastProcessor<Object> up = UnicastProcessor.create();
+
+        up.onError(null);
+
+        up.test()
+            .assertNoValues()
+            .assertError(NullPointerException.class)
+            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+    }
+}
diff --git a/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java b/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
index 14476e80f2..c8349dd81b 100644
--- a/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
+++ b/src/test/java/io/reactivex/subjects/UnicastSubjectTest.java
@@ -21,6 +21,7 @@
 
 import io.reactivex.internal.fuseable.QueueDisposable;
 import io.reactivex.observers.*;
+import io.reactivex.*;
 
 public class UnicastSubjectTest {
 
@@ -109,4 +110,43 @@ public void onTerminateCalledWhenCanceled() {
         subscribe.dispose();
         assertEquals(true, didRunOnTerminate.get());
     }
+
+    @Test(expected = NullPointerException.class)
+    public void nullOnTerminate() {
+        UnicastSubject.create(5, null);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void negativeCapacityHint() {
+        UnicastSubject.create(-1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void zeroCapacityHint() {
+        UnicastSubject.create(0);
+    }
+
+    @Test
+    public void onNextNull() {
+        final UnicastSubject<Object> up = UnicastSubject.create();
+
+        up.onNext(null);
+
+        up.test()
+            .assertNoValues()
+            .assertError(NullPointerException.class)
+            .assertErrorMessage("onNext called with null. Null values are generally not allowed in 2.x operators and sources.");
+    }
+
+    @Test
+    public void onErrorNull() {
+        final UnicastSubject<Object> up = UnicastSubject.create();
+
+        up.onError(null);
+
+        up.test()
+            .assertNoValues()
+            .assertError(NullPointerException.class)
+            .assertErrorMessage("onError called with null. Null values are generally not allowed in 2.x operators and sources.");
+    }
 }
