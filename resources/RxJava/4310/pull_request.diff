diff --git a/src/main/java/io/reactivex/internal/operators/flowable/FlowableRedo.java b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRedo.java
index 01c9679286..f904fb5e34 100644
--- a/src/main/java/io/reactivex/internal/operators/flowable/FlowableRedo.java
+++ b/src/main/java/io/reactivex/internal/operators/flowable/FlowableRedo.java
@@ -22,7 +22,7 @@
 import io.reactivex.functions.*;
 import io.reactivex.internal.subscribers.flowable.ToNotificationSubscriber;
 import io.reactivex.internal.subscriptions.SubscriptionArbiter;
-import io.reactivex.processors.BehaviorProcessor;
+import io.reactivex.processors.*;
 
 // FIXME split and update to the Rsc version
 public final class FlowableRedo<T> extends Flowable<T> {
@@ -39,7 +39,7 @@ public FlowableRedo(Publisher<? extends T> source,
     public void subscribeActual(Subscriber<? super T> s) {
         
         // FIXE use BehaviorSubject? (once available)
-        BehaviorProcessor<Try<Optional<Object>>> subject = BehaviorProcessor.create();
+        FlowProcessor<Try<Optional<Object>>> subject = BehaviorProcessor.<Try<Optional<Object>>>create().toSerialized();
         
         final RedoSubscriber<T> parent = new RedoSubscriber<T>(s, subject, source);
 
@@ -70,13 +70,13 @@ public void accept(Try<Optional<Object>> v) {
         /** */
         private static final long serialVersionUID = -1151903143112844287L;
         final Subscriber<? super T> actual;
-        final BehaviorProcessor<Try<Optional<Object>>> subject;
+        final FlowProcessor<Try<Optional<Object>>> subject;
         final Publisher<? extends T> source;
         final SubscriptionArbiter arbiter;
         
         final AtomicInteger wip = new AtomicInteger();
         
-        public RedoSubscriber(Subscriber<? super T> actual, BehaviorProcessor<Try<Optional<Object>>> subject, Publisher<? extends T> source) {
+        public RedoSubscriber(Subscriber<? super T> actual, FlowProcessor<Try<Optional<Object>>> subject, Publisher<? extends T> source) {
             this.actual = actual;
             this.subject = subject;
             this.source = source;
diff --git a/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java
index 141b6d4763..8362412b64 100644
--- a/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java
+++ b/src/main/java/io/reactivex/internal/subscriptions/SubscriptionArbiter.java
@@ -96,15 +96,14 @@ public final void setSubscription(Subscription s) {
             actual = s;
             
             long r = requested;
-            if (r != 0L) {
-                s.request(r);
-            }
             
-            if (decrementAndGet() == 0) {
-                return;
+            if (decrementAndGet() != 0) {
+                drainLoop();
             }
 
-            drainLoop();
+            if (r != 0L) {
+                s.request(r);
+            }
 
             return;
         }
@@ -133,15 +132,14 @@ public final void request(long n) {
                     }
                 }
                 Subscription a = actual;
-                if (a != null) {
-                    a.request(n);
-                }
 
-                if (decrementAndGet() == 0) {
-                    return;
+                if (decrementAndGet() != 0) {
+                    drainLoop();
                 }
 
-                drainLoop();
+                if (a != null) {
+                    a.request(n);
+                }
 
                 return;
             }
@@ -235,6 +233,9 @@ final void drain() {
     final void drainLoop() {
         int missed = 1;
 
+        long requestAmount = 0L;
+        Subscription requestTarget = null;
+        
         for (; ; ) {
 
             Subscription ms = missedSubscription.get();
@@ -287,15 +288,20 @@ final void drainLoop() {
                     }
                     actual = ms;
                     if (r != 0L) {
-                        ms.request(r);
+                        requestAmount = BackpressureHelper.addCap(requestAmount, r);
+                        requestTarget = ms;
                     }
-                } else if (mr != 0L && a != null) {
-                    a.request(mr);
+                } else if (a != null && mr != 0L) {
+                    requestAmount = BackpressureHelper.addCap(requestAmount, mr);
+                    requestTarget = a;
                 }
             }
 
             missed = addAndGet(-missed);
             if (missed == 0) {
+                if (requestAmount != 0L) {
+                    requestTarget.request(requestAmount);
+                }
                 return;
             }
         }
diff --git a/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java
index 028bea1327..b27a718225 100644
--- a/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java
+++ b/src/test/java/io/reactivex/internal/operators/flowable/FlowableConcatTest.java
@@ -1007,4 +1007,35 @@ public void startWith() throws Exception {
             ts.assertComplete();
         }
     }
+    
+    static final class InfiniteIterator implements Iterator<Integer>, Iterable<Integer> {
+
+        int count;
+        
+        @Override
+        public boolean hasNext() {
+            return true;
+        }
+
+        @Override
+        public Integer next() {
+            return count++;
+        }
+        
+        @Override
+        public void remove() {
+        }
+        
+        @Override
+        public Iterator<Integer> iterator() {
+            return this;
+        }
+    }
+    
+    @Test(timeout = 5000)
+    public void veryLongTake() {
+        Flowable.fromIterable(new InfiniteIterator()).concatWith(Flowable.<Integer>empty()).take(10)
+        .test()
+        .assertResult(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
+    }
 }
\ No newline at end of file
