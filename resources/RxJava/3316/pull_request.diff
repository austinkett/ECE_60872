diff --git a/src/main/java/io/reactivex/Observable.java b/src/main/java/io/reactivex/Observable.java
index b09d389c6c..cd02f23e64 100644
--- a/src/main/java/io/reactivex/Observable.java
+++ b/src/main/java/io/reactivex/Observable.java
@@ -1467,6 +1467,7 @@ public final Disposable forEachWhile(Predicate<? super T> onNext, Consumer<? sup
     }
 
     public final Observable<T> onBackpressureBuffer(int bufferSize, boolean delayError, boolean unbounded) {
+        validateBufferSize(bufferSize);
         return lift(new OperatorOnBackpressureBuffer<>(bufferSize, unbounded, delayError, () -> { }));
     }
 
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java
index de545749c5..1822840dba 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureBuffer.java
@@ -19,6 +19,7 @@
 import org.reactivestreams.*;
 
 import io.reactivex.Observable.Operator;
+import io.reactivex.exceptions.MissingBackpressureException;
 import io.reactivex.internal.queue.*;
 import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.internal.util.*;
@@ -96,13 +97,14 @@ public void onSubscribe(Subscription s) {
         public void onNext(T t) {
             if (!queue.offer(t)) {
                 s.cancel();
-                IllegalStateException ex = new IllegalStateException("Buffer is full?!");
+                MissingBackpressureException ex = new MissingBackpressureException("Buffer is full");
                 try {
                     onOverflow.run();
                 } catch (Throwable e) {
                     ex.addSuppressed(e);
                 }
                 onError(ex);
+                return;
             }
             drain();
         }
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java
index 15697234cd..190b287f7b 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureDrop.java
@@ -19,8 +19,8 @@
 import org.reactivestreams.*;
 
 import io.reactivex.Observable.Operator;
+import io.reactivex.internal.subscriptions.SubscriptionHelper;
 import io.reactivex.internal.util.BackpressureHelper;
-import io.reactivex.plugins.RxJavaPlugins;
 
 public final class OperatorOnBackpressureDrop<T> implements Operator<T, T> {
     
@@ -61,9 +61,7 @@ public BackpressureDropSubscriber(Subscriber<? super T> actual, Consumer<? super
         
         @Override
         public void onSubscribe(Subscription s) {
-            if (this.s != null) {
-                s.cancel();
-                RxJavaPlugins.onError(new IllegalStateException("Subscription already set!"));
+            if (SubscriptionHelper.validateSubscription(this.s, s)) {
                 return;
             }
             this.s = s;
@@ -113,8 +111,7 @@ public void onComplete() {
         
         @Override
         public void request(long n) {
-            if (n <= 0) {
-                RxJavaPlugins.onError(new IllegalArgumentException("n > required but it was " + n));
+            if (SubscriptionHelper.validateRequest(n)) {
                 return;
             }
             BackpressureHelper.add(this, n);
diff --git a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java
index 7da0772f67..54eadc1193 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorOnBackpressureLatest.java
@@ -128,7 +128,7 @@ void drain() {
                 
                 long r = requested;
                 
-                if (r != 0L) {
+                while (r != 0L) {
                     boolean d = done;
                     Object v = CURRENT.getAndSet(this, null);
                     boolean empty = v == null;
@@ -137,12 +137,14 @@ void drain() {
                         return;
                     }
                     
-                    if (!empty) {
-                        a.onNext(v);
-                        
-                        if (r != Long.MAX_VALUE) {
-                            REQUESTED.decrementAndGet(this);
-                        }
+                    if (empty) {
+                        break;
+                    }
+                    
+                    a.onNext(v);
+                    
+                    if (r != Long.MAX_VALUE) {
+                        REQUESTED.decrementAndGet(this);
                     }
                 }
                 
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureBufferTest.java b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureBufferTest.java
new file mode 100644
index 0000000000..ef8fa11cc8
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureBufferTest.java
@@ -0,0 +1,162 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.*;
+
+import org.junit.Test;
+import org.reactivestreams.*;
+
+import io.reactivex.*;
+import io.reactivex.exceptions.MissingBackpressureException;
+import io.reactivex.internal.subscriptions.BooleanSubscription;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OperatorOnBackpressureBufferTest {
+
+    @Test
+    public void testNoBackpressureSupport() {
+        TestSubscriber<Long> ts = new TestSubscriber<>((Long)null);
+        // this will be ignored
+        ts.request(100);
+        // we take 500 so it unsubscribes
+        infinite.take(500).subscribe(ts);
+        // it completely ignores the `request(100)` and we get 500
+        assertEquals(500, ts.values().size());
+        ts.assertNoErrors();
+    }
+
+    @Test(timeout = 2000)
+    public void testFixBackpressureWithBuffer() throws InterruptedException {
+        final CountDownLatch l1 = new CountDownLatch(100);
+        final CountDownLatch l2 = new CountDownLatch(150);
+        TestSubscriber<Long> ts = new TestSubscriber<>(new Observer<Long>() {
+
+            @Override
+            protected void onStart() {
+            }
+            
+            @Override
+            public void onComplete() {
+            }
+
+            @Override
+            public void onError(Throwable e) {
+            }
+
+            @Override
+            public void onNext(Long t) {
+                l1.countDown();
+                l2.countDown();
+            }
+
+        }, null);
+        // this will be ignored
+        ts.request(100);
+        // we take 500 so it unsubscribes
+        infinite.subscribeOn(Schedulers.computation())
+        .onBackpressureBuffer()
+        .take(500)
+        .subscribe(ts);
+        
+        // it completely ignores the `request(100)` and we get 500
+        l1.await();
+        assertEquals(100, ts.values().size());
+        ts.request(50);
+        l2.await();
+        assertEquals(150, ts.values().size());
+        ts.request(350);
+        ts.awaitTerminalEvent();
+        assertEquals(500, ts.values().size());
+        ts.assertNoErrors();
+        assertEquals(0, ts.values().get(0).intValue());
+        assertEquals(499, ts.values().get(499).intValue());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testFixBackpressureBufferNegativeCapacity() throws InterruptedException {
+        Observable.empty().onBackpressureBuffer(-1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testFixBackpressureBufferZeroCapacity() throws InterruptedException {
+        Observable.empty().onBackpressureBuffer(0);
+    }
+
+    @Test
+    public void testFixBackpressureBoundedBuffer() throws InterruptedException {
+        final CountDownLatch l1 = new CountDownLatch(100);
+        final CountDownLatch backpressureCallback = new CountDownLatch(1);
+        TestSubscriber<Long> ts = new TestSubscriber<>(new Observer<Long>() {
+
+            @Override
+            protected void onStart() {
+            }
+            
+            @Override
+            public void onComplete() { }
+
+            @Override
+            public void onError(Throwable e) { }
+
+            @Override
+            public void onNext(Long t) {
+                l1.countDown();
+            }
+
+        }, null);
+
+        ts.request(100);
+        infinite.subscribeOn(Schedulers.computation())
+             .onBackpressureBuffer(500, new Runnable() {
+                 @Override
+                 public void run() {
+                     backpressureCallback.countDown();
+                 }
+             })
+             /*.take(1000)*/
+             .subscribe(ts);
+        l1.await();
+
+        ts.request(50);
+
+        assertTrue(backpressureCallback.await(500, TimeUnit.MILLISECONDS));
+        ts.awaitTerminalEvent(1, TimeUnit.SECONDS);
+        ts.assertError(MissingBackpressureException.class);
+
+        int size = ts.values().size();
+        assertTrue(size <= 150);  // will get up to 50 more
+        assertTrue(ts.values().get(size-1) == size-1);
+        // FIXME no longer assertable
+//        assertTrue(s.isUnsubscribed());
+    }
+
+    static final Observable<Long> infinite = Observable.create(new Publisher<Long>() {
+
+        @Override
+        public void subscribe(Subscriber<? super Long> s) {
+            BooleanSubscription bs = new BooleanSubscription();
+            s.onSubscribe(bs);
+            long i = 0;
+            while (!bs.isCancelled()) {
+                s.onNext(i++);
+            }
+        }
+
+    });
+
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureDropTest.java b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureDropTest.java
new file mode 100644
index 0000000000..533c214507
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureDropTest.java
@@ -0,0 +1,154 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.assertEquals;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.junit.Test;
+import org.reactivestreams.*;
+
+import io.reactivex.*;
+import io.reactivex.internal.subscriptions.BooleanSubscription;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OperatorOnBackpressureDropTest {
+
+    @Test
+    public void testNoBackpressureSupport() {
+        TestSubscriber<Long> ts = new TestSubscriber<>((Long)null);
+        // this will be ignored
+        ts.request(100);
+        // we take 500 so it unsubscribes
+        infinite.take(500).subscribe(ts);
+        // it completely ignores the `request(100)` and we get 500
+        assertEquals(500, ts.values().size());
+        ts.assertNoErrors();
+    }
+
+    @Test(timeout = 500)
+    public void testWithObserveOn() throws InterruptedException {
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        Observable.range(0, Observable.bufferSize() * 10).onBackpressureDrop().observeOn(Schedulers.io()).subscribe(ts);
+        ts.awaitTerminalEvent();
+    }
+
+    @Test(timeout = 500)
+    public void testFixBackpressureWithBuffer() throws InterruptedException {
+        final CountDownLatch l1 = new CountDownLatch(100);
+        final CountDownLatch l2 = new CountDownLatch(150);
+        TestSubscriber<Long> ts = new TestSubscriber<>(new Observer<Long>() {
+
+            @Override
+            protected void onStart() {
+            }
+            
+            @Override
+            public void onComplete() {
+            }
+
+            @Override
+            public void onError(Throwable e) {
+            }
+
+            @Override
+            public void onNext(Long t) {
+                l1.countDown();
+                l2.countDown();
+            }
+
+        }, null);
+        // this will be ignored
+        ts.request(100);
+        // we take 500 so it unsubscribes
+        infinite.subscribeOn(Schedulers.computation()).onBackpressureDrop().take(500).subscribe(ts);
+        // it completely ignores the `request(100)` and we get 500
+        l1.await();
+        assertEquals(100, ts.values().size());
+        ts.request(50);
+        l2.await();
+        assertEquals(150, ts.values().size());
+        ts.request(350);
+        ts.awaitTerminalEvent();
+        assertEquals(500, ts.values().size());
+        ts.assertNoErrors();
+        assertEquals(0, ts.values().get(0).intValue());
+    }
+    
+    @Test
+    public void testRequestOverflow() throws InterruptedException {
+        final AtomicInteger count = new AtomicInteger();
+        int n = 10;
+        range(n).onBackpressureDrop().subscribe(new Observer<Long>() {
+
+            @Override
+            public void onStart() {
+                request(10);
+            }
+            
+            @Override
+            public void onComplete() {
+            }
+
+            @Override
+            public void onError(Throwable e) {
+                throw new RuntimeException(e);
+            }
+
+            @Override
+            public void onNext(Long t) {
+                count.incrementAndGet();
+                //cause overflow of requested if not handled properly in onBackpressureDrop operator
+                request(Long.MAX_VALUE-1);
+            }});
+        assertEquals(n, count.get());
+    }
+
+    static final Observable<Long> infinite = Observable.create(new Publisher<Long>() {
+
+        @Override
+        public void subscribe(Subscriber<? super Long> s) {
+            BooleanSubscription bs = new BooleanSubscription();
+            s.onSubscribe(bs);
+            long i = 0;
+            while (!bs.isCancelled()) {
+                s.onNext(i++);
+            }
+        }
+
+    });
+    
+    private static final Observable<Long> range(final long n) {
+        return Observable.create(new Publisher<Long>() {
+
+            @Override
+            public void subscribe(Subscriber<? super Long> s) {
+                BooleanSubscription bs = new BooleanSubscription();
+                s.onSubscribe(bs);
+                for (long i=0;i < n; i++) {
+                    if (bs.isCancelled()) {
+                        break;
+                    }
+                    s.onNext(i);
+                }
+                s.onComplete();
+            }
+    
+        });
+    }
+    
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureLatestTest.java b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureLatestTest.java
new file mode 100644
index 0000000000..52ba3d334d
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorOnBackpressureLatestTest.java
@@ -0,0 +1,131 @@
+/**
+ * Copyright 2015 Netflix, Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
+ * the License for the specific language governing permissions and limitations under the License.
+ */
+
+package io.reactivex.internal.operators;
+
+import java.util.Random;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.*;
+
+import io.reactivex.Observable;
+import io.reactivex.exceptions.TestException;
+import io.reactivex.schedulers.Schedulers;
+import io.reactivex.subjects.PublishSubject;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OperatorOnBackpressureLatestTest {
+    @Test
+    public void testSimple() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        Observable.range(1, 5).onBackpressureLatest().subscribe(ts);
+        
+        ts.assertNoErrors();
+        ts.assertTerminated();
+        ts.assertValues(1, 2, 3, 4, 5);
+    }
+    @Test
+    public void testSimpleError() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        Observable.range(1, 5).concatWith(Observable.<Integer>error(new TestException()))
+        .onBackpressureLatest().subscribe(ts);
+        
+        ts.assertTerminated();
+        ts.assertError(TestException.class);
+        ts.assertValues(1, 2, 3, 4, 5);
+    }
+    @Test
+    public void testSimpleBackpressure() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>(2L);
+        
+        Observable.range(1, 5).onBackpressureLatest().subscribe(ts);
+        
+        ts.assertNoErrors();
+        ts.assertValues(1, 2);
+        ts.assertNotComplete();
+    }
+    
+    @Test
+    public void testSynchronousDrop() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        TestSubscriber<Integer> ts = new TestSubscriber<>((Long)null);
+        
+        source.onBackpressureLatest().subscribe(ts);
+
+        ts.assertNoValues();
+
+        source.onNext(1);
+        ts.request(2);
+        
+        ts.assertValue(1);
+        
+        source.onNext(2);
+
+        ts.assertValues(1, 2);
+
+        source.onNext(3);
+        source.onNext(4);
+        source.onNext(5);
+        source.onNext(6);
+
+        ts.request(2);
+
+        ts.assertValues(1, 2, 6);
+        
+        source.onNext(7);
+
+        ts.assertValues(1, 2, 6, 7);
+        
+        source.onNext(8);
+        source.onNext(9);
+        source.onComplete();
+        
+        ts.request(1);
+        
+        ts.assertValues(1, 2, 6, 7, 9);
+        ts.assertNoErrors();
+        ts.assertTerminated();
+    }
+    @Test
+    public void testAsynchronousDrop() throws InterruptedException {
+        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(1L) {
+            final Random rnd = new Random();
+            @Override
+            public void onNext(Integer t) {
+                super.onNext(t);
+                if (rnd.nextDouble() < 0.001) {
+                    try {
+                        Thread.sleep(1);
+                    } catch(InterruptedException ex) {
+                        ex.printStackTrace();
+                    }
+                }
+                request(1);
+            }
+        };
+        int m = 100000;
+        Observable.range(1, m)
+        .subscribeOn(Schedulers.computation())
+        .onBackpressureLatest()
+        .observeOn(Schedulers.io())
+        .subscribe(ts);
+        
+        ts.awaitTerminalEvent(2, TimeUnit.SECONDS);
+        ts.assertTerminated();
+        int n = ts.values().size();
+        System.out.println("testAsynchronousDrop -> " + n);
+        Assert.assertTrue("All events received?", n < m);
+    }
+}
\ No newline at end of file
