diff --git a/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
index cf62960453..a7a8be0557 100644
--- a/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
+++ b/src/main/java/io/reactivex/internal/operators/OperatorScanSeed.java
@@ -20,6 +20,7 @@
 import io.reactivex.internal.queue.SpscArrayQueue;
 import io.reactivex.internal.subscribers.*;
 import io.reactivex.internal.subscriptions.*;
+import io.reactivex.plugins.RxJavaPlugins;
 
 public final class OperatorScanSeed<T, R> implements Operator<R, T> {
     final BiFunction<R, ? super T, R> accumulator;
@@ -104,6 +105,10 @@ public void onNext(T t) {
         
         @Override
         public void onError(Throwable t) {
+            if (done) {
+                RxJavaPlugins.onError(t);
+                return;
+            }
             error = t;
             done = true;
             drain(false);
@@ -111,6 +116,9 @@ public void onError(Throwable t) {
         
         @Override
         public void onComplete() {
+            if (done) {
+                return;
+            }
             done = true;
             drain(false);
         }
@@ -119,6 +127,7 @@ public void onComplete() {
         public void request(long n) {
             requested(n);
             s.request(n);
+            drain(false);
         }
         
         @Override
diff --git a/src/main/java/io/reactivex/internal/operators/PublisherSequenceEqual.java b/src/main/java/io/reactivex/internal/operators/PublisherSequenceEqual.java
index 01a915ad74..7d67c91608 100644
--- a/src/main/java/io/reactivex/internal/operators/PublisherSequenceEqual.java
+++ b/src/main/java/io/reactivex/internal/operators/PublisherSequenceEqual.java
@@ -13,7 +13,7 @@
 
 package io.reactivex.internal.operators;
 
-import java.util.*;
+import java.util.Queue;
 import java.util.concurrent.atomic.*;
 import java.util.function.BiPredicate;
 
@@ -40,8 +40,8 @@ public PublisherSequenceEqual(Publisher<? extends T> first, Publisher<? extends
     
     @Override
     public void subscribe(Subscriber<? super Boolean> s) {
-        // TODO Auto-generated method stub
-        
+        EqualCoordinator<T> ec = new EqualCoordinator<>(s, bufferSize, first, second, comparer);
+        ec.subscribe();
     }
     
     static final class EqualCoordinator<T> extends AtomicInteger implements Subscription {
@@ -79,6 +79,12 @@ public EqualCoordinator(Subscriber<? super Boolean> actual, int bufferSize,
         boolean setSubscription(Subscription s, int index) {
             return resources.setResource(index, s);
         }
+        
+        void subscribe() {
+            EqualSubscriber<T>[] as = subscribers;
+            first.subscribe(as[0]);
+            second.subscribe(as[1]);
+        }
 
         @Override
         public void request(long n) {
@@ -117,14 +123,12 @@ void drain() {
                 return;
             }
             
-            
-            
             int missed = 1;
             EqualSubscriber<T>[] as = subscribers;
             
             final EqualSubscriber<T> s1 = as[0];
             final Queue<T> q1 = s1.queue;
-            final EqualSubscriber<T> s2 = as[0];
+            final EqualSubscriber<T> s2 = as[1];
             final Queue<T> q2 = s2.queue;
             
             for (;;) {
@@ -170,7 +174,7 @@ void drain() {
                         actual.onComplete();
                         return;
                     }
-                    if ((d1 && e1) != (d2 && e2)) {
+                    if ((d1 && d2) && (e1 != e2)) {
                         cancel(q1, q2);
                         
                         actual.onNext(false);
@@ -248,6 +252,7 @@ public EqualSubscriber(EqualCoordinator<T> parent, int index, int bufferSize) {
         @Override
         public void onSubscribe(Subscription s) {
             if (parent.setSubscription(s, index)) {
+                this.s = s;
                 s.request(bufferSize);
             }
         }
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorSampleTest.java b/src/test/java/io/reactivex/internal/operators/OperatorSampleTest.java
new file mode 100644
index 0000000000..aa7d56737d
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorSampleTest.java
@@ -0,0 +1,266 @@
+package io.reactivex.internal.operators;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.*;
+import org.mockito.InOrder;
+import org.reactivestreams.*;
+
+import io.reactivex.*;
+import io.reactivex.internal.subscriptions.EmptySubscription;
+import io.reactivex.schedulers.TestScheduler;
+import io.reactivex.subjects.PublishSubject;
+
+public class OperatorSampleTest {
+    private TestScheduler scheduler;
+    private Scheduler.Worker innerScheduler;
+    private Subscriber<Long> observer;
+    private Subscriber<Object> observer2;
+
+    @Before
+    // due to mocking
+    public void before() {
+        scheduler = new TestScheduler();
+        innerScheduler = scheduler.createWorker();
+        observer = TestHelper.mockSubscriber();
+        observer2 = TestHelper.mockSubscriber();
+    }
+
+    @Test
+    public void testSample() {
+        Observable<Long> source = Observable.create(new Publisher<Long>() {
+            @Override
+            public void subscribe(final Subscriber<? super Long> observer1) {
+                observer1.onSubscribe(EmptySubscription.INSTANCE);
+                innerScheduler.schedule(new Runnable() {
+                    @Override
+                    public void run() {
+                        observer1.onNext(1L);
+                    }
+                }, 1, TimeUnit.SECONDS);
+                innerScheduler.schedule(new Runnable() {
+                    @Override
+                    public void run() {
+                        observer1.onNext(2L);
+                    }
+                }, 2, TimeUnit.SECONDS);
+                innerScheduler.schedule(new Runnable() {
+                    @Override
+                    public void run() {
+                        observer1.onComplete();
+                    }
+                }, 3, TimeUnit.SECONDS);
+            }
+        });
+
+        Observable<Long> sampled = source.sample(400L, TimeUnit.MILLISECONDS, scheduler);
+        sampled.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+
+        scheduler.advanceTimeTo(800L, TimeUnit.MILLISECONDS);
+        verify(observer, never()).onNext(any(Long.class));
+        verify(observer, never()).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+
+        scheduler.advanceTimeTo(1200L, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, times(1)).onNext(1L);
+        verify(observer, never()).onNext(2L);
+        verify(observer, never()).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+
+        scheduler.advanceTimeTo(1600L, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, never()).onNext(1L);
+        verify(observer, never()).onNext(2L);
+        verify(observer, never()).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+
+        scheduler.advanceTimeTo(2000L, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, never()).onNext(1L);
+        inOrder.verify(observer, times(1)).onNext(2L);
+        verify(observer, never()).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+
+        scheduler.advanceTimeTo(3000L, TimeUnit.MILLISECONDS);
+        inOrder.verify(observer, never()).onNext(1L);
+        inOrder.verify(observer, never()).onNext(2L);
+        verify(observer, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerNormal() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        source.onNext(2);
+        sampler.onNext(1);
+        source.onNext(3);
+        source.onNext(4);
+        sampler.onNext(2);
+        source.onComplete();
+        sampler.onNext(3);
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, never()).onNext(1);
+        inOrder.verify(observer2, times(1)).onNext(2);
+        inOrder.verify(observer2, never()).onNext(3);
+        inOrder.verify(observer2, times(1)).onNext(4);
+        inOrder.verify(observer2, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerNoDuplicates() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        source.onNext(2);
+        sampler.onNext(1);
+        sampler.onNext(1);
+
+        source.onNext(3);
+        source.onNext(4);
+        sampler.onNext(2);
+        sampler.onNext(2);
+
+        source.onComplete();
+        sampler.onNext(3);
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, never()).onNext(1);
+        inOrder.verify(observer2, times(1)).onNext(2);
+        inOrder.verify(observer2, never()).onNext(3);
+        inOrder.verify(observer2, times(1)).onNext(4);
+        inOrder.verify(observer2, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerTerminatingEarly() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        source.onNext(2);
+        sampler.onNext(1);
+        sampler.onComplete();
+
+        source.onNext(3);
+        source.onNext(4);
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, never()).onNext(1);
+        inOrder.verify(observer2, times(1)).onNext(2);
+        inOrder.verify(observer2, times(1)).onComplete();
+        inOrder.verify(observer2, never()).onNext(any());
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerEmitAndTerminate() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        source.onNext(2);
+        sampler.onNext(1);
+        source.onNext(3);
+        source.onComplete();
+        sampler.onNext(2);
+        sampler.onComplete();
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, never()).onNext(1);
+        inOrder.verify(observer2, times(1)).onNext(2);
+        inOrder.verify(observer2, never()).onNext(3);
+        inOrder.verify(observer2, times(1)).onComplete();
+        inOrder.verify(observer2, never()).onNext(any());
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerEmptySource() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onComplete();
+        sampler.onNext(1);
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, times(1)).onComplete();
+        verify(observer2, never()).onNext(any());
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void sampleWithSamplerSourceThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        source.onError(new RuntimeException("Forced failure!"));
+        sampler.onNext(1);
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, times(1)).onError(any(Throwable.class));
+        verify(observer2, never()).onNext(any());
+        verify(observer, never()).onComplete();
+    }
+
+    @Test
+    public void sampleWithSamplerThrows() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        PublishSubject<Integer> sampler = PublishSubject.create();
+
+        Observable<Integer> m = source.sample(sampler);
+        m.subscribe(observer2);
+
+        source.onNext(1);
+        sampler.onNext(1);
+        sampler.onError(new RuntimeException("Forced failure!"));
+
+        InOrder inOrder = inOrder(observer2);
+        inOrder.verify(observer2, times(1)).onNext(1);
+        inOrder.verify(observer2, times(1)).onError(any(RuntimeException.class));
+        verify(observer, never()).onComplete();
+    }
+
+    @Test
+    public void testSampleUnsubscribe() {
+        final Subscription s = mock(Subscription.class);
+        Observable<Integer> o = Observable.create(
+                new Publisher<Integer>() {
+                    @Override
+                    public void subscribe(Subscriber<? super Integer> subscriber) {
+                        subscriber.onSubscribe(s);
+                    }
+                }
+        );
+        o.throttleLast(1, TimeUnit.MILLISECONDS).subscribe().dispose();
+        verify(s).cancel();
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorScanTest.java b/src/test/java/io/reactivex/internal/operators/OperatorScanTest.java
new file mode 100644
index 0000000000..d4341a787e
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorScanTest.java
@@ -0,0 +1,364 @@
+package io.reactivex.internal.operators;
+
+import static org.junit.Assert.*;
+import static org.mockito.Matchers.*;
+import static org.mockito.Mockito.*;
+
+import java.util.*;
+import java.util.concurrent.atomic.*;
+import java.util.function.*;
+
+import org.junit.Test;
+import org.reactivestreams.*;
+
+import io.reactivex.Observable;
+import io.reactivex.Observer;
+import io.reactivex.TestHelper;
+import io.reactivex.subjects.PublishSubject;
+import io.reactivex.subscribers.TestSubscriber;
+
+public class OperatorScanTest {
+
+    @Test
+    public void testScanIntegersWithInitialValue() {
+        Subscriber<String> observer = TestHelper.mockSubscriber();
+
+        Observable<Integer> observable = Observable.just(1, 2, 3);
+
+        Observable<String> m = observable.scan("", new BiFunction<String, Integer, String>() {
+
+            @Override
+            public String apply(String s, Integer n) {
+                return s + n.toString();
+            }
+
+        });
+        m.subscribe(observer);
+
+        verify(observer, never()).onError(any(Throwable.class));
+        verify(observer, times(1)).onNext("");
+        verify(observer, times(1)).onNext("1");
+        verify(observer, times(1)).onNext("12");
+        verify(observer, times(1)).onNext("123");
+        verify(observer, times(4)).onNext(anyString());
+        verify(observer, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void testScanIntegersWithoutInitialValue() {
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+
+        Observable<Integer> observable = Observable.just(1, 2, 3);
+
+        Observable<Integer> m = observable.scan(new BiFunction<Integer, Integer, Integer>() {
+
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+
+        });
+        m.subscribe(observer);
+
+        verify(observer, never()).onError(any(Throwable.class));
+        verify(observer, never()).onNext(0);
+        verify(observer, times(1)).onNext(1);
+        verify(observer, times(1)).onNext(3);
+        verify(observer, times(1)).onNext(6);
+        verify(observer, times(3)).onNext(anyInt());
+        verify(observer, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+
+    @Test
+    public void testScanIntegersWithoutInitialValueAndOnlyOneValue() {
+        Subscriber<Integer> observer = TestHelper.mockSubscriber();
+
+        Observable<Integer> observable = Observable.just(1);
+
+        Observable<Integer> m = observable.scan(new BiFunction<Integer, Integer, Integer>() {
+
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+
+        });
+        m.subscribe(observer);
+
+        verify(observer, never()).onError(any(Throwable.class));
+        verify(observer, never()).onNext(0);
+        verify(observer, times(1)).onNext(1);
+        verify(observer, times(1)).onNext(anyInt());
+        verify(observer, times(1)).onComplete();
+        verify(observer, never()).onError(any(Throwable.class));
+    }
+    
+    @Test
+    public void shouldNotEmitUntilAfterSubscription() {
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        Observable.range(1, 100).scan(0, new BiFunction<Integer, Integer, Integer>() {
+
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+
+        }).filter(new Predicate<Integer>() {
+
+            @Override
+            public boolean test(Integer t1) {
+                // this will cause request(1) when 0 is emitted
+                return t1 > 0;
+            }
+            
+        }).subscribe(ts);
+        
+        assertEquals(100, ts.values().size());
+    }
+    
+    @Test
+    public void testBackpressureWithInitialValue() {
+        final AtomicInteger count = new AtomicInteger();
+        Observable.range(1, 100)
+                .scan(0, new BiFunction<Integer, Integer, Integer>() {
+
+                    @Override
+                    public Integer apply(Integer t1, Integer t2) {
+                        return t1 + t2;
+                    }
+
+                })
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onStart() {
+                        request(10);
+                    }
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        fail(e.getMessage());
+                        e.printStackTrace();
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                        count.incrementAndGet();
+                    }
+
+                });
+
+        // we only expect to receive 10 since we request(10)
+        assertEquals(10, count.get());
+    }
+    
+    @Test
+    public void testBackpressureWithoutInitialValue() {
+        final AtomicInteger count = new AtomicInteger();
+        Observable.range(1, 100)
+                .scan(new BiFunction<Integer, Integer, Integer>() {
+
+                    @Override
+                    public Integer apply(Integer t1, Integer t2) {
+                        return t1 + t2;
+                    }
+
+                })
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onStart() {
+                        request(10);
+                    }
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        fail(e.getMessage());
+                        e.printStackTrace();
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                        count.incrementAndGet();
+                    }
+
+                });
+
+        // we only expect to receive 10 since we request(10)
+        assertEquals(10, count.get());
+    }
+    
+    @Test
+    public void testNoBackpressureWithInitialValue() {
+        final AtomicInteger count = new AtomicInteger();
+        Observable.range(1, 100)
+                .scan(0, new BiFunction<Integer, Integer, Integer>() {
+
+                    @Override
+                    public Integer apply(Integer t1, Integer t2) {
+                        return t1 + t2;
+                    }
+
+                })
+                .subscribe(new Observer<Integer>() {
+
+                    @Override
+                    public void onComplete() {
+
+                    }
+
+                    @Override
+                    public void onError(Throwable e) {
+                        fail(e.getMessage());
+                        e.printStackTrace();
+                    }
+
+                    @Override
+                    public void onNext(Integer t) {
+                        count.incrementAndGet();
+                    }
+
+                });
+
+        // we only expect to receive 101 as we'll receive all 100 + the initial value
+        assertEquals(101, count.get());
+    }
+
+    /**
+     * This uses the public API collect which uses scan under the covers.
+     */
+    @Test
+    public void testSeedFactory() {
+        Observable<List<Integer>> o = Observable.range(1, 10)
+                .collect(new Supplier<List<Integer>>() {
+
+                    @Override
+                    public List<Integer> get() {
+                        return new ArrayList<>();
+                    }
+                    
+                }, new BiConsumer<List<Integer>, Integer>() {
+
+                    @Override
+                    public void accept(List<Integer> list, Integer t2) {
+                        list.add(t2);
+                    }
+
+                }).takeLast(1);
+
+        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.toBlocking().single());
+        assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), o.toBlocking().single());
+    }
+
+    @Test
+    public void testScanWithRequestOne() {
+        Observable<Integer> o = Observable.just(1, 2).scan(0, new BiFunction<Integer, Integer, Integer>() {
+
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+
+        }).take(1);
+        TestSubscriber<Integer> subscriber = new TestSubscriber<>();
+        o.subscribe(subscriber);
+        subscriber.assertValue(0);
+        subscriber.assertTerminated();
+        subscriber.assertNoErrors();
+    }
+
+    @Test
+    public void testScanShouldNotRequestZero() {
+        final AtomicReference<Subscription> producer = new AtomicReference<>();
+        Observable<Integer> o = Observable.create(new Publisher<Integer>() {
+            @Override
+            public void subscribe(final Subscriber<? super Integer> subscriber) {
+                Subscription p = spy(new Subscription() {
+
+                    private AtomicBoolean requested = new AtomicBoolean(false);
+
+                    @Override
+                    public void request(long n) {
+                        if (requested.compareAndSet(false, true)) {
+                            subscriber.onNext(1);
+                            subscriber.onComplete();
+                        }
+                    }
+                    
+                    @Override
+                    public void cancel() {
+                        
+                    }
+                });
+                producer.set(p);
+                subscriber.onSubscribe(p);
+            }
+        }).scan(100, new BiFunction<Integer, Integer, Integer>() {
+
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+
+        });
+
+        o.subscribe(new TestSubscriber<Integer>(1L) {
+
+            @Override
+            public void onNext(Integer integer) {
+                request(1);
+            }
+        });
+
+        verify(producer.get(), never()).request(0);
+        verify(producer.get(), times(3)).request(1); // FIXME this was 2 in 1.x
+    }
+    
+    @Test
+    public void testInitialValueEmittedNoProducer() {
+        PublishSubject<Integer> source = PublishSubject.create();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        source.scan(0, new BiFunction<Integer, Integer, Integer>() {
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+        }).subscribe(ts);
+        
+        ts.assertNoErrors();
+        ts.assertNotComplete();
+        ts.assertValue(0);
+    }
+    
+    @Test
+    public void testInitialValueEmittedWithProducer() {
+        Observable<Integer> source = Observable.never();
+        
+        TestSubscriber<Integer> ts = new TestSubscriber<>();
+        
+        source.scan(0, new BiFunction<Integer, Integer, Integer>() {
+            @Override
+            public Integer apply(Integer t1, Integer t2) {
+                return t1 + t2;
+            }
+        }).subscribe(ts);
+        
+        ts.assertNoErrors();
+        ts.assertNotComplete();
+        ts.assertValue(0);
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/io/reactivex/internal/operators/OperatorSequenceEqualTest.java b/src/test/java/io/reactivex/internal/operators/OperatorSequenceEqualTest.java
new file mode 100644
index 0000000000..d6c40ab9e1
--- /dev/null
+++ b/src/test/java/io/reactivex/internal/operators/OperatorSequenceEqualTest.java
@@ -0,0 +1,140 @@
+package io.reactivex.internal.operators;
+
+import static org.mockito.Matchers.isA;
+import static org.mockito.Mockito.*;
+
+import java.util.function.BiPredicate;
+
+import org.junit.*;
+import org.mockito.InOrder;
+import org.reactivestreams.Subscriber;
+
+import io.reactivex.*;
+import io.reactivex.exceptions.TestException;
+
+public class OperatorSequenceEqualTest {
+
+    @Test
+    public void test1() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one", "two", "three"),
+                Observable.just("one", "two", "three"));
+        verifyResult(observable, true);
+    }
+
+    @Test
+    public void test2() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one", "two", "three"),
+                Observable.just("one", "two", "three", "four"));
+        verifyResult(observable, false);
+    }
+
+    @Test
+    public void test3() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one", "two", "three", "four"),
+                Observable.just("one", "two", "three"));
+        verifyResult(observable, false);
+    }
+
+    @Test
+    public void testWithError1() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.concat(Observable.just("one"),
+                        Observable.<String> error(new TestException())),
+                Observable.just("one", "two", "three"));
+        verifyError(observable);
+    }
+
+    @Test
+    public void testWithError2() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one", "two", "three"),
+                Observable.concat(Observable.just("one"),
+                        Observable.<String> error(new TestException())));
+        verifyError(observable);
+    }
+
+    @Test
+    public void testWithError3() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.concat(Observable.just("one"),
+                        Observable.<String> error(new TestException())),
+                Observable.concat(Observable.just("one"),
+                        Observable.<String> error(new TestException())));
+        verifyError(observable);
+    }
+
+    @Test
+    public void testWithEmpty1() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.<String> empty(),
+                Observable.just("one", "two", "three"));
+        verifyResult(observable, false);
+    }
+
+    @Test
+    public void testWithEmpty2() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one", "two", "three"),
+                Observable.<String> empty());
+        verifyResult(observable, false);
+    }
+
+    @Test
+    public void testWithEmpty3() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.<String> empty(), Observable.<String> empty());
+        verifyResult(observable, true);
+    }
+
+    @Test
+    @Ignore("Null values not allowed")
+    public void testWithNull1() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just((String) null), Observable.just("one"));
+        verifyResult(observable, false);
+    }
+
+    @Test
+    @Ignore("Null values not allowed")
+    public void testWithNull2() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just((String) null), Observable.just((String) null));
+        verifyResult(observable, true);
+    }
+
+    @Test
+    public void testWithEqualityError() {
+        Observable<Boolean> observable = Observable.sequenceEqual(
+                Observable.just("one"), Observable.just("one"),
+                new BiPredicate<String, String>() {
+                    @Override
+                    public boolean test(String t1, String t2) {
+                        throw new TestException();
+                    }
+                });
+        verifyError(observable);
+    }
+
+    private void verifyResult(Observable<Boolean> observable, boolean result) {
+        Subscriber<Boolean> observer = TestHelper.mockSubscriber();
+        
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onNext(result);
+        inOrder.verify(observer).onComplete();
+        inOrder.verifyNoMoreInteractions();
+    }
+
+    private void verifyError(Observable<Boolean> observable) {
+        Subscriber<Boolean> observer = TestHelper.mockSubscriber();
+        observable.subscribe(observer);
+
+        InOrder inOrder = inOrder(observer);
+        inOrder.verify(observer, times(1)).onError(isA(TestException.class));
+        inOrder.verifyNoMoreInteractions();
+    }
+}
\ No newline at end of file
