diff --git a/rxjava-core/src/main/java/rx/schedulers/TestScheduler.java b/rxjava-core/src/main/java/rx/schedulers/TestScheduler.java
index 060072bac8..daa1fa1c99 100644
--- a/rxjava-core/src/main/java/rx/schedulers/TestScheduler.java
+++ b/rxjava-core/src/main/java/rx/schedulers/TestScheduler.java
@@ -1,12 +1,12 @@
 /**
  * Copyright 2014 Netflix, Inc.
- * 
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- * 
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -27,19 +27,22 @@
 import rx.subscriptions.Subscriptions;
 
 /**
- * The {@code TestScheduler} is useful for debugging. It allows you to test schedules of events by manually
- * advancing the clock at whatever pace you choose.
+ * The {@code TestScheduler} is useful for debugging. It allows you to test
+ * schedules of events by manually advancing the clock at whatever pace you
+ * choose.
  */
 public class TestScheduler extends Scheduler {
-    private final Queue<TimedAction> queue = new PriorityQueue<TimedAction>(11, new CompareActionsByTime());
-    private static long counter = 0;
+    private final Queue<TimedAction> queue   = new PriorityQueue<TimedAction>(11, new CompareActionsByTime());
+    private static long              counter = 0;
 
     private static class TimedAction {
 
-        private final long time;
+        private final long    time;
         private final Action0 action;
-        private final Worker scheduler;
-        private final long count = counter++; // for differentiating tasks at same time
+        private final Worker  scheduler;
+        private final long    count = counter++; // for differentiating tasks at
+
+        // same time
 
         private TimedAction(Worker scheduler, long time, Action0 action) {
             this.time = time;
@@ -76,9 +79,9 @@ public long now() {
      * Moves the Scheduler's clock forward by a specified amount of time.
      *
      * @param delayTime
-     *          the amount of time to move the Scheduler's clock forward
+     *            the amount of time to move the Scheduler's clock forward
      * @param unit
-     *          the units of time that {@code delayTime} is expressed in
+     *            the units of time that {@code delayTime} is expressed in
      */
     public void advanceTimeBy(long delayTime, TimeUnit unit) {
         advanceTimeTo(time + unit.toNanos(delayTime), TimeUnit.NANOSECONDS);
@@ -88,9 +91,9 @@ public void advanceTimeBy(long delayTime, TimeUnit unit) {
      * Moves the Scheduler's clock to a particular moment in time.
      *
      * @param delayTime
-     *          the point in time to move the Scheduler's clock to
+     *            the point in time to move the Scheduler's clock to
      * @param unit
-     *          the units of time that {@code delayTime} is expressed in
+     *            the units of time that {@code delayTime} is expressed in
      */
     public void advanceTimeTo(long delayTime, TimeUnit unit) {
         long targetTime = unit.toNanos(delayTime);
@@ -98,8 +101,8 @@ public void advanceTimeTo(long delayTime, TimeUnit unit) {
     }
 
     /**
-     * Triggers any actions that have not yet been triggered and that are scheduled to be triggered at or
-     * before this Scheduler's present time.
+     * Triggers any actions that have not yet been triggered and that are
+     * scheduled to be triggered at or before this Scheduler's present time.
      */
     public void triggerActions() {
         triggerActions(time);
@@ -111,7 +114,7 @@ private void triggerActions(long targetTimeInNanos) {
             if (current.time > targetTimeInNanos) {
                 break;
             }
-            time = current.time;
+            time = current.time == 0 ? time : current.time;
             queue.remove();
 
             // Only execute if not unsubscribed
@@ -129,7 +132,7 @@ public Worker createWorker() {
 
     private final class InnerTestScheduler extends Worker {
 
-        private BooleanSubscription s = new BooleanSubscription();
+        private final BooleanSubscription s = new BooleanSubscription();
 
         @Override
         public void unsubscribe() {
diff --git a/rxjava-core/src/test/java/rx/schedulers/TestSchedulerTest.java b/rxjava-core/src/test/java/rx/schedulers/TestSchedulerTest.java
index 42571e06e9..8ab361f54d 100644
--- a/rxjava-core/src/test/java/rx/schedulers/TestSchedulerTest.java
+++ b/rxjava-core/src/test/java/rx/schedulers/TestSchedulerTest.java
@@ -29,7 +29,10 @@
 import org.mockito.InOrder;
 import org.mockito.Mockito;
 
+import rx.Observable;
+import rx.Observable.OnSubscribe;
 import rx.Scheduler;
+import rx.Subscriber;
 import rx.Subscription;
 import rx.functions.Action0;
 import rx.functions.Func1;
@@ -160,4 +163,42 @@ public void call() {
         assertEquals(0, counter.get());
     }
 
+    @Test
+    public final void testNestedSchedule() {
+        final TestScheduler scheduler = new TestScheduler();
+        final Scheduler.Worker inner = scheduler.createWorker();
+        final Action0 calledOp = mock(Action0.class);
+
+        Observable<Object> poller;
+        poller = Observable.create(new OnSubscribe<Object>() {
+            @Override
+            public void call(final Subscriber<? super Object> aSubscriber) {
+                inner.schedule(new Action0() {
+                    @Override
+                    public void call() {
+                        if (!aSubscriber.isUnsubscribed()) {
+                            calledOp.call();
+                            inner.schedule(this, 5, TimeUnit.SECONDS);
+                        }
+                    }
+                });
+            }
+        });
+
+        InOrder inOrder = Mockito.inOrder(calledOp);
+
+        Subscription sub;
+        sub = poller.subscribe();
+
+        scheduler.advanceTimeTo(6, TimeUnit.SECONDS);
+        inOrder.verify(calledOp, times(2)).call();
+
+        sub.unsubscribe();
+        scheduler.advanceTimeTo(11, TimeUnit.SECONDS);
+        inOrder.verify(calledOp, never()).call();
+
+        sub = poller.subscribe();
+        scheduler.advanceTimeTo(12, TimeUnit.SECONDS);
+        inOrder.verify(calledOp, times(1)).call();
+    }
 }
