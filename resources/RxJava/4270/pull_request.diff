diff --git a/src/main/java/rx/Observable.java b/src/main/java/rx/Observable.java
index 3f31491b08..9967a48eab 100644
--- a/src/main/java/rx/Observable.java
+++ b/src/main/java/rx/Observable.java
@@ -11239,7 +11239,7 @@ public final Subscription subscribe(Subscriber<? super T> subscriber) {
      * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
      */
     public final <K> Observable<Map<K, Collection<T>>> toMultimap(Func1<? super T, ? extends K> keySelector) {
-        return lift(new OperatorToMultimap<T, K, T>(keySelector, UtilityFunctions.<T>identity()));
+        return create(new OnSubscribeToMultimap<T, K, T>(this, keySelector, UtilityFunctions.<T>identity()));
     }
 
     /**
@@ -11267,7 +11267,7 @@ public final Subscription subscribe(Subscriber<? super T> subscriber) {
      * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
      */
     public final <K, V> Observable<Map<K, Collection<V>>> toMultimap(Func1<? super T, ? extends K> keySelector, Func1<? super T, ? extends V> valueSelector) {
-        return lift(new OperatorToMultimap<T, K, V>(keySelector, valueSelector));
+        return create(new OnSubscribeToMultimap<T, K, V>(this, keySelector, valueSelector));
     }
 
     /**
@@ -11297,7 +11297,7 @@ public final Subscription subscribe(Subscriber<? super T> subscriber) {
      * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
      */
     public final <K, V> Observable<Map<K, Collection<V>>> toMultimap(Func1<? super T, ? extends K> keySelector, Func1<? super T, ? extends V> valueSelector, Func0<? extends Map<K, Collection<V>>> mapFactory) {
-        return lift(new OperatorToMultimap<T, K, V>(keySelector, valueSelector, mapFactory));
+        return create(new OnSubscribeToMultimap<T, K, V>(this, keySelector, valueSelector, mapFactory));
     }
 
     /**
@@ -11329,7 +11329,7 @@ public final Subscription subscribe(Subscriber<? super T> subscriber) {
      * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
      */
     public final <K, V> Observable<Map<K, Collection<V>>> toMultimap(Func1<? super T, ? extends K> keySelector, Func1<? super T, ? extends V> valueSelector, Func0<? extends Map<K, Collection<V>>> mapFactory, Func1<? super K, ? extends Collection<V>> collectionFactory) {
-        return lift(new OperatorToMultimap<T, K, V>(keySelector, valueSelector, mapFactory, collectionFactory));
+        return create(new OnSubscribeToMultimap<T, K, V>(this, keySelector, valueSelector, mapFactory, collectionFactory));
     }
 
     /**
diff --git a/src/main/java/rx/internal/operators/OnSubscribeToMultimap.java b/src/main/java/rx/internal/operators/OnSubscribeToMultimap.java
new file mode 100644
index 0000000000..04db4b4f02
--- /dev/null
+++ b/src/main/java/rx/internal/operators/OnSubscribeToMultimap.java
@@ -0,0 +1,204 @@
+/**
+ * Copyright one 2014 Netflix, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package rx.internal.operators;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import rx.Observable;
+import rx.Observable.OnSubscribe;
+import rx.Subscriber;
+import rx.exceptions.Exceptions;
+import rx.functions.Func0;
+import rx.functions.Func1;
+
+/**
+ * Maps the elements of the source observable into a multimap
+ * (Map&lt;K, Collection&lt;V>>) where each
+ * key entry has a collection of the source's values.
+ *
+ * @see <a href="https://github.com/ReactiveX/RxJava/issues/97">Issue #97</a>
+ * @param <T> the value type of the input
+ * @param <K> the multimap-key type
+ * @param <V> the multimap-value type
+ */
+public final class OnSubscribeToMultimap<T, K, V> implements OnSubscribe<Map<K, Collection<V>>>, Func0<Map<K, Collection<V>>> {
+
+    private final Func1<? super T, ? extends K> keySelector;
+    private final Func1<? super T, ? extends V> valueSelector;
+    private final Func0<? extends Map<K, Collection<V>>> mapFactory;
+    private final Func1<? super K, ? extends Collection<V>> collectionFactory;
+    private final Observable<T> source;
+
+    /**
+     * ToMultimap with key selector, custom value selector,
+     * default HashMap factory and default ArrayList collection factory.
+     * @param keySelector the function extracting the map-key from the main value
+     * @param valueSelector the function extracting the map-value from the main value
+     */
+    public OnSubscribeToMultimap(
+            Observable<T> source,
+            Func1<? super T, ? extends K> keySelector,
+            Func1<? super T, ? extends V> valueSelector) {
+        this(source, keySelector, valueSelector,
+                null,
+                DefaultMultimapCollectionFactory.<K, V>instance());
+    }
+
+    /**
+     * ToMultimap with key selector, custom value selector,
+     * custom Map factory and default ArrayList collection factory.
+     * @param the observable source
+     * @param keySelector the function extracting the map-key from the main value
+     * @param valueSelector the function extracting the map-value from the main value
+     * @param mapFactory function that returns a Map instance to store keys and values into
+     */
+    public OnSubscribeToMultimap(
+            Observable<T> source, 
+            Func1<? super T, ? extends K> keySelector,
+            Func1<? super T, ? extends V> valueSelector,
+            Func0<? extends Map<K, Collection<V>>> mapFactory) {
+        this(source, keySelector, valueSelector,
+                mapFactory,
+                DefaultMultimapCollectionFactory.<K, V>instance());
+    }
+
+    /**
+     * ToMultimap with key selector, custom value selector,
+     * custom Map factory and custom collection factory.
+     * @param source the observable source
+     * @param keySelector the function extracting the map-key from the main value
+     * @param valueSelector the function extracting the map-value from the main value
+     * @param mapFactory function that returns a Map instance to store keys and values into
+     * @param collectionFactory function that returns a Collection for a particular key to store values into
+     */
+    public OnSubscribeToMultimap(
+            Observable<T> source, 
+            Func1<? super T, ? extends K> keySelector,
+            Func1<? super T, ? extends V> valueSelector,
+            Func0<? extends Map<K, Collection<V>>> mapFactory,
+            Func1<? super K, ? extends Collection<V>> collectionFactory) {
+        this.source = source;
+        this.keySelector = keySelector;
+        this.valueSelector = valueSelector;
+        if (mapFactory == null) {
+            this.mapFactory = this;
+        } else {
+            this.mapFactory = mapFactory;
+        }
+        this.collectionFactory = collectionFactory;
+    }
+
+    // default map factory
+    @Override
+    public Map<K, Collection<V>> call() {
+        return new HashMap<K, Collection<V>>();
+    }
+    
+    @Override
+    public void call(final Subscriber<? super Map<K, Collection<V>>> subscriber) {
+        
+        Map<K, Collection<V>> map;
+        try {
+            map = mapFactory.call();
+        } catch (Throwable ex) {
+            Exceptions.throwIfFatal(ex);
+            subscriber.onError(ex);
+            return;
+        }
+        new ToMultimapSubscriber<T, K, V>(
+                subscriber, map, keySelector, valueSelector, collectionFactory)
+            .subscribeTo(source);
+    }
+    
+    private static final class ToMultimapSubscriber<T, K, V> 
+        extends DeferredScalarSubscriberSafe<T,Map<K, Collection<V>>> {
+
+        private final Func1<? super T, ? extends K> keySelector;
+        private final Func1<? super T, ? extends V> valueSelector;
+        private final Func1<? super K, ? extends Collection<V>> collectionFactory;
+
+        ToMultimapSubscriber(
+            Subscriber<? super Map<K, Collection<V>>> subscriber, 
+            Map<K, Collection<V>> map,
+            Func1<? super T, ? extends K> keySelector, Func1<? super T, ? extends V> valueSelector,
+            Func1<? super K, ? extends Collection<V>> collectionFactory) {
+            super(subscriber);
+            this.value = map;
+            this.hasValue = true;
+            this.keySelector = keySelector;
+            this.valueSelector = valueSelector;
+            this.collectionFactory = collectionFactory;
+        }
+        
+        @Override
+        public void onStart() {
+            request(Long.MAX_VALUE);
+        }
+
+        @Override
+        public void onNext(T t) {
+            if (done){
+                return;
+            }
+            try {
+                // any interaction with keySelector, valueSelector, collectionFactory, collection or value 
+                // may fail unexpectedly because their behaviour is customisable by the user. For this 
+                // reason we wrap their calls in try-catch block.
+                
+                K key = keySelector.call(t);
+                V v = valueSelector.call(t);
+                Collection<V> collection = value.get(key);
+                if (collection == null) {
+                    collection = collectionFactory.call(key);
+                    value.put(key, collection);
+                }
+                collection.add(v);
+            } catch (Throwable ex) {
+                Exceptions.throwIfFatal(ex);
+                unsubscribe();
+                onError(ex);
+            }
+
+          }
+    }
+        
+    /**
+     * The default collection factory for a key in the multimap returning
+     * an ArrayList independent of the key.
+     * @param <K> the key type
+     * @param <V> the value type
+     */
+    private static final class DefaultMultimapCollectionFactory<K, V>
+            implements Func1<K, Collection<V>> {
+        
+        private static final DefaultMultimapCollectionFactory<Object,Object> INSTANCE = new DefaultMultimapCollectionFactory<Object, Object>();
+        
+        @SuppressWarnings("unchecked")
+        static <K, V>  DefaultMultimapCollectionFactory<K,V> instance() {
+            return (DefaultMultimapCollectionFactory<K, V>) INSTANCE;
+        }
+        
+        @Override
+        public Collection<V> call(K t1) {
+            return new ArrayList<V>();
+        }
+    }
+    
+}
\ No newline at end of file
diff --git a/src/main/java/rx/internal/operators/OperatorToMultimap.java b/src/main/java/rx/internal/operators/OperatorToMultimap.java
deleted file mode 100644
index affdc080f4..0000000000
--- a/src/main/java/rx/internal/operators/OperatorToMultimap.java
+++ /dev/null
@@ -1,187 +0,0 @@
-/**
- * Copyright 2014 Netflix, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package rx.internal.operators;
-
-import java.util.*;
-
-import rx.Observable.Operator;
-import rx.Subscriber;
-import rx.exceptions.Exceptions;
-import rx.functions.*;
-import rx.observers.Subscribers;
-
-/**
- * Maps the elements of the source observable into a multimap
- * (Map&lt;K, Collection&lt;V>>) where each
- * key entry has a collection of the source's values.
- *
- * @see <a href="https://github.com/ReactiveX/RxJava/issues/97">Issue #97</a>
- * @param <T> the value type of the input
- * @param <K> the multimap-key type
- * @param <V> the multimap-value type
- */
-public final class OperatorToMultimap<T, K, V> implements Operator<Map<K, Collection<V>>, T> {
-
-    final Func1<? super T, ? extends K> keySelector;
-    final Func1<? super T, ? extends V> valueSelector;
-    private final Func0<? extends Map<K, Collection<V>>> mapFactory;
-    final Func1<? super K, ? extends Collection<V>> collectionFactory;
-
-    /**
-     * The default multimap factory returning a HashMap.
-     * @param <K> the key type
-     * @param <V> the value type
-     */
-    public static final class DefaultToMultimapFactory<K, V> implements Func0<Map<K, Collection<V>>> {
-        @Override
-        public Map<K, Collection<V>> call() {
-            return new HashMap<K, Collection<V>>();
-        }
-    }
-
-    /**
-     * The default collection factory for a key in the multimap returning
-     * an ArrayList independent of the key.
-     * @param <K> the key type
-     * @param <V> the value type
-     */
-    public static final class DefaultMultimapCollectionFactory<K, V>
-            implements Func1<K, Collection<V>> {
-        @Override
-        public Collection<V> call(K t1) {
-            return new ArrayList<V>();
-        }
-    }
-
-    /**
-     * ToMultimap with key selector, custom value selector,
-     * default HashMap factory and default ArrayList collection factory.
-     * @param keySelector the function extracting the map-key from the main value
-     * @param valueSelector the function extracting the map-value from the main value
-     */
-    public OperatorToMultimap(
-            Func1<? super T, ? extends K> keySelector,
-            Func1<? super T, ? extends V> valueSelector) {
-        this(keySelector, valueSelector,
-                new DefaultToMultimapFactory<K, V>(),
-                new DefaultMultimapCollectionFactory<K, V>());
-    }
-
-    /**
-     * ToMultimap with key selector, custom value selector,
-     * custom Map factory and default ArrayList collection factory.
-     * @param keySelector the function extracting the map-key from the main value
-     * @param valueSelector the function extracting the map-value from the main value
-     * @param mapFactory function that returns a Map instance to store keys and values into
-     */
-    public OperatorToMultimap(
-            Func1<? super T, ? extends K> keySelector,
-            Func1<? super T, ? extends V> valueSelector,
-            Func0<? extends Map<K, Collection<V>>> mapFactory) {
-        this(keySelector, valueSelector,
-                mapFactory,
-                new DefaultMultimapCollectionFactory<K, V>());
-    }
-
-    /**
-     * ToMultimap with key selector, custom value selector,
-     * custom Map factory and custom collection factory.
-     * @param keySelector the function extracting the map-key from the main value
-     * @param valueSelector the function extracting the map-value from the main value
-     * @param mapFactory function that returns a Map instance to store keys and values into
-     * @param collectionFactory function that returns a Collection for a particular key to store values into
-     */
-    public OperatorToMultimap(
-            Func1<? super T, ? extends K> keySelector,
-            Func1<? super T, ? extends V> valueSelector,
-            Func0<? extends Map<K, Collection<V>>> mapFactory,
-            Func1<? super K, ? extends Collection<V>> collectionFactory) {
-        this.keySelector = keySelector;
-        this.valueSelector = valueSelector;
-        this.mapFactory = mapFactory;
-        this.collectionFactory = collectionFactory;
-    }
-
-    @Override
-    public Subscriber<? super T> call(final Subscriber<? super Map<K, Collection<V>>> subscriber) {
-        
-        Map<K, Collection<V>> localMap;
-        
-        try {
-            localMap = mapFactory.call();
-        } catch (Throwable ex) {
-            Exceptions.throwIfFatal(ex);
-            subscriber.onError(ex);
-            
-            Subscriber<? super T> parent = Subscribers.empty();
-            parent.unsubscribe();
-            return parent;
-        }
-        
-        final Map<K, Collection<V>> fLocalMap = localMap;
-        
-        return new Subscriber<T>(subscriber) {
-            private Map<K, Collection<V>> map = fLocalMap;
-
-            @Override
-            public void onStart() {
-                request(Long.MAX_VALUE);
-            }
-            
-            @Override
-            public void onNext(T v) {
-                K key;
-                V value;
-
-                try {
-                    key = keySelector.call(v);
-                    value = valueSelector.call(v);
-                } catch (Throwable ex) {
-                    Exceptions.throwOrReport(ex, subscriber);
-                    return;
-                }
-                
-                Collection<V> collection = map.get(key);
-                if (collection == null) {
-                    try {
-                        collection = collectionFactory.call(key);
-                    } catch (Throwable ex) {
-                        Exceptions.throwOrReport(ex, subscriber);
-                        return;
-                    }
-                    map.put(key, collection);
-                }
-                collection.add(value);
-            }
-
-            @Override
-            public void onError(Throwable e) {
-                map = null;
-                subscriber.onError(e);
-            }
-
-            @Override
-            public void onCompleted() {
-                Map<K, Collection<V>> map0 = map;
-                map = null;
-                subscriber.onNext(map0);
-                subscriber.onCompleted();
-            }
-
-        };
-    }
-}
\ No newline at end of file
diff --git a/src/test/java/rx/internal/operators/OperatorToMultimapTest.java b/src/test/java/rx/internal/operators/OnSubscribeToMultimapTest.java
similarity index 70%
rename from src/test/java/rx/internal/operators/OperatorToMultimapTest.java
rename to src/test/java/rx/internal/operators/OnSubscribeToMultimapTest.java
index f93f57500d..6177014bec 100644
--- a/src/test/java/rx/internal/operators/OperatorToMultimapTest.java
+++ b/src/test/java/rx/internal/operators/OnSubscribeToMultimapTest.java
@@ -15,6 +15,7 @@
  */
 package rx.internal.operators;
 
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
@@ -27,7 +28,9 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -36,15 +39,18 @@
 
 import rx.Observable;
 import rx.Observer;
+import rx.Producer;
+import rx.Subscriber;
+import rx.Observable.OnSubscribe;
 import rx.exceptions.TestException;
+import rx.functions.Action1;
 import rx.functions.Func0;
 import rx.functions.Func1;
-import rx.internal.operators.OperatorToMultimap.DefaultMultimapCollectionFactory;
-import rx.internal.operators.OperatorToMultimap.DefaultToMultimapFactory;
 import rx.internal.util.UtilityFunctions;
 import rx.observers.TestSubscriber;
+import rx.plugins.RxJavaHooks;
 
-public class OperatorToMultimapTest {
+public class OnSubscribeToMultimapTest {
     @Mock
     Observer<Object> objectObserver;
 
@@ -121,7 +127,7 @@ protected boolean removeEldestEntry(Map.Entry<Integer, Collection<String>> eldes
 
         Observable<Map<Integer, Collection<String>>> mapped = source.toMultimap(
                 lengthFunc, UtilityFunctions.<String>identity(),
-                mapFactory, new DefaultMultimapCollectionFactory<Integer, String>());
+                mapFactory, OnSubscribeToMultimapTest.<Integer, String>arrayListCollectionFactory());
 
         Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();
         expected.put(2, Arrays.asList("cc", "dd"));
@@ -133,6 +139,25 @@ protected boolean removeEldestEntry(Map.Entry<Integer, Collection<String>> eldes
         verify(objectObserver, times(1)).onNext(expected);
         verify(objectObserver, times(1)).onCompleted();
     }
+    
+    private static final <K,V> Func1<K, Collection<V>> arrayListCollectionFactory() {
+        return new Func1<K, Collection<V>>() {
+
+            @Override
+            public Collection<V> call(K k) {
+                return new ArrayList<V>();
+            }};
+    }
+    
+    private static final <K, V> Func0<Map<K, Collection<V>>> multimapFactory() {
+        return new Func0<Map<K, Collection<V>>>() {
+
+            @Override
+            public Map<K, Collection<V>> call() {
+                return new HashMap<K, Collection<V>>();
+            }
+        };
+    }
 
     @Test
     public void testToMultimapWithCollectionFactory() {
@@ -152,7 +177,7 @@ public void testToMultimapWithCollectionFactory() {
 
         Observable<Map<Integer, Collection<String>>> mapped = source.toMultimap(
                 lengthFunc, UtilityFunctions.<String>identity(),
-                new DefaultToMultimapFactory<Integer, String>(), collectionFactory);
+                OnSubscribeToMultimapTest.<Integer, String>multimapFactory(), collectionFactory);
 
         Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();
         expected.put(2, Arrays.asList("cc", "dd"));
@@ -259,7 +284,7 @@ public void testToMultimapWithThrowingCollectionFactory() {
             }
         };
 
-        Observable<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFunc, UtilityFunctions.<String>identity(), new DefaultToMultimapFactory<Integer, String>(), collectionFactory);
+        Observable<Map<Integer, Collection<String>>> mapped = source.toMultimap(lengthFunc, UtilityFunctions.<String>identity(), OnSubscribeToMultimapTest.<Integer, String>multimapFactory(), collectionFactory);
 
         Map<Integer, Collection<String>> expected = new HashMap<Integer, Collection<String>>();
         expected.put(2, Arrays.asList("cc", "dd"));
@@ -365,4 +390,127 @@ public Integer call(Integer v) {
         ts.assertNoValues();
         ts.assertNotCompleted();
     }
+    
+    @Test
+    public void testKeySelectorFailureDoesNotAllowErrorAndCompletedEmissions() {
+        TestSubscriber<Map<Integer, Collection<Integer>>> ts = TestSubscriber.create(0);
+        final RuntimeException e = new RuntimeException();
+        Observable.create(new OnSubscribe<Integer>() {
+
+            @Override
+            public void call(final Subscriber<? super Integer> sub) {
+                sub.setProducer(new Producer() {
+
+                    @Override
+                    public void request(long n) {
+                        if (n > 1) {
+                            sub.onNext(1);
+                            sub.onCompleted();
+                        }
+                    }
+                });
+            }
+        }).toMultimap(new Func1<Integer,Integer>() {
+
+            @Override
+            public Integer call(Integer t) {
+                throw e;
+            }
+        }).unsafeSubscribe(ts);
+        ts.assertNoValues();
+        ts.assertError(e);
+        ts.assertNotCompleted();
+    }
+    
+    @Test
+    public void testKeySelectorFailureDoesNotAllowTwoErrorEmissions() {
+        try {
+            final List<Throwable> list = new CopyOnWriteArrayList<Throwable>();
+            RxJavaHooks.setOnError(new Action1<Throwable>() {
+
+                @Override
+                public void call(Throwable t) {
+                    list.add(t);
+                }
+            });
+            TestSubscriber<Map<Integer, Collection<Integer>>> ts = TestSubscriber.create(0);
+            final RuntimeException e1 = new RuntimeException();
+            final RuntimeException e2 = new RuntimeException();
+            Observable.create(new OnSubscribe<Integer>() {
+
+                @Override
+                public void call(final Subscriber<? super Integer> sub) {
+                    sub.setProducer(new Producer() {
+
+                        @Override
+                        public void request(long n) {
+                            if (n > 1) {
+                                sub.onNext(1);
+                                sub.onError(e2);
+                            }
+                        }
+                    });
+                }
+            }).toMultimap(new Func1<Integer, Integer>() {
+
+                @Override
+                public Integer call(Integer t) {
+                    throw e1;
+                }
+            }).unsafeSubscribe(ts);
+            ts.assertNoValues();
+            assertEquals(Arrays.asList(e1), ts.getOnErrorEvents());
+            assertEquals(Arrays.asList(e2), list);
+            ts.assertNotCompleted();
+        } finally {
+            RxJavaHooks.reset();
+        }
+    }
+    
+    @Test
+    public void testFactoryFailureDoesNotAllowErrorThenOnNextEmissions() {
+        TestSubscriber<Map<Integer, Collection<Integer>>> ts = TestSubscriber.create(0);
+        final RuntimeException e = new RuntimeException();
+        Observable.create(new OnSubscribe<Integer>() {
+
+            @Override
+            public void call(final Subscriber<? super Integer> sub) {
+                sub.setProducer(new Producer() {
+
+                    @Override
+                    public void request(long n) {
+                        if (n > 1) {
+                            sub.onNext(1);
+                            sub.onNext(2);
+                        }
+                    }
+                });
+            }
+        }).toMultimap(new Func1<Integer,Integer>() {
+
+            @Override
+            public Integer call(Integer t) {
+                throw e;
+            }
+        }).unsafeSubscribe(ts);
+        ts.assertNoValues();
+        ts.assertError(e);
+        ts.assertNotCompleted();
+    }
+    
+    @Test
+    public void testBackpressure() {
+        TestSubscriber<Object> ts = TestSubscriber.create(0);
+        Observable
+            .just("a", "bb", "ccc", "dddd")
+            .toMultimap(lengthFunc)
+            .subscribe(ts);
+        ts.assertNoErrors();
+        ts.assertNotCompleted();
+        ts.assertNoValues();
+        ts.requestMore(1);
+        ts.assertValueCount(1);
+        ts.assertNoErrors();
+        ts.assertCompleted();
+    }    
 }
